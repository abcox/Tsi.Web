/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Tsi.Web.Client;
using Tsi.Web.Api;
using Tsi.Web.Model;

namespace Tsi.Web.Test
{
    /// <summary>
    ///  Class for testing ServiceOrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestClass]
    public class ServiceOrdersApiTests
    {
        private ServiceOrdersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [TestInitialize]       
        public void Init()
        {
            instance = new ServiceOrdersApi();

            // todo: refactor these into appsettings..
            //instance.Configuration.ApiKey.Add("private", "9929a6a8-f3a5-4234-84f4-05e43b90e51c");
            //instance.Configuration.ApiKey.Add("public", "bd3bb288-4752-44a2-b904-dffd30563c0f");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TestCleanup]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServiceOrdersApi
        /// </summary>
        [TestMethod]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServiceOrdersApi
            //Assert.IsInstanceOfType(typeof(ServiceOrdersApi), instance, "instance is a ServiceOrdersApi");
            Assert.IsInstanceOfType(instance, typeof(ServiceOrdersApi), "instance is a ServiceOrdersApi");
        }

        /// <summary>
        /// Test ServiceOrdersAdvancedSearch
        /// </summary>
        [TestMethod]
        public void ServiceOrdersAdvancedSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //@"
            //    <AdvancedSearchRequest>
            //        <Criteria>
            //            <SearchCriteria>
            //                <SearchType>PhoneNumber</SearchType>
            //                <Criteria>402</Criteria>
            //            </SearchCriteria>
            //            <SearchCriteria>
            //                <SearchType>AccountName</SearchType>
            //                <MatchType>Contains</MatchType>
            //                <Criteria>net</Criteria>
            //            </SearchCriteria>
            //            <SearchCriteria>
            //                <SearchType>AccountName</SearchType>
            //                <MatchType>Contains</MatchType>
            //                <Criteria>serv</Criteria>
            //            </SearchCriteria> 
            //            <SearchCriteria>
            //                <SearchType>AccountName</SearchType>
            //                <MatchType>Contains</MatchType>
            //                <Criteria>sol</Criteria>
            //            </SearchCriteria> 
            //        </Criteria>
            //        <PageSize>10</PageSize>
            //    </AdvancedSearchRequest>"

            TsiWebAdvancedSearchRequest request = new TsiWebAdvancedSearchRequest
            {
                Criteria = new List<TsiWebSearchCriteria>
                {
                    new TsiWebSearchCriteria
                    {
                        Criteria = Configuration.TestAccountNumber.ToString(),
                        SearchType = TsiWebSearchCriteria.ServiceOrders.SearchType.AccountNumber.ToString(),
                        MatchType =  TsiWebServiceOrder.MatchType.Contains.ToString(),
                    },
                },
            };
            var response = instance.ServiceOrdersAdvancedSearch(request);
            Assert.IsInstanceOfType(response, typeof(TsiWebSearchServiceOrderResponse), "response is TsiWebSearchServiceOrderResponse");
            Assert.IsTrue(response.ServiceOrders.Count > 0);
        }
        
        /// <summary>
        /// Test ServiceOrdersConvertTimeLogsToLaborItem
        /// </summary>
        [TestMethod]
        public void ServiceOrdersConvertTimeLogsToLaborItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebConvertTimeLogsToLaborItemModel model = null;
            //var response = instance.ServiceOrdersConvertTimeLogsToLaborItem(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebResponse> (response, "response is TsiWebResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateExpense
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateExpenseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebExpenseModel model = null;
            //var response = instance.ServiceOrdersCreateExpense(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpensesResponse> (response, "response is TsiWebServiceOrderExpensesResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateManagedPrintServiceOrder
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateManagedPrintServiceOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebCreateManagedPrintServiceOrderModel model = null;
            //var response = instance.ServiceOrdersCreateManagedPrintServiceOrder(model);
            //Assert.IsInstanceOf<TsiWebServiceOrderResponse> (response, "response is TsiWebServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateRecurringServiceOrderSchedule
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateRecurringServiceOrderScheduleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebCreateRecurringServiceOrderScheduleModel model = null;
            //var response = instance.ServiceOrdersCreateRecurringServiceOrderSchedule(model);
            //Assert.IsInstanceOf<TsiWebCreateRecurringServiceOrderScheduleResponse> (response, "response is TsiWebCreateRecurringServiceOrderScheduleResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrder
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderTest()
        {
            var guid = Guid.NewGuid();
            Console.WriteLine($"Creating service order with brief description having guid of {guid}");
            TsiWebCreateServiceOrderModel model = new TsiWebCreateServiceOrderModel()
                {
                    AccountNumber = 10177,
                    BriefDescription = $@"TEST {guid}", // 8c972fea-5327-4ecf-b113-fca8bc09a3cb
                    DateTimeRequested = new SystemNullableTsiWebSplitDateTime
                    {
                        Date = DateTime.UtcNow,
                        Time = DateTime.UtcNow,
                    },
                    BillToAddressType = "Default",
                    BillTo = new TsiWebAlternateAddress
                    {
                        Name = "Test!",
                        Address1 = "12345 Main St",
                        City = "Wilmington",
                        State = "NC",
                        PostalCode = "28403"
                    }
                };
            var response = instance.ServiceOrdersCreateServiceOrder(model);
            Assert.IsInstanceOfType(response, typeof(TsiWebServiceOrderResponse)); // "response is TsiWebServiceOrderResponse");
            Assert.IsTrue(response.ServiceOrderSummary.AccountName.ToLower().Contains("barker"));
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderItemServiced
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderItemServicedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebCreateServiceOrderItemServicedModel model = null;
            //var response = instance.ServiceOrdersCreateServiceOrderItemServiced(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderItemServicedResponse> (response, "response is TsiWebServiceOrderItemServicedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderNonStockPartsUsed
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderNonStockPartsUsedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebCreateServiceOrderNonStockModel model = null;
            //var response = instance.ServiceOrdersCreateServiceOrderNonStockPartsUsed(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderPartsUsedResponse> (response, "response is TsiWebServiceOrderPartsUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderNote
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebServiceOrderNoteModel model = null;
            //var response = instance.ServiceOrdersCreateServiceOrderNote(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderNoteResponse> (response, "response is TsiWebServiceOrderNoteResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderPartsUsed
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderPartsUsedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? serviceOrderNumber = 80280;
            TsiWebCreateServiceOrderPartsUsedModel model = new TsiWebCreateServiceOrderPartsUsedModel
                (
                lineNumber: 1, // Note: existing line item will be pushed down
                //itemId: "Cat 6 RJ45 insert",
                priceBookItemNumber: 97, // look up via PriceBookSearchByItemTypeTest
                itemDescription: "Cat 6 RJ45 insert",
                useBookPricesAndDiscounts: true,
                quantity: 3
                );
            var response = instance.ServiceOrdersCreateServiceOrderPartsUsed(serviceOrderNumber, model);
            Assert.IsInstanceOfType(response, typeof(TsiWebServiceOrderPartsUsedResponse), "response is TsiWebServiceOrderPartsUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderPartsUsedComment
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderPartsUsedCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebServiceOrderPartsUsedCommentModel model = null;
            //var response = instance.ServiceOrdersCreateServiceOrderPartsUsedComment(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderPartUsedResponse> (response, "response is TsiWebServiceOrderPartUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderResolution
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderResolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //string resolution = null;
            //var response = instance.ServiceOrdersCreateServiceOrderResolution(serviceOrderNumber, resolution);
            //Assert.IsInstanceOf<TsiWebServiceOrderResolutionResponse> (response, "response is TsiWebServiceOrderResolutionResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderSymptom
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderSymptomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //string symptom = null;
            //var response = instance.ServiceOrdersCreateServiceOrderSymptom(serviceOrderNumber, symptom);
            //Assert.IsInstanceOf<TsiWebServiceOrderSymptomResponse> (response, "response is TsiWebServiceOrderSymptomResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersCreateServiceOrderTimeLog
        /// </summary>
        [TestMethod]
        public void ServiceOrdersCreateServiceOrderTimeLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebCreateServiceOrderTimeLogModel model = null;
            //var response = instance.ServiceOrdersCreateServiceOrderTimeLog(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderTimeLogResponse> (response, "response is TsiWebServiceOrderTimeLogResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersDeleteServiceOrderPartsUsed
        /// </summary>
        [TestMethod]
        public void ServiceOrdersDeleteServiceOrderPartsUsedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? serviceOrderNumber = 80280;
            int? partsUsedNumber = 40;
            TsiWebDeleteServiceOrderPartsUsedModel model = new TsiWebDeleteServiceOrderPartsUsedModel
                (
                    deleteOrderedPart: true,
                    deleteLaborWithTimeLogs: true,
                    deleteItemOnExchange: true
                );
            var response = instance.ServiceOrdersDeleteServiceOrderPartsUsed(serviceOrderNumber, partsUsedNumber, model);
            Assert.IsInstanceOfType(response, typeof(TsiWebServiceOrderPartsUsedResponse), "response is TsiWebServiceOrderPartsUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersDeleteServiceOrderProfile
        /// </summary>
        [TestMethod]
        public void ServiceOrdersDeleteServiceOrderProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //string id = null;
            //var response = instance.ServiceOrdersDeleteServiceOrderProfile(serviceOrderNumber, id);
            //Assert.IsInstanceOf<TsiWebResponse> (response, "response is TsiWebResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersDeleteServiceOrderResolution
        /// </summary>
        [TestMethod]
        public void ServiceOrdersDeleteServiceOrderResolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? resolutionIndex = null;
            //var response = instance.ServiceOrdersDeleteServiceOrderResolution(serviceOrderNumber, resolutionIndex);
            //Assert.IsInstanceOf<TsiWebServiceOrderResolutionResponse> (response, "response is TsiWebServiceOrderResolutionResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersDeleteServiceOrderSymptom
        /// </summary>
        [TestMethod]
        public void ServiceOrdersDeleteServiceOrderSymptomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? symptomIndex = null;
            //var response = instance.ServiceOrdersDeleteServiceOrderSymptom(serviceOrderNumber, symptomIndex);
            //Assert.IsInstanceOf<TsiWebServiceOrderSymptomResponse> (response, "response is TsiWebServiceOrderSymptomResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersExpenseAdvancedSearch
        /// </summary>
        [TestMethod]
        public void ServiceOrdersExpenseAdvancedSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebAdvancedSearchRequest request = null;
            //var response = instance.ServiceOrdersExpenseAdvancedSearch(request);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpenseSearchResponse> (response, "response is TsiWebServiceOrderExpenseSearchResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetAccountRecurringServiceOrderSchedules
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetAccountRecurringServiceOrderSchedulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountNumber = null;
            //bool? excludeCompleted = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetAccountRecurringServiceOrderSchedules(accountNumber, excludeCompleted, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebRecurringServiceOrderSchedulesResponse> (response, "response is TsiWebRecurringServiceOrderSchedulesResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetAccountServiceOrders
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetAccountServiceOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountNumber = null;
            //bool? excludeVoided = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetAccountServiceOrders(accountNumber, excludeVoided, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }

        /// <summary>
        /// Test ServiceOrdersGetAccountServiceOrders_0
        /// NOTE:  this is here because there excludeVoided can be passed in the path like..
        /// http://api2.tigerpawsoftware.com/docs/index#!/ServiceOrders/ServiceOrders_GetAccountServiceOrders_0
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetAccountServiceOrders_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountNumber = null;
            //bool? excludeVoided = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetAccountServiceOrders_0(accountNumber, excludeVoided, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetCustomFields
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //var response = instance.ServiceOrdersGetCustomFields(serviceOrderNumber);
            //Assert.IsInstanceOf<List<TsiWebCustomField>> (response, "response is List<TsiWebCustomField>");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetRecurringServiceOrderSchedule
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetRecurringServiceOrderScheduleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? recurringServiceOrderScheduleId = null;
            //var response = instance.ServiceOrdersGetRecurringServiceOrderSchedule(recurringServiceOrderScheduleId);
            //Assert.IsInstanceOf<TsiWebRecurringServiceOrderSchedule> (response, "response is TsiWebRecurringServiceOrderSchedule");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderAssignedTechs
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderAssignedTechsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderAssignedTechs(serviceOrderNumber);
            //Assert.IsInstanceOf<List<TsiWebServiceOrderAssignedTech>> (response, "response is List<TsiWebServiceOrderAssignedTech>");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderByExternalTicket
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderByExternalTicketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string externalTicketId = null;
            //var response = instance.ServiceOrdersGetServiceOrderByExternalTicket(externalTicketId);
            //Assert.IsInstanceOf<TsiWebServiceOrderDetail> (response, "response is TsiWebServiceOrderDetail");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderCompletedTasks
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderCompletedTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderCompletedTasks(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebTasksResponse> (response, "response is TsiWebTasksResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderDetail
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderDetail(serviceOrderNumber);
            //Assert.IsInstanceOf<TsiWebServiceOrderDetail> (response, "response is TsiWebServiceOrderDetail");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderExpense
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderExpenseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? serviceOrderExpenseNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderExpense(serviceOrderNumber, serviceOrderExpenseNumber);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpense> (response, "response is TsiWebServiceOrderExpense");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderExpenses
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderExpensesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderExpenses(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<List<TsiWebServiceOrderExpense>> (response, "response is List<TsiWebServiceOrderExpense>");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderIncompleteTasks
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderIncompleteTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderIncompleteTasks(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebTasksResponse> (response, "response is TsiWebTasksResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderItemServiced
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderItemServicedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? itemServicedNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderItemServiced(serviceOrderNumber, itemServicedNumber);
            //Assert.IsInstanceOf<TsiWebServiceOrderItemServicedResponse> (response, "response is TsiWebServiceOrderItemServicedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderItemsServiced
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderItemsServicedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderItemsServiced(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderItemsServicedResponse> (response, "response is TsiWebServiceOrderItemsServicedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderNotes
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderNotes(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderNotesResponse> (response, "response is TsiWebServiceOrderNotesResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderParts
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderPartsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? serviceOrderNumber = 80280;
            int? pageRequestPageSize = null;
            int? pageRequestStartRow = null;
            var response = instance.ServiceOrdersGetServiceOrderParts(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            Assert.IsInstanceOfType(response, typeof(TsiWebServiceOrderPartsUsedResponse), "response is TsiWebServiceOrderPartsUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderProfiles
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderProfilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderProfiles(serviceOrderNumber);
            //Assert.IsInstanceOf<TsiWebAssignedMarketingProfilesResponse> (response, "response is TsiWebAssignedMarketingProfilesResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderQuotes
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderQuotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderQuotes(serviceOrderNumber);
            //Assert.IsInstanceOf<List<TsiWebServiceOrderQuote>> (response, "response is List<TsiWebServiceOrderQuote>");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderSubContractors
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderSubContractorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderSubContractors(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderSubContractorsResponse> (response, "response is TsiWebServiceOrderSubContractorsResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderSummary
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderSummary(serviceOrderNumber);
            //Assert.IsInstanceOf<TsiWebServiceOrderSummary> (response, "response is TsiWebServiceOrderSummary");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderTasks
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderTasks(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebTasksResponse> (response, "response is TsiWebTasksResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderTimeLogs
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderTimeLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersGetServiceOrderTimeLogs(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderTimeLogsResponse> (response, "response is TsiWebServiceOrderTimeLogsResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersGetServiceOrderTimeLogsByLogNumber
        /// </summary>
        [TestMethod]
        public void ServiceOrdersGetServiceOrderTimeLogsByLogNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? timeLogNumber = null;
            //var response = instance.ServiceOrdersGetServiceOrderTimeLogsByLogNumber(serviceOrderNumber, timeLogNumber);
            //Assert.IsInstanceOf<TsiWebServiceOrderTimeLogsResponse> (response, "response is TsiWebServiceOrderTimeLogsResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByAgreementNumber
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByAgreementNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByAgreementNumber(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByCustomField
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebCustomFieldSearchModel model = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByCustomField(model, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByCustomerPurchaseOrder
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByCustomerPurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByCustomerPurchaseOrder(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByExternalProduct
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByExternalProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByExternalProduct(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByInvoiceNumber
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByInvoiceNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByInvoiceNumber(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByItemServiced
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByItemServicedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByItemServiced(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByReference
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByReferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByReference(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchByServiceOrderNumber
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchByServiceOrderNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchByServiceOrderNumber(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebSearchServiceOrderResponse> (response, "response is TsiWebSearchServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchExpenseByAcceptanceStatus
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchExpenseByAcceptanceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchExpenseByAcceptanceStatus(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpenseSearchResponse> (response, "response is TsiWebServiceOrderExpenseSearchResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchExpenseByExpenseDate
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchExpenseByExpenseDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebDateTimeSearchModel model = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchExpenseByExpenseDate(model, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpenseSearchResponse> (response, "response is TsiWebServiceOrderExpenseSearchResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchExpenseByExpenseType
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchExpenseByExpenseTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchExpenseByExpenseType(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpenseSearchResponse> (response, "response is TsiWebServiceOrderExpenseSearchResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSearchExpenseByTechnician
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSearchExpenseByTechnicianTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string criteria = null;
            //int? pageRequestPageSize = null;
            //int? pageRequestStartRow = null;
            //var response = instance.ServiceOrdersSearchExpenseByTechnician(criteria, pageRequestPageSize, pageRequestStartRow);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpenseSearchResponse> (response, "response is TsiWebServiceOrderExpenseSearchResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersSetServiceOrderProfile
        /// </summary>
        [TestMethod]
        public void ServiceOrdersSetServiceOrderProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //string profile = null;
            //var response = instance.ServiceOrdersSetServiceOrderProfile(serviceOrderNumber, profile);
            //Assert.IsInstanceOf<TsiWebAssignedMarketingProfilesResponse> (response, "response is TsiWebAssignedMarketingProfilesResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersTimeLogAdvancedSearch
        /// </summary>
        [TestMethod]
        public void ServiceOrdersTimeLogAdvancedSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebAdvancedSearchRequest request = null;
            //var response = instance.ServiceOrdersTimeLogAdvancedSearch(request);
            //Assert.IsInstanceOf<TsiWebSearchTimeLogResponse> (response, "response is TsiWebSearchTimeLogResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateCustomFields
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //List<TsiWebCustomField> customFields = null;
            //var response = instance.ServiceOrdersUpdateCustomFields(serviceOrderNumber, customFields);
            //Assert.IsInstanceOf<TsiWebCustomFieldsResponse> (response, "response is TsiWebCustomFieldsResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateExpense
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateExpenseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? expenseNumber = null;
            //TsiWebUpdateExpenseModel model = null;
            //var response = instance.ServiceOrdersUpdateExpense(serviceOrderNumber, expenseNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderExpensesResponse> (response, "response is TsiWebServiceOrderExpensesResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateManagedServiceOrder
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateManagedServiceOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TsiWebUpdateManagedServiceOrderModel model = null;
            //var response = instance.ServiceOrdersUpdateManagedServiceOrder(model);
            //Assert.IsInstanceOf<TsiWebServiceOrderResponse> (response, "response is TsiWebServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrder
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //TsiWebUpdateServiceOrderModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrder(serviceOrderNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderResponse> (response, "response is TsiWebServiceOrderResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderItemServiced
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderItemServicedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? itemServicedNumber = null;
            //TsiWebUpdateServiceOrderItemServicedModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderItemServiced(serviceOrderNumber, itemServicedNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderItemServicedResponse> (response, "response is TsiWebServiceOrderItemServicedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderNonStockPartsUsed
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderNonStockPartsUsedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? partNumber = null;
            //TsiWebUpdateServiceOrderNonStockPartsUsedModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderNonStockPartsUsed(serviceOrderNumber, partNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderPartsUsedResponse> (response, "response is TsiWebServiceOrderPartsUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderNote
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? serviceOrderNoteNumber = null;
            //TsiWebServiceOrderNoteModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderNote(serviceOrderNumber, serviceOrderNoteNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderNoteResponse> (response, "response is TsiWebServiceOrderNoteResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderPartsUsed
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderPartsUsedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? serviceOrderNumber = 80280;
            int? partNumber = 41;
            TsiWebUpdateServiceOrderPartsUsedModel model = new TsiWebUpdateServiceOrderPartsUsedModel
                (
                lineNumber: 1, // Note: existing line item will be pushed down
                //itemDescription: "Cat 6 RJ45 insert",
                //useBookPricesAndDiscounts: true,
                quantity: 1
                );
            var response = instance.ServiceOrdersUpdateServiceOrderPartsUsed(serviceOrderNumber, partNumber, model);
            Assert.IsInstanceOfType(response, typeof(TsiWebServiceOrderPartsUsedResponse), "response is TsiWebServiceOrderPartsUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? partsUsedNumber = null;
            //int? partUsedAssemblyDetailNumber = null;
            //TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail(serviceOrderNumber, partsUsedNumber, partUsedAssemblyDetailNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderPartUsedResponse> (response, "response is TsiWebServiceOrderPartUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderPartsUsedComment
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderPartsUsedCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? partNumber = null;
            //TsiWebServiceOrderPartsUsedCommentModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderPartsUsedComment(serviceOrderNumber, partNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderPartUsedResponse> (response, "response is TsiWebServiceOrderPartUsedResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderResolution
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderResolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? resolutionIndex = null;
            //string resolution = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderResolution(serviceOrderNumber, resolutionIndex, resolution);
            //Assert.IsInstanceOf<TsiWebServiceOrderResolutionResponse> (response, "response is TsiWebServiceOrderResolutionResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderSymptom
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderSymptomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? symptomIndex = null;
            //string symptom = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderSymptom(serviceOrderNumber, symptomIndex, symptom);
            //Assert.IsInstanceOf<TsiWebServiceOrderSymptomResponse> (response, "response is TsiWebServiceOrderSymptomResponse");
        }
        
        /// <summary>
        /// Test ServiceOrdersUpdateServiceOrderTimeLog
        /// </summary>
        [TestMethod]
        public void ServiceOrdersUpdateServiceOrderTimeLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? serviceOrderNumber = null;
            //int? timeLogNumber = null;
            //TsiWebUpdateServiceOrderTimeLogModel model = null;
            //var response = instance.ServiceOrdersUpdateServiceOrderTimeLog(serviceOrderNumber, timeLogNumber, model);
            //Assert.IsInstanceOf<TsiWebServiceOrderTimeLogResponse> (response, "response is TsiWebServiceOrderTimeLogResponse");
        }
        
    }

}
