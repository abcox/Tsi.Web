/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for accounts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for accounts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a new account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebAccountResponse</returns>
        TsiWebAccountResponse AccountsCreateAccount (TsiWebCreateAccountModel model);

        /// <summary>
        /// Creates a new account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebAccountResponse</returns>
        ApiResponse<TsiWebAccountResponse> AccountsCreateAccountWithHttpInfo (TsiWebCreateAccountModel model);
        /// <summary>
        /// Creates the account document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse AccountsCreateAccountDocument (int? accountNumber);

        /// <summary>
        /// Creates the account document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> AccountsCreateAccountDocumentWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Creates account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebAccountExternalProductResponse</returns>
        TsiWebAccountExternalProductResponse AccountsCreateAccountExternalProduct (int? accountNumber, TsiWebAccountExternalProduct request);

        /// <summary>
        /// Creates account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebAccountExternalProductResponse</returns>
        ApiResponse<TsiWebAccountExternalProductResponse> AccountsCreateAccountExternalProductWithHttpInfo (int? accountNumber, TsiWebAccountExternalProduct request);
        /// <summary>
        /// Creates the account journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>TsiWebJournalEntryResponse</returns>
        TsiWebJournalEntryResponse AccountsCreateAccountJournalEntry (int? accountNumber, TsiWebAccountJournalEntryModel model);

        /// <summary>
        /// Creates the account journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>ApiResponse of TsiWebJournalEntryResponse</returns>
        ApiResponse<TsiWebJournalEntryResponse> AccountsCreateAccountJournalEntryWithHttpInfo (int? accountNumber, TsiWebAccountJournalEntryModel model);
        /// <summary>
        /// Creates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>TsiWebBillToResponse</returns>
        TsiWebBillToResponse AccountsCreateBillTo (int? accountNumber, TsiWebBillTo billTo);

        /// <summary>
        /// Creates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>ApiResponse of TsiWebBillToResponse</returns>
        ApiResponse<TsiWebBillToResponse> AccountsCreateBillToWithHttpInfo (int? accountNumber, TsiWebBillTo billTo);
        /// <summary>
        /// Create an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse AccountsCreatePhoneNumber (int? accountNumber, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Create an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> AccountsCreatePhoneNumberWithHttpInfo (int? accountNumber, TsiWebPhoneNumber phoneNumber);
        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>TsiWebShipToResponse</returns>
        TsiWebShipToResponse AccountsCreateShipTo (int? accountNumber, TsiWebShipTo shipTo);

        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>ApiResponse of TsiWebShipToResponse</returns>
        ApiResponse<TsiWebShipToResponse> AccountsCreateShipToWithHttpInfo (int? accountNumber, TsiWebShipTo shipTo);
        /// <summary>
        /// Removes the external product from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteAccountExternalProduct (int? accountNumber, int? id);

        /// <summary>
        /// Removes the external product from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteAccountExternalProductWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Deletes a group from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteAccountGroup (int? accountNumber, string id);

        /// <summary>
        /// Deletes a group from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteAccountGroupWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Deletes a profile from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteAccountProfile (int? accountNumber, string id);

        /// <summary>
        /// Deletes a profile from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteAccountProfileWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Deletes a SIC code from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteAccountSICCodes (int? accountNumber, string id);

        /// <summary>
        /// Deletes a SIC code from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteAccountSICCodesWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Removes the system from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteAccountSystem (int? accountNumber, string id);

        /// <summary>
        /// Removes the system from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteAccountSystemWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Removes the alternate bill to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteBillTo (int? accountNumber, int? id);

        /// <summary>
        /// Removes the alternate bill to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteBillToWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Deletes the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeletePhoneNumber (int? accountNumber, int? id);

        /// <summary>
        /// Deletes the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeletePhoneNumberWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Removes the alternate ship to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteShipTo (int? accountNumber, int? id);

        /// <summary>
        /// Removes the alternate ship to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteShipToWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Deletes the tech from the account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsDeleteTechFromAccountGroup (int? repnumber, string id);

        /// <summary>
        /// Deletes the tech from the account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsDeleteTechFromAccountGroupWithHttpInfo (int? repnumber, string id);
        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebCoManagedTechnician&gt;</returns>
        List<TsiWebCoManagedTechnician> AccountsGetAccountCoManagedTechs (int? accountNumber);

        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCoManagedTechnician&gt;</returns>
        ApiResponse<List<TsiWebCoManagedTechnician>> AccountsGetAccountCoManagedTechsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets account completed tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse AccountsGetAccountCompletedTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets account completed tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> AccountsGetAccountCompletedTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebAccountCustomerAssetResponse</returns>
        TsiWebAccountCustomerAssetResponse AccountsGetAccountCustomerAssets (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebAccountCustomerAssetResponse</returns>
        ApiResponse<TsiWebAccountCustomerAssetResponse> AccountsGetAccountCustomerAssetsWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account details by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountDetail</returns>
        TsiWebAccountDetail AccountsGetAccountDetails (int? accountNumber);

        /// <summary>
        /// Gets the account details by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountDetail</returns>
        ApiResponse<TsiWebAccountDetail> AccountsGetAccountDetailsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        TsiWebDocumentSummary AccountsGetAccountDocument (int? accountNumber, int? documentID);

        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        ApiResponse<TsiWebDocumentSummary> AccountsGetAccountDocumentWithHttpInfo (int? accountNumber, int? documentID);
        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        TsiWebDocumentsResponse AccountsGetAccountDocuments (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        ApiResponse<TsiWebDocumentsResponse> AccountsGetAccountDocumentsWithHttpInfo (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        TsiWebDocumentsResponse AccountsGetAccountDocuments_0 (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        ApiResponse<TsiWebDocumentsResponse> AccountsGetAccountDocuments_0WithHttpInfo (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets account external product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>TsiWebAccountExternalProduct</returns>
        TsiWebAccountExternalProduct AccountsGetAccountExternalProduct (int? accountNumber, int? accountExternalProductID);

        /// <summary>
        /// Gets account external product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>ApiResponse of TsiWebAccountExternalProduct</returns>
        ApiResponse<TsiWebAccountExternalProduct> AccountsGetAccountExternalProductWithHttpInfo (int? accountNumber, int? accountExternalProductID);
        /// <summary>
        /// Gets a collection of associated external products for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAccountExternalProduct&gt;</returns>
        List<TsiWebAccountExternalProduct> AccountsGetAccountExternalProducts (int? accountNumber);

        /// <summary>
        /// Gets a collection of associated external products for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountExternalProduct&gt;</returns>
        ApiResponse<List<TsiWebAccountExternalProduct>> AccountsGetAccountExternalProductsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets account incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse AccountsGetAccountIncompleteTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets account incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> AccountsGetAccountIncompleteTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        TsiWebJournalEntriesResponse AccountsGetAccountJournalEntries (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        ApiResponse<TsiWebJournalEntriesResponse> AccountsGetAccountJournalEntriesWithHttpInfo (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        TsiWebJournalEntriesResponse AccountsGetAccountJournalEntries_0 (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        ApiResponse<TsiWebJournalEntriesResponse> AccountsGetAccountJournalEntries_0WithHttpInfo (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account managed assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebAccountManagedAssetResponse</returns>
        TsiWebAccountManagedAssetResponse AccountsGetAccountManagedAssets (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account managed assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebAccountManagedAssetResponse</returns>
        ApiResponse<TsiWebAccountManagedAssetResponse> AccountsGetAccountManagedAssetsWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account only completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse AccountsGetAccountOnlyCompletedTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account only completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> AccountsGetAccountOnlyCompletedTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account only incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse AccountsGetAccountOnlyIncompleteTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account only incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> AccountsGetAccountOnlyIncompleteTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse AccountsGetAccountOnlyTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> AccountsGetAccountOnlyTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account summary by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountSummary</returns>
        TsiWebAccountSummary AccountsGetAccountSummary (int? accountNumber);

        /// <summary>
        /// Gets the account summary by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountSummary</returns>
        ApiResponse<TsiWebAccountSummary> AccountsGetAccountSummaryWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of systems assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAccountSystem&gt;</returns>
        List<TsiWebAccountSystem> AccountsGetAccountSystems (int? accountNumber);

        /// <summary>
        /// Gets a collection of systems assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountSystem&gt;</returns>
        ApiResponse<List<TsiWebAccountSystem>> AccountsGetAccountSystemsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse AccountsGetAccountTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> AccountsGetAccountTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccounting</returns>
        TsiWebAccounting AccountsGetAccountingDetails (int? accountNumber);

        /// <summary>
        /// Gets the accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccounting</returns>
        ApiResponse<TsiWebAccounting> AccountsGetAccountingDetailsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of groups assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        List<TsiWebAssignedMarketingGroup> AccountsGetAssignedGroups (int? accountNumber);

        /// <summary>
        /// Gets a collection of groups assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        ApiResponse<List<TsiWebAssignedMarketingGroup>> AccountsGetAssignedGroupsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of profiles assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        List<TsiWebAssignedMarketingProfile> AccountsGetAssignedProfiles (int? accountNumber);

        /// <summary>
        /// Gets a collection of profiles assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        ApiResponse<List<TsiWebAssignedMarketingProfile>> AccountsGetAssignedProfilesWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of SIC codes assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAssignedSICCode&gt;</returns>
        List<TsiWebAssignedSICCode> AccountsGetAssignedSICCodes (int? accountNumber);

        /// <summary>
        /// Gets a collection of SIC codes assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedSICCode&gt;</returns>
        ApiResponse<List<TsiWebAssignedSICCode>> AccountsGetAssignedSICCodesWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the alternate bill to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>List&lt;TsiWebBillTo&gt;</returns>
        List<TsiWebBillTo> AccountsGetBillTo (int? accountNumber, int? billToID);

        /// <summary>
        /// Gets the alternate bill to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>ApiResponse of List&lt;TsiWebBillTo&gt;</returns>
        ApiResponse<List<TsiWebBillTo>> AccountsGetBillToWithHttpInfo (int? accountNumber, int? billToID);
        /// <summary>
        /// Gets a collection of alternate bill tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebBillTo&gt;</returns>
        List<TsiWebBillTo> AccountsGetBillTos (int? accountNumber);

        /// <summary>
        /// Gets a collection of alternate bill tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebBillTo&gt;</returns>
        ApiResponse<List<TsiWebBillTo>> AccountsGetBillTosWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> AccountsGetCustomFields (int? accountNumber);

        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> AccountsGetCustomFieldsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the account document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        Object AccountsGetFile (int? accountNumber, int? documentID);

        /// <summary>
        /// Gets the account document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsGetFileWithHttpInfo (int? accountNumber, int? documentID);
        /// <summary>
        /// Gets the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountMarketingDetails</returns>
        TsiWebAccountMarketingDetails AccountsGetMarketingDetails (int? accountNumber);

        /// <summary>
        /// Gets the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountMarketingDetails</returns>
        ApiResponse<TsiWebAccountMarketingDetails> AccountsGetMarketingDetailsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the pay method for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>TsiWebPayMethod</returns>
        TsiWebPayMethod AccountsGetPayMethod (int? accountNumber, int? payMethodID);

        /// <summary>
        /// Gets the pay method for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>ApiResponse of TsiWebPayMethod</returns>
        ApiResponse<TsiWebPayMethod> AccountsGetPayMethodWithHttpInfo (int? accountNumber, int? payMethodID);
        /// <summary>
        /// Gets a collection of pay methods for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebPayMethod&gt;</returns>
        List<TsiWebPayMethod> AccountsGetPayMethods (int? accountNumber);

        /// <summary>
        /// Gets a collection of pay methods for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPayMethod&gt;</returns>
        ApiResponse<List<TsiWebPayMethod>> AccountsGetPayMethodsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumber</returns>
        TsiWebPhoneNumber AccountsGetPhoneNumber (int? accountNumber, int? phoneNumberID);

        /// <summary>
        /// Gets the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumber</returns>
        ApiResponse<TsiWebPhoneNumber> AccountsGetPhoneNumberWithHttpInfo (int? accountNumber, int? phoneNumberID);
        /// <summary>
        /// Gets the account phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebPhoneNumber&gt;</returns>
        List<TsiWebPhoneNumber> AccountsGetPhoneNumbers (int? accountNumber);

        /// <summary>
        /// Gets the account phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneNumber&gt;</returns>
        ApiResponse<List<TsiWebPhoneNumber>> AccountsGetPhoneNumbersWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the service details for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountServiceDetails</returns>
        TsiWebAccountServiceDetails AccountsGetServiceDetails (int? accountNumber);

        /// <summary>
        /// Gets the service details for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountServiceDetails</returns>
        ApiResponse<TsiWebAccountServiceDetails> AccountsGetServiceDetailsWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the alternate ship to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>TsiWebShipTo</returns>
        TsiWebShipTo AccountsGetShipTo (int? accountNumber, int? shipToID);

        /// <summary>
        /// Gets the alternate ship to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>ApiResponse of TsiWebShipTo</returns>
        ApiResponse<TsiWebShipTo> AccountsGetShipToWithHttpInfo (int? accountNumber, int? shipToID);
        /// <summary>
        /// Gets a collection of alternate ship tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebShipTo&gt;</returns>
        List<TsiWebShipTo> AccountsGetShipTos (int? accountNumber);

        /// <summary>
        /// Gets a collection of alternate ship tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebShipTo&gt;</returns>
        ApiResponse<List<TsiWebShipTo>> AccountsGetShipTosWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Creates or updates accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>TsiWebAccountingDetailResponse</returns>
        TsiWebAccountingDetailResponse AccountsSaveAccountingDetails (int? accountNumber, TsiWebAccountingDetail details);

        /// <summary>
        /// Creates or updates accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>ApiResponse of TsiWebAccountingDetailResponse</returns>
        ApiResponse<TsiWebAccountingDetailResponse> AccountsSaveAccountingDetailsWithHttpInfo (int? accountNumber, TsiWebAccountingDetail details);
        /// <summary>
        /// Update the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>TsiWebAccountMarketingDetailsResponse</returns>
        TsiWebAccountMarketingDetailsResponse AccountsSaveMarketingDetails (int? accountNumber, TsiWebAccountMarketingDetail details);

        /// <summary>
        /// Update the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>ApiResponse of TsiWebAccountMarketingDetailsResponse</returns>
        ApiResponse<TsiWebAccountMarketingDetailsResponse> AccountsSaveMarketingDetailsWithHttpInfo (int? accountNumber, TsiWebAccountMarketingDetail details);
        /// <summary>
        /// Updates the account service details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>TsiWebAccountServiceDetailsResponse</returns>
        TsiWebAccountServiceDetailsResponse AccountsSaveServiceDetails (int? accountNumber, TsiWebAccountServiceDetail details);

        /// <summary>
        /// Updates the account service details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>ApiResponse of TsiWebAccountServiceDetailsResponse</returns>
        ApiResponse<TsiWebAccountServiceDetailsResponse> AccountsSaveServiceDetailsWithHttpInfo (int? accountNumber, TsiWebAccountServiceDetail details);
        /// <summary>
        /// Search Accounts using contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchAccountsContactName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Accounts using contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchAccountsContactNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchAccountsCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchAccountsCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchAccountsSoundsLikeName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchAccountsSoundsLikeNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by the user specified identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByAccountId (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by the user specified identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByAccountIdWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByAccountNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByAccountNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by Account Status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByAccountStatus (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by Account Status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByAccountStatusWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by Account Type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByAccountType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by Account Type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByAccountTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByAddress (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByAddressWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by MSP Agreement .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByAgreement (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by MSP Agreement .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByAgreementWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByEmail (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByEmailWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts using the External ID related to .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByExternalId (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts using the External ID related to .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByExternalIdWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByPhone (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByPhoneWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by postal code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse AccountsSearchByPostalCode (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by postal code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> AccountsSearchByPostalCodeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the account document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse AccountsSetAccountDocumentFile (int? accountNumber, int? documentID);

        /// <summary>
        /// Overwrites the account document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> AccountsSetAccountDocumentFileWithHttpInfo (int? accountNumber, int? documentID);
        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse AccountsSetAccountDocumentFileName (int? accountNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> AccountsSetAccountDocumentFileNameWithHttpInfo (int? accountNumber, int? documentID, string fileName);
        /// <summary>
        /// Assigns a group to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>TsiWebAssignedMarketingGroupsResponse</returns>
        TsiWebAssignedMarketingGroupsResponse AccountsSetAccountGroup (int? accountNumber, string group);

        /// <summary>
        /// Assigns a group to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingGroupsResponse</returns>
        ApiResponse<TsiWebAssignedMarketingGroupsResponse> AccountsSetAccountGroupWithHttpInfo (int? accountNumber, string group);
        /// <summary>
        /// Assigns a profile to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        TsiWebAssignedMarketingProfilesResponse AccountsSetAccountProfile (int? accountNumber, string profile);

        /// <summary>
        /// Assigns a profile to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        ApiResponse<TsiWebAssignedMarketingProfilesResponse> AccountsSetAccountProfileWithHttpInfo (int? accountNumber, string profile);
        /// <summary>
        /// Assigns a SIC code to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>TsiWebAssignedSICCodesResponse</returns>
        TsiWebAssignedSICCodesResponse AccountsSetAccountSICCode (int? accountNumber, string code);

        /// <summary>
        /// Assigns a SIC code to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>ApiResponse of TsiWebAssignedSICCodesResponse</returns>
        ApiResponse<TsiWebAssignedSICCodesResponse> AccountsSetAccountSICCodeWithHttpInfo (int? accountNumber, string code);
        /// <summary>
        /// Assigns a system to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>TsiWebAccountSystemResponse</returns>
        TsiWebAccountSystemResponse AccountsSetAccountSystem (int? accountNumber, TsiWebAssignSystemModel system);

        /// <summary>
        /// Assigns a system to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>ApiResponse of TsiWebAccountSystemResponse</returns>
        ApiResponse<TsiWebAccountSystemResponse> AccountsSetAccountSystemWithHttpInfo (int? accountNumber, TsiWebAssignSystemModel system);
        /// <summary>
        /// Sets the default system for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>TsiWebAccountSystemResponse</returns>
        TsiWebAccountSystemResponse AccountsSetDefaultSystem (int? accountNumber, string system);

        /// <summary>
        /// Sets the default system for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>ApiResponse of TsiWebAccountSystemResponse</returns>
        ApiResponse<TsiWebAccountSystemResponse> AccountsSetDefaultSystemWithHttpInfo (int? accountNumber, string system);
        /// <summary>
        /// Sets the primary alternate bill to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>TsiWebBillToResponse</returns>
        TsiWebBillToResponse AccountsSetPrimaryBillTo (int? accountNumber, int? billToID);

        /// <summary>
        /// Sets the primary alternate bill to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>ApiResponse of TsiWebBillToResponse</returns>
        ApiResponse<TsiWebBillToResponse> AccountsSetPrimaryBillToWithHttpInfo (int? accountNumber, int? billToID);
        /// <summary>
        /// Sets the primary account fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse AccountsSetPrimaryFaxNumber (int? accountNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary account fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> AccountsSetPrimaryFaxNumberWithHttpInfo (int? accountNumber, int? phoneNumberID);
        /// <summary>
        /// Sets the primary account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse AccountsSetPrimaryPhoneNumber (int? accountNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> AccountsSetPrimaryPhoneNumberWithHttpInfo (int? accountNumber, int? phoneNumberID);
        /// <summary>
        /// Sets the primary alternate ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>TsiWebShipToResponse</returns>
        TsiWebShipToResponse AccountsSetPrimaryShipTo (int? accountNumber, int? shipToID);

        /// <summary>
        /// Sets the primary alternate ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>ApiResponse of TsiWebShipToResponse</returns>
        ApiResponse<TsiWebShipToResponse> AccountsSetPrimaryShipToWithHttpInfo (int? accountNumber, int? shipToID);
        /// <summary>
        /// Adds the co-manage direct tech to an account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>TsiWebCoManagedTechnicianResponse</returns>
        TsiWebCoManagedTechnicianResponse AccountsSetTechAccountGroup (int? repnumber, string groupName);

        /// <summary>
        /// Adds the co-manage direct tech to an account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>ApiResponse of TsiWebCoManagedTechnicianResponse</returns>
        ApiResponse<TsiWebCoManagedTechnicianResponse> AccountsSetTechAccountGroupWithHttpInfo (int? repnumber, string groupName);
        /// <summary>
        /// Updates an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>TsiWebAccountResponse</returns>
        TsiWebAccountResponse AccountsUpdateAccount (int? accountNumber, TsiWebAccount account);

        /// <summary>
        /// Updates an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>ApiResponse of TsiWebAccountResponse</returns>
        ApiResponse<TsiWebAccountResponse> AccountsUpdateAccountWithHttpInfo (int? accountNumber, TsiWebAccount account);
        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse AccountsUpdateAccountDocumentProperties (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> AccountsUpdateAccountDocumentPropertiesWithHttpInfo (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        /// <summary>
        /// Updates the account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebAccountExternalProductResponse</returns>
        TsiWebAccountExternalProductResponse AccountsUpdateAccountExternalProduct (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request);

        /// <summary>
        /// Updates the account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebAccountExternalProductResponse</returns>
        ApiResponse<TsiWebAccountExternalProductResponse> AccountsUpdateAccountExternalProductWithHttpInfo (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request);
        /// <summary>
        /// Updates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>TsiWebBillToResponse</returns>
        TsiWebBillToResponse AccountsUpdateBillTo (int? accountNumber, int? billToID, TsiWebBillTo billTo);

        /// <summary>
        /// Updates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>ApiResponse of TsiWebBillToResponse</returns>
        ApiResponse<TsiWebBillToResponse> AccountsUpdateBillToWithHttpInfo (int? accountNumber, int? billToID, TsiWebBillTo billTo);
        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse AccountsUpdateCustomFields (int? accountNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> AccountsUpdateCustomFieldsWithHttpInfo (int? accountNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Change an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse AccountsUpdatePhoneNumber (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Change an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> AccountsUpdatePhoneNumberWithHttpInfo (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>TsiWebShipToResponse</returns>
        TsiWebShipToResponse AccountsUpdateShipTo (int? accountNumber, int? shipToID, TsiWebShipTo shipTo);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>ApiResponse of TsiWebShipToResponse</returns>
        ApiResponse<TsiWebShipToResponse> AccountsUpdateShipToWithHttpInfo (int? accountNumber, int? shipToID, TsiWebShipTo shipTo);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for accounts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for accounts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a new account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountResponse> AccountsCreateAccountAsync (TsiWebCreateAccountModel model);

        /// <summary>
        /// Creates a new account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountResponse>> AccountsCreateAccountAsyncWithHttpInfo (TsiWebCreateAccountModel model);
        /// <summary>
        /// Creates the account document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> AccountsCreateAccountDocumentAsync (int? accountNumber);

        /// <summary>
        /// Creates the account document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> AccountsCreateAccountDocumentAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Creates account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebAccountExternalProductResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountExternalProductResponse> AccountsCreateAccountExternalProductAsync (int? accountNumber, TsiWebAccountExternalProduct request);

        /// <summary>
        /// Creates account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountExternalProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountExternalProductResponse>> AccountsCreateAccountExternalProductAsyncWithHttpInfo (int? accountNumber, TsiWebAccountExternalProduct request);
        /// <summary>
        /// Creates the account journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of TsiWebJournalEntryResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalEntryResponse> AccountsCreateAccountJournalEntryAsync (int? accountNumber, TsiWebAccountJournalEntryModel model);

        /// <summary>
        /// Creates the account journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntryResponse>> AccountsCreateAccountJournalEntryAsyncWithHttpInfo (int? accountNumber, TsiWebAccountJournalEntryModel model);
        /// <summary>
        /// Creates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of TsiWebBillToResponse</returns>
        System.Threading.Tasks.Task<TsiWebBillToResponse> AccountsCreateBillToAsync (int? accountNumber, TsiWebBillTo billTo);

        /// <summary>
        /// Creates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of ApiResponse (TsiWebBillToResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebBillToResponse>> AccountsCreateBillToAsyncWithHttpInfo (int? accountNumber, TsiWebBillTo billTo);
        /// <summary>
        /// Create an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsCreatePhoneNumberAsync (int? accountNumber, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Create an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsCreatePhoneNumberAsyncWithHttpInfo (int? accountNumber, TsiWebPhoneNumber phoneNumber);
        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>Task of TsiWebShipToResponse</returns>
        System.Threading.Tasks.Task<TsiWebShipToResponse> AccountsCreateShipToAsync (int? accountNumber, TsiWebShipTo shipTo);

        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>Task of ApiResponse (TsiWebShipToResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebShipToResponse>> AccountsCreateShipToAsyncWithHttpInfo (int? accountNumber, TsiWebShipTo shipTo);
        /// <summary>
        /// Removes the external product from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountExternalProductAsync (int? accountNumber, int? id);

        /// <summary>
        /// Removes the external product from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountExternalProductAsyncWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Deletes a group from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountGroupAsync (int? accountNumber, string id);

        /// <summary>
        /// Deletes a group from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountGroupAsyncWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Deletes a profile from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountProfileAsync (int? accountNumber, string id);

        /// <summary>
        /// Deletes a profile from the account.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountProfileAsyncWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Deletes a SIC code from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountSICCodesAsync (int? accountNumber, string id);

        /// <summary>
        /// Deletes a SIC code from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountSICCodesAsyncWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Removes the system from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountSystemAsync (int? accountNumber, string id);

        /// <summary>
        /// Removes the system from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountSystemAsyncWithHttpInfo (int? accountNumber, string id);
        /// <summary>
        /// Removes the alternate bill to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteBillToAsync (int? accountNumber, int? id);

        /// <summary>
        /// Removes the alternate bill to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteBillToAsyncWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Deletes the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeletePhoneNumberAsync (int? accountNumber, int? id);

        /// <summary>
        /// Deletes the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeletePhoneNumberAsyncWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Removes the alternate ship to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteShipToAsync (int? accountNumber, int? id);

        /// <summary>
        /// Removes the alternate ship to from the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteShipToAsyncWithHttpInfo (int? accountNumber, int? id);
        /// <summary>
        /// Deletes the tech from the account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteTechFromAccountGroupAsync (int? repnumber, string id);

        /// <summary>
        /// Deletes the tech from the account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteTechFromAccountGroupAsyncWithHttpInfo (int? repnumber, string id);
        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebCoManagedTechnician&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCoManagedTechnician>> AccountsGetAccountCoManagedTechsAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCoManagedTechnician&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCoManagedTechnician>>> AccountsGetAccountCoManagedTechsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets account completed tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountCompletedTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets account completed tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountCompletedTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebAccountCustomerAssetResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountCustomerAssetResponse> AccountsGetAccountCustomerAssetsAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebAccountCustomerAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountCustomerAssetResponse>> AccountsGetAccountCustomerAssetsAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account details by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountDetail</returns>
        System.Threading.Tasks.Task<TsiWebAccountDetail> AccountsGetAccountDetailsAsync (int? accountNumber);

        /// <summary>
        /// Gets the account details by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountDetail>> AccountsGetAccountDetailsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        System.Threading.Tasks.Task<TsiWebDocumentSummary> AccountsGetAccountDocumentAsync (int? accountNumber, int? documentID);

        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> AccountsGetAccountDocumentAsyncWithHttpInfo (int? accountNumber, int? documentID);
        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentsResponse> AccountsGetAccountDocumentsAsync (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> AccountsGetAccountDocumentsAsyncWithHttpInfo (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentsResponse> AccountsGetAccountDocuments_0Async (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> AccountsGetAccountDocuments_0AsyncWithHttpInfo (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets account external product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>Task of TsiWebAccountExternalProduct</returns>
        System.Threading.Tasks.Task<TsiWebAccountExternalProduct> AccountsGetAccountExternalProductAsync (int? accountNumber, int? accountExternalProductID);

        /// <summary>
        /// Gets account external product by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountExternalProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountExternalProduct>> AccountsGetAccountExternalProductAsyncWithHttpInfo (int? accountNumber, int? accountExternalProductID);
        /// <summary>
        /// Gets a collection of associated external products for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAccountExternalProduct&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountExternalProduct>> AccountsGetAccountExternalProductsAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of associated external products for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountExternalProduct&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountExternalProduct>>> AccountsGetAccountExternalProductsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets account incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountIncompleteTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets account incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountIncompleteTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> AccountsGetAccountJournalEntriesAsync (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> AccountsGetAccountJournalEntriesAsyncWithHttpInfo (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> AccountsGetAccountJournalEntries_0Async (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> AccountsGetAccountJournalEntries_0AsyncWithHttpInfo (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account managed assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebAccountManagedAssetResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountManagedAssetResponse> AccountsGetAccountManagedAssetsAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account managed assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebAccountManagedAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountManagedAssetResponse>> AccountsGetAccountManagedAssetsAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account only completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountOnlyCompletedTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account only completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountOnlyCompletedTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account only incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountOnlyIncompleteTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account only incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountOnlyIncompleteTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountOnlyTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountOnlyTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account summary by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountSummary</returns>
        System.Threading.Tasks.Task<TsiWebAccountSummary> AccountsGetAccountSummaryAsync (int? accountNumber);

        /// <summary>
        /// Gets the account summary by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountSummary>> AccountsGetAccountSummaryAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of systems assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAccountSystem&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountSystem>> AccountsGetAccountSystemsAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of systems assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountSystem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountSystem>>> AccountsGetAccountSystemsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccounting</returns>
        System.Threading.Tasks.Task<TsiWebAccounting> AccountsGetAccountingDetailsAsync (int? accountNumber);

        /// <summary>
        /// Gets the accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccounting)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccounting>> AccountsGetAccountingDetailsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of groups assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAssignedMarketingGroup>> AccountsGetAssignedGroupsAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of groups assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingGroup>>> AccountsGetAssignedGroupsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of profiles assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAssignedMarketingProfile>> AccountsGetAssignedProfilesAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of profiles assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingProfile>>> AccountsGetAssignedProfilesAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a collection of SIC codes assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedSICCode&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAssignedSICCode>> AccountsGetAssignedSICCodesAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of SIC codes assigned to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedSICCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedSICCode>>> AccountsGetAssignedSICCodesAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the alternate bill to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of List&lt;TsiWebBillTo&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebBillTo>> AccountsGetBillToAsync (int? accountNumber, int? billToID);

        /// <summary>
        /// Gets the alternate bill to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBillTo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebBillTo>>> AccountsGetBillToAsyncWithHttpInfo (int? accountNumber, int? billToID);
        /// <summary>
        /// Gets a collection of alternate bill tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebBillTo&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebBillTo>> AccountsGetBillTosAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of alternate bill tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBillTo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebBillTo>>> AccountsGetBillTosAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> AccountsGetCustomFieldsAsync (int? accountNumber);

        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> AccountsGetCustomFieldsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the account document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsGetFileAsync (int? accountNumber, int? documentID);

        /// <summary>
        /// Gets the account document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsGetFileAsyncWithHttpInfo (int? accountNumber, int? documentID);
        /// <summary>
        /// Gets the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountMarketingDetails</returns>
        System.Threading.Tasks.Task<TsiWebAccountMarketingDetails> AccountsGetMarketingDetailsAsync (int? accountNumber);

        /// <summary>
        /// Gets the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountMarketingDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountMarketingDetails>> AccountsGetMarketingDetailsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the pay method for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>Task of TsiWebPayMethod</returns>
        System.Threading.Tasks.Task<TsiWebPayMethod> AccountsGetPayMethodAsync (int? accountNumber, int? payMethodID);

        /// <summary>
        /// Gets the pay method for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPayMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPayMethod>> AccountsGetPayMethodAsyncWithHttpInfo (int? accountNumber, int? payMethodID);
        /// <summary>
        /// Gets a collection of pay methods for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebPayMethod&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPayMethod>> AccountsGetPayMethodsAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of pay methods for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPayMethod&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPayMethod>>> AccountsGetPayMethodsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumber</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumber> AccountsGetPhoneNumberAsync (int? accountNumber, int? phoneNumberID);

        /// <summary>
        /// Gets the account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumber>> AccountsGetPhoneNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID);
        /// <summary>
        /// Gets the account phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebPhoneNumber&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPhoneNumber>> AccountsGetPhoneNumbersAsync (int? accountNumber);

        /// <summary>
        /// Gets the account phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneNumber&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneNumber>>> AccountsGetPhoneNumbersAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the service details for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountServiceDetails</returns>
        System.Threading.Tasks.Task<TsiWebAccountServiceDetails> AccountsGetServiceDetailsAsync (int? accountNumber);

        /// <summary>
        /// Gets the service details for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountServiceDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountServiceDetails>> AccountsGetServiceDetailsAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets the alternate ship to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of TsiWebShipTo</returns>
        System.Threading.Tasks.Task<TsiWebShipTo> AccountsGetShipToAsync (int? accountNumber, int? shipToID);

        /// <summary>
        /// Gets the alternate ship to for the account by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebShipTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebShipTo>> AccountsGetShipToAsyncWithHttpInfo (int? accountNumber, int? shipToID);
        /// <summary>
        /// Gets a collection of alternate ship tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebShipTo&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebShipTo>> AccountsGetShipTosAsync (int? accountNumber);

        /// <summary>
        /// Gets a collection of alternate ship tos for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebShipTo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebShipTo>>> AccountsGetShipTosAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Creates or updates accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of TsiWebAccountingDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountingDetailResponse> AccountsSaveAccountingDetailsAsync (int? accountNumber, TsiWebAccountingDetail details);

        /// <summary>
        /// Creates or updates accounting details for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountingDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountingDetailResponse>> AccountsSaveAccountingDetailsAsyncWithHttpInfo (int? accountNumber, TsiWebAccountingDetail details);
        /// <summary>
        /// Update the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>Task of TsiWebAccountMarketingDetailsResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountMarketingDetailsResponse> AccountsSaveMarketingDetailsAsync (int? accountNumber, TsiWebAccountMarketingDetail details);

        /// <summary>
        /// Update the account marketing details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountMarketingDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountMarketingDetailsResponse>> AccountsSaveMarketingDetailsAsyncWithHttpInfo (int? accountNumber, TsiWebAccountMarketingDetail details);
        /// <summary>
        /// Updates the account service details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of TsiWebAccountServiceDetailsResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountServiceDetailsResponse> AccountsSaveServiceDetailsAsync (int? accountNumber, TsiWebAccountServiceDetail details);

        /// <summary>
        /// Updates the account service details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountServiceDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountServiceDetailsResponse>> AccountsSaveServiceDetailsAsyncWithHttpInfo (int? accountNumber, TsiWebAccountServiceDetail details);
        /// <summary>
        /// Search Accounts using contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchAccountsContactNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Accounts using contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchAccountsContactNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchAccountsCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchAccountsCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchAccountsSoundsLikeNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchAccountsSoundsLikeNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by the user specified identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountIdAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by the user specified identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountIdAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by Account Status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountStatusAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by Account Status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountStatusAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by Account Type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by Account Type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAddressAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAddressAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by MSP Agreement .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAgreementAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by MSP Agreement .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAgreementAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByEmailAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByEmailAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts using the External ID related to .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByExternalIdAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts using the External ID related to .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByExternalIdAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByPhoneAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByPhoneAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search accounts by postal code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByPostalCodeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search accounts by postal code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByPostalCodeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the account document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> AccountsSetAccountDocumentFileAsync (int? accountNumber, int? documentID);

        /// <summary>
        /// Overwrites the account document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsSetAccountDocumentFileAsyncWithHttpInfo (int? accountNumber, int? documentID);
        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> AccountsSetAccountDocumentFileNameAsync (int? accountNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> AccountsSetAccountDocumentFileNameAsyncWithHttpInfo (int? accountNumber, int? documentID, string fileName);
        /// <summary>
        /// Assigns a group to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingGroupsResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedMarketingGroupsResponse> AccountsSetAccountGroupAsync (int? accountNumber, string group);

        /// <summary>
        /// Assigns a group to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingGroupsResponse>> AccountsSetAccountGroupAsyncWithHttpInfo (int? accountNumber, string group);
        /// <summary>
        /// Assigns a profile to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> AccountsSetAccountProfileAsync (int? accountNumber, string profile);

        /// <summary>
        /// Assigns a profile to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> AccountsSetAccountProfileAsyncWithHttpInfo (int? accountNumber, string profile);
        /// <summary>
        /// Assigns a SIC code to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>Task of TsiWebAssignedSICCodesResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedSICCodesResponse> AccountsSetAccountSICCodeAsync (int? accountNumber, string code);

        /// <summary>
        /// Assigns a SIC code to an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedSICCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedSICCodesResponse>> AccountsSetAccountSICCodeAsyncWithHttpInfo (int? accountNumber, string code);
        /// <summary>
        /// Assigns a system to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>Task of TsiWebAccountSystemResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountSystemResponse> AccountsSetAccountSystemAsync (int? accountNumber, TsiWebAssignSystemModel system);

        /// <summary>
        /// Assigns a system to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountSystemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountSystemResponse>> AccountsSetAccountSystemAsyncWithHttpInfo (int? accountNumber, TsiWebAssignSystemModel system);
        /// <summary>
        /// Sets the default system for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>Task of TsiWebAccountSystemResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountSystemResponse> AccountsSetDefaultSystemAsync (int? accountNumber, string system);

        /// <summary>
        /// Sets the default system for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountSystemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountSystemResponse>> AccountsSetDefaultSystemAsyncWithHttpInfo (int? accountNumber, string system);
        /// <summary>
        /// Sets the primary alternate bill to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of TsiWebBillToResponse</returns>
        System.Threading.Tasks.Task<TsiWebBillToResponse> AccountsSetPrimaryBillToAsync (int? accountNumber, int? billToID);

        /// <summary>
        /// Sets the primary alternate bill to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebBillToResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebBillToResponse>> AccountsSetPrimaryBillToAsyncWithHttpInfo (int? accountNumber, int? billToID);
        /// <summary>
        /// Sets the primary account fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsSetPrimaryFaxNumberAsync (int? accountNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary account fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsSetPrimaryFaxNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID);
        /// <summary>
        /// Sets the primary account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsSetPrimaryPhoneNumberAsync (int? accountNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsSetPrimaryPhoneNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID);
        /// <summary>
        /// Sets the primary alternate ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of TsiWebShipToResponse</returns>
        System.Threading.Tasks.Task<TsiWebShipToResponse> AccountsSetPrimaryShipToAsync (int? accountNumber, int? shipToID);

        /// <summary>
        /// Sets the primary alternate ship to for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebShipToResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebShipToResponse>> AccountsSetPrimaryShipToAsyncWithHttpInfo (int? accountNumber, int? shipToID);
        /// <summary>
        /// Adds the co-manage direct tech to an account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>Task of TsiWebCoManagedTechnicianResponse</returns>
        System.Threading.Tasks.Task<TsiWebCoManagedTechnicianResponse> AccountsSetTechAccountGroupAsync (int? repnumber, string groupName);

        /// <summary>
        /// Adds the co-manage direct tech to an account group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>Task of ApiResponse (TsiWebCoManagedTechnicianResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCoManagedTechnicianResponse>> AccountsSetTechAccountGroupAsyncWithHttpInfo (int? repnumber, string groupName);
        /// <summary>
        /// Updates an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>Task of TsiWebAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountResponse> AccountsUpdateAccountAsync (int? accountNumber, TsiWebAccount account);

        /// <summary>
        /// Updates an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountResponse>> AccountsUpdateAccountAsyncWithHttpInfo (int? accountNumber, TsiWebAccount account);
        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> AccountsUpdateAccountDocumentPropertiesAsync (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> AccountsUpdateAccountDocumentPropertiesAsyncWithHttpInfo (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        /// <summary>
        /// Updates the account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebAccountExternalProductResponse</returns>
        System.Threading.Tasks.Task<TsiWebAccountExternalProductResponse> AccountsUpdateAccountExternalProductAsync (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request);

        /// <summary>
        /// Updates the account external product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountExternalProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAccountExternalProductResponse>> AccountsUpdateAccountExternalProductAsyncWithHttpInfo (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request);
        /// <summary>
        /// Updates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of TsiWebBillToResponse</returns>
        System.Threading.Tasks.Task<TsiWebBillToResponse> AccountsUpdateBillToAsync (int? accountNumber, int? billToID, TsiWebBillTo billTo);

        /// <summary>
        /// Updates the bill to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of ApiResponse (TsiWebBillToResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebBillToResponse>> AccountsUpdateBillToAsyncWithHttpInfo (int? accountNumber, int? billToID, TsiWebBillTo billTo);
        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> AccountsUpdateCustomFieldsAsync (int? accountNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> AccountsUpdateCustomFieldsAsyncWithHttpInfo (int? accountNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Change an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsUpdatePhoneNumberAsync (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Change an account phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsUpdatePhoneNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>Task of TsiWebShipToResponse</returns>
        System.Threading.Tasks.Task<TsiWebShipToResponse> AccountsUpdateShipToAsync (int? accountNumber, int? shipToID, TsiWebShipTo shipTo);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>Task of ApiResponse (TsiWebShipToResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebShipToResponse>> AccountsUpdateShipToAsyncWithHttpInfo (int? accountNumber, int? shipToID, TsiWebShipTo shipTo);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for accounts. Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for accounts. Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsAdvancedSearch");

            var localVarPath = "/api/accounts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Advanced search for accounts. Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for accounts. Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsAdvancedSearch");

            var localVarPath = "/api/accounts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Creates a new account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebAccountResponse</returns>
        public TsiWebAccountResponse AccountsCreateAccount (TsiWebCreateAccountModel model)
        {
             ApiResponse<TsiWebAccountResponse> localVarResponse = AccountsCreateAccountWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebAccountResponse</returns>
        public ApiResponse< TsiWebAccountResponse > AccountsCreateAccountWithHttpInfo (TsiWebCreateAccountModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AccountsApi->AccountsCreateAccount");

            var localVarPath = "/api/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountResponse)));
        }

        /// <summary>
        /// Creates a new account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountResponse> AccountsCreateAccountAsync (TsiWebCreateAccountModel model)
        {
             ApiResponse<TsiWebAccountResponse> localVarResponse = await AccountsCreateAccountAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountResponse>> AccountsCreateAccountAsyncWithHttpInfo (TsiWebCreateAccountModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AccountsApi->AccountsCreateAccount");

            var localVarPath = "/api/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountResponse)));
        }

        /// <summary>
        /// Creates the account document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse AccountsCreateAccountDocument (int? accountNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = AccountsCreateAccountDocumentWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the account document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > AccountsCreateAccountDocumentWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateAccountDocument");

            var localVarPath = "/api/accounts/{accountNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccountDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates the account document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> AccountsCreateAccountDocumentAsync (int? accountNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await AccountsCreateAccountDocumentAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the account document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> AccountsCreateAccountDocumentAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateAccountDocument");

            var localVarPath = "/api/accounts/{accountNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccountDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebAccountExternalProductResponse</returns>
        public TsiWebAccountExternalProductResponse AccountsCreateAccountExternalProduct (int? accountNumber, TsiWebAccountExternalProduct request)
        {
             ApiResponse<TsiWebAccountExternalProductResponse> localVarResponse = AccountsCreateAccountExternalProductWithHttpInfo(accountNumber, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebAccountExternalProductResponse</returns>
        public ApiResponse< TsiWebAccountExternalProductResponse > AccountsCreateAccountExternalProductWithHttpInfo (int? accountNumber, TsiWebAccountExternalProduct request)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateAccountExternalProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsCreateAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountExternalProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountExternalProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountExternalProductResponse)));
        }

        /// <summary>
        /// Creates account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebAccountExternalProductResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountExternalProductResponse> AccountsCreateAccountExternalProductAsync (int? accountNumber, TsiWebAccountExternalProduct request)
        {
             ApiResponse<TsiWebAccountExternalProductResponse> localVarResponse = await AccountsCreateAccountExternalProductAsyncWithHttpInfo(accountNumber, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountExternalProductResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountExternalProductResponse>> AccountsCreateAccountExternalProductAsyncWithHttpInfo (int? accountNumber, TsiWebAccountExternalProduct request)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateAccountExternalProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsCreateAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountExternalProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountExternalProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountExternalProductResponse)));
        }

        /// <summary>
        /// Creates the account journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>TsiWebJournalEntryResponse</returns>
        public TsiWebJournalEntryResponse AccountsCreateAccountJournalEntry (int? accountNumber, TsiWebAccountJournalEntryModel model)
        {
             ApiResponse<TsiWebJournalEntryResponse> localVarResponse = AccountsCreateAccountJournalEntryWithHttpInfo(accountNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the account journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>ApiResponse of TsiWebJournalEntryResponse</returns>
        public ApiResponse< TsiWebJournalEntryResponse > AccountsCreateAccountJournalEntryWithHttpInfo (int? accountNumber, TsiWebAccountJournalEntryModel model)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateAccountJournalEntry");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AccountsApi->AccountsCreateAccountJournalEntry");

            var localVarPath = "/api/accounts/{accountNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccountJournalEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntryResponse)));
        }

        /// <summary>
        /// Creates the account journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of TsiWebJournalEntryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalEntryResponse> AccountsCreateAccountJournalEntryAsync (int? accountNumber, TsiWebAccountJournalEntryModel model)
        {
             ApiResponse<TsiWebJournalEntryResponse> localVarResponse = await AccountsCreateAccountJournalEntryAsyncWithHttpInfo(accountNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the account journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntryResponse>> AccountsCreateAccountJournalEntryAsyncWithHttpInfo (int? accountNumber, TsiWebAccountJournalEntryModel model)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateAccountJournalEntry");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AccountsApi->AccountsCreateAccountJournalEntry");

            var localVarPath = "/api/accounts/{accountNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateAccountJournalEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntryResponse)));
        }

        /// <summary>
        /// Creates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>TsiWebBillToResponse</returns>
        public TsiWebBillToResponse AccountsCreateBillTo (int? accountNumber, TsiWebBillTo billTo)
        {
             ApiResponse<TsiWebBillToResponse> localVarResponse = AccountsCreateBillToWithHttpInfo(accountNumber, billTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>ApiResponse of TsiWebBillToResponse</returns>
        public ApiResponse< TsiWebBillToResponse > AccountsCreateBillToWithHttpInfo (int? accountNumber, TsiWebBillTo billTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateBillTo");
            // verify the required parameter 'billTo' is set
            if (billTo == null)
                throw new ApiException(400, "Missing required parameter 'billTo' when calling AccountsApi->AccountsCreateBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billTo != null && billTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebBillToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebBillToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebBillToResponse)));
        }

        /// <summary>
        /// Creates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of TsiWebBillToResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebBillToResponse> AccountsCreateBillToAsync (int? accountNumber, TsiWebBillTo billTo)
        {
             ApiResponse<TsiWebBillToResponse> localVarResponse = await AccountsCreateBillToAsyncWithHttpInfo(accountNumber, billTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of ApiResponse (TsiWebBillToResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebBillToResponse>> AccountsCreateBillToAsyncWithHttpInfo (int? accountNumber, TsiWebBillTo billTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateBillTo");
            // verify the required parameter 'billTo' is set
            if (billTo == null)
                throw new ApiException(400, "Missing required parameter 'billTo' when calling AccountsApi->AccountsCreateBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billTo != null && billTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebBillToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebBillToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebBillToResponse)));
        }

        /// <summary>
        /// Create an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse AccountsCreatePhoneNumber (int? accountNumber, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = AccountsCreatePhoneNumberWithHttpInfo(accountNumber, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > AccountsCreatePhoneNumberWithHttpInfo (int? accountNumber, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AccountsApi->AccountsCreatePhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Create an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsCreatePhoneNumberAsync (int? accountNumber, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await AccountsCreatePhoneNumberAsyncWithHttpInfo(accountNumber, phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsCreatePhoneNumberAsyncWithHttpInfo (int? accountNumber, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AccountsApi->AccountsCreatePhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>TsiWebShipToResponse</returns>
        public TsiWebShipToResponse AccountsCreateShipTo (int? accountNumber, TsiWebShipTo shipTo)
        {
             ApiResponse<TsiWebShipToResponse> localVarResponse = AccountsCreateShipToWithHttpInfo(accountNumber, shipTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>ApiResponse of TsiWebShipToResponse</returns>
        public ApiResponse< TsiWebShipToResponse > AccountsCreateShipToWithHttpInfo (int? accountNumber, TsiWebShipTo shipTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateShipTo");
            // verify the required parameter 'shipTo' is set
            if (shipTo == null)
                throw new ApiException(400, "Missing required parameter 'shipTo' when calling AccountsApi->AccountsCreateShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipTo != null && shipTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shipTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipToResponse)));
        }

        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>Task of TsiWebShipToResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebShipToResponse> AccountsCreateShipToAsync (int? accountNumber, TsiWebShipTo shipTo)
        {
             ApiResponse<TsiWebShipToResponse> localVarResponse = await AccountsCreateShipToAsyncWithHttpInfo(accountNumber, shipTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new alternate ship to or updates an existing ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipTo">The ship to.</param>
        /// <returns>Task of ApiResponse (TsiWebShipToResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebShipToResponse>> AccountsCreateShipToAsyncWithHttpInfo (int? accountNumber, TsiWebShipTo shipTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsCreateShipTo");
            // verify the required parameter 'shipTo' is set
            if (shipTo == null)
                throw new ApiException(400, "Missing required parameter 'shipTo' when calling AccountsApi->AccountsCreateShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipTo != null && shipTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shipTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsCreateShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipToResponse)));
        }

        /// <summary>
        /// Removes the external product from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteAccountExternalProduct (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteAccountExternalProductWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the external product from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteAccountExternalProductWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountExternalProduct");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the external product from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountExternalProductAsync (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteAccountExternalProductAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes the external product from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The account external product identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountExternalProductAsyncWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountExternalProduct");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a group from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteAccountGroup (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteAccountGroupWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a group from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteAccountGroupWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountGroup");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountGroup");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a group from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountGroupAsync (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteAccountGroupAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a group from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The group name to remove.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountGroupAsyncWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountGroup");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountGroup");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a profile from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteAccountProfile (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteAccountProfileWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a profile from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteAccountProfileWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountProfile");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a profile from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountProfileAsync (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteAccountProfileAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a profile from the account. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The profile name to remove.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountProfileAsyncWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountProfile");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a SIC code from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteAccountSICCodes (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteAccountSICCodesWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a SIC code from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteAccountSICCodesWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountSICCodes");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountSICCodes");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountSICCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a SIC code from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountSICCodesAsync (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteAccountSICCodesAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a SIC code from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The SIC code.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountSICCodesAsyncWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountSICCodes");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountSICCodes");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountSICCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the system from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteAccountSystem (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteAccountSystemWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the system from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteAccountSystemWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountSystem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountSystem");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the system from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteAccountSystemAsync (int? accountNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteAccountSystemAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes the system from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The system to remove.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteAccountSystemAsyncWithHttpInfo (int? accountNumber, string id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteAccountSystem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteAccountSystem");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteAccountSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the alternate bill to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteBillTo (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteBillToWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the alternate bill to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteBillToWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteBillTo");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the alternate bill to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteBillToAsync (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteBillToAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes the alternate bill to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The bill to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteBillToAsyncWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteBillTo");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeletePhoneNumber (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeletePhoneNumberWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeletePhoneNumberWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeletePhoneNumber");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeletePhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeletePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeletePhoneNumberAsync (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeletePhoneNumberAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeletePhoneNumberAsyncWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeletePhoneNumber");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeletePhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeletePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the alternate ship to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteShipTo (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteShipToWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the alternate ship to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteShipToWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteShipTo");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Removes the alternate ship to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteShipToAsync (int? accountNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteShipToAsyncWithHttpInfo(accountNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes the alternate ship to from the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="id">The ship to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteShipToAsyncWithHttpInfo (int? accountNumber, int? id)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsDeleteShipTo");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the tech from the account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsDeleteTechFromAccountGroup (int? repnumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsDeleteTechFromAccountGroupWithHttpInfo(repnumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the tech from the account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsDeleteTechFromAccountGroupWithHttpInfo (int? repnumber, string id)
        {
            // verify the required parameter 'repnumber' is set
            if (repnumber == null)
                throw new ApiException(400, "Missing required parameter 'repnumber' when calling AccountsApi->AccountsDeleteTechFromAccountGroup");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteTechFromAccountGroup");

            var localVarPath = "/api/accounts/service/comanagedtechs/{repnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repnumber != null) localVarPathParams.Add("repnumber", this.Configuration.ApiClient.ParameterToString(repnumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteTechFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the tech from the account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsDeleteTechFromAccountGroupAsync (int? repnumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsDeleteTechFromAccountGroupAsyncWithHttpInfo(repnumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the tech from the account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="id">The group name.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsDeleteTechFromAccountGroupAsyncWithHttpInfo (int? repnumber, string id)
        {
            // verify the required parameter 'repnumber' is set
            if (repnumber == null)
                throw new ApiException(400, "Missing required parameter 'repnumber' when calling AccountsApi->AccountsDeleteTechFromAccountGroup");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->AccountsDeleteTechFromAccountGroup");

            var localVarPath = "/api/accounts/service/comanagedtechs/{repnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repnumber != null) localVarPathParams.Add("repnumber", this.Configuration.ApiClient.ParameterToString(repnumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsDeleteTechFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebCoManagedTechnician&gt;</returns>
        public List<TsiWebCoManagedTechnician> AccountsGetAccountCoManagedTechs (int? accountNumber)
        {
             ApiResponse<List<TsiWebCoManagedTechnician>> localVarResponse = AccountsGetAccountCoManagedTechsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCoManagedTechnician&gt;</returns>
        public ApiResponse< List<TsiWebCoManagedTechnician> > AccountsGetAccountCoManagedTechsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountCoManagedTechs");

            var localVarPath = "/api/accounts/{accountNumber}/service/comanagedtechs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountCoManagedTechs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCoManagedTechnician>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCoManagedTechnician>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCoManagedTechnician>)));
        }

        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebCoManagedTechnician&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCoManagedTechnician>> AccountsGetAccountCoManagedTechsAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebCoManagedTechnician>> localVarResponse = await AccountsGetAccountCoManagedTechsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of Co-Managed Direct techs assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCoManagedTechnician&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCoManagedTechnician>>> AccountsGetAccountCoManagedTechsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountCoManagedTechs");

            var localVarPath = "/api/accounts/{accountNumber}/service/comanagedtechs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountCoManagedTechs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCoManagedTechnician>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCoManagedTechnician>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCoManagedTechnician>)));
        }

        /// <summary>
        /// Gets account completed tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse AccountsGetAccountCompletedTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = AccountsGetAccountCompletedTasksWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets account completed tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > AccountsGetAccountCompletedTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountCompletedTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets account completed tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountCompletedTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await AccountsGetAccountCompletedTasksAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets account completed tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountCompletedTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountCompletedTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebAccountCustomerAssetResponse</returns>
        public TsiWebAccountCustomerAssetResponse AccountsGetAccountCustomerAssets (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebAccountCustomerAssetResponse> localVarResponse = AccountsGetAccountCustomerAssetsWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebAccountCustomerAssetResponse</returns>
        public ApiResponse< TsiWebAccountCustomerAssetResponse > AccountsGetAccountCustomerAssetsWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountCustomerAssets");

            var localVarPath = "/api/accounts/{accountNumber}/assets/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountCustomerAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountCustomerAssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountCustomerAssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountCustomerAssetResponse)));
        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebAccountCustomerAssetResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountCustomerAssetResponse> AccountsGetAccountCustomerAssetsAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebAccountCustomerAssetResponse> localVarResponse = await AccountsGetAccountCustomerAssetsAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebAccountCustomerAssetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountCustomerAssetResponse>> AccountsGetAccountCustomerAssetsAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountCustomerAssets");

            var localVarPath = "/api/accounts/{accountNumber}/assets/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountCustomerAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountCustomerAssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountCustomerAssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountCustomerAssetResponse)));
        }

        /// <summary>
        /// Gets the account details by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountDetail</returns>
        public TsiWebAccountDetail AccountsGetAccountDetails (int? accountNumber)
        {
             ApiResponse<TsiWebAccountDetail> localVarResponse = AccountsGetAccountDetailsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account details by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountDetail</returns>
        public ApiResponse< TsiWebAccountDetail > AccountsGetAccountDetailsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDetails");

            var localVarPath = "/api/accounts/{accountNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountDetail)));
        }

        /// <summary>
        /// Gets the account details by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountDetail> AccountsGetAccountDetailsAsync (int? accountNumber)
        {
             ApiResponse<TsiWebAccountDetail> localVarResponse = await AccountsGetAccountDetailsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account details by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountDetail>> AccountsGetAccountDetailsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDetails");

            var localVarPath = "/api/accounts/{accountNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountDetail)));
        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        public TsiWebDocumentSummary AccountsGetAccountDocument (int? accountNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = AccountsGetAccountDocumentWithHttpInfo(accountNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        public ApiResponse< TsiWebDocumentSummary > AccountsGetAccountDocumentWithHttpInfo (int? accountNumber, int? documentID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsGetAccountDocument");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentSummary> AccountsGetAccountDocumentAsync (int? accountNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = await AccountsGetAccountDocumentAsyncWithHttpInfo(accountNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> AccountsGetAccountDocumentAsyncWithHttpInfo (int? accountNumber, int? documentID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsGetAccountDocument");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        public TsiWebDocumentsResponse AccountsGetAccountDocuments (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = AccountsGetAccountDocumentsWithHttpInfo(accountNumber, accountOnly, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        public ApiResponse< TsiWebDocumentsResponse > AccountsGetAccountDocumentsWithHttpInfo (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDocuments");

            var localVarPath = "/api/accounts/{accountNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (accountOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountOnly", accountOnly)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentsResponse> AccountsGetAccountDocumentsAsync (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = await AccountsGetAccountDocumentsAsyncWithHttpInfo(accountNumber, accountOnly, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> AccountsGetAccountDocumentsAsyncWithHttpInfo (int? accountNumber, bool? accountOnly = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDocuments");

            var localVarPath = "/api/accounts/{accountNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (accountOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accountOnly", accountOnly)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        public TsiWebDocumentsResponse AccountsGetAccountDocuments_0 (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = AccountsGetAccountDocuments_0WithHttpInfo(accountNumber, accountOnly, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        public ApiResponse< TsiWebDocumentsResponse > AccountsGetAccountDocuments_0WithHttpInfo (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDocuments_0");
            // verify the required parameter 'accountOnly' is set
            if (accountOnly == null)
                throw new ApiException(400, "Missing required parameter 'accountOnly' when calling AccountsApi->AccountsGetAccountDocuments_0");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{accountOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (accountOnly != null) localVarPathParams.Add("accountOnly", this.Configuration.ApiClient.ParameterToString(accountOnly)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDocuments_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentsResponse> AccountsGetAccountDocuments_0Async (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = await AccountsGetAccountDocuments_0AsyncWithHttpInfo(accountNumber, accountOnly, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountOnly">If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> AccountsGetAccountDocuments_0AsyncWithHttpInfo (int? accountNumber, bool? accountOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountDocuments_0");
            // verify the required parameter 'accountOnly' is set
            if (accountOnly == null)
                throw new ApiException(400, "Missing required parameter 'accountOnly' when calling AccountsApi->AccountsGetAccountDocuments_0");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{accountOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (accountOnly != null) localVarPathParams.Add("accountOnly", this.Configuration.ApiClient.ParameterToString(accountOnly)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountDocuments_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets account external product by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>TsiWebAccountExternalProduct</returns>
        public TsiWebAccountExternalProduct AccountsGetAccountExternalProduct (int? accountNumber, int? accountExternalProductID)
        {
             ApiResponse<TsiWebAccountExternalProduct> localVarResponse = AccountsGetAccountExternalProductWithHttpInfo(accountNumber, accountExternalProductID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets account external product by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>ApiResponse of TsiWebAccountExternalProduct</returns>
        public ApiResponse< TsiWebAccountExternalProduct > AccountsGetAccountExternalProductWithHttpInfo (int? accountNumber, int? accountExternalProductID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountExternalProduct");
            // verify the required parameter 'accountExternalProductID' is set
            if (accountExternalProductID == null)
                throw new ApiException(400, "Missing required parameter 'accountExternalProductID' when calling AccountsApi->AccountsGetAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts/{accountExternalProductID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (accountExternalProductID != null) localVarPathParams.Add("accountExternalProductID", this.Configuration.ApiClient.ParameterToString(accountExternalProductID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountExternalProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountExternalProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountExternalProduct)));
        }

        /// <summary>
        /// Gets account external product by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>Task of TsiWebAccountExternalProduct</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountExternalProduct> AccountsGetAccountExternalProductAsync (int? accountNumber, int? accountExternalProductID)
        {
             ApiResponse<TsiWebAccountExternalProduct> localVarResponse = await AccountsGetAccountExternalProductAsyncWithHttpInfo(accountNumber, accountExternalProductID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets account external product by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="accountExternalProductID">The account external product identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountExternalProduct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountExternalProduct>> AccountsGetAccountExternalProductAsyncWithHttpInfo (int? accountNumber, int? accountExternalProductID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountExternalProduct");
            // verify the required parameter 'accountExternalProductID' is set
            if (accountExternalProductID == null)
                throw new ApiException(400, "Missing required parameter 'accountExternalProductID' when calling AccountsApi->AccountsGetAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts/{accountExternalProductID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (accountExternalProductID != null) localVarPathParams.Add("accountExternalProductID", this.Configuration.ApiClient.ParameterToString(accountExternalProductID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountExternalProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountExternalProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountExternalProduct)));
        }

        /// <summary>
        /// Gets a collection of associated external products for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAccountExternalProduct&gt;</returns>
        public List<TsiWebAccountExternalProduct> AccountsGetAccountExternalProducts (int? accountNumber)
        {
             ApiResponse<List<TsiWebAccountExternalProduct>> localVarResponse = AccountsGetAccountExternalProductsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of associated external products for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountExternalProduct&gt;</returns>
        public ApiResponse< List<TsiWebAccountExternalProduct> > AccountsGetAccountExternalProductsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountExternalProducts");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountExternalProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountExternalProduct>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountExternalProduct>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountExternalProduct>)));
        }

        /// <summary>
        /// Gets a collection of associated external products for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAccountExternalProduct&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountExternalProduct>> AccountsGetAccountExternalProductsAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebAccountExternalProduct>> localVarResponse = await AccountsGetAccountExternalProductsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of associated external products for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountExternalProduct&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountExternalProduct>>> AccountsGetAccountExternalProductsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountExternalProducts");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountExternalProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountExternalProduct>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountExternalProduct>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountExternalProduct>)));
        }

        /// <summary>
        /// Gets account incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse AccountsGetAccountIncompleteTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = AccountsGetAccountIncompleteTasksWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets account incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > AccountsGetAccountIncompleteTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountIncompleteTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets account incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountIncompleteTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await AccountsGetAccountIncompleteTasksAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets account incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountIncompleteTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountIncompleteTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        public TsiWebJournalEntriesResponse AccountsGetAccountJournalEntries (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = AccountsGetAccountJournalEntriesWithHttpInfo(accountNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        public ApiResponse< TsiWebJournalEntriesResponse > AccountsGetAccountJournalEntriesWithHttpInfo (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountJournalEntries");

            var localVarPath = "/api/accounts/{accountNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountJournalEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> AccountsGetAccountJournalEntriesAsync (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = await AccountsGetAccountJournalEntriesAsyncWithHttpInfo(accountNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> AccountsGetAccountJournalEntriesAsyncWithHttpInfo (int? accountNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountJournalEntries");

            var localVarPath = "/api/accounts/{accountNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountJournalEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        public TsiWebJournalEntriesResponse AccountsGetAccountJournalEntries_0 (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = AccountsGetAccountJournalEntries_0WithHttpInfo(accountNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        public ApiResponse< TsiWebJournalEntriesResponse > AccountsGetAccountJournalEntries_0WithHttpInfo (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountJournalEntries_0");
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling AccountsApi->AccountsGetAccountJournalEntries_0");

            var localVarPath = "/api/accounts/{accountNumber}/journalentries/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountJournalEntries_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> AccountsGetAccountJournalEntries_0Async (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = await AccountsGetAccountJournalEntries_0AsyncWithHttpInfo(accountNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> AccountsGetAccountJournalEntries_0AsyncWithHttpInfo (int? accountNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountJournalEntries_0");
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling AccountsApi->AccountsGetAccountJournalEntries_0");

            var localVarPath = "/api/accounts/{accountNumber}/journalentries/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountJournalEntries_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the account managed assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebAccountManagedAssetResponse</returns>
        public TsiWebAccountManagedAssetResponse AccountsGetAccountManagedAssets (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebAccountManagedAssetResponse> localVarResponse = AccountsGetAccountManagedAssetsWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account managed assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebAccountManagedAssetResponse</returns>
        public ApiResponse< TsiWebAccountManagedAssetResponse > AccountsGetAccountManagedAssetsWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountManagedAssets");

            var localVarPath = "/api/accounts/{accountNumber}/assets/managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountManagedAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountManagedAssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountManagedAssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountManagedAssetResponse)));
        }

        /// <summary>
        /// Gets the account managed assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebAccountManagedAssetResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountManagedAssetResponse> AccountsGetAccountManagedAssetsAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebAccountManagedAssetResponse> localVarResponse = await AccountsGetAccountManagedAssetsAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account managed assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebAccountManagedAssetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountManagedAssetResponse>> AccountsGetAccountManagedAssetsAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountManagedAssets");

            var localVarPath = "/api/accounts/{accountNumber}/assets/managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountManagedAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountManagedAssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountManagedAssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountManagedAssetResponse)));
        }

        /// <summary>
        /// Gets the account only completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse AccountsGetAccountOnlyCompletedTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = AccountsGetAccountOnlyCompletedTasksWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account only completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > AccountsGetAccountOnlyCompletedTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountOnlyCompletedTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/accountonly/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountOnlyCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account only completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountOnlyCompletedTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await AccountsGetAccountOnlyCompletedTasksAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account only completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountOnlyCompletedTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountOnlyCompletedTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/accountonly/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountOnlyCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account only incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse AccountsGetAccountOnlyIncompleteTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = AccountsGetAccountOnlyIncompleteTasksWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account only incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > AccountsGetAccountOnlyIncompleteTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountOnlyIncompleteTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/accountonly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountOnlyIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account only incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountOnlyIncompleteTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await AccountsGetAccountOnlyIncompleteTasksAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account only incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountOnlyIncompleteTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountOnlyIncompleteTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/accountonly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountOnlyIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse AccountsGetAccountOnlyTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = AccountsGetAccountOnlyTasksWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > AccountsGetAccountOnlyTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountOnlyTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/accountonly/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountOnlyTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountOnlyTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await AccountsGetAccountOnlyTasksAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account only tasks. Includes both completed and imcomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountOnlyTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountOnlyTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/accountonly/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountOnlyTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the account summary by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountSummary</returns>
        public TsiWebAccountSummary AccountsGetAccountSummary (int? accountNumber)
        {
             ApiResponse<TsiWebAccountSummary> localVarResponse = AccountsGetAccountSummaryWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account summary by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountSummary</returns>
        public ApiResponse< TsiWebAccountSummary > AccountsGetAccountSummaryWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountSummary");

            var localVarPath = "/api/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountSummary)));
        }

        /// <summary>
        /// Gets the account summary by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountSummary> AccountsGetAccountSummaryAsync (int? accountNumber)
        {
             ApiResponse<TsiWebAccountSummary> localVarResponse = await AccountsGetAccountSummaryAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account summary by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountSummary>> AccountsGetAccountSummaryAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountSummary");

            var localVarPath = "/api/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountSummary)));
        }

        /// <summary>
        /// Gets a collection of systems assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAccountSystem&gt;</returns>
        public List<TsiWebAccountSystem> AccountsGetAccountSystems (int? accountNumber)
        {
             ApiResponse<List<TsiWebAccountSystem>> localVarResponse = AccountsGetAccountSystemsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of systems assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountSystem&gt;</returns>
        public ApiResponse< List<TsiWebAccountSystem> > AccountsGetAccountSystemsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountSystems");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountSystem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountSystem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountSystem>)));
        }

        /// <summary>
        /// Gets a collection of systems assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAccountSystem&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountSystem>> AccountsGetAccountSystemsAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebAccountSystem>> localVarResponse = await AccountsGetAccountSystemsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of systems assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountSystem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountSystem>>> AccountsGetAccountSystemsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountSystems");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountSystem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountSystem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountSystem>)));
        }

        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse AccountsGetAccountTasks (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = AccountsGetAccountTasksWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > AccountsGetAccountTasksWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> AccountsGetAccountTasksAsync (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await AccountsGetAccountTasksAsyncWithHttpInfo(accountNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets account tasks. includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> AccountsGetAccountTasksAsyncWithHttpInfo (int? accountNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountTasks");

            var localVarPath = "/api/accounts/{accountNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccounting</returns>
        public TsiWebAccounting AccountsGetAccountingDetails (int? accountNumber)
        {
             ApiResponse<TsiWebAccounting> localVarResponse = AccountsGetAccountingDetailsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccounting</returns>
        public ApiResponse< TsiWebAccounting > AccountsGetAccountingDetailsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccounting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccounting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccounting)));
        }

        /// <summary>
        /// Gets the accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccounting</returns>
        public async System.Threading.Tasks.Task<TsiWebAccounting> AccountsGetAccountingDetailsAsync (int? accountNumber)
        {
             ApiResponse<TsiWebAccounting> localVarResponse = await AccountsGetAccountingDetailsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccounting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccounting>> AccountsGetAccountingDetailsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAccountingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAccountingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccounting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccounting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccounting)));
        }

        /// <summary>
        /// Gets a collection of groups assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        public List<TsiWebAssignedMarketingGroup> AccountsGetAssignedGroups (int? accountNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingGroup>> localVarResponse = AccountsGetAssignedGroupsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of groups assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        public ApiResponse< List<TsiWebAssignedMarketingGroup> > AccountsGetAssignedGroupsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAssignedGroups");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAssignedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingGroup>)));
        }

        /// <summary>
        /// Gets a collection of groups assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAssignedMarketingGroup>> AccountsGetAssignedGroupsAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingGroup>> localVarResponse = await AccountsGetAssignedGroupsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of groups assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingGroup>>> AccountsGetAssignedGroupsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAssignedGroups");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAssignedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingGroup>)));
        }

        /// <summary>
        /// Gets a collection of profiles assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        public List<TsiWebAssignedMarketingProfile> AccountsGetAssignedProfiles (int? accountNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingProfile>> localVarResponse = AccountsGetAssignedProfilesWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of profiles assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        public ApiResponse< List<TsiWebAssignedMarketingProfile> > AccountsGetAssignedProfilesWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAssignedProfiles");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAssignedProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingProfile>)));
        }

        /// <summary>
        /// Gets a collection of profiles assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAssignedMarketingProfile>> AccountsGetAssignedProfilesAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingProfile>> localVarResponse = await AccountsGetAssignedProfilesAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of profiles assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingProfile>>> AccountsGetAssignedProfilesAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAssignedProfiles");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAssignedProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingProfile>)));
        }

        /// <summary>
        /// Gets a collection of SIC codes assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebAssignedSICCode&gt;</returns>
        public List<TsiWebAssignedSICCode> AccountsGetAssignedSICCodes (int? accountNumber)
        {
             ApiResponse<List<TsiWebAssignedSICCode>> localVarResponse = AccountsGetAssignedSICCodesWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of SIC codes assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedSICCode&gt;</returns>
        public ApiResponse< List<TsiWebAssignedSICCode> > AccountsGetAssignedSICCodesWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAssignedSICCodes");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAssignedSICCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedSICCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedSICCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedSICCode>)));
        }

        /// <summary>
        /// Gets a collection of SIC codes assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedSICCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAssignedSICCode>> AccountsGetAssignedSICCodesAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebAssignedSICCode>> localVarResponse = await AccountsGetAssignedSICCodesAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of SIC codes assigned to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedSICCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedSICCode>>> AccountsGetAssignedSICCodesAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetAssignedSICCodes");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetAssignedSICCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedSICCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedSICCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedSICCode>)));
        }

        /// <summary>
        /// Gets the alternate bill to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>List&lt;TsiWebBillTo&gt;</returns>
        public List<TsiWebBillTo> AccountsGetBillTo (int? accountNumber, int? billToID)
        {
             ApiResponse<List<TsiWebBillTo>> localVarResponse = AccountsGetBillToWithHttpInfo(accountNumber, billToID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the alternate bill to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>ApiResponse of List&lt;TsiWebBillTo&gt;</returns>
        public ApiResponse< List<TsiWebBillTo> > AccountsGetBillToWithHttpInfo (int? accountNumber, int? billToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetBillTo");
            // verify the required parameter 'billToID' is set
            if (billToID == null)
                throw new ApiException(400, "Missing required parameter 'billToID' when calling AccountsApi->AccountsGetBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos/{billToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billToID != null) localVarPathParams.Add("billToID", this.Configuration.ApiClient.ParameterToString(billToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBillTo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBillTo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBillTo>)));
        }

        /// <summary>
        /// Gets the alternate bill to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of List&lt;TsiWebBillTo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebBillTo>> AccountsGetBillToAsync (int? accountNumber, int? billToID)
        {
             ApiResponse<List<TsiWebBillTo>> localVarResponse = await AccountsGetBillToAsyncWithHttpInfo(accountNumber, billToID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the alternate bill to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBillTo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebBillTo>>> AccountsGetBillToAsyncWithHttpInfo (int? accountNumber, int? billToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetBillTo");
            // verify the required parameter 'billToID' is set
            if (billToID == null)
                throw new ApiException(400, "Missing required parameter 'billToID' when calling AccountsApi->AccountsGetBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos/{billToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billToID != null) localVarPathParams.Add("billToID", this.Configuration.ApiClient.ParameterToString(billToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBillTo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBillTo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBillTo>)));
        }

        /// <summary>
        /// Gets a collection of alternate bill tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebBillTo&gt;</returns>
        public List<TsiWebBillTo> AccountsGetBillTos (int? accountNumber)
        {
             ApiResponse<List<TsiWebBillTo>> localVarResponse = AccountsGetBillTosWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of alternate bill tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebBillTo&gt;</returns>
        public ApiResponse< List<TsiWebBillTo> > AccountsGetBillTosWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetBillTos");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetBillTos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBillTo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBillTo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBillTo>)));
        }

        /// <summary>
        /// Gets a collection of alternate bill tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebBillTo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebBillTo>> AccountsGetBillTosAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebBillTo>> localVarResponse = await AccountsGetBillTosAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of alternate bill tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBillTo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebBillTo>>> AccountsGetBillTosAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetBillTos");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetBillTos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBillTo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBillTo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBillTo>)));
        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> AccountsGetCustomFields (int? accountNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = AccountsGetCustomFieldsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > AccountsGetCustomFieldsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetCustomFields");

            var localVarPath = "/api/accounts/{accountNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> AccountsGetCustomFieldsAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await AccountsGetCustomFieldsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> AccountsGetCustomFieldsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetCustomFields");

            var localVarPath = "/api/accounts/{accountNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the account document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        public Object AccountsGetFile (int? accountNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = AccountsGetFileWithHttpInfo(accountNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AccountsGetFileWithHttpInfo (int? accountNumber, int? documentID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsGetFile");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the account document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsGetFileAsync (int? accountNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = await AccountsGetFileAsyncWithHttpInfo(accountNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccountsGetFileAsyncWithHttpInfo (int? accountNumber, int? documentID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsGetFile");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountMarketingDetails</returns>
        public TsiWebAccountMarketingDetails AccountsGetMarketingDetails (int? accountNumber)
        {
             ApiResponse<TsiWebAccountMarketingDetails> localVarResponse = AccountsGetMarketingDetailsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountMarketingDetails</returns>
        public ApiResponse< TsiWebAccountMarketingDetails > AccountsGetMarketingDetailsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetMarketingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/marketing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetMarketingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountMarketingDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountMarketingDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountMarketingDetails)));
        }

        /// <summary>
        /// Gets the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountMarketingDetails</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountMarketingDetails> AccountsGetMarketingDetailsAsync (int? accountNumber)
        {
             ApiResponse<TsiWebAccountMarketingDetails> localVarResponse = await AccountsGetMarketingDetailsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountMarketingDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountMarketingDetails>> AccountsGetMarketingDetailsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetMarketingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/marketing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetMarketingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountMarketingDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountMarketingDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountMarketingDetails)));
        }

        /// <summary>
        /// Gets the pay method for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>TsiWebPayMethod</returns>
        public TsiWebPayMethod AccountsGetPayMethod (int? accountNumber, int? payMethodID)
        {
             ApiResponse<TsiWebPayMethod> localVarResponse = AccountsGetPayMethodWithHttpInfo(accountNumber, payMethodID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the pay method for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>ApiResponse of TsiWebPayMethod</returns>
        public ApiResponse< TsiWebPayMethod > AccountsGetPayMethodWithHttpInfo (int? accountNumber, int? payMethodID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPayMethod");
            // verify the required parameter 'payMethodID' is set
            if (payMethodID == null)
                throw new ApiException(400, "Missing required parameter 'payMethodID' when calling AccountsApi->AccountsGetPayMethod");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/paymethods/{payMethodID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (payMethodID != null) localVarPathParams.Add("payMethodID", this.Configuration.ApiClient.ParameterToString(payMethodID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPayMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPayMethod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPayMethod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPayMethod)));
        }

        /// <summary>
        /// Gets the pay method for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>Task of TsiWebPayMethod</returns>
        public async System.Threading.Tasks.Task<TsiWebPayMethod> AccountsGetPayMethodAsync (int? accountNumber, int? payMethodID)
        {
             ApiResponse<TsiWebPayMethod> localVarResponse = await AccountsGetPayMethodAsyncWithHttpInfo(accountNumber, payMethodID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the pay method for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="payMethodID">The pay method identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPayMethod)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPayMethod>> AccountsGetPayMethodAsyncWithHttpInfo (int? accountNumber, int? payMethodID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPayMethod");
            // verify the required parameter 'payMethodID' is set
            if (payMethodID == null)
                throw new ApiException(400, "Missing required parameter 'payMethodID' when calling AccountsApi->AccountsGetPayMethod");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/paymethods/{payMethodID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (payMethodID != null) localVarPathParams.Add("payMethodID", this.Configuration.ApiClient.ParameterToString(payMethodID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPayMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPayMethod>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPayMethod) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPayMethod)));
        }

        /// <summary>
        /// Gets a collection of pay methods for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebPayMethod&gt;</returns>
        public List<TsiWebPayMethod> AccountsGetPayMethods (int? accountNumber)
        {
             ApiResponse<List<TsiWebPayMethod>> localVarResponse = AccountsGetPayMethodsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of pay methods for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPayMethod&gt;</returns>
        public ApiResponse< List<TsiWebPayMethod> > AccountsGetPayMethodsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPayMethods");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/paymethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPayMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPayMethod>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPayMethod>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPayMethod>)));
        }

        /// <summary>
        /// Gets a collection of pay methods for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebPayMethod&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPayMethod>> AccountsGetPayMethodsAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebPayMethod>> localVarResponse = await AccountsGetPayMethodsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of pay methods for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPayMethod&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPayMethod>>> AccountsGetPayMethodsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPayMethods");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/paymethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPayMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPayMethod>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPayMethod>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPayMethod>)));
        }

        /// <summary>
        /// Gets the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumber</returns>
        public TsiWebPhoneNumber AccountsGetPhoneNumber (int? accountNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumber> localVarResponse = AccountsGetPhoneNumberWithHttpInfo(accountNumber, phoneNumberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumber</returns>
        public ApiResponse< TsiWebPhoneNumber > AccountsGetPhoneNumberWithHttpInfo (int? accountNumber, int? phoneNumberID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsGetPhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumber)));
        }

        /// <summary>
        /// Gets the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumber</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumber> AccountsGetPhoneNumberAsync (int? accountNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumber> localVarResponse = await AccountsGetPhoneNumberAsyncWithHttpInfo(accountNumber, phoneNumberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumber>> AccountsGetPhoneNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsGetPhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumber)));
        }

        /// <summary>
        /// Gets the account phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebPhoneNumber&gt;</returns>
        public List<TsiWebPhoneNumber> AccountsGetPhoneNumbers (int? accountNumber)
        {
             ApiResponse<List<TsiWebPhoneNumber>> localVarResponse = AccountsGetPhoneNumbersWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneNumber&gt;</returns>
        public ApiResponse< List<TsiWebPhoneNumber> > AccountsGetPhoneNumbersWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPhoneNumbers");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneNumber>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneNumber>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneNumber>)));
        }

        /// <summary>
        /// Gets the account phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebPhoneNumber&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPhoneNumber>> AccountsGetPhoneNumbersAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebPhoneNumber>> localVarResponse = await AccountsGetPhoneNumbersAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneNumber&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneNumber>>> AccountsGetPhoneNumbersAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetPhoneNumbers");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneNumber>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneNumber>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneNumber>)));
        }

        /// <summary>
        /// Gets the service details for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebAccountServiceDetails</returns>
        public TsiWebAccountServiceDetails AccountsGetServiceDetails (int? accountNumber)
        {
             ApiResponse<TsiWebAccountServiceDetails> localVarResponse = AccountsGetServiceDetailsWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service details for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebAccountServiceDetails</returns>
        public ApiResponse< TsiWebAccountServiceDetails > AccountsGetServiceDetailsWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetServiceDetails");

            var localVarPath = "/api/accounts/{accountNumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetServiceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountServiceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountServiceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountServiceDetails)));
        }

        /// <summary>
        /// Gets the service details for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebAccountServiceDetails</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountServiceDetails> AccountsGetServiceDetailsAsync (int? accountNumber)
        {
             ApiResponse<TsiWebAccountServiceDetails> localVarResponse = await AccountsGetServiceDetailsAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service details for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountServiceDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountServiceDetails>> AccountsGetServiceDetailsAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetServiceDetails");

            var localVarPath = "/api/accounts/{accountNumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetServiceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountServiceDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountServiceDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountServiceDetails)));
        }

        /// <summary>
        /// Gets the alternate ship to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>TsiWebShipTo</returns>
        public TsiWebShipTo AccountsGetShipTo (int? accountNumber, int? shipToID)
        {
             ApiResponse<TsiWebShipTo> localVarResponse = AccountsGetShipToWithHttpInfo(accountNumber, shipToID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the alternate ship to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>ApiResponse of TsiWebShipTo</returns>
        public ApiResponse< TsiWebShipTo > AccountsGetShipToWithHttpInfo (int? accountNumber, int? shipToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetShipTo");
            // verify the required parameter 'shipToID' is set
            if (shipToID == null)
                throw new ApiException(400, "Missing required parameter 'shipToID' when calling AccountsApi->AccountsGetShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos/{shipToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipToID != null) localVarPathParams.Add("shipToID", this.Configuration.ApiClient.ParameterToString(shipToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipTo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipTo)));
        }

        /// <summary>
        /// Gets the alternate ship to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of TsiWebShipTo</returns>
        public async System.Threading.Tasks.Task<TsiWebShipTo> AccountsGetShipToAsync (int? accountNumber, int? shipToID)
        {
             ApiResponse<TsiWebShipTo> localVarResponse = await AccountsGetShipToAsyncWithHttpInfo(accountNumber, shipToID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the alternate ship to for the account by ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebShipTo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebShipTo>> AccountsGetShipToAsyncWithHttpInfo (int? accountNumber, int? shipToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetShipTo");
            // verify the required parameter 'shipToID' is set
            if (shipToID == null)
                throw new ApiException(400, "Missing required parameter 'shipToID' when calling AccountsApi->AccountsGetShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos/{shipToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipToID != null) localVarPathParams.Add("shipToID", this.Configuration.ApiClient.ParameterToString(shipToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipTo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipTo)));
        }

        /// <summary>
        /// Gets a collection of alternate ship tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>List&lt;TsiWebShipTo&gt;</returns>
        public List<TsiWebShipTo> AccountsGetShipTos (int? accountNumber)
        {
             ApiResponse<List<TsiWebShipTo>> localVarResponse = AccountsGetShipTosWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of alternate ship tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebShipTo&gt;</returns>
        public ApiResponse< List<TsiWebShipTo> > AccountsGetShipTosWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetShipTos");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetShipTos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebShipTo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebShipTo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebShipTo>)));
        }

        /// <summary>
        /// Gets a collection of alternate ship tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebShipTo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebShipTo>> AccountsGetShipTosAsync (int? accountNumber)
        {
             ApiResponse<List<TsiWebShipTo>> localVarResponse = await AccountsGetShipTosAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of alternate ship tos for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebShipTo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebShipTo>>> AccountsGetShipTosAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsGetShipTos");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsGetShipTos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebShipTo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebShipTo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebShipTo>)));
        }

        /// <summary>
        /// Creates or updates accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>TsiWebAccountingDetailResponse</returns>
        public TsiWebAccountingDetailResponse AccountsSaveAccountingDetails (int? accountNumber, TsiWebAccountingDetail details)
        {
             ApiResponse<TsiWebAccountingDetailResponse> localVarResponse = AccountsSaveAccountingDetailsWithHttpInfo(accountNumber, details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>ApiResponse of TsiWebAccountingDetailResponse</returns>
        public ApiResponse< TsiWebAccountingDetailResponse > AccountsSaveAccountingDetailsWithHttpInfo (int? accountNumber, TsiWebAccountingDetail details)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSaveAccountingDetails");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AccountsApi->AccountsSaveAccountingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSaveAccountingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountingDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountingDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountingDetailResponse)));
        }

        /// <summary>
        /// Creates or updates accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of TsiWebAccountingDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountingDetailResponse> AccountsSaveAccountingDetailsAsync (int? accountNumber, TsiWebAccountingDetail details)
        {
             ApiResponse<TsiWebAccountingDetailResponse> localVarResponse = await AccountsSaveAccountingDetailsAsyncWithHttpInfo(accountNumber, details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates or updates accounting details for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountingDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountingDetailResponse>> AccountsSaveAccountingDetailsAsyncWithHttpInfo (int? accountNumber, TsiWebAccountingDetail details)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSaveAccountingDetails");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AccountsApi->AccountsSaveAccountingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSaveAccountingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountingDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountingDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountingDetailResponse)));
        }

        /// <summary>
        /// Update the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>TsiWebAccountMarketingDetailsResponse</returns>
        public TsiWebAccountMarketingDetailsResponse AccountsSaveMarketingDetails (int? accountNumber, TsiWebAccountMarketingDetail details)
        {
             ApiResponse<TsiWebAccountMarketingDetailsResponse> localVarResponse = AccountsSaveMarketingDetailsWithHttpInfo(accountNumber, details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>ApiResponse of TsiWebAccountMarketingDetailsResponse</returns>
        public ApiResponse< TsiWebAccountMarketingDetailsResponse > AccountsSaveMarketingDetailsWithHttpInfo (int? accountNumber, TsiWebAccountMarketingDetail details)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSaveMarketingDetails");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AccountsApi->AccountsSaveMarketingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/marketing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSaveMarketingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountMarketingDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountMarketingDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountMarketingDetailsResponse)));
        }

        /// <summary>
        /// Update the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>Task of TsiWebAccountMarketingDetailsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountMarketingDetailsResponse> AccountsSaveMarketingDetailsAsync (int? accountNumber, TsiWebAccountMarketingDetail details)
        {
             ApiResponse<TsiWebAccountMarketingDetailsResponse> localVarResponse = await AccountsSaveMarketingDetailsAsyncWithHttpInfo(accountNumber, details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the account marketing details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">Marketing details for the account.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountMarketingDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountMarketingDetailsResponse>> AccountsSaveMarketingDetailsAsyncWithHttpInfo (int? accountNumber, TsiWebAccountMarketingDetail details)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSaveMarketingDetails");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AccountsApi->AccountsSaveMarketingDetails");

            var localVarPath = "/api/accounts/{accountNumber}/marketing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSaveMarketingDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountMarketingDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountMarketingDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountMarketingDetailsResponse)));
        }

        /// <summary>
        /// Updates the account service details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>TsiWebAccountServiceDetailsResponse</returns>
        public TsiWebAccountServiceDetailsResponse AccountsSaveServiceDetails (int? accountNumber, TsiWebAccountServiceDetail details)
        {
             ApiResponse<TsiWebAccountServiceDetailsResponse> localVarResponse = AccountsSaveServiceDetailsWithHttpInfo(accountNumber, details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the account service details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>ApiResponse of TsiWebAccountServiceDetailsResponse</returns>
        public ApiResponse< TsiWebAccountServiceDetailsResponse > AccountsSaveServiceDetailsWithHttpInfo (int? accountNumber, TsiWebAccountServiceDetail details)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSaveServiceDetails");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AccountsApi->AccountsSaveServiceDetails");

            var localVarPath = "/api/accounts/{accountNumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSaveServiceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountServiceDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountServiceDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountServiceDetailsResponse)));
        }

        /// <summary>
        /// Updates the account service details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of TsiWebAccountServiceDetailsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountServiceDetailsResponse> AccountsSaveServiceDetailsAsync (int? accountNumber, TsiWebAccountServiceDetail details)
        {
             ApiResponse<TsiWebAccountServiceDetailsResponse> localVarResponse = await AccountsSaveServiceDetailsAsyncWithHttpInfo(accountNumber, details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the account service details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="details">The details.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountServiceDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountServiceDetailsResponse>> AccountsSaveServiceDetailsAsyncWithHttpInfo (int? accountNumber, TsiWebAccountServiceDetail details)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSaveServiceDetails");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AccountsApi->AccountsSaveServiceDetails");

            var localVarPath = "/api/accounts/{accountNumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSaveServiceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountServiceDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountServiceDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountServiceDetailsResponse)));
        }

        /// <summary>
        /// Search Accounts using contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchAccountsContactName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchAccountsContactNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Accounts using contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchAccountsContactNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchAccountsContactName");

            var localVarPath = "/api/accounts/search/contact/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchAccountsContactName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search Accounts using contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchAccountsContactNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchAccountsContactNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Accounts using contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchAccountsContactNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchAccountsContactName");

            var localVarPath = "/api/accounts/search/contact/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchAccountsContactName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchAccountsCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchAccountsCustomFieldWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchAccountsCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AccountsApi->AccountsSearchAccountsCustomField");

            var localVarPath = "/api/accounts/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchAccountsCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchAccountsCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchAccountsCustomFieldAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchAccountsCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AccountsApi->AccountsSearchAccountsCustomField");

            var localVarPath = "/api/accounts/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchAccountsCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchAccountsSoundsLikeName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchAccountsSoundsLikeNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchAccountsSoundsLikeNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchAccountsSoundsLikeName");

            var localVarPath = "/api/accounts/search/name/soundslike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchAccountsSoundsLikeName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchAccountsSoundsLikeNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchAccountsSoundsLikeNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches the name of the accounts that sound like the criteria provided. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchAccountsSoundsLikeNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchAccountsSoundsLikeName");

            var localVarPath = "/api/accounts/search/name/soundslike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchAccountsSoundsLikeName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by the user specified identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByAccountId (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByAccountIdWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by the user specified identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByAccountIdWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountId");

            var localVarPath = "/api/accounts/search/accountid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by the user specified identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountIdAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByAccountIdAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by the user specified identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountIdAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountId");

            var localVarPath = "/api/accounts/search/accountid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByAccountNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByAccountNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByAccountNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountNumber");

            var localVarPath = "/api/accounts/search/accountnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByAccountNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountNumber");

            var localVarPath = "/api/accounts/search/accountnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by Account Status. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByAccountStatus (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByAccountStatusWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by Account Status. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByAccountStatusWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountStatus");

            var localVarPath = "/api/accounts/search/accountstatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by Account Status. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountStatusAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByAccountStatusAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by Account Status. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountStatusAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountStatus");

            var localVarPath = "/api/accounts/search/accountstatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by Account Type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByAccountType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByAccountTypeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by Account Type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByAccountTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountType");

            var localVarPath = "/api/accounts/search/accounttype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by Account Type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAccountTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByAccountTypeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by Account Type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAccountTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAccountType");

            var localVarPath = "/api/accounts/search/accounttype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAccountType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByAddress (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByAddressWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByAddressWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAddress");

            var localVarPath = "/api/accounts/search/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAddressAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByAddressAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAddressAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAddress");

            var localVarPath = "/api/accounts/search/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by MSP Agreement . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByAgreement (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByAgreementWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by MSP Agreement . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByAgreementWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAgreement");

            var localVarPath = "/api/accounts/search/agreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by MSP Agreement . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByAgreementAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByAgreementAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by MSP Agreement . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByAgreementAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByAgreement");

            var localVarPath = "/api/accounts/search/agreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByEmail (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByEmailWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByEmailWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByEmail");

            var localVarPath = "/api/accounts/search/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByEmailAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByEmailAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts using all email addresses associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByEmailAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByEmail");

            var localVarPath = "/api/accounts/search/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts using the External ID related to . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByExternalId (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByExternalIdWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts using the External ID related to . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByExternalIdWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByExternalId");

            var localVarPath = "/api/accounts/search/externalid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts using the External ID related to . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByExternalIdAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByExternalIdAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts using the External ID related to . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByExternalIdAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByExternalId");

            var localVarPath = "/api/accounts/search/externalid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByName");

            var localVarPath = "/api/accounts/search/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByName");

            var localVarPath = "/api/accounts/search/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByPhone (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByPhoneWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByPhoneWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByPhone");

            var localVarPath = "/api/accounts/search/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByPhoneAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByPhoneAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts using all phone numbers associated to the account and its contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByPhoneAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByPhone");

            var localVarPath = "/api/accounts/search/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by postal code. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse AccountsSearchByPostalCode (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = AccountsSearchByPostalCodeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search accounts by postal code. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > AccountsSearchByPostalCodeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByPostalCode");

            var localVarPath = "/api/accounts/search/postalcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search accounts by postal code. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> AccountsSearchByPostalCodeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await AccountsSearchByPostalCodeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search accounts by postal code. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> AccountsSearchByPostalCodeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AccountsApi->AccountsSearchByPostalCode");

            var localVarPath = "/api/accounts/search/postalcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSearchByPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Overwrites the account document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse AccountsSetAccountDocumentFile (int? accountNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = AccountsSetAccountDocumentFileWithHttpInfo(accountNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrites the account document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > AccountsSetAccountDocumentFileWithHttpInfo (int? accountNumber, int? documentID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsSetAccountDocumentFile");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Overwrites the account document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> AccountsSetAccountDocumentFileAsync (int? accountNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await AccountsSetAccountDocumentFileAsyncWithHttpInfo(accountNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overwrites the account document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> AccountsSetAccountDocumentFileAsyncWithHttpInfo (int? accountNumber, int? documentID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsSetAccountDocumentFile");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse AccountsSetAccountDocumentFileName (int? accountNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = AccountsSetAccountDocumentFileNameWithHttpInfo(accountNumber, documentID, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > AccountsSetAccountDocumentFileNameWithHttpInfo (int? accountNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsSetAccountDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling AccountsApi->AccountsSetAccountDocumentFileName");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> AccountsSetAccountDocumentFileNameAsync (int? accountNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await AccountsSetAccountDocumentFileNameAsyncWithHttpInfo(accountNumber, documentID, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="documentID"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> AccountsSetAccountDocumentFileNameAsyncWithHttpInfo (int? accountNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsSetAccountDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling AccountsApi->AccountsSetAccountDocumentFileName");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Assigns a group to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>TsiWebAssignedMarketingGroupsResponse</returns>
        public TsiWebAssignedMarketingGroupsResponse AccountsSetAccountGroup (int? accountNumber, string group)
        {
             ApiResponse<TsiWebAssignedMarketingGroupsResponse> localVarResponse = AccountsSetAccountGroupWithHttpInfo(accountNumber, group);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a group to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingGroupsResponse</returns>
        public ApiResponse< TsiWebAssignedMarketingGroupsResponse > AccountsSetAccountGroupWithHttpInfo (int? accountNumber, string group)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountGroup");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling AccountsApi->AccountsSetAccountGroup");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingGroupsResponse)));
        }

        /// <summary>
        /// Assigns a group to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingGroupsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedMarketingGroupsResponse> AccountsSetAccountGroupAsync (int? accountNumber, string group)
        {
             ApiResponse<TsiWebAssignedMarketingGroupsResponse> localVarResponse = await AccountsSetAccountGroupAsyncWithHttpInfo(accountNumber, group);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a group to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingGroupsResponse>> AccountsSetAccountGroupAsyncWithHttpInfo (int? accountNumber, string group)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountGroup");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling AccountsApi->AccountsSetAccountGroup");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingGroupsResponse)));
        }

        /// <summary>
        /// Assigns a profile to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        public TsiWebAssignedMarketingProfilesResponse AccountsSetAccountProfile (int? accountNumber, string profile)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = AccountsSetAccountProfileWithHttpInfo(accountNumber, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a profile to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        public ApiResponse< TsiWebAssignedMarketingProfilesResponse > AccountsSetAccountProfileWithHttpInfo (int? accountNumber, string profile)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountProfile");
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling AccountsApi->AccountsSetAccountProfile");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Assigns a profile to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> AccountsSetAccountProfileAsync (int? accountNumber, string profile)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = await AccountsSetAccountProfileAsyncWithHttpInfo(accountNumber, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a profile to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> AccountsSetAccountProfileAsyncWithHttpInfo (int? accountNumber, string profile)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountProfile");
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling AccountsApi->AccountsSetAccountProfile");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Assigns a SIC code to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>TsiWebAssignedSICCodesResponse</returns>
        public TsiWebAssignedSICCodesResponse AccountsSetAccountSICCode (int? accountNumber, string code)
        {
             ApiResponse<TsiWebAssignedSICCodesResponse> localVarResponse = AccountsSetAccountSICCodeWithHttpInfo(accountNumber, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a SIC code to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>ApiResponse of TsiWebAssignedSICCodesResponse</returns>
        public ApiResponse< TsiWebAssignedSICCodesResponse > AccountsSetAccountSICCodeWithHttpInfo (int? accountNumber, string code)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountSICCode");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AccountsApi->AccountsSetAccountSICCode");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (code != null && code.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(code); // http body (model) parameter
            }
            else
            {
                localVarPostBody = code; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountSICCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedSICCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedSICCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedSICCodesResponse)));
        }

        /// <summary>
        /// Assigns a SIC code to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>Task of TsiWebAssignedSICCodesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedSICCodesResponse> AccountsSetAccountSICCodeAsync (int? accountNumber, string code)
        {
             ApiResponse<TsiWebAssignedSICCodesResponse> localVarResponse = await AccountsSetAccountSICCodeAsyncWithHttpInfo(accountNumber, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a SIC code to an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="code">The SIC code.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedSICCodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedSICCodesResponse>> AccountsSetAccountSICCodeAsyncWithHttpInfo (int? accountNumber, string code)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountSICCode");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AccountsApi->AccountsSetAccountSICCode");

            var localVarPath = "/api/accounts/{accountNumber}/marketing/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (code != null && code.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(code); // http body (model) parameter
            }
            else
            {
                localVarPostBody = code; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountSICCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedSICCodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedSICCodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedSICCodesResponse)));
        }

        /// <summary>
        /// Assigns a system to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>TsiWebAccountSystemResponse</returns>
        public TsiWebAccountSystemResponse AccountsSetAccountSystem (int? accountNumber, TsiWebAssignSystemModel system)
        {
             ApiResponse<TsiWebAccountSystemResponse> localVarResponse = AccountsSetAccountSystemWithHttpInfo(accountNumber, system);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a system to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>ApiResponse of TsiWebAccountSystemResponse</returns>
        public ApiResponse< TsiWebAccountSystemResponse > AccountsSetAccountSystemWithHttpInfo (int? accountNumber, TsiWebAssignSystemModel system)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountSystem");
            // verify the required parameter 'system' is set
            if (system == null)
                throw new ApiException(400, "Missing required parameter 'system' when calling AccountsApi->AccountsSetAccountSystem");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (system != null && system.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(system); // http body (model) parameter
            }
            else
            {
                localVarPostBody = system; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountSystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountSystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountSystemResponse)));
        }

        /// <summary>
        /// Assigns a system to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>Task of TsiWebAccountSystemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountSystemResponse> AccountsSetAccountSystemAsync (int? accountNumber, TsiWebAssignSystemModel system)
        {
             ApiResponse<TsiWebAccountSystemResponse> localVarResponse = await AccountsSetAccountSystemAsyncWithHttpInfo(accountNumber, system);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a system to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountSystemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountSystemResponse>> AccountsSetAccountSystemAsyncWithHttpInfo (int? accountNumber, TsiWebAssignSystemModel system)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetAccountSystem");
            // verify the required parameter 'system' is set
            if (system == null)
                throw new ApiException(400, "Missing required parameter 'system' when calling AccountsApi->AccountsSetAccountSystem");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (system != null && system.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(system); // http body (model) parameter
            }
            else
            {
                localVarPostBody = system; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetAccountSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountSystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountSystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountSystemResponse)));
        }

        /// <summary>
        /// Sets the default system for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>TsiWebAccountSystemResponse</returns>
        public TsiWebAccountSystemResponse AccountsSetDefaultSystem (int? accountNumber, string system)
        {
             ApiResponse<TsiWebAccountSystemResponse> localVarResponse = AccountsSetDefaultSystemWithHttpInfo(accountNumber, system);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the default system for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>ApiResponse of TsiWebAccountSystemResponse</returns>
        public ApiResponse< TsiWebAccountSystemResponse > AccountsSetDefaultSystemWithHttpInfo (int? accountNumber, string system)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetDefaultSystem");
            // verify the required parameter 'system' is set
            if (system == null)
                throw new ApiException(400, "Missing required parameter 'system' when calling AccountsApi->AccountsSetDefaultSystem");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (system != null && system.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(system); // http body (model) parameter
            }
            else
            {
                localVarPostBody = system; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetDefaultSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountSystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountSystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountSystemResponse)));
        }

        /// <summary>
        /// Sets the default system for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>Task of TsiWebAccountSystemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountSystemResponse> AccountsSetDefaultSystemAsync (int? accountNumber, string system)
        {
             ApiResponse<TsiWebAccountSystemResponse> localVarResponse = await AccountsSetDefaultSystemAsyncWithHttpInfo(accountNumber, system);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the default system for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="system">The system to make default.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountSystemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountSystemResponse>> AccountsSetDefaultSystemAsyncWithHttpInfo (int? accountNumber, string system)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetDefaultSystem");
            // verify the required parameter 'system' is set
            if (system == null)
                throw new ApiException(400, "Missing required parameter 'system' when calling AccountsApi->AccountsSetDefaultSystem");

            var localVarPath = "/api/accounts/{accountNumber}/service/systems/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (system != null && system.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(system); // http body (model) parameter
            }
            else
            {
                localVarPostBody = system; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetDefaultSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountSystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountSystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountSystemResponse)));
        }

        /// <summary>
        /// Sets the primary alternate bill to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>TsiWebBillToResponse</returns>
        public TsiWebBillToResponse AccountsSetPrimaryBillTo (int? accountNumber, int? billToID)
        {
             ApiResponse<TsiWebBillToResponse> localVarResponse = AccountsSetPrimaryBillToWithHttpInfo(accountNumber, billToID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary alternate bill to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>ApiResponse of TsiWebBillToResponse</returns>
        public ApiResponse< TsiWebBillToResponse > AccountsSetPrimaryBillToWithHttpInfo (int? accountNumber, int? billToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryBillTo");
            // verify the required parameter 'billToID' is set
            if (billToID == null)
                throw new ApiException(400, "Missing required parameter 'billToID' when calling AccountsApi->AccountsSetPrimaryBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos/{billToID}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billToID != null) localVarPathParams.Add("billToID", this.Configuration.ApiClient.ParameterToString(billToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebBillToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebBillToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebBillToResponse)));
        }

        /// <summary>
        /// Sets the primary alternate bill to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of TsiWebBillToResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebBillToResponse> AccountsSetPrimaryBillToAsync (int? accountNumber, int? billToID)
        {
             ApiResponse<TsiWebBillToResponse> localVarResponse = await AccountsSetPrimaryBillToAsyncWithHttpInfo(accountNumber, billToID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary alternate bill to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebBillToResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebBillToResponse>> AccountsSetPrimaryBillToAsyncWithHttpInfo (int? accountNumber, int? billToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryBillTo");
            // verify the required parameter 'billToID' is set
            if (billToID == null)
                throw new ApiException(400, "Missing required parameter 'billToID' when calling AccountsApi->AccountsSetPrimaryBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos/{billToID}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billToID != null) localVarPathParams.Add("billToID", this.Configuration.ApiClient.ParameterToString(billToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebBillToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebBillToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebBillToResponse)));
        }

        /// <summary>
        /// Sets the primary account fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse AccountsSetPrimaryFaxNumber (int? accountNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = AccountsSetPrimaryFaxNumberWithHttpInfo(accountNumber, phoneNumberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary account fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > AccountsSetPrimaryFaxNumberWithHttpInfo (int? accountNumber, int? phoneNumberID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryFaxNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsSetPrimaryFaxNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}/primaryfax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryFaxNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary account fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsSetPrimaryFaxNumberAsync (int? accountNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await AccountsSetPrimaryFaxNumberAsyncWithHttpInfo(accountNumber, phoneNumberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary account fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsSetPrimaryFaxNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryFaxNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsSetPrimaryFaxNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}/primaryfax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryFaxNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse AccountsSetPrimaryPhoneNumber (int? accountNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = AccountsSetPrimaryPhoneNumberWithHttpInfo(accountNumber, phoneNumberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > AccountsSetPrimaryPhoneNumberWithHttpInfo (int? accountNumber, int? phoneNumberID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsSetPrimaryPhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}/primaryphone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsSetPrimaryPhoneNumberAsync (int? accountNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await AccountsSetPrimaryPhoneNumberAsyncWithHttpInfo(accountNumber, phoneNumberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsSetPrimaryPhoneNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsSetPrimaryPhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}/primaryphone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary alternate ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>TsiWebShipToResponse</returns>
        public TsiWebShipToResponse AccountsSetPrimaryShipTo (int? accountNumber, int? shipToID)
        {
             ApiResponse<TsiWebShipToResponse> localVarResponse = AccountsSetPrimaryShipToWithHttpInfo(accountNumber, shipToID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary alternate ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>ApiResponse of TsiWebShipToResponse</returns>
        public ApiResponse< TsiWebShipToResponse > AccountsSetPrimaryShipToWithHttpInfo (int? accountNumber, int? shipToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryShipTo");
            // verify the required parameter 'shipToID' is set
            if (shipToID == null)
                throw new ApiException(400, "Missing required parameter 'shipToID' when calling AccountsApi->AccountsSetPrimaryShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos/{shipToID}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipToID != null) localVarPathParams.Add("shipToID", this.Configuration.ApiClient.ParameterToString(shipToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipToResponse)));
        }

        /// <summary>
        /// Sets the primary alternate ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of TsiWebShipToResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebShipToResponse> AccountsSetPrimaryShipToAsync (int? accountNumber, int? shipToID)
        {
             ApiResponse<TsiWebShipToResponse> localVarResponse = await AccountsSetPrimaryShipToAsyncWithHttpInfo(accountNumber, shipToID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary alternate ship to for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="shipToID">The ship to identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebShipToResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebShipToResponse>> AccountsSetPrimaryShipToAsyncWithHttpInfo (int? accountNumber, int? shipToID)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsSetPrimaryShipTo");
            // verify the required parameter 'shipToID' is set
            if (shipToID == null)
                throw new ApiException(400, "Missing required parameter 'shipToID' when calling AccountsApi->AccountsSetPrimaryShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos/{shipToID}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipToID != null) localVarPathParams.Add("shipToID", this.Configuration.ApiClient.ParameterToString(shipToID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetPrimaryShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipToResponse)));
        }

        /// <summary>
        /// Adds the co-manage direct tech to an account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>TsiWebCoManagedTechnicianResponse</returns>
        public TsiWebCoManagedTechnicianResponse AccountsSetTechAccountGroup (int? repnumber, string groupName)
        {
             ApiResponse<TsiWebCoManagedTechnicianResponse> localVarResponse = AccountsSetTechAccountGroupWithHttpInfo(repnumber, groupName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the co-manage direct tech to an account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>ApiResponse of TsiWebCoManagedTechnicianResponse</returns>
        public ApiResponse< TsiWebCoManagedTechnicianResponse > AccountsSetTechAccountGroupWithHttpInfo (int? repnumber, string groupName)
        {
            // verify the required parameter 'repnumber' is set
            if (repnumber == null)
                throw new ApiException(400, "Missing required parameter 'repnumber' when calling AccountsApi->AccountsSetTechAccountGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling AccountsApi->AccountsSetTechAccountGroup");

            var localVarPath = "/api/accounts/service/comanagedtechs/{repnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repnumber != null) localVarPathParams.Add("repnumber", this.Configuration.ApiClient.ParameterToString(repnumber)); // path parameter
            if (groupName != null && groupName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetTechAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCoManagedTechnicianResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCoManagedTechnicianResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCoManagedTechnicianResponse)));
        }

        /// <summary>
        /// Adds the co-manage direct tech to an account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>Task of TsiWebCoManagedTechnicianResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCoManagedTechnicianResponse> AccountsSetTechAccountGroupAsync (int? repnumber, string groupName)
        {
             ApiResponse<TsiWebCoManagedTechnicianResponse> localVarResponse = await AccountsSetTechAccountGroupAsyncWithHttpInfo(repnumber, groupName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds the co-manage direct tech to an account group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repnumber">The repnumber.</param>
        /// <param name="groupName">The group name.</param>
        /// <returns>Task of ApiResponse (TsiWebCoManagedTechnicianResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCoManagedTechnicianResponse>> AccountsSetTechAccountGroupAsyncWithHttpInfo (int? repnumber, string groupName)
        {
            // verify the required parameter 'repnumber' is set
            if (repnumber == null)
                throw new ApiException(400, "Missing required parameter 'repnumber' when calling AccountsApi->AccountsSetTechAccountGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling AccountsApi->AccountsSetTechAccountGroup");

            var localVarPath = "/api/accounts/service/comanagedtechs/{repnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repnumber != null) localVarPathParams.Add("repnumber", this.Configuration.ApiClient.ParameterToString(repnumber)); // path parameter
            if (groupName != null && groupName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsSetTechAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCoManagedTechnicianResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCoManagedTechnicianResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCoManagedTechnicianResponse)));
        }

        /// <summary>
        /// Updates an existing account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>TsiWebAccountResponse</returns>
        public TsiWebAccountResponse AccountsUpdateAccount (int? accountNumber, TsiWebAccount account)
        {
             ApiResponse<TsiWebAccountResponse> localVarResponse = AccountsUpdateAccountWithHttpInfo(accountNumber, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>ApiResponse of TsiWebAccountResponse</returns>
        public ApiResponse< TsiWebAccountResponse > AccountsUpdateAccountWithHttpInfo (int? accountNumber, TsiWebAccount account)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling AccountsApi->AccountsUpdateAccount");

            var localVarPath = "/api/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountResponse)));
        }

        /// <summary>
        /// Updates an existing account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>Task of TsiWebAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountResponse> AccountsUpdateAccountAsync (int? accountNumber, TsiWebAccount account)
        {
             ApiResponse<TsiWebAccountResponse> localVarResponse = await AccountsUpdateAccountAsyncWithHttpInfo(accountNumber, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="account">The account.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountResponse>> AccountsUpdateAccountAsyncWithHttpInfo (int? accountNumber, TsiWebAccount account)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateAccount");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling AccountsApi->AccountsUpdateAccount");

            var localVarPath = "/api/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountResponse)));
        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse AccountsUpdateAccountDocumentProperties (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = AccountsUpdateAccountDocumentPropertiesWithHttpInfo(accountNumber, documentID, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > AccountsUpdateAccountDocumentPropertiesWithHttpInfo (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateAccountDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsUpdateAccountDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsUpdateAccountDocumentProperties");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateAccountDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> AccountsUpdateAccountDocumentPropertiesAsync (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await AccountsUpdateAccountDocumentPropertiesAsyncWithHttpInfo(accountNumber, documentID, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> AccountsUpdateAccountDocumentPropertiesAsyncWithHttpInfo (int? accountNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateAccountDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling AccountsApi->AccountsUpdateAccountDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsUpdateAccountDocumentProperties");

            var localVarPath = "/api/accounts/{accountNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateAccountDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebAccountExternalProductResponse</returns>
        public TsiWebAccountExternalProductResponse AccountsUpdateAccountExternalProduct (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request)
        {
             ApiResponse<TsiWebAccountExternalProductResponse> localVarResponse = AccountsUpdateAccountExternalProductWithHttpInfo(accountNumber, externalproductid, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebAccountExternalProductResponse</returns>
        public ApiResponse< TsiWebAccountExternalProductResponse > AccountsUpdateAccountExternalProductWithHttpInfo (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateAccountExternalProduct");
            // verify the required parameter 'externalproductid' is set
            if (externalproductid == null)
                throw new ApiException(400, "Missing required parameter 'externalproductid' when calling AccountsApi->AccountsUpdateAccountExternalProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsUpdateAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts/{externalproductid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (externalproductid != null) localVarPathParams.Add("externalproductid", this.Configuration.ApiClient.ParameterToString(externalproductid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountExternalProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountExternalProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountExternalProductResponse)));
        }

        /// <summary>
        /// Updates the account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebAccountExternalProductResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAccountExternalProductResponse> AccountsUpdateAccountExternalProductAsync (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request)
        {
             ApiResponse<TsiWebAccountExternalProductResponse> localVarResponse = await AccountsUpdateAccountExternalProductAsyncWithHttpInfo(accountNumber, externalproductid, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the account external product. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="externalproductid">The externalproductid.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebAccountExternalProductResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAccountExternalProductResponse>> AccountsUpdateAccountExternalProductAsyncWithHttpInfo (int? accountNumber, int? externalproductid, TsiWebAccountExternalProduct request)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateAccountExternalProduct");
            // verify the required parameter 'externalproductid' is set
            if (externalproductid == null)
                throw new ApiException(400, "Missing required parameter 'externalproductid' when calling AccountsApi->AccountsUpdateAccountExternalProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->AccountsUpdateAccountExternalProduct");

            var localVarPath = "/api/accounts/{accountNumber}/service/externalproducts/{externalproductid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (externalproductid != null) localVarPathParams.Add("externalproductid", this.Configuration.ApiClient.ParameterToString(externalproductid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateAccountExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAccountExternalProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAccountExternalProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAccountExternalProductResponse)));
        }

        /// <summary>
        /// Updates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>TsiWebBillToResponse</returns>
        public TsiWebBillToResponse AccountsUpdateBillTo (int? accountNumber, int? billToID, TsiWebBillTo billTo)
        {
             ApiResponse<TsiWebBillToResponse> localVarResponse = AccountsUpdateBillToWithHttpInfo(accountNumber, billToID, billTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>ApiResponse of TsiWebBillToResponse</returns>
        public ApiResponse< TsiWebBillToResponse > AccountsUpdateBillToWithHttpInfo (int? accountNumber, int? billToID, TsiWebBillTo billTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateBillTo");
            // verify the required parameter 'billToID' is set
            if (billToID == null)
                throw new ApiException(400, "Missing required parameter 'billToID' when calling AccountsApi->AccountsUpdateBillTo");
            // verify the required parameter 'billTo' is set
            if (billTo == null)
                throw new ApiException(400, "Missing required parameter 'billTo' when calling AccountsApi->AccountsUpdateBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos/{billToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billToID != null) localVarPathParams.Add("billToID", this.Configuration.ApiClient.ParameterToString(billToID)); // path parameter
            if (billTo != null && billTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebBillToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebBillToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebBillToResponse)));
        }

        /// <summary>
        /// Updates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of TsiWebBillToResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebBillToResponse> AccountsUpdateBillToAsync (int? accountNumber, int? billToID, TsiWebBillTo billTo)
        {
             ApiResponse<TsiWebBillToResponse> localVarResponse = await AccountsUpdateBillToAsyncWithHttpInfo(accountNumber, billToID, billTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the bill to. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="billToID">The bill to identifier.</param>
        /// <param name="billTo">The bill to.</param>
        /// <returns>Task of ApiResponse (TsiWebBillToResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebBillToResponse>> AccountsUpdateBillToAsyncWithHttpInfo (int? accountNumber, int? billToID, TsiWebBillTo billTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateBillTo");
            // verify the required parameter 'billToID' is set
            if (billToID == null)
                throw new ApiException(400, "Missing required parameter 'billToID' when calling AccountsApi->AccountsUpdateBillTo");
            // verify the required parameter 'billTo' is set
            if (billTo == null)
                throw new ApiException(400, "Missing required parameter 'billTo' when calling AccountsApi->AccountsUpdateBillTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/billtos/{billToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (billToID != null) localVarPathParams.Add("billToID", this.Configuration.ApiClient.ParameterToString(billToID)); // path parameter
            if (billTo != null && billTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateBillTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebBillToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebBillToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebBillToResponse)));
        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse AccountsUpdateCustomFields (int? accountNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = AccountsUpdateCustomFieldsWithHttpInfo(accountNumber, customFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > AccountsUpdateCustomFieldsWithHttpInfo (int? accountNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling AccountsApi->AccountsUpdateCustomFields");

            var localVarPath = "/api/accounts/{accountNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> AccountsUpdateCustomFieldsAsync (int? accountNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await AccountsUpdateCustomFieldsAsyncWithHttpInfo(accountNumber, customFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> AccountsUpdateCustomFieldsAsyncWithHttpInfo (int? accountNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling AccountsApi->AccountsUpdateCustomFields");

            var localVarPath = "/api/accounts/{accountNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Change an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse AccountsUpdatePhoneNumber (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = AccountsUpdatePhoneNumberWithHttpInfo(accountNumber, phoneNumberID, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > AccountsUpdatePhoneNumberWithHttpInfo (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AccountsApi->AccountsUpdatePhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Change an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> AccountsUpdatePhoneNumberAsync (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await AccountsUpdatePhoneNumberAsyncWithHttpInfo(accountNumber, phoneNumberID, phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change an account phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> AccountsUpdatePhoneNumberAsyncWithHttpInfo (int? accountNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling AccountsApi->AccountsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling AccountsApi->AccountsUpdatePhoneNumber");

            var localVarPath = "/api/accounts/{accountNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>TsiWebShipToResponse</returns>
        public TsiWebShipToResponse AccountsUpdateShipTo (int? accountNumber, int? shipToID, TsiWebShipTo shipTo)
        {
             ApiResponse<TsiWebShipToResponse> localVarResponse = AccountsUpdateShipToWithHttpInfo(accountNumber, shipToID, shipTo);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>ApiResponse of TsiWebShipToResponse</returns>
        public ApiResponse< TsiWebShipToResponse > AccountsUpdateShipToWithHttpInfo (int? accountNumber, int? shipToID, TsiWebShipTo shipTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateShipTo");
            // verify the required parameter 'shipToID' is set
            if (shipToID == null)
                throw new ApiException(400, "Missing required parameter 'shipToID' when calling AccountsApi->AccountsUpdateShipTo");
            // verify the required parameter 'shipTo' is set
            if (shipTo == null)
                throw new ApiException(400, "Missing required parameter 'shipTo' when calling AccountsApi->AccountsUpdateShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos/{shipToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipToID != null) localVarPathParams.Add("shipToID", this.Configuration.ApiClient.ParameterToString(shipToID)); // path parameter
            if (shipTo != null && shipTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shipTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipToResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>Task of TsiWebShipToResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebShipToResponse> AccountsUpdateShipToAsync (int? accountNumber, int? shipToID, TsiWebShipTo shipTo)
        {
             ApiResponse<TsiWebShipToResponse> localVarResponse = await AccountsUpdateShipToAsyncWithHttpInfo(accountNumber, shipToID, shipTo);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="shipToID"></param>
        /// <param name="shipTo"></param>
        /// <returns>Task of ApiResponse (TsiWebShipToResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebShipToResponse>> AccountsUpdateShipToAsyncWithHttpInfo (int? accountNumber, int? shipToID, TsiWebShipTo shipTo)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->AccountsUpdateShipTo");
            // verify the required parameter 'shipToID' is set
            if (shipToID == null)
                throw new ApiException(400, "Missing required parameter 'shipToID' when calling AccountsApi->AccountsUpdateShipTo");
            // verify the required parameter 'shipTo' is set
            if (shipTo == null)
                throw new ApiException(400, "Missing required parameter 'shipTo' when calling AccountsApi->AccountsUpdateShipTo");

            var localVarPath = "/api/accounts/{accountNumber}/accounting/shiptos/{shipToID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (shipToID != null) localVarPathParams.Add("shipToID", this.Configuration.ApiClient.ParameterToString(shipToID)); // path parameter
            if (shipTo != null && shipTo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shipTo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipTo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsUpdateShipTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebShipToResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebShipToResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebShipToResponse)));
        }

    }
}
