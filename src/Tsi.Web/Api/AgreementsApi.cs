/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgreementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for Agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Gets the agreement additional charges by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>TsiWebAgreementAdditionalCharge</returns>
        TsiWebAgreementAdditionalCharge AgreementsGetAgreementAdditionalChargeByDetailId (int? agreementNumber, int? detailId);

        /// <summary>
        /// Gets the agreement additional charges by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementAdditionalCharge</returns>
        ApiResponse<TsiWebAgreementAdditionalCharge> AgreementsGetAgreementAdditionalChargeByDetailIdWithHttpInfo (int? agreementNumber, int? detailId);
        /// <summary>
        /// Gets the agreement additional charges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>List&lt;TsiWebAgreementAdditionalCharge&gt;</returns>
        List<TsiWebAgreementAdditionalCharge> AgreementsGetAgreementAdditionalCharges (int? agreementNumber);

        /// <summary>
        /// Gets the agreement additional charges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of List&lt;TsiWebAgreementAdditionalCharge&gt;</returns>
        ApiResponse<List<TsiWebAgreementAdditionalCharge>> AgreementsGetAgreementAdditionalChargesWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the agreement bill to information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>TsiWebAgreementBillTo</returns>
        TsiWebAgreementBillTo AgreementsGetAgreementBillToInformation (int? agreementNumber);

        /// <summary>
        /// Gets the agreement bill to information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementBillTo</returns>
        ApiResponse<TsiWebAgreementBillTo> AgreementsGetAgreementBillToInformationWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>List&lt;TsiWebAgreementCustomerAsset&gt;</returns>
        List<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssets (int? agreementNumber, int? accountNumber);

        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of List&lt;TsiWebAgreementCustomerAsset&gt;</returns>
        ApiResponse<List<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsWithHttpInfo (int? agreementNumber, int? accountNumber);
        /// <summary>
        /// Gets the agreement customer assets by customer asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>TsiWebAgreementCustomerAsset</returns>
        TsiWebAgreementCustomerAsset AgreementsGetAgreementCustomerAssetsByAssetID (int? agreementNumber, int? accountNumber, int? customerassetNumber);

        /// <summary>
        /// Gets the agreement customer assets by customer asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementCustomerAsset</returns>
        ApiResponse<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssetsByAssetIDWithHttpInfo (int? agreementNumber, int? accountNumber, int? customerassetNumber);
        /// <summary>
        /// Gets the agreement customer assets by provider asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>TsiWebAgreementCustomerAsset</returns>
        TsiWebAgreementCustomerAsset AgreementsGetAgreementCustomerAssetsByProviderAssetID (int? agreementNumber, int? accountNumber, int? providerAssetNumber);

        /// <summary>
        /// Gets the agreement customer assets by provider asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementCustomerAsset</returns>
        ApiResponse<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssetsByProviderAssetIDWithHttpInfo (int? agreementNumber, int? accountNumber, int? providerAssetNumber);
        /// <summary>
        /// Gets the agreement detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>TsiWebAgreementDetail</returns>
        TsiWebAgreementDetail AgreementsGetAgreementDetails (int? agreementNumber);

        /// <summary>
        /// Gets the agreement detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementDetail</returns>
        ApiResponse<TsiWebAgreementDetail> AgreementsGetAgreementDetailsWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the agreement summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>TsiWebAgreementSummary</returns>
        TsiWebAgreementSummary AgreementsGetAgreementSummary (int? agreementNumber);

        /// <summary>
        /// Gets the agreement summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>ApiResponse of TsiWebAgreementSummary</returns>
        ApiResponse<TsiWebAgreementSummary> AgreementsGetAgreementSummaryWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsGetAgreementsForAccounts (int? accountNumber, bool? activeOnly = null);

        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsGetAgreementsForAccountsWithHttpInfo (int? accountNumber, bool? activeOnly = null);
        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsGetAgreementsForAccounts_0 (int? accountNumber, bool? activeOnly);

        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsGetAgreementsForAccounts_0WithHttpInfo (int? accountNumber, bool? activeOnly);
        /// <summary>
        /// Gets the agreement covered asset type by asset type id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>TsiWebAgreementCoveredAssetType</returns>
        TsiWebAgreementCoveredAssetType AgreementsGetCoveredAssetTypeByAssetTypeId (int? agreementNumber, int? coveredAssetNumber);

        /// <summary>
        /// Gets the agreement covered asset type by asset type id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementCoveredAssetType</returns>
        ApiResponse<TsiWebAgreementCoveredAssetType> AgreementsGetCoveredAssetTypeByAssetTypeIdWithHttpInfo (int? agreementNumber, int? coveredAssetNumber);
        /// <summary>
        /// Gets the agreement covered asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>List&lt;TsiWebAgreementCoveredAssetType&gt;</returns>
        List<TsiWebAgreementCoveredAssetType> AgreementsGetCoveredAssetTypes (int? agreementNumber);

        /// <summary>
        /// Gets the agreement covered asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of List&lt;TsiWebAgreementCoveredAssetType&gt;</returns>
        ApiResponse<List<TsiWebAgreementCoveredAssetType>> AgreementsGetCoveredAssetTypesWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Search agreement by agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsSearchByAgreementNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsSearchByAgreementNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by AgreementType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsSearchByAgreementType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by AgreementType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsSearchByAgreementTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by ContractNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsSearchByContractNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by ContractNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsSearchByContractNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by Agreement End Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsSearchByEndDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by Agreement End Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsSearchByEndDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by ExternalProduct.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsSearchByExternalProduct (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by ExternalProduct.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsSearchByExternalProductWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by Agreement Start Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        TsiWebSearchAgreementResponse AgreementsSearchByStartDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by Agreement Start Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        ApiResponse<TsiWebSearchAgreementResponse> AgreementsSearchByStartDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for Agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Agreement.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Gets the agreement additional charges by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>Task of TsiWebAgreementAdditionalCharge</returns>
        System.Threading.Tasks.Task<TsiWebAgreementAdditionalCharge> AgreementsGetAgreementAdditionalChargeByDetailIdAsync (int? agreementNumber, int? detailId);

        /// <summary>
        /// Gets the agreement additional charges by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementAdditionalCharge)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementAdditionalCharge>> AgreementsGetAgreementAdditionalChargeByDetailIdAsyncWithHttpInfo (int? agreementNumber, int? detailId);
        /// <summary>
        /// Gets the agreement additional charges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of List&lt;TsiWebAgreementAdditionalCharge&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAgreementAdditionalCharge>> AgreementsGetAgreementAdditionalChargesAsync (int? agreementNumber);

        /// <summary>
        /// Gets the agreement additional charges.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAgreementAdditionalCharge&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAgreementAdditionalCharge>>> AgreementsGetAgreementAdditionalChargesAsyncWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the agreement bill to information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of TsiWebAgreementBillTo</returns>
        System.Threading.Tasks.Task<TsiWebAgreementBillTo> AgreementsGetAgreementBillToInformationAsync (int? agreementNumber);

        /// <summary>
        /// Gets the agreement bill to information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementBillTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementBillTo>> AgreementsGetAgreementBillToInformationAsyncWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>Task of List&lt;TsiWebAgreementCustomerAsset&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsAsync (int? agreementNumber, int? accountNumber);

        /// <summary>
        /// Gets the account customer assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAgreementCustomerAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAgreementCustomerAsset>>> AgreementsGetAgreementCustomerAssetsAsyncWithHttpInfo (int? agreementNumber, int? accountNumber);
        /// <summary>
        /// Gets the agreement customer assets by customer asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>Task of TsiWebAgreementCustomerAsset</returns>
        System.Threading.Tasks.Task<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssetsByAssetIDAsync (int? agreementNumber, int? accountNumber, int? customerassetNumber);

        /// <summary>
        /// Gets the agreement customer assets by customer asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementCustomerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsByAssetIDAsyncWithHttpInfo (int? agreementNumber, int? accountNumber, int? customerassetNumber);
        /// <summary>
        /// Gets the agreement customer assets by provider asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>Task of TsiWebAgreementCustomerAsset</returns>
        System.Threading.Tasks.Task<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssetsByProviderAssetIDAsync (int? agreementNumber, int? accountNumber, int? providerAssetNumber);

        /// <summary>
        /// Gets the agreement customer assets by provider asset number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementCustomerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsByProviderAssetIDAsyncWithHttpInfo (int? agreementNumber, int? accountNumber, int? providerAssetNumber);
        /// <summary>
        /// Gets the agreement detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of TsiWebAgreementDetail</returns>
        System.Threading.Tasks.Task<TsiWebAgreementDetail> AgreementsGetAgreementDetailsAsync (int? agreementNumber);

        /// <summary>
        /// Gets the agreement detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementDetail>> AgreementsGetAgreementDetailsAsyncWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the agreement summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>Task of TsiWebAgreementSummary</returns>
        System.Threading.Tasks.Task<TsiWebAgreementSummary> AgreementsGetAgreementSummaryAsync (int? agreementNumber);

        /// <summary>
        /// Gets the agreement summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementSummary>> AgreementsGetAgreementSummaryAsyncWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsGetAgreementsForAccountsAsync (int? accountNumber, bool? activeOnly = null);

        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsGetAgreementsForAccountsAsyncWithHttpInfo (int? accountNumber, bool? activeOnly = null);
        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsGetAgreementsForAccounts_0Async (int? accountNumber, bool? activeOnly);

        /// <summary>
        /// Gets the account agreements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsGetAgreementsForAccounts_0AsyncWithHttpInfo (int? accountNumber, bool? activeOnly);
        /// <summary>
        /// Gets the agreement covered asset type by asset type id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>Task of TsiWebAgreementCoveredAssetType</returns>
        System.Threading.Tasks.Task<TsiWebAgreementCoveredAssetType> AgreementsGetCoveredAssetTypeByAssetTypeIdAsync (int? agreementNumber, int? coveredAssetNumber);

        /// <summary>
        /// Gets the agreement covered asset type by asset type id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementCoveredAssetType)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementCoveredAssetType>> AgreementsGetCoveredAssetTypeByAssetTypeIdAsyncWithHttpInfo (int? agreementNumber, int? coveredAssetNumber);
        /// <summary>
        /// Gets the agreement covered asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of List&lt;TsiWebAgreementCoveredAssetType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAgreementCoveredAssetType>> AgreementsGetCoveredAssetTypesAsync (int? agreementNumber);

        /// <summary>
        /// Gets the agreement covered asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAgreementCoveredAssetType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAgreementCoveredAssetType>>> AgreementsGetCoveredAssetTypesAsyncWithHttpInfo (int? agreementNumber);
        /// <summary>
        /// Search agreement by agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByAgreementNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByAgreementNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by AgreementType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByAgreementTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by AgreementType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByAgreementTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by ContractNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByContractNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by ContractNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByContractNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by Agreement End Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByEndDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by Agreement End Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByEndDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by ExternalProduct.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByExternalProductAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by ExternalProduct.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByExternalProductAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search agreement by Agreement Start Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByStartDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search agreement by Agreement Start Date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByStartDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgreementsApi : IAgreementsApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgreementsApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgreementsApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for Agreement. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for Agreement. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AgreementsApi->AgreementsAdvancedSearch");

            var localVarPath = "/api/agreements/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Advanced search for Agreement. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for Agreement. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AgreementsApi->AgreementsAdvancedSearch");

            var localVarPath = "/api/agreements/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Gets the agreement additional charges by id 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>TsiWebAgreementAdditionalCharge</returns>
        public TsiWebAgreementAdditionalCharge AgreementsGetAgreementAdditionalChargeByDetailId (int? agreementNumber, int? detailId)
        {
             ApiResponse<TsiWebAgreementAdditionalCharge> localVarResponse = AgreementsGetAgreementAdditionalChargeByDetailIdWithHttpInfo(agreementNumber, detailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement additional charges by id 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementAdditionalCharge</returns>
        public ApiResponse< TsiWebAgreementAdditionalCharge > AgreementsGetAgreementAdditionalChargeByDetailIdWithHttpInfo (int? agreementNumber, int? detailId)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementAdditionalChargeByDetailId");
            // verify the required parameter 'detailId' is set
            if (detailId == null)
                throw new ApiException(400, "Missing required parameter 'detailId' when calling AgreementsApi->AgreementsGetAgreementAdditionalChargeByDetailId");

            var localVarPath = "/api/agreements/{agreementNumber}/additionalcharges/{detailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (detailId != null) localVarPathParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementAdditionalChargeByDetailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementAdditionalCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementAdditionalCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementAdditionalCharge)));
        }

        /// <summary>
        /// Gets the agreement additional charges by id 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>Task of TsiWebAgreementAdditionalCharge</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementAdditionalCharge> AgreementsGetAgreementAdditionalChargeByDetailIdAsync (int? agreementNumber, int? detailId)
        {
             ApiResponse<TsiWebAgreementAdditionalCharge> localVarResponse = await AgreementsGetAgreementAdditionalChargeByDetailIdAsyncWithHttpInfo(agreementNumber, detailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement additional charges by id 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="detailId">The additional charge identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementAdditionalCharge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementAdditionalCharge>> AgreementsGetAgreementAdditionalChargeByDetailIdAsyncWithHttpInfo (int? agreementNumber, int? detailId)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementAdditionalChargeByDetailId");
            // verify the required parameter 'detailId' is set
            if (detailId == null)
                throw new ApiException(400, "Missing required parameter 'detailId' when calling AgreementsApi->AgreementsGetAgreementAdditionalChargeByDetailId");

            var localVarPath = "/api/agreements/{agreementNumber}/additionalcharges/{detailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (detailId != null) localVarPathParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementAdditionalChargeByDetailId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementAdditionalCharge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementAdditionalCharge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementAdditionalCharge)));
        }

        /// <summary>
        /// Gets the agreement additional charges. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>List&lt;TsiWebAgreementAdditionalCharge&gt;</returns>
        public List<TsiWebAgreementAdditionalCharge> AgreementsGetAgreementAdditionalCharges (int? agreementNumber)
        {
             ApiResponse<List<TsiWebAgreementAdditionalCharge>> localVarResponse = AgreementsGetAgreementAdditionalChargesWithHttpInfo(agreementNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement additional charges. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of List&lt;TsiWebAgreementAdditionalCharge&gt;</returns>
        public ApiResponse< List<TsiWebAgreementAdditionalCharge> > AgreementsGetAgreementAdditionalChargesWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementAdditionalCharges");

            var localVarPath = "/api/agreements/{agreementNumber}/additionalcharges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementAdditionalCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAgreementAdditionalCharge>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAgreementAdditionalCharge>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAgreementAdditionalCharge>)));
        }

        /// <summary>
        /// Gets the agreement additional charges. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of List&lt;TsiWebAgreementAdditionalCharge&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAgreementAdditionalCharge>> AgreementsGetAgreementAdditionalChargesAsync (int? agreementNumber)
        {
             ApiResponse<List<TsiWebAgreementAdditionalCharge>> localVarResponse = await AgreementsGetAgreementAdditionalChargesAsyncWithHttpInfo(agreementNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement additional charges. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAgreementAdditionalCharge&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAgreementAdditionalCharge>>> AgreementsGetAgreementAdditionalChargesAsyncWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementAdditionalCharges");

            var localVarPath = "/api/agreements/{agreementNumber}/additionalcharges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementAdditionalCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAgreementAdditionalCharge>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAgreementAdditionalCharge>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAgreementAdditionalCharge>)));
        }

        /// <summary>
        /// Gets the agreement bill to information. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>TsiWebAgreementBillTo</returns>
        public TsiWebAgreementBillTo AgreementsGetAgreementBillToInformation (int? agreementNumber)
        {
             ApiResponse<TsiWebAgreementBillTo> localVarResponse = AgreementsGetAgreementBillToInformationWithHttpInfo(agreementNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement bill to information. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementBillTo</returns>
        public ApiResponse< TsiWebAgreementBillTo > AgreementsGetAgreementBillToInformationWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementBillToInformation");

            var localVarPath = "/api/agreements/{agreementNumber}/billto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementBillToInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementBillTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementBillTo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementBillTo)));
        }

        /// <summary>
        /// Gets the agreement bill to information. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of TsiWebAgreementBillTo</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementBillTo> AgreementsGetAgreementBillToInformationAsync (int? agreementNumber)
        {
             ApiResponse<TsiWebAgreementBillTo> localVarResponse = await AgreementsGetAgreementBillToInformationAsyncWithHttpInfo(agreementNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement bill to information. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementBillTo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementBillTo>> AgreementsGetAgreementBillToInformationAsyncWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementBillToInformation");

            var localVarPath = "/api/agreements/{agreementNumber}/billto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementBillToInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementBillTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementBillTo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementBillTo)));
        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>List&lt;TsiWebAgreementCustomerAsset&gt;</returns>
        public List<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssets (int? agreementNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebAgreementCustomerAsset>> localVarResponse = AgreementsGetAgreementCustomerAssetsWithHttpInfo(agreementNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of List&lt;TsiWebAgreementCustomerAsset&gt;</returns>
        public ApiResponse< List<TsiWebAgreementCustomerAsset> > AgreementsGetAgreementCustomerAssetsWithHttpInfo (int? agreementNumber, int? accountNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssets");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssets");

            var localVarPath = "/api/agreements/{agreementNumber}/account/{accountNumber}/customerassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementCustomerAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAgreementCustomerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAgreementCustomerAsset>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAgreementCustomerAsset>)));
        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>Task of List&lt;TsiWebAgreementCustomerAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsAsync (int? agreementNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebAgreementCustomerAsset>> localVarResponse = await AgreementsGetAgreementCustomerAssetsAsyncWithHttpInfo(agreementNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account customer assets. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAgreementCustomerAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAgreementCustomerAsset>>> AgreementsGetAgreementCustomerAssetsAsyncWithHttpInfo (int? agreementNumber, int? accountNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssets");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssets");

            var localVarPath = "/api/agreements/{agreementNumber}/account/{accountNumber}/customerassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementCustomerAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAgreementCustomerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAgreementCustomerAsset>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAgreementCustomerAsset>)));
        }

        /// <summary>
        /// Gets the agreement customer assets by customer asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>TsiWebAgreementCustomerAsset</returns>
        public TsiWebAgreementCustomerAsset AgreementsGetAgreementCustomerAssetsByAssetID (int? agreementNumber, int? accountNumber, int? customerassetNumber)
        {
             ApiResponse<TsiWebAgreementCustomerAsset> localVarResponse = AgreementsGetAgreementCustomerAssetsByAssetIDWithHttpInfo(agreementNumber, accountNumber, customerassetNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement customer assets by customer asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementCustomerAsset</returns>
        public ApiResponse< TsiWebAgreementCustomerAsset > AgreementsGetAgreementCustomerAssetsByAssetIDWithHttpInfo (int? agreementNumber, int? accountNumber, int? customerassetNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByAssetID");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByAssetID");
            // verify the required parameter 'customerassetNumber' is set
            if (customerassetNumber == null)
                throw new ApiException(400, "Missing required parameter 'customerassetNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByAssetID");

            var localVarPath = "/api/agreements/{agreementNumber}/account/{accountNumber}/customerassets/{customerassetNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (customerassetNumber != null) localVarPathParams.Add("customerassetNumber", this.Configuration.ApiClient.ParameterToString(customerassetNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementCustomerAssetsByAssetID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementCustomerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementCustomerAsset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementCustomerAsset)));
        }

        /// <summary>
        /// Gets the agreement customer assets by customer asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>Task of TsiWebAgreementCustomerAsset</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssetsByAssetIDAsync (int? agreementNumber, int? accountNumber, int? customerassetNumber)
        {
             ApiResponse<TsiWebAgreementCustomerAsset> localVarResponse = await AgreementsGetAgreementCustomerAssetsByAssetIDAsyncWithHttpInfo(agreementNumber, accountNumber, customerassetNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement customer assets by customer asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="customerassetNumber">The customer asset identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementCustomerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsByAssetIDAsyncWithHttpInfo (int? agreementNumber, int? accountNumber, int? customerassetNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByAssetID");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByAssetID");
            // verify the required parameter 'customerassetNumber' is set
            if (customerassetNumber == null)
                throw new ApiException(400, "Missing required parameter 'customerassetNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByAssetID");

            var localVarPath = "/api/agreements/{agreementNumber}/account/{accountNumber}/customerassets/{customerassetNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (customerassetNumber != null) localVarPathParams.Add("customerassetNumber", this.Configuration.ApiClient.ParameterToString(customerassetNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementCustomerAssetsByAssetID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementCustomerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementCustomerAsset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementCustomerAsset)));
        }

        /// <summary>
        /// Gets the agreement customer assets by provider asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>TsiWebAgreementCustomerAsset</returns>
        public TsiWebAgreementCustomerAsset AgreementsGetAgreementCustomerAssetsByProviderAssetID (int? agreementNumber, int? accountNumber, int? providerAssetNumber)
        {
             ApiResponse<TsiWebAgreementCustomerAsset> localVarResponse = AgreementsGetAgreementCustomerAssetsByProviderAssetIDWithHttpInfo(agreementNumber, accountNumber, providerAssetNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement customer assets by provider asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementCustomerAsset</returns>
        public ApiResponse< TsiWebAgreementCustomerAsset > AgreementsGetAgreementCustomerAssetsByProviderAssetIDWithHttpInfo (int? agreementNumber, int? accountNumber, int? providerAssetNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByProviderAssetID");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByProviderAssetID");
            // verify the required parameter 'providerAssetNumber' is set
            if (providerAssetNumber == null)
                throw new ApiException(400, "Missing required parameter 'providerAssetNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByProviderAssetID");

            var localVarPath = "/api/agreements/{agreementNumber}/account/{accountNumber}/customerassets/provider/{providerAssetNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (providerAssetNumber != null) localVarPathParams.Add("providerAssetNumber", this.Configuration.ApiClient.ParameterToString(providerAssetNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementCustomerAssetsByProviderAssetID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementCustomerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementCustomerAsset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementCustomerAsset)));
        }

        /// <summary>
        /// Gets the agreement customer assets by provider asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>Task of TsiWebAgreementCustomerAsset</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementCustomerAsset> AgreementsGetAgreementCustomerAssetsByProviderAssetIDAsync (int? agreementNumber, int? accountNumber, int? providerAssetNumber)
        {
             ApiResponse<TsiWebAgreementCustomerAsset> localVarResponse = await AgreementsGetAgreementCustomerAssetsByProviderAssetIDAsyncWithHttpInfo(agreementNumber, accountNumber, providerAssetNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement customer assets by provider asset number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="accountNumber">The agreement identifier number</param>
        /// <param name="providerAssetNumber">The customer provider asset identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementCustomerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementCustomerAsset>> AgreementsGetAgreementCustomerAssetsByProviderAssetIDAsyncWithHttpInfo (int? agreementNumber, int? accountNumber, int? providerAssetNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByProviderAssetID");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByProviderAssetID");
            // verify the required parameter 'providerAssetNumber' is set
            if (providerAssetNumber == null)
                throw new ApiException(400, "Missing required parameter 'providerAssetNumber' when calling AgreementsApi->AgreementsGetAgreementCustomerAssetsByProviderAssetID");

            var localVarPath = "/api/agreements/{agreementNumber}/account/{accountNumber}/customerassets/provider/{providerAssetNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (providerAssetNumber != null) localVarPathParams.Add("providerAssetNumber", this.Configuration.ApiClient.ParameterToString(providerAssetNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementCustomerAssetsByProviderAssetID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementCustomerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementCustomerAsset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementCustomerAsset)));
        }

        /// <summary>
        /// Gets the agreement detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>TsiWebAgreementDetail</returns>
        public TsiWebAgreementDetail AgreementsGetAgreementDetails (int? agreementNumber)
        {
             ApiResponse<TsiWebAgreementDetail> localVarResponse = AgreementsGetAgreementDetailsWithHttpInfo(agreementNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementDetail</returns>
        public ApiResponse< TsiWebAgreementDetail > AgreementsGetAgreementDetailsWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementDetails");

            var localVarPath = "/api/agreements/{agreementNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementDetail)));
        }

        /// <summary>
        /// Gets the agreement detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of TsiWebAgreementDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementDetail> AgreementsGetAgreementDetailsAsync (int? agreementNumber)
        {
             ApiResponse<TsiWebAgreementDetail> localVarResponse = await AgreementsGetAgreementDetailsAsyncWithHttpInfo(agreementNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementDetail>> AgreementsGetAgreementDetailsAsyncWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementDetails");

            var localVarPath = "/api/agreements/{agreementNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementDetail)));
        }

        /// <summary>
        /// Gets the agreement summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>TsiWebAgreementSummary</returns>
        public TsiWebAgreementSummary AgreementsGetAgreementSummary (int? agreementNumber)
        {
             ApiResponse<TsiWebAgreementSummary> localVarResponse = AgreementsGetAgreementSummaryWithHttpInfo(agreementNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>ApiResponse of TsiWebAgreementSummary</returns>
        public ApiResponse< TsiWebAgreementSummary > AgreementsGetAgreementSummaryWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementSummary");

            var localVarPath = "/api/agreements/{agreementNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementSummary)));
        }

        /// <summary>
        /// Gets the agreement summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>Task of TsiWebAgreementSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementSummary> AgreementsGetAgreementSummaryAsync (int? agreementNumber)
        {
             ApiResponse<TsiWebAgreementSummary> localVarResponse = await AgreementsGetAgreementSummaryAsyncWithHttpInfo(agreementNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementSummary>> AgreementsGetAgreementSummaryAsyncWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetAgreementSummary");

            var localVarPath = "/api/agreements/{agreementNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementSummary)));
        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsGetAgreementsForAccounts (int? accountNumber, bool? activeOnly = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsGetAgreementsForAccountsWithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsGetAgreementsForAccountsWithHttpInfo (int? accountNumber, bool? activeOnly = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementsForAccounts");

            var localVarPath = "/api/agreements/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementsForAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsGetAgreementsForAccountsAsync (int? accountNumber, bool? activeOnly = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsGetAgreementsForAccountsAsyncWithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsGetAgreementsForAccountsAsyncWithHttpInfo (int? accountNumber, bool? activeOnly = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementsForAccounts");

            var localVarPath = "/api/agreements/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementsForAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsGetAgreementsForAccounts_0 (int? accountNumber, bool? activeOnly)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsGetAgreementsForAccounts_0WithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsGetAgreementsForAccounts_0WithHttpInfo (int? accountNumber, bool? activeOnly)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementsForAccounts_0");
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling AgreementsApi->AgreementsGetAgreementsForAccounts_0");

            var localVarPath = "/api/agreements/account/{accountNumber}/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementsForAccounts_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsGetAgreementsForAccounts_0Async (int? accountNumber, bool? activeOnly)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsGetAgreementsForAccounts_0AsyncWithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account agreements. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number</param>
        /// <param name="activeOnly">if set to true returns only the active agreements.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsGetAgreementsForAccounts_0AsyncWithHttpInfo (int? accountNumber, bool? activeOnly)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AgreementsApi->AgreementsGetAgreementsForAccounts_0");
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling AgreementsApi->AgreementsGetAgreementsForAccounts_0");

            var localVarPath = "/api/agreements/account/{accountNumber}/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetAgreementsForAccounts_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Gets the agreement covered asset type by asset type id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>TsiWebAgreementCoveredAssetType</returns>
        public TsiWebAgreementCoveredAssetType AgreementsGetCoveredAssetTypeByAssetTypeId (int? agreementNumber, int? coveredAssetNumber)
        {
             ApiResponse<TsiWebAgreementCoveredAssetType> localVarResponse = AgreementsGetCoveredAssetTypeByAssetTypeIdWithHttpInfo(agreementNumber, coveredAssetNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement covered asset type by asset type id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>ApiResponse of TsiWebAgreementCoveredAssetType</returns>
        public ApiResponse< TsiWebAgreementCoveredAssetType > AgreementsGetCoveredAssetTypeByAssetTypeIdWithHttpInfo (int? agreementNumber, int? coveredAssetNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetCoveredAssetTypeByAssetTypeId");
            // verify the required parameter 'coveredAssetNumber' is set
            if (coveredAssetNumber == null)
                throw new ApiException(400, "Missing required parameter 'coveredAssetNumber' when calling AgreementsApi->AgreementsGetCoveredAssetTypeByAssetTypeId");

            var localVarPath = "/api/agreements/{agreementNumber}/coveredassets/{coveredAssetNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (coveredAssetNumber != null) localVarPathParams.Add("coveredAssetNumber", this.Configuration.ApiClient.ParameterToString(coveredAssetNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetCoveredAssetTypeByAssetTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementCoveredAssetType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementCoveredAssetType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementCoveredAssetType)));
        }

        /// <summary>
        /// Gets the agreement covered asset type by asset type id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>Task of TsiWebAgreementCoveredAssetType</returns>
        public async System.Threading.Tasks.Task<TsiWebAgreementCoveredAssetType> AgreementsGetCoveredAssetTypeByAssetTypeIdAsync (int? agreementNumber, int? coveredAssetNumber)
        {
             ApiResponse<TsiWebAgreementCoveredAssetType> localVarResponse = await AgreementsGetCoveredAssetTypeByAssetTypeIdAsyncWithHttpInfo(agreementNumber, coveredAssetNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement covered asset type by asset type id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <param name="coveredAssetNumber">The covered asset type identifier number</param>
        /// <returns>Task of ApiResponse (TsiWebAgreementCoveredAssetType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAgreementCoveredAssetType>> AgreementsGetCoveredAssetTypeByAssetTypeIdAsyncWithHttpInfo (int? agreementNumber, int? coveredAssetNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetCoveredAssetTypeByAssetTypeId");
            // verify the required parameter 'coveredAssetNumber' is set
            if (coveredAssetNumber == null)
                throw new ApiException(400, "Missing required parameter 'coveredAssetNumber' when calling AgreementsApi->AgreementsGetCoveredAssetTypeByAssetTypeId");

            var localVarPath = "/api/agreements/{agreementNumber}/coveredassets/{coveredAssetNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter
            if (coveredAssetNumber != null) localVarPathParams.Add("coveredAssetNumber", this.Configuration.ApiClient.ParameterToString(coveredAssetNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetCoveredAssetTypeByAssetTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAgreementCoveredAssetType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAgreementCoveredAssetType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAgreementCoveredAssetType)));
        }

        /// <summary>
        /// Gets the agreement covered asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>List&lt;TsiWebAgreementCoveredAssetType&gt;</returns>
        public List<TsiWebAgreementCoveredAssetType> AgreementsGetCoveredAssetTypes (int? agreementNumber)
        {
             ApiResponse<List<TsiWebAgreementCoveredAssetType>> localVarResponse = AgreementsGetCoveredAssetTypesWithHttpInfo(agreementNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the agreement covered asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>ApiResponse of List&lt;TsiWebAgreementCoveredAssetType&gt;</returns>
        public ApiResponse< List<TsiWebAgreementCoveredAssetType> > AgreementsGetCoveredAssetTypesWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetCoveredAssetTypes");

            var localVarPath = "/api/agreements/{agreementNumber}/coveredassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetCoveredAssetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAgreementCoveredAssetType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAgreementCoveredAssetType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAgreementCoveredAssetType>)));
        }

        /// <summary>
        /// Gets the agreement covered asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of List&lt;TsiWebAgreementCoveredAssetType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAgreementCoveredAssetType>> AgreementsGetCoveredAssetTypesAsync (int? agreementNumber)
        {
             ApiResponse<List<TsiWebAgreementCoveredAssetType>> localVarResponse = await AgreementsGetCoveredAssetTypesAsyncWithHttpInfo(agreementNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the agreement covered asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementNumber">The agreement identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAgreementCoveredAssetType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAgreementCoveredAssetType>>> AgreementsGetCoveredAssetTypesAsyncWithHttpInfo (int? agreementNumber)
        {
            // verify the required parameter 'agreementNumber' is set
            if (agreementNumber == null)
                throw new ApiException(400, "Missing required parameter 'agreementNumber' when calling AgreementsApi->AgreementsGetCoveredAssetTypes");

            var localVarPath = "/api/agreements/{agreementNumber}/coveredassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agreementNumber != null) localVarPathParams.Add("agreementNumber", this.Configuration.ApiClient.ParameterToString(agreementNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsGetCoveredAssetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAgreementCoveredAssetType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAgreementCoveredAssetType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAgreementCoveredAssetType>)));
        }

        /// <summary>
        /// Search agreement by agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsSearchByAgreementNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsSearchByAgreementNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search agreement by agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsSearchByAgreementNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByAgreementNumber");

            var localVarPath = "/api/agreements/search/agreementnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByAgreementNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByAgreementNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsSearchByAgreementNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search agreement by agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByAgreementNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByAgreementNumber");

            var localVarPath = "/api/agreements/search/agreementnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByAgreementNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by AgreementType. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsSearchByAgreementType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsSearchByAgreementTypeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search agreement by AgreementType. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsSearchByAgreementTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByAgreementType");

            var localVarPath = "/api/agreements/search/agreementtype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByAgreementType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by AgreementType. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByAgreementTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsSearchByAgreementTypeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search agreement by AgreementType. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByAgreementTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByAgreementType");

            var localVarPath = "/api/agreements/search/agreementtype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByAgreementType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by ContractNumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsSearchByContractNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsSearchByContractNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search agreement by ContractNumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsSearchByContractNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByContractNumber");

            var localVarPath = "/api/agreements/search/contractnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByContractNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by ContractNumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByContractNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsSearchByContractNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search agreement by ContractNumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByContractNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByContractNumber");

            var localVarPath = "/api/agreements/search/contractnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByContractNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by Agreement End Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsSearchByEndDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsSearchByEndDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search agreement by Agreement End Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsSearchByEndDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AgreementsApi->AgreementsSearchByEndDate");

            var localVarPath = "/api/agreements/search/enddate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByEndDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by Agreement End Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByEndDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsSearchByEndDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search agreement by Agreement End Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByEndDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AgreementsApi->AgreementsSearchByEndDate");

            var localVarPath = "/api/agreements/search/enddate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByEndDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by ExternalProduct. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsSearchByExternalProduct (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsSearchByExternalProductWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search agreement by ExternalProduct. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsSearchByExternalProductWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByExternalProduct");

            var localVarPath = "/api/agreements/search/externalproduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by ExternalProduct. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByExternalProductAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsSearchByExternalProductAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search agreement by ExternalProduct. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByExternalProductAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling AgreementsApi->AgreementsSearchByExternalProduct");

            var localVarPath = "/api/agreements/search/externalproduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by Agreement Start Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAgreementResponse</returns>
        public TsiWebSearchAgreementResponse AgreementsSearchByStartDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = AgreementsSearchByStartDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search agreement by Agreement Start Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAgreementResponse</returns>
        public ApiResponse< TsiWebSearchAgreementResponse > AgreementsSearchByStartDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AgreementsApi->AgreementsSearchByStartDate");

            var localVarPath = "/api/agreements/search/startdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByStartDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

        /// <summary>
        /// Search agreement by Agreement Start Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAgreementResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAgreementResponse> AgreementsSearchByStartDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAgreementResponse> localVarResponse = await AgreementsSearchByStartDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search agreement by Agreement Start Date. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAgreementResponse>> AgreementsSearchByStartDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AgreementsApi->AgreementsSearchByStartDate");

            var localVarPath = "/api/agreements/search/startdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgreementsSearchByStartDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAgreementResponse)));
        }

    }
}
