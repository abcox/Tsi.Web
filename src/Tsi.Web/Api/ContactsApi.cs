/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for contacts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for contacts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>TsiWebContactResponse</returns>
        TsiWebContactResponse ContactsCreateContact (TsiWebCreateContactModel model);

        /// <summary>
        /// Creates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        ApiResponse<TsiWebContactResponse> ContactsCreateContactWithHttpInfo (TsiWebCreateContactModel model);
        /// <summary>
        /// Creates the contact journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>TsiWebJournalEntryResponse</returns>
        TsiWebJournalEntryResponse ContactsCreateContactJournalEntry (int? contactNumber, TsiWebContactJournalEntryModel model);

        /// <summary>
        /// Creates the contact journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>ApiResponse of TsiWebJournalEntryResponse</returns>
        ApiResponse<TsiWebJournalEntryResponse> ContactsCreateContactJournalEntryWithHttpInfo (int? contactNumber, TsiWebContactJournalEntryModel model);
        /// <summary>
        /// Creates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>TsiWebEmailAddressResponse</returns>
        TsiWebEmailAddressResponse ContactsCreateEmail (int? contactNumber, TsiWebEmailAddress email);

        /// <summary>
        /// Creates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>ApiResponse of TsiWebEmailAddressResponse</returns>
        ApiResponse<TsiWebEmailAddressResponse> ContactsCreateEmailWithHttpInfo (int? contactNumber, TsiWebEmailAddress email);
        /// <summary>
        /// Creates a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse ContactsCreatePhoneNumber (int? contactNumber, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Creates a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> ContactsCreatePhoneNumberWithHttpInfo (int? contactNumber, TsiWebPhoneNumber phoneNumber);
        /// <summary>
        /// Deletes a group from the contact.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContactsDeleteContactGroup (int? contactNumber, string id);

        /// <summary>
        /// Deletes a group from the contact.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContactsDeleteContactGroupWithHttpInfo (int? contactNumber, string id);
        /// <summary>
        /// Deletes a profile from the contact.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContactsDeleteContactProfile (int? contactNumber, string id);

        /// <summary>
        /// Deletes a profile from the contact.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContactsDeleteContactProfileWithHttpInfo (int? contactNumber, string id);
        /// <summary>
        /// Deletes the contact email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContactsDeleteEmail (int? contactNumber, int? id);

        /// <summary>
        /// Deletes the contact email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContactsDeleteEmailWithHttpInfo (int? contactNumber, int? id);
        /// <summary>
        /// Deletes the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContactsDeletePhoneNumber (int? contactNumber, int? id);

        /// <summary>
        /// Deletes the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContactsDeletePhoneNumberWithHttpInfo (int? contactNumber, int? id);
        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsGetAccountContacts (int? accountNumber, bool? activeOnly = null);

        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsGetAccountContactsWithHttpInfo (int? accountNumber, bool? activeOnly = null);
        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsGetAccountContacts_0 (int? accountNumber, bool? activeOnly);

        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsGetAccountContacts_0WithHttpInfo (int? accountNumber, bool? activeOnly);
        /// <summary>
        /// Gets a collection of groups assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        List<TsiWebAssignedMarketingGroup> ContactsGetAssignedGroups (int? contactNumber);

        /// <summary>
        /// Gets a collection of groups assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        ApiResponse<List<TsiWebAssignedMarketingGroup>> ContactsGetAssignedGroupsWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets a collection of profiles assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        List<TsiWebAssignedMarketingProfile> ContactsGetAssignedProfiles (int? contactNumber);

        /// <summary>
        /// Gets a collection of profiles assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        ApiResponse<List<TsiWebAssignedMarketingProfile>> ContactsGetAssignedProfilesWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ContactsGetContacTasks (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ContactsGetContacTasksWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Contact completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ContactsGetContactCompletedTasks (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Contact completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ContactsGetContactCompletedTasksWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>TsiWebContactDetail</returns>
        TsiWebContactDetail ContactsGetContactDetail (int? contactNumber);

        /// <summary>
        /// Gets the contact detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>ApiResponse of TsiWebContactDetail</returns>
        ApiResponse<TsiWebContactDetail> ContactsGetContactDetailWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the contact documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        TsiWebDocumentsResponse ContactsGetContactDocuments (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the contact documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        ApiResponse<TsiWebDocumentsResponse> ContactsGetContactDocumentsWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Contact incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ContactsGetContactIncompleteTasks (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Contact incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ContactsGetContactIncompleteTasksWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        TsiWebJournalEntriesResponse ContactsGetContactJournalEntries (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        ApiResponse<TsiWebJournalEntriesResponse> ContactsGetContactJournalEntriesWithHttpInfo (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        TsiWebJournalEntriesResponse ContactsGetContactJournalEntries_0 (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        ApiResponse<TsiWebJournalEntriesResponse> ContactsGetContactJournalEntries_0WithHttpInfo (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>TsiWebContactSummary</returns>
        TsiWebContactSummary ContactsGetContactSummary (int? contactNumber);

        /// <summary>
        /// Gets the contact summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>ApiResponse of TsiWebContactSummary</returns>
        ApiResponse<TsiWebContactSummary> ContactsGetContactSummaryWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the custom fields for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> ContactsGetCustomFields (int? contactNumber);

        /// <summary>
        /// Gets the custom fields for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> ContactsGetCustomFieldsWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>TsiWebEmailAddress</returns>
        TsiWebEmailAddress ContactsGetEmail (int? contactNumber, int? emailAddressID);

        /// <summary>
        /// Gets the contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>ApiResponse of TsiWebEmailAddress</returns>
        ApiResponse<TsiWebEmailAddress> ContactsGetEmailWithHttpInfo (int? contactNumber, int? emailAddressID);
        /// <summary>
        /// Gets the contact email addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>List&lt;TsiWebEmailAddress&gt;</returns>
        List<TsiWebEmailAddress> ContactsGetEmails (int? contactNumber);

        /// <summary>
        /// Gets the contact email addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebEmailAddress&gt;</returns>
        ApiResponse<List<TsiWebEmailAddress>> ContactsGetEmailsWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumber</returns>
        TsiWebPhoneNumber ContactsGetPhoneNumber (int? contactNumber, int? phoneNumberID);

        /// <summary>
        /// Gets the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumber</returns>
        ApiResponse<TsiWebPhoneNumber> ContactsGetPhoneNumberWithHttpInfo (int? contactNumber, int? phoneNumberID);
        /// <summary>
        /// Gets the contact phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>List&lt;TsiWebPhoneNumber&gt;</returns>
        List<TsiWebPhoneNumber> ContactsGetPhoneNumbers (int? contactNumber);

        /// <summary>
        /// Gets the contact phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneNumber&gt;</returns>
        ApiResponse<List<TsiWebPhoneNumber>> ContactsGetPhoneNumbersWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Links the existing contact to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebContactResponse</returns>
        TsiWebContactResponse ContactsLinkContact (int? contactNumber, int? accountNumber);

        /// <summary>
        /// Links the existing contact to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        ApiResponse<TsiWebContactResponse> ContactsLinkContactWithHttpInfo (int? contactNumber, int? accountNumber);
        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByCustomField (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByEmail (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByEmailWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by first name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByFirstName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by first name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByFirstNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts with the full name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByFirstNameSoundsLike (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts with the full name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByFirstNameSoundsLikeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByLastName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByLastNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts with the last name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByLastNameSoundsLike (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts with the last name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByLastNameSoundsLikeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse ContactsSearchByPhoneNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> ContactsSearchByPhoneNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Sets the account primary contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>TsiWebContactResponse</returns>
        TsiWebContactResponse ContactsSetAccountPrimaryContact (int? contactNumber, int? accountNumber);

        /// <summary>
        /// Sets the account primary contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        ApiResponse<TsiWebContactResponse> ContactsSetAccountPrimaryContactWithHttpInfo (int? contactNumber, int? accountNumber);
        /// <summary>
        /// Assigns a group to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>TsiWebAssignedMarketingGroupsResponse</returns>
        TsiWebAssignedMarketingGroupsResponse ContactsSetContactGroup (int? contactNumber, string group);

        /// <summary>
        /// Assigns a group to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingGroupsResponse</returns>
        ApiResponse<TsiWebAssignedMarketingGroupsResponse> ContactsSetContactGroupWithHttpInfo (int? contactNumber, string group);
        /// <summary>
        /// Assigns a profile to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        TsiWebAssignedMarketingProfilesResponse ContactsSetContactProfile (int? contactNumber, string profile);

        /// <summary>
        /// Assigns a profile to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        ApiResponse<TsiWebAssignedMarketingProfilesResponse> ContactsSetContactProfileWithHttpInfo (int? contactNumber, string profile);
        /// <summary>
        /// Sets the primary contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>TsiWebEmailAddressResponse</returns>
        TsiWebEmailAddressResponse ContactsSetPrimaryEmail (int? contactNumber, int? emailAddressID);

        /// <summary>
        /// Sets the primary contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>ApiResponse of TsiWebEmailAddressResponse</returns>
        ApiResponse<TsiWebEmailAddressResponse> ContactsSetPrimaryEmailWithHttpInfo (int? contactNumber, int? emailAddressID);
        /// <summary>
        /// Sets the primary contact fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse ContactsSetPrimaryFaxNumber (int? contactNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary contact fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> ContactsSetPrimaryFaxNumberWithHttpInfo (int? contactNumber, int? phoneNumberID);
        /// <summary>
        /// Sets the primary contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse ContactsSetPrimaryPhoneNumber (int? contactNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> ContactsSetPrimaryPhoneNumberWithHttpInfo (int? contactNumber, int? phoneNumberID);
        /// <summary>
        /// Updates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>TsiWebContactResponse</returns>
        TsiWebContactResponse ContactsUpdateContact (int? contactNumber, TsiWebContact contact);

        /// <summary>
        /// Updates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        ApiResponse<TsiWebContactResponse> ContactsUpdateContactWithHttpInfo (int? contactNumber, TsiWebContact contact);
        /// <summary>
        /// Updates the contacts custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse ContactsUpdateCustomFields (int? contactNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the contacts custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> ContactsUpdateCustomFieldsWithHttpInfo (int? contactNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>TsiWebEmailAddressResponse</returns>
        TsiWebEmailAddressResponse ContactsUpdateEmail (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email);

        /// <summary>
        /// Updates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>ApiResponse of TsiWebEmailAddressResponse</returns>
        ApiResponse<TsiWebEmailAddressResponse> ContactsUpdateEmailWithHttpInfo (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email);
        /// <summary>
        /// Changes a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        TsiWebPhoneNumberResponse ContactsUpdatePhoneNumber (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Changes a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        ApiResponse<TsiWebPhoneNumberResponse> ContactsUpdatePhoneNumberWithHttpInfo (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for contacts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for contacts.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebContactResponse> ContactsCreateContactAsync (TsiWebCreateContactModel model);

        /// <summary>
        /// Creates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsCreateContactAsyncWithHttpInfo (TsiWebCreateContactModel model);
        /// <summary>
        /// Creates the contact journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of TsiWebJournalEntryResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalEntryResponse> ContactsCreateContactJournalEntryAsync (int? contactNumber, TsiWebContactJournalEntryModel model);

        /// <summary>
        /// Creates the contact journal entry.
        /// </summary>
        /// <remarks>
        /// Creates journal entries that will not be flagged as system genertated only.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntryResponse>> ContactsCreateContactJournalEntryAsyncWithHttpInfo (int? contactNumber, TsiWebContactJournalEntryModel model);
        /// <summary>
        /// Creates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of TsiWebEmailAddressResponse</returns>
        System.Threading.Tasks.Task<TsiWebEmailAddressResponse> ContactsCreateEmailAsync (int? contactNumber, TsiWebEmailAddress email);

        /// <summary>
        /// Creates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddressResponse>> ContactsCreateEmailAsyncWithHttpInfo (int? contactNumber, TsiWebEmailAddress email);
        /// <summary>
        /// Creates a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsCreatePhoneNumberAsync (int? contactNumber, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Creates a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsCreatePhoneNumberAsyncWithHttpInfo (int? contactNumber, TsiWebPhoneNumber phoneNumber);
        /// <summary>
        /// Deletes a group from the contact.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContactsDeleteContactGroupAsync (int? contactNumber, string id);

        /// <summary>
        /// Deletes a group from the contact.
        /// </summary>
        /// <remarks>
        /// The group must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeleteContactGroupAsyncWithHttpInfo (int? contactNumber, string id);
        /// <summary>
        /// Deletes a profile from the contact.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContactsDeleteContactProfileAsync (int? contactNumber, string id);

        /// <summary>
        /// Deletes a profile from the contact.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeleteContactProfileAsyncWithHttpInfo (int? contactNumber, string id);
        /// <summary>
        /// Deletes the contact email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContactsDeleteEmailAsync (int? contactNumber, int? id);

        /// <summary>
        /// Deletes the contact email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeleteEmailAsyncWithHttpInfo (int? contactNumber, int? id);
        /// <summary>
        /// Deletes the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContactsDeletePhoneNumberAsync (int? contactNumber, int? id);

        /// <summary>
        /// Deletes the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeletePhoneNumberAsyncWithHttpInfo (int? contactNumber, int? id);
        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsGetAccountContactsAsync (int? accountNumber, bool? activeOnly = null);

        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsGetAccountContactsAsyncWithHttpInfo (int? accountNumber, bool? activeOnly = null);
        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsGetAccountContacts_0Async (int? accountNumber, bool? activeOnly);

        /// <summary>
        /// Gets the account contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsGetAccountContacts_0AsyncWithHttpInfo (int? accountNumber, bool? activeOnly);
        /// <summary>
        /// Gets a collection of groups assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAssignedMarketingGroup>> ContactsGetAssignedGroupsAsync (int? contactNumber);

        /// <summary>
        /// Gets a collection of groups assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingGroup>>> ContactsGetAssignedGroupsAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets a collection of profiles assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAssignedMarketingProfile>> ContactsGetAssignedProfilesAsync (int? contactNumber);

        /// <summary>
        /// Gets a collection of profiles assigned to the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingProfile>>> ContactsGetAssignedProfilesAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ContactsGetContacTasksAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ContactsGetContacTasksAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Contact completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ContactsGetContactCompletedTasksAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Contact completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ContactsGetContactCompletedTasksAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of TsiWebContactDetail</returns>
        System.Threading.Tasks.Task<TsiWebContactDetail> ContactsGetContactDetailAsync (int? contactNumber);

        /// <summary>
        /// Gets the contact detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContactDetail>> ContactsGetContactDetailAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the contact documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentsResponse> ContactsGetContactDocumentsAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the contact documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> ContactsGetContactDocumentsAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Contact incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ContactsGetContactIncompleteTasksAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Contact incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ContactsGetContactIncompleteTasksAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> ContactsGetContactJournalEntriesAsync (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> ContactsGetContactJournalEntriesAsyncWithHttpInfo (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> ContactsGetContactJournalEntries_0Async (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the contact journal entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> ContactsGetContactJournalEntries_0AsyncWithHttpInfo (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the contact summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of TsiWebContactSummary</returns>
        System.Threading.Tasks.Task<TsiWebContactSummary> ContactsGetContactSummaryAsync (int? contactNumber);

        /// <summary>
        /// Gets the contact summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContactSummary>> ContactsGetContactSummaryAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the custom fields for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> ContactsGetCustomFieldsAsync (int? contactNumber);

        /// <summary>
        /// Gets the custom fields for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> ContactsGetCustomFieldsAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of TsiWebEmailAddress</returns>
        System.Threading.Tasks.Task<TsiWebEmailAddress> ContactsGetEmailAsync (int? contactNumber, int? emailAddressID);

        /// <summary>
        /// Gets the contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddress>> ContactsGetEmailAsyncWithHttpInfo (int? contactNumber, int? emailAddressID);
        /// <summary>
        /// Gets the contact email addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of List&lt;TsiWebEmailAddress&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebEmailAddress>> ContactsGetEmailsAsync (int? contactNumber);

        /// <summary>
        /// Gets the contact email addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebEmailAddress&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebEmailAddress>>> ContactsGetEmailsAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumber</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumber> ContactsGetPhoneNumberAsync (int? contactNumber, int? phoneNumberID);

        /// <summary>
        /// Gets the contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumber>> ContactsGetPhoneNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID);
        /// <summary>
        /// Gets the contact phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of List&lt;TsiWebPhoneNumber&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPhoneNumber>> ContactsGetPhoneNumbersAsync (int? contactNumber);

        /// <summary>
        /// Gets the contact phone numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneNumber&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneNumber>>> ContactsGetPhoneNumbersAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Links the existing contact to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebContactResponse> ContactsLinkContactAsync (int? contactNumber, int? accountNumber);

        /// <summary>
        /// Links the existing contact to the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsLinkContactAsyncWithHttpInfo (int? contactNumber, int? accountNumber);
        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Accounts using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByEmailAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByEmailAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by first name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByFirstNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by first name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByFirstNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts with the full name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByFirstNameSoundsLikeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts with the full name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByFirstNameSoundsLikeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByLastNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByLastNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts with the last name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByLastNameSoundsLikeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts with the last name that sounds like.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByLastNameSoundsLikeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches contacts by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByPhoneNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches contacts by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByPhoneNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Sets the account primary contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebContactResponse> ContactsSetAccountPrimaryContactAsync (int? contactNumber, int? accountNumber);

        /// <summary>
        /// Sets the account primary contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsSetAccountPrimaryContactAsyncWithHttpInfo (int? contactNumber, int? accountNumber);
        /// <summary>
        /// Assigns a group to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingGroupsResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedMarketingGroupsResponse> ContactsSetContactGroupAsync (int? contactNumber, string group);

        /// <summary>
        /// Assigns a group to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingGroupsResponse>> ContactsSetContactGroupAsyncWithHttpInfo (int? contactNumber, string group);
        /// <summary>
        /// Assigns a profile to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> ContactsSetContactProfileAsync (int? contactNumber, string profile);

        /// <summary>
        /// Assigns a profile to a contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> ContactsSetContactProfileAsyncWithHttpInfo (int? contactNumber, string profile);
        /// <summary>
        /// Sets the primary contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of TsiWebEmailAddressResponse</returns>
        System.Threading.Tasks.Task<TsiWebEmailAddressResponse> ContactsSetPrimaryEmailAsync (int? contactNumber, int? emailAddressID);

        /// <summary>
        /// Sets the primary contact email address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddressResponse>> ContactsSetPrimaryEmailAsyncWithHttpInfo (int? contactNumber, int? emailAddressID);
        /// <summary>
        /// Sets the primary contact fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsSetPrimaryFaxNumberAsync (int? contactNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary contact fax number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsSetPrimaryFaxNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID);
        /// <summary>
        /// Sets the primary contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsSetPrimaryPhoneNumberAsync (int? contactNumber, int? phoneNumberID);

        /// <summary>
        /// Sets the primary contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsSetPrimaryPhoneNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID);
        /// <summary>
        /// Updates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebContactResponse> ContactsUpdateContactAsync (int? contactNumber, TsiWebContact contact);

        /// <summary>
        /// Updates the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsUpdateContactAsyncWithHttpInfo (int? contactNumber, TsiWebContact contact);
        /// <summary>
        /// Updates the contacts custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> ContactsUpdateCustomFieldsAsync (int? contactNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the contacts custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> ContactsUpdateCustomFieldsAsyncWithHttpInfo (int? contactNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of TsiWebEmailAddressResponse</returns>
        System.Threading.Tasks.Task<TsiWebEmailAddressResponse> ContactsUpdateEmailAsync (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email);

        /// <summary>
        /// Updates the email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddressResponse>> ContactsUpdateEmailAsyncWithHttpInfo (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email);
        /// <summary>
        /// Changes a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsUpdatePhoneNumberAsync (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);

        /// <summary>
        /// Changes a contact phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsUpdatePhoneNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for contacts. Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for contacts. Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ContactsApi->ContactsAdvancedSearch");

            var localVarPath = "/api/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Advanced search for contacts. Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for contacts. Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ContactsApi->ContactsAdvancedSearch");

            var localVarPath = "/api/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Creates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>TsiWebContactResponse</returns>
        public TsiWebContactResponse ContactsCreateContact (TsiWebCreateContactModel model)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = ContactsCreateContactWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        public ApiResponse< TsiWebContactResponse > ContactsCreateContactWithHttpInfo (TsiWebCreateContactModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContactsApi->ContactsCreateContact");

            var localVarPath = "/api/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Creates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContactResponse> ContactsCreateContactAsync (TsiWebCreateContactModel model)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = await ContactsCreateContactAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsCreateContactAsyncWithHttpInfo (TsiWebCreateContactModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContactsApi->ContactsCreateContact");

            var localVarPath = "/api/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Creates the contact journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>TsiWebJournalEntryResponse</returns>
        public TsiWebJournalEntryResponse ContactsCreateContactJournalEntry (int? contactNumber, TsiWebContactJournalEntryModel model)
        {
             ApiResponse<TsiWebJournalEntryResponse> localVarResponse = ContactsCreateContactJournalEntryWithHttpInfo(contactNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the contact journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>ApiResponse of TsiWebJournalEntryResponse</returns>
        public ApiResponse< TsiWebJournalEntryResponse > ContactsCreateContactJournalEntryWithHttpInfo (int? contactNumber, TsiWebContactJournalEntryModel model)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsCreateContactJournalEntry");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContactsApi->ContactsCreateContactJournalEntry");

            var localVarPath = "/api/contacts/{contactNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreateContactJournalEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntryResponse)));
        }

        /// <summary>
        /// Creates the contact journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of TsiWebJournalEntryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalEntryResponse> ContactsCreateContactJournalEntryAsync (int? contactNumber, TsiWebContactJournalEntryModel model)
        {
             ApiResponse<TsiWebJournalEntryResponse> localVarResponse = await ContactsCreateContactJournalEntryAsyncWithHttpInfo(contactNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the contact journal entry. Creates journal entries that will not be flagged as system genertated only.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="model">The journal entry.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntryResponse>> ContactsCreateContactJournalEntryAsyncWithHttpInfo (int? contactNumber, TsiWebContactJournalEntryModel model)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsCreateContactJournalEntry");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContactsApi->ContactsCreateContactJournalEntry");

            var localVarPath = "/api/contacts/{contactNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreateContactJournalEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntryResponse)));
        }

        /// <summary>
        /// Creates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>TsiWebEmailAddressResponse</returns>
        public TsiWebEmailAddressResponse ContactsCreateEmail (int? contactNumber, TsiWebEmailAddress email)
        {
             ApiResponse<TsiWebEmailAddressResponse> localVarResponse = ContactsCreateEmailWithHttpInfo(contactNumber, email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>ApiResponse of TsiWebEmailAddressResponse</returns>
        public ApiResponse< TsiWebEmailAddressResponse > ContactsCreateEmailWithHttpInfo (int? contactNumber, TsiWebEmailAddress email)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsCreateEmail");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsCreateEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddressResponse)));
        }

        /// <summary>
        /// Creates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of TsiWebEmailAddressResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebEmailAddressResponse> ContactsCreateEmailAsync (int? contactNumber, TsiWebEmailAddress email)
        {
             ApiResponse<TsiWebEmailAddressResponse> localVarResponse = await ContactsCreateEmailAsyncWithHttpInfo(contactNumber, email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddressResponse>> ContactsCreateEmailAsyncWithHttpInfo (int? contactNumber, TsiWebEmailAddress email)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsCreateEmail");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsCreateEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddressResponse)));
        }

        /// <summary>
        /// Creates a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse ContactsCreatePhoneNumber (int? contactNumber, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = ContactsCreatePhoneNumberWithHttpInfo(contactNumber, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > ContactsCreatePhoneNumberWithHttpInfo (int? contactNumber, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsCreatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling ContactsApi->ContactsCreatePhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Creates a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsCreatePhoneNumberAsync (int? contactNumber, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await ContactsCreatePhoneNumberAsyncWithHttpInfo(contactNumber, phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsCreatePhoneNumberAsyncWithHttpInfo (int? contactNumber, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsCreatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling ContactsApi->ContactsCreatePhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsCreatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Deletes a group from the contact. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContactsDeleteContactGroup (int? contactNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContactsDeleteContactGroupWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a group from the contact. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContactsDeleteContactGroupWithHttpInfo (int? contactNumber, string id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeleteContactGroup");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeleteContactGroup");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a group from the contact. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContactsDeleteContactGroupAsync (int? contactNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContactsDeleteContactGroupAsyncWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a group from the contact. The group must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The group to remove. (Must be url encoded)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeleteContactGroupAsyncWithHttpInfo (int? contactNumber, string id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeleteContactGroup");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeleteContactGroup");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a profile from the contact. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContactsDeleteContactProfile (int? contactNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContactsDeleteContactProfileWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a profile from the contact. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContactsDeleteContactProfileWithHttpInfo (int? contactNumber, string id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeleteContactProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeleteContactProfile");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContactProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a profile from the contact. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContactsDeleteContactProfileAsync (int? contactNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContactsDeleteContactProfileAsyncWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a profile from the contact. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeleteContactProfileAsyncWithHttpInfo (int? contactNumber, string id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeleteContactProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeleteContactProfile");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContactProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the contact email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContactsDeleteEmail (int? contactNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContactsDeleteEmailWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the contact email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContactsDeleteEmailWithHttpInfo (int? contactNumber, int? id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeleteEmail");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeleteEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the contact email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContactsDeleteEmailAsync (int? contactNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContactsDeleteEmailAsyncWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the contact email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="id">The email address identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeleteEmailAsyncWithHttpInfo (int? contactNumber, int? id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeleteEmail");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeleteEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContactsDeletePhoneNumber (int? contactNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContactsDeletePhoneNumberWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContactsDeletePhoneNumberWithHttpInfo (int? contactNumber, int? id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeletePhoneNumber");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeletePhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeletePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContactsDeletePhoneNumberAsync (int? contactNumber, int? id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContactsDeletePhoneNumberAsyncWithHttpInfo(contactNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContactsDeletePhoneNumberAsyncWithHttpInfo (int? contactNumber, int? id)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsDeletePhoneNumber");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsDeletePhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeletePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsGetAccountContacts (int? accountNumber, bool? activeOnly = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsGetAccountContactsWithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsGetAccountContactsWithHttpInfo (int? accountNumber, bool? activeOnly = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsGetAccountContacts");

            var localVarPath = "/api/contacts/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAccountContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsGetAccountContactsAsync (int? accountNumber, bool? activeOnly = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsGetAccountContactsAsyncWithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsGetAccountContactsAsyncWithHttpInfo (int? accountNumber, bool? activeOnly = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsGetAccountContacts");

            var localVarPath = "/api/contacts/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAccountContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsGetAccountContacts_0 (int? accountNumber, bool? activeOnly)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsGetAccountContacts_0WithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsGetAccountContacts_0WithHttpInfo (int? accountNumber, bool? activeOnly)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsGetAccountContacts_0");
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling ContactsApi->ContactsGetAccountContacts_0");

            var localVarPath = "/api/contacts/account/{accountNumber}/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAccountContacts_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsGetAccountContacts_0Async (int? accountNumber, bool? activeOnly)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsGetAccountContacts_0AsyncWithHttpInfo(accountNumber, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account contacts. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="activeOnly">If set to true returns only the active Contacts.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsGetAccountContacts_0AsyncWithHttpInfo (int? accountNumber, bool? activeOnly)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsGetAccountContacts_0");
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling ContactsApi->ContactsGetAccountContacts_0");

            var localVarPath = "/api/contacts/account/{accountNumber}/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAccountContacts_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets a collection of groups assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        public List<TsiWebAssignedMarketingGroup> ContactsGetAssignedGroups (int? contactNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingGroup>> localVarResponse = ContactsGetAssignedGroupsWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of groups assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        public ApiResponse< List<TsiWebAssignedMarketingGroup> > ContactsGetAssignedGroupsWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetAssignedGroups");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAssignedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingGroup>)));
        }

        /// <summary>
        /// Gets a collection of groups assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAssignedMarketingGroup>> ContactsGetAssignedGroupsAsync (int? contactNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingGroup>> localVarResponse = await ContactsGetAssignedGroupsAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of groups assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingGroup>>> ContactsGetAssignedGroupsAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetAssignedGroups");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAssignedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingGroup>)));
        }

        /// <summary>
        /// Gets a collection of profiles assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        public List<TsiWebAssignedMarketingProfile> ContactsGetAssignedProfiles (int? contactNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingProfile>> localVarResponse = ContactsGetAssignedProfilesWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a collection of profiles assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        public ApiResponse< List<TsiWebAssignedMarketingProfile> > ContactsGetAssignedProfilesWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetAssignedProfiles");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAssignedProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingProfile>)));
        }

        /// <summary>
        /// Gets a collection of profiles assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of List&lt;TsiWebAssignedMarketingProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAssignedMarketingProfile>> ContactsGetAssignedProfilesAsync (int? contactNumber)
        {
             ApiResponse<List<TsiWebAssignedMarketingProfile>> localVarResponse = await ContactsGetAssignedProfilesAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a collection of profiles assigned to the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssignedMarketingProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssignedMarketingProfile>>> ContactsGetAssignedProfilesAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetAssignedProfiles");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetAssignedProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssignedMarketingProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssignedMarketingProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssignedMarketingProfile>)));
        }

        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ContactsGetContacTasks (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ContactsGetContacTasksWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ContactsGetContacTasksWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContacTasks");

            var localVarPath = "/api/contacts/{ContactNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("ContactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContacTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ContactsGetContacTasksAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ContactsGetContacTasksAsyncWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Contact tasks.Includes both completed and incomplete tasks If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ContactsGetContacTasksAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContacTasks");

            var localVarPath = "/api/contacts/{ContactNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("ContactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContacTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Contact completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ContactsGetContactCompletedTasks (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ContactsGetContactCompletedTasksWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Contact completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ContactsGetContactCompletedTasksWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactCompletedTasks");

            var localVarPath = "/api/contacts/{ContactNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("ContactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Contact completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ContactsGetContactCompletedTasksAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ContactsGetContactCompletedTasksAsyncWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Contact completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ContactsGetContactCompletedTasksAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactCompletedTasks");

            var localVarPath = "/api/contacts/{ContactNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("ContactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the contact detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>TsiWebContactDetail</returns>
        public TsiWebContactDetail ContactsGetContactDetail (int? contactNumber)
        {
             ApiResponse<TsiWebContactDetail> localVarResponse = ContactsGetContactDetailWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>ApiResponse of TsiWebContactDetail</returns>
        public ApiResponse< TsiWebContactDetail > ContactsGetContactDetailWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactDetail");

            var localVarPath = "/api/contacts/{contactNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactDetail)));
        }

        /// <summary>
        /// Gets the contact detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of TsiWebContactDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebContactDetail> ContactsGetContactDetailAsync (int? contactNumber)
        {
             ApiResponse<TsiWebContactDetail> localVarResponse = await ContactsGetContactDetailAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContactDetail>> ContactsGetContactDetailAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactDetail");

            var localVarPath = "/api/contacts/{contactNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactDetail)));
        }

        /// <summary>
        /// Gets the contact documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        public TsiWebDocumentsResponse ContactsGetContactDocuments (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = ContactsGetContactDocumentsWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        public ApiResponse< TsiWebDocumentsResponse > ContactsGetContactDocumentsWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactDocuments");

            var localVarPath = "/api/contacts/{contactNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the contact documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentsResponse> ContactsGetContactDocumentsAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = await ContactsGetContactDocumentsAsyncWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> ContactsGetContactDocumentsAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactDocuments");

            var localVarPath = "/api/contacts/{contactNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the Contact incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ContactsGetContactIncompleteTasks (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ContactsGetContactIncompleteTasksWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Contact incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ContactsGetContactIncompleteTasksWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactIncompleteTasks");

            var localVarPath = "/api/contacts/{ContactNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("ContactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Contact incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ContactsGetContactIncompleteTasksAsync (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ContactsGetContactIncompleteTasksAsyncWithHttpInfo(contactNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Contact incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The Contact number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ContactsGetContactIncompleteTasksAsyncWithHttpInfo (int? contactNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactIncompleteTasks");

            var localVarPath = "/api/contacts/{ContactNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("ContactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        public TsiWebJournalEntriesResponse ContactsGetContactJournalEntries (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = ContactsGetContactJournalEntriesWithHttpInfo(contactNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        public ApiResponse< TsiWebJournalEntriesResponse > ContactsGetContactJournalEntriesWithHttpInfo (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactJournalEntries");

            var localVarPath = "/api/contacts/{contactNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactJournalEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> ContactsGetContactJournalEntriesAsync (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = await ContactsGetContactJournalEntriesAsyncWithHttpInfo(contactNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries. (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> ContactsGetContactJournalEntriesAsyncWithHttpInfo (int? contactNumber, bool? excludeSystemEntries = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactJournalEntries");

            var localVarPath = "/api/contacts/{contactNumber}/journalentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactJournalEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebJournalEntriesResponse</returns>
        public TsiWebJournalEntriesResponse ContactsGetContactJournalEntries_0 (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = ContactsGetContactJournalEntries_0WithHttpInfo(contactNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebJournalEntriesResponse</returns>
        public ApiResponse< TsiWebJournalEntriesResponse > ContactsGetContactJournalEntries_0WithHttpInfo (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactJournalEntries_0");
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling ContactsApi->ContactsGetContactJournalEntries_0");

            var localVarPath = "/api/contacts/{contactNumber}/journalentries/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactJournalEntries_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebJournalEntriesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalEntriesResponse> ContactsGetContactJournalEntries_0Async (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebJournalEntriesResponse> localVarResponse = await ContactsGetContactJournalEntries_0AsyncWithHttpInfo(contactNumber, excludeSystemEntries, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact journal entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="excludeSystemEntries">If false includes system entries.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebJournalEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalEntriesResponse>> ContactsGetContactJournalEntries_0AsyncWithHttpInfo (int? contactNumber, bool? excludeSystemEntries, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactJournalEntries_0");
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling ContactsApi->ContactsGetContactJournalEntries_0");

            var localVarPath = "/api/contacts/{contactNumber}/journalentries/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactJournalEntries_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalEntriesResponse)));
        }

        /// <summary>
        /// Gets the contact summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>TsiWebContactSummary</returns>
        public TsiWebContactSummary ContactsGetContactSummary (int? contactNumber)
        {
             ApiResponse<TsiWebContactSummary> localVarResponse = ContactsGetContactSummaryWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>ApiResponse of TsiWebContactSummary</returns>
        public ApiResponse< TsiWebContactSummary > ContactsGetContactSummaryWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactSummary");

            var localVarPath = "/api/contacts/{contactNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactSummary)));
        }

        /// <summary>
        /// Gets the contact summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of TsiWebContactSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebContactSummary> ContactsGetContactSummaryAsync (int? contactNumber)
        {
             ApiResponse<TsiWebContactSummary> localVarResponse = await ContactsGetContactSummaryAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContactSummary>> ContactsGetContactSummaryAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetContactSummary");

            var localVarPath = "/api/contacts/{contactNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactSummary)));
        }

        /// <summary>
        /// Gets the custom fields for the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> ContactsGetCustomFields (int? contactNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = ContactsGetCustomFieldsWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > ContactsGetCustomFieldsWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetCustomFields");

            var localVarPath = "/api/contacts/{contactNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> ContactsGetCustomFieldsAsync (int? contactNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await ContactsGetCustomFieldsAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> ContactsGetCustomFieldsAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetCustomFields");

            var localVarPath = "/api/contacts/{contactNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>TsiWebEmailAddress</returns>
        public TsiWebEmailAddress ContactsGetEmail (int? contactNumber, int? emailAddressID)
        {
             ApiResponse<TsiWebEmailAddress> localVarResponse = ContactsGetEmailWithHttpInfo(contactNumber, emailAddressID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>ApiResponse of TsiWebEmailAddress</returns>
        public ApiResponse< TsiWebEmailAddress > ContactsGetEmailWithHttpInfo (int? contactNumber, int? emailAddressID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetEmail");
            // verify the required parameter 'emailAddressID' is set
            if (emailAddressID == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressID' when calling ContactsApi->ContactsGetEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails/{emailAddressID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (emailAddressID != null) localVarPathParams.Add("emailAddressID", this.Configuration.ApiClient.ParameterToString(emailAddressID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddress)));
        }

        /// <summary>
        /// Gets the contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of TsiWebEmailAddress</returns>
        public async System.Threading.Tasks.Task<TsiWebEmailAddress> ContactsGetEmailAsync (int? contactNumber, int? emailAddressID)
        {
             ApiResponse<TsiWebEmailAddress> localVarResponse = await ContactsGetEmailAsyncWithHttpInfo(contactNumber, emailAddressID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddress>> ContactsGetEmailAsyncWithHttpInfo (int? contactNumber, int? emailAddressID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetEmail");
            // verify the required parameter 'emailAddressID' is set
            if (emailAddressID == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressID' when calling ContactsApi->ContactsGetEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails/{emailAddressID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (emailAddressID != null) localVarPathParams.Add("emailAddressID", this.Configuration.ApiClient.ParameterToString(emailAddressID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddress)));
        }

        /// <summary>
        /// Gets the contact email addresses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>List&lt;TsiWebEmailAddress&gt;</returns>
        public List<TsiWebEmailAddress> ContactsGetEmails (int? contactNumber)
        {
             ApiResponse<List<TsiWebEmailAddress>> localVarResponse = ContactsGetEmailsWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact email addresses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebEmailAddress&gt;</returns>
        public ApiResponse< List<TsiWebEmailAddress> > ContactsGetEmailsWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetEmails");

            var localVarPath = "/api/contacts/{contactNumber}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebEmailAddress>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebEmailAddress>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebEmailAddress>)));
        }

        /// <summary>
        /// Gets the contact email addresses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of List&lt;TsiWebEmailAddress&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebEmailAddress>> ContactsGetEmailsAsync (int? contactNumber)
        {
             ApiResponse<List<TsiWebEmailAddress>> localVarResponse = await ContactsGetEmailsAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact email addresses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebEmailAddress&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebEmailAddress>>> ContactsGetEmailsAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetEmails");

            var localVarPath = "/api/contacts/{contactNumber}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebEmailAddress>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebEmailAddress>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebEmailAddress>)));
        }

        /// <summary>
        /// Gets the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumber</returns>
        public TsiWebPhoneNumber ContactsGetPhoneNumber (int? contactNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumber> localVarResponse = ContactsGetPhoneNumberWithHttpInfo(contactNumber, phoneNumberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumber</returns>
        public ApiResponse< TsiWebPhoneNumber > ContactsGetPhoneNumberWithHttpInfo (int? contactNumber, int? phoneNumberID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsGetPhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumber)));
        }

        /// <summary>
        /// Gets the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumber</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumber> ContactsGetPhoneNumberAsync (int? contactNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumber> localVarResponse = await ContactsGetPhoneNumberAsyncWithHttpInfo(contactNumber, phoneNumberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumber>> ContactsGetPhoneNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsGetPhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumber)));
        }

        /// <summary>
        /// Gets the contact phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>List&lt;TsiWebPhoneNumber&gt;</returns>
        public List<TsiWebPhoneNumber> ContactsGetPhoneNumbers (int? contactNumber)
        {
             ApiResponse<List<TsiWebPhoneNumber>> localVarResponse = ContactsGetPhoneNumbersWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneNumber&gt;</returns>
        public ApiResponse< List<TsiWebPhoneNumber> > ContactsGetPhoneNumbersWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetPhoneNumbers");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneNumber>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneNumber>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneNumber>)));
        }

        /// <summary>
        /// Gets the contact phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of List&lt;TsiWebPhoneNumber&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPhoneNumber>> ContactsGetPhoneNumbersAsync (int? contactNumber)
        {
             ApiResponse<List<TsiWebPhoneNumber>> localVarResponse = await ContactsGetPhoneNumbersAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact phone numbers. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneNumber&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneNumber>>> ContactsGetPhoneNumbersAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsGetPhoneNumbers");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetPhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneNumber>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneNumber>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneNumber>)));
        }

        /// <summary>
        /// Links the existing contact to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebContactResponse</returns>
        public TsiWebContactResponse ContactsLinkContact (int? contactNumber, int? accountNumber)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = ContactsLinkContactWithHttpInfo(contactNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Links the existing contact to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        public ApiResponse< TsiWebContactResponse > ContactsLinkContactWithHttpInfo (int? contactNumber, int? accountNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsLinkContact");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsLinkContact");

            var localVarPath = "/api/contacts/{contactNumber}/accounts/{accountNumber}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsLinkContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Links the existing contact to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContactResponse> ContactsLinkContactAsync (int? contactNumber, int? accountNumber)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = await ContactsLinkContactAsyncWithHttpInfo(contactNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Links the existing contact to the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsLinkContactAsyncWithHttpInfo (int? contactNumber, int? accountNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsLinkContact");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsLinkContact");

            var localVarPath = "/api/contacts/{contactNumber}/accounts/{accountNumber}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsLinkContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByCustomField (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByCustomFieldWithHttpInfo(searchModel, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'searchModel' is set
            if (searchModel == null)
                throw new ApiException(400, "Missing required parameter 'searchModel' when calling ContactsApi->ContactsSearchByCustomField");

            var localVarPath = "/api/contacts/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (searchModel != null && searchModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByCustomFieldAsyncWithHttpInfo(searchModel, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Accounts using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'searchModel' is set
            if (searchModel == null)
                throw new ApiException(400, "Missing required parameter 'searchModel' when calling ContactsApi->ContactsSearchByCustomField");

            var localVarPath = "/api/contacts/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (searchModel != null && searchModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByEmail (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByEmailWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches contacts by email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByEmailWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByEmail");

            var localVarPath = "/api/contacts/search/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByEmailAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByEmailAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches contacts by email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByEmailAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByEmail");

            var localVarPath = "/api/contacts/search/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by first name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByFirstName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByFirstNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches contacts by first name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByFirstNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByFirstName");

            var localVarPath = "/api/contacts/search/firstname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByFirstName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by first name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByFirstNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByFirstNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches contacts by first name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByFirstNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByFirstName");

            var localVarPath = "/api/contacts/search/firstname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByFirstName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts with the full name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByFirstNameSoundsLike (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByFirstNameSoundsLikeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches contacts with the full name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByFirstNameSoundsLikeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByFirstNameSoundsLike");

            var localVarPath = "/api/contacts/search/firstname/soundslike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByFirstNameSoundsLike", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts with the full name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByFirstNameSoundsLikeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByFirstNameSoundsLikeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches contacts with the full name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByFirstNameSoundsLikeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByFirstNameSoundsLike");

            var localVarPath = "/api/contacts/search/firstname/soundslike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByFirstNameSoundsLike", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by last name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByLastName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByLastNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches contacts by last name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByLastNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByLastName");

            var localVarPath = "/api/contacts/search/lastname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByLastName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by last name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByLastNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByLastNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches contacts by last name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByLastNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByLastName");

            var localVarPath = "/api/contacts/search/lastname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByLastName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts with the last name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByLastNameSoundsLike (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByLastNameSoundsLikeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches contacts with the last name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByLastNameSoundsLikeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByLastNameSoundsLike");

            var localVarPath = "/api/contacts/search/lastname/soundslike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByLastNameSoundsLike", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts with the last name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByLastNameSoundsLikeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByLastNameSoundsLikeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches contacts with the last name that sounds like. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByLastNameSoundsLikeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByLastNameSoundsLike");

            var localVarPath = "/api/contacts/search/lastname/soundslike";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByLastNameSoundsLike", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse ContactsSearchByPhoneNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = ContactsSearchByPhoneNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches contacts by phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > ContactsSearchByPhoneNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByPhoneNumber");

            var localVarPath = "/api/contacts/search/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Searches contacts by phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> ContactsSearchByPhoneNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await ContactsSearchByPhoneNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches contacts by phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> ContactsSearchByPhoneNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContactsApi->ContactsSearchByPhoneNumber");

            var localVarPath = "/api/contacts/search/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSearchByPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Sets the account primary contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>TsiWebContactResponse</returns>
        public TsiWebContactResponse ContactsSetAccountPrimaryContact (int? contactNumber, int? accountNumber)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = ContactsSetAccountPrimaryContactWithHttpInfo(contactNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the account primary contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        public ApiResponse< TsiWebContactResponse > ContactsSetAccountPrimaryContactWithHttpInfo (int? contactNumber, int? accountNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetAccountPrimaryContact");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsSetAccountPrimaryContact");

            var localVarPath = "/api/contacts/{contactNumber}/account/{accountNumber}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetAccountPrimaryContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Sets the account primary contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContactResponse> ContactsSetAccountPrimaryContactAsync (int? contactNumber, int? accountNumber)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = await ContactsSetAccountPrimaryContactAsyncWithHttpInfo(contactNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the account primary contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsSetAccountPrimaryContactAsyncWithHttpInfo (int? contactNumber, int? accountNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetAccountPrimaryContact");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContactsApi->ContactsSetAccountPrimaryContact");

            var localVarPath = "/api/contacts/{contactNumber}/account/{accountNumber}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetAccountPrimaryContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Assigns a group to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>TsiWebAssignedMarketingGroupsResponse</returns>
        public TsiWebAssignedMarketingGroupsResponse ContactsSetContactGroup (int? contactNumber, string group)
        {
             ApiResponse<TsiWebAssignedMarketingGroupsResponse> localVarResponse = ContactsSetContactGroupWithHttpInfo(contactNumber, group);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a group to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingGroupsResponse</returns>
        public ApiResponse< TsiWebAssignedMarketingGroupsResponse > ContactsSetContactGroupWithHttpInfo (int? contactNumber, string group)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetContactGroup");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling ContactsApi->ContactsSetContactGroup");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingGroupsResponse)));
        }

        /// <summary>
        /// Assigns a group to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingGroupsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedMarketingGroupsResponse> ContactsSetContactGroupAsync (int? contactNumber, string group)
        {
             ApiResponse<TsiWebAssignedMarketingGroupsResponse> localVarResponse = await ContactsSetContactGroupAsyncWithHttpInfo(contactNumber, group);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a group to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="group">The group to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingGroupsResponse>> ContactsSetContactGroupAsyncWithHttpInfo (int? contactNumber, string group)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetContactGroup");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling ContactsApi->ContactsSetContactGroup");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingGroupsResponse)));
        }

        /// <summary>
        /// Assigns a profile to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        public TsiWebAssignedMarketingProfilesResponse ContactsSetContactProfile (int? contactNumber, string profile)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = ContactsSetContactProfileWithHttpInfo(contactNumber, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a profile to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        public ApiResponse< TsiWebAssignedMarketingProfilesResponse > ContactsSetContactProfileWithHttpInfo (int? contactNumber, string profile)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetContactProfile");
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ContactsApi->ContactsSetContactProfile");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetContactProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Assigns a profile to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> ContactsSetContactProfileAsync (int? contactNumber, string profile)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = await ContactsSetContactProfileAsyncWithHttpInfo(contactNumber, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a profile to a contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> ContactsSetContactProfileAsyncWithHttpInfo (int? contactNumber, string profile)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetContactProfile");
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ContactsApi->ContactsSetContactProfile");

            var localVarPath = "/api/contacts/{contactNumber}/marketing/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetContactProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Sets the primary contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>TsiWebEmailAddressResponse</returns>
        public TsiWebEmailAddressResponse ContactsSetPrimaryEmail (int? contactNumber, int? emailAddressID)
        {
             ApiResponse<TsiWebEmailAddressResponse> localVarResponse = ContactsSetPrimaryEmailWithHttpInfo(contactNumber, emailAddressID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>ApiResponse of TsiWebEmailAddressResponse</returns>
        public ApiResponse< TsiWebEmailAddressResponse > ContactsSetPrimaryEmailWithHttpInfo (int? contactNumber, int? emailAddressID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetPrimaryEmail");
            // verify the required parameter 'emailAddressID' is set
            if (emailAddressID == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressID' when calling ContactsApi->ContactsSetPrimaryEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails/{emailAddressID}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (emailAddressID != null) localVarPathParams.Add("emailAddressID", this.Configuration.ApiClient.ParameterToString(emailAddressID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetPrimaryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddressResponse)));
        }

        /// <summary>
        /// Sets the primary contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of TsiWebEmailAddressResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebEmailAddressResponse> ContactsSetPrimaryEmailAsync (int? contactNumber, int? emailAddressID)
        {
             ApiResponse<TsiWebEmailAddressResponse> localVarResponse = await ContactsSetPrimaryEmailAsyncWithHttpInfo(contactNumber, emailAddressID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary contact email address. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddressResponse>> ContactsSetPrimaryEmailAsyncWithHttpInfo (int? contactNumber, int? emailAddressID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetPrimaryEmail");
            // verify the required parameter 'emailAddressID' is set
            if (emailAddressID == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressID' when calling ContactsApi->ContactsSetPrimaryEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails/{emailAddressID}/primary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (emailAddressID != null) localVarPathParams.Add("emailAddressID", this.Configuration.ApiClient.ParameterToString(emailAddressID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetPrimaryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddressResponse)));
        }

        /// <summary>
        /// Sets the primary contact fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse ContactsSetPrimaryFaxNumber (int? contactNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = ContactsSetPrimaryFaxNumberWithHttpInfo(contactNumber, phoneNumberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary contact fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > ContactsSetPrimaryFaxNumberWithHttpInfo (int? contactNumber, int? phoneNumberID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetPrimaryFaxNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsSetPrimaryFaxNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}/primaryfax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetPrimaryFaxNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary contact fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsSetPrimaryFaxNumberAsync (int? contactNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await ContactsSetPrimaryFaxNumberAsyncWithHttpInfo(contactNumber, phoneNumberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary contact fax number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The fax number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsSetPrimaryFaxNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetPrimaryFaxNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsSetPrimaryFaxNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}/primaryfax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetPrimaryFaxNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse ContactsSetPrimaryPhoneNumber (int? contactNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = ContactsSetPrimaryPhoneNumberWithHttpInfo(contactNumber, phoneNumberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the primary contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > ContactsSetPrimaryPhoneNumberWithHttpInfo (int? contactNumber, int? phoneNumberID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetPrimaryPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsSetPrimaryPhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}/primaryphone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetPrimaryPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Sets the primary contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsSetPrimaryPhoneNumberAsync (int? contactNumber, int? phoneNumberID)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await ContactsSetPrimaryPhoneNumberAsyncWithHttpInfo(contactNumber, phoneNumberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the primary contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsSetPrimaryPhoneNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsSetPrimaryPhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsSetPrimaryPhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}/primaryphone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsSetPrimaryPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Updates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>TsiWebContactResponse</returns>
        public TsiWebContactResponse ContactsUpdateContact (int? contactNumber, TsiWebContact contact)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = ContactsUpdateContactWithHttpInfo(contactNumber, contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>ApiResponse of TsiWebContactResponse</returns>
        public ApiResponse< TsiWebContactResponse > ContactsUpdateContactWithHttpInfo (int? contactNumber, TsiWebContact contact)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdateContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactsApi->ContactsUpdateContact");

            var localVarPath = "/api/contacts/{contactNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Updates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>Task of TsiWebContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContactResponse> ContactsUpdateContactAsync (int? contactNumber, TsiWebContact contact)
        {
             ApiResponse<TsiWebContactResponse> localVarResponse = await ContactsUpdateContactAsyncWithHttpInfo(contactNumber, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the contact. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="contact">The contact.</param>
        /// <returns>Task of ApiResponse (TsiWebContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContactResponse>> ContactsUpdateContactAsyncWithHttpInfo (int? contactNumber, TsiWebContact contact)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdateContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactsApi->ContactsUpdateContact");

            var localVarPath = "/api/contacts/{contactNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContactResponse)));
        }

        /// <summary>
        /// Updates the contacts custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse ContactsUpdateCustomFields (int? contactNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = ContactsUpdateCustomFieldsWithHttpInfo(contactNumber, customFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contacts custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > ContactsUpdateCustomFieldsWithHttpInfo (int? contactNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling ContactsApi->ContactsUpdateCustomFields");

            var localVarPath = "/api/contacts/{contactNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the contacts custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> ContactsUpdateCustomFieldsAsync (int? contactNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await ContactsUpdateCustomFieldsAsyncWithHttpInfo(contactNumber, customFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the contacts custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> ContactsUpdateCustomFieldsAsyncWithHttpInfo (int? contactNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling ContactsApi->ContactsUpdateCustomFields");

            var localVarPath = "/api/contacts/{contactNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>TsiWebEmailAddressResponse</returns>
        public TsiWebEmailAddressResponse ContactsUpdateEmail (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email)
        {
             ApiResponse<TsiWebEmailAddressResponse> localVarResponse = ContactsUpdateEmailWithHttpInfo(contactNumber, emailAddressID, email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>ApiResponse of TsiWebEmailAddressResponse</returns>
        public ApiResponse< TsiWebEmailAddressResponse > ContactsUpdateEmailWithHttpInfo (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdateEmail");
            // verify the required parameter 'emailAddressID' is set
            if (emailAddressID == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressID' when calling ContactsApi->ContactsUpdateEmail");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsUpdateEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails/{emailAddressID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (emailAddressID != null) localVarPathParams.Add("emailAddressID", this.Configuration.ApiClient.ParameterToString(emailAddressID)); // path parameter
            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddressResponse)));
        }

        /// <summary>
        /// Updates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of TsiWebEmailAddressResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebEmailAddressResponse> ContactsUpdateEmailAsync (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email)
        {
             ApiResponse<TsiWebEmailAddressResponse> localVarResponse = await ContactsUpdateEmailAsyncWithHttpInfo(contactNumber, emailAddressID, email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the email. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="emailAddressID">The email address identifier.</param>
        /// <param name="email">The email.</param>
        /// <returns>Task of ApiResponse (TsiWebEmailAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebEmailAddressResponse>> ContactsUpdateEmailAsyncWithHttpInfo (int? contactNumber, int? emailAddressID, TsiWebEmailAddress email)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdateEmail");
            // verify the required parameter 'emailAddressID' is set
            if (emailAddressID == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressID' when calling ContactsApi->ContactsUpdateEmail");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsUpdateEmail");

            var localVarPath = "/api/contacts/{contactNumber}/emails/{emailAddressID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (emailAddressID != null) localVarPathParams.Add("emailAddressID", this.Configuration.ApiClient.ParameterToString(emailAddressID)); // path parameter
            if (email != null && email.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(email); // http body (model) parameter
            }
            else
            {
                localVarPostBody = email; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebEmailAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebEmailAddressResponse)));
        }

        /// <summary>
        /// Changes a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>TsiWebPhoneNumberResponse</returns>
        public TsiWebPhoneNumberResponse ContactsUpdatePhoneNumber (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = ContactsUpdatePhoneNumberWithHttpInfo(contactNumber, phoneNumberID, phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>ApiResponse of TsiWebPhoneNumberResponse</returns>
        public ApiResponse< TsiWebPhoneNumberResponse > ContactsUpdatePhoneNumberWithHttpInfo (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling ContactsApi->ContactsUpdatePhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

        /// <summary>
        /// Changes a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of TsiWebPhoneNumberResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPhoneNumberResponse> ContactsUpdatePhoneNumberAsync (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
             ApiResponse<TsiWebPhoneNumberResponse> localVarResponse = await ContactsUpdatePhoneNumberAsyncWithHttpInfo(contactNumber, phoneNumberID, phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes a contact phone number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <param name="phoneNumberID">The phone number identifier.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <returns>Task of ApiResponse (TsiWebPhoneNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPhoneNumberResponse>> ContactsUpdatePhoneNumberAsyncWithHttpInfo (int? contactNumber, int? phoneNumberID, TsiWebPhoneNumber phoneNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling ContactsApi->ContactsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumberID' is set
            if (phoneNumberID == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumberID' when calling ContactsApi->ContactsUpdatePhoneNumber");
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling ContactsApi->ContactsUpdatePhoneNumber");

            var localVarPath = "/api/contacts/{contactNumber}/phonenumbers/{phoneNumberID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter
            if (phoneNumberID != null) localVarPathParams.Add("phoneNumberID", this.Configuration.ApiClient.ParameterToString(phoneNumberID)); // path parameter
            if (phoneNumber != null && phoneNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(phoneNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = phoneNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsUpdatePhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPhoneNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPhoneNumberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPhoneNumberResponse)));
        }

    }
}
