/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for Contract.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Contract.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a new contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebContractResponse</returns>
        TsiWebContractResponse ContractsCreateContract (TsiWebCreateContractModel model);

        /// <summary>
        /// Creates a new contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebContractResponse</returns>
        ApiResponse<TsiWebContractResponse> ContractsCreateContractWithHttpInfo (TsiWebCreateContractModel model);
        /// <summary>
        /// Creates a contract account
        /// </summary>
        /// <remarks>
        /// Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>TsiWebContractResponse</returns>
        TsiWebContractResponse ContractsCreateContractAccount (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Creates a contract account
        /// </summary>
        /// <remarks>
        /// Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of TsiWebContractResponse</returns>
        ApiResponse<TsiWebContractResponse> ContractsCreateContractAccountWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Creates the contract document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse ContractsCreateContractDocument (int? contractNumber);

        /// <summary>
        /// Creates the contract document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> ContractsCreateContractDocumentWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Creates a contract line item detail
        /// </summary>
        /// <remarks>
        /// ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>TsiWebContractDetailResponse</returns>
        TsiWebContractDetailResponse ContractsCreateContractLineItem (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model);

        /// <summary>
        /// Creates a contract line item detail
        /// </summary>
        /// <remarks>
        /// ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>ApiResponse of TsiWebContractDetailResponse</returns>
        ApiResponse<TsiWebContractDetailResponse> ContractsCreateContractLineItemWithHttpInfo (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model);
        /// <summary>
        /// Deletes a contract account
        /// </summary>
        /// <remarks>
        /// If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContractsDeleteContractAccount (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null);

        /// <summary>
        /// Deletes a contract account
        /// </summary>
        /// <remarks>
        /// If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContractsDeleteContractAccountWithHttpInfo (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null);
        /// <summary>
        /// Deletes a contract line item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>TsiWebContractDetailResponse</returns>
        TsiWebContractDetailResponse ContractsDeleteContractLineItem (int? contractNumber, int? contractDetailNumber);

        /// <summary>
        /// Deletes a contract line item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>ApiResponse of TsiWebContractDetailResponse</returns>
        ApiResponse<TsiWebContractDetailResponse> ContractsDeleteContractLineItemWithHttpInfo (int? contractNumber, int? contractDetailNumber);
        /// <summary>
        /// Gets the contract accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractAccount&gt;</returns>
        List<TsiWebContractAccount> ContractsGetContractAccounts (int? contractNumber);

        /// <summary>
        /// Gets the contract accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractAccount&gt;</returns>
        ApiResponse<List<TsiWebContractAccount>> ContractsGetContractAccountsWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>TsiWebContractDetail</returns>
        TsiWebContractDetail ContractsGetContractDetails (int? contractNumber);

        /// <summary>
        /// Gets the contract detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of TsiWebContractDetail</returns>
        ApiResponse<TsiWebContractDetail> ContractsGetContractDetailsWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        TsiWebDocumentSummary ContractsGetContractDocument (int? contractNumber, int? documentID);

        /// <summary>
        /// Gets the contract document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        ApiResponse<TsiWebDocumentSummary> ContractsGetContractDocumentWithHttpInfo (int? contractNumber, int? documentID);
        /// <summary>
        /// Gets the contract documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebDocumentSummary&gt;</returns>
        List<TsiWebDocumentSummary> ContractsGetContractDocuments (int? contractNumber);

        /// <summary>
        /// Gets the contract documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebDocumentSummary&gt;</returns>
        ApiResponse<List<TsiWebDocumentSummary>> ContractsGetContractDocumentsWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract items covered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebItemCovered&gt;</returns>
        List<TsiWebItemCovered> ContractsGetContractItemsCovered (int? contractNumber);

        /// <summary>
        /// Gets the contract items covered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebItemCovered&gt;</returns>
        ApiResponse<List<TsiWebItemCovered>> ContractsGetContractItemsCoveredWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract items covered by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebItemCovered&gt;</returns>
        List<TsiWebItemCovered> ContractsGetContractItemsCoveredByAccountNumber (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract items covered by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebItemCovered&gt;</returns>
        ApiResponse<List<TsiWebItemCovered>> ContractsGetContractItemsCoveredByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the contract meters groups by meter group ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>TsiWebContractMeterGroup</returns>
        TsiWebContractMeterGroup ContractsGetContractMeterGroupById (int? contractNumber, int? meterGroupId);

        /// <summary>
        /// Gets the contract meters groups by meter group ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>ApiResponse of TsiWebContractMeterGroup</returns>
        ApiResponse<TsiWebContractMeterGroup> ContractsGetContractMeterGroupByIdWithHttpInfo (int? contractNumber, int? meterGroupId);
        /// <summary>
        /// Gets the contract meters groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractMeterGroup&gt;</returns>
        List<TsiWebContractMeterGroup> ContractsGetContractMeterGroups (int? contractNumber);

        /// <summary>
        /// Gets the contract meters groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractMeterGroup&gt;</returns>
        ApiResponse<List<TsiWebContractMeterGroup>> ContractsGetContractMeterGroupsWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract meters for the contract detail line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractMeter&gt;</returns>
        List<TsiWebContractMeter> ContractsGetContractMeters (int? contractNumber, int? detailId);

        /// <summary>
        /// Gets the contract meters for the contract detail line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractMeter&gt;</returns>
        ApiResponse<List<TsiWebContractMeter>> ContractsGetContractMetersWithHttpInfo (int? contractNumber, int? detailId);
        /// <summary>
        /// Gets the contract parts and labor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebPartAndLabor&gt;</returns>
        List<TsiWebPartAndLabor> ContractsGetContractPartsAndLabor (int? contractNumber);

        /// <summary>
        /// Gets the contract parts and labor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPartAndLabor&gt;</returns>
        ApiResponse<List<TsiWebPartAndLabor>> ContractsGetContractPartsAndLaborWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract parts and labor by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebPartAndLabor&gt;</returns>
        List<TsiWebPartAndLabor> ContractsGetContractPartsAndLaborByAccountNumber (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract parts and labor by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPartAndLabor&gt;</returns>
        ApiResponse<List<TsiWebPartAndLabor>> ContractsGetContractPartsAndLaborByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the contract service order history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractServiceOrder&gt;</returns>
        List<TsiWebContractServiceOrder> ContractsGetContractServiceOrderHistory (int? contractNumber);

        /// <summary>
        /// Gets the contract service order history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractServiceOrder&gt;</returns>
        ApiResponse<List<TsiWebContractServiceOrder>> ContractsGetContractServiceOrderHistoryWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract service order history by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebServiceOrderSummary&gt;</returns>
        List<TsiWebServiceOrderSummary> ContractsGetContractServiceOrderHistoryByAccountNumber (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract service order history by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderSummary&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderSummary>> ContractsGetContractServiceOrderHistoryByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the contract summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>TsiWebContractSummary</returns>
        TsiWebContractSummary ContractsGetContractSummary (int? contractNumber);

        /// <summary>
        /// Gets the contract summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of TsiWebContractSummary</returns>
        ApiResponse<TsiWebContractSummary> ContractsGetContractSummaryWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract time log.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebTimeLog&gt;</returns>
        List<TsiWebTimeLog> ContractsGetContractTimeLogs (int? contractNumber);

        /// <summary>
        /// Gets the contract time log.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebTimeLog&gt;</returns>
        ApiResponse<List<TsiWebTimeLog>> ContractsGetContractTimeLogsWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract time log by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebTimeLog&gt;</returns>
        List<TsiWebTimeLog> ContractsGetContractTimeLogsByAccountNumber (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract time log by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebTimeLog&gt;</returns>
        ApiResponse<List<TsiWebTimeLog>> ContractsGetContractTimeLogsByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> ContractsGetCustomFields (int? contractNumber);

        /// <summary>
        /// Gets the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> ContractsGetCustomFieldsWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        Object ContractsGetFile (int? contractNumber, int? documentID);

        /// <summary>
        /// Gets the contract document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ContractsGetFileWithHttpInfo (int? contractNumber, int? documentID);
        /// <summary>
        /// Search Contract by Account Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByAccountNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Account Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByAccountNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Agreement Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByAgreementNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Agreement Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByAgreementNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Basis .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByBasis (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Basis .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByBasisWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Contract number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByContractNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Contract number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByContractNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Contract type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByContractType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Contract type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByContractTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Custom field .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Custom field .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by End Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByEndDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by End Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByEndDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Reference .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByReference (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Reference .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByReferenceWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Start Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByStartDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Start Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByStartDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Status .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse ContractsSearchByStatus (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Status .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> ContractsSearchByStatusWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContractsSetContractDocumentFile (int? contractNumber, int? documentID);

        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContractsSetContractDocumentFileWithHttpInfo (int? contractNumber, int? documentID);
        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse ContractsSetContractDocumentFileName (int? contractNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> ContractsSetContractDocumentFileNameWithHttpInfo (int? contractNumber, int? documentID, string fileName);
        /// <summary>
        /// Updates a contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>TsiWebContractResponse</returns>
        TsiWebContractResponse ContractsUpdateContract (int? contractNumber, TsiWebUpdateContractModel model);

        /// <summary>
        /// Updates a contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>ApiResponse of TsiWebContractResponse</returns>
        ApiResponse<TsiWebContractResponse> ContractsUpdateContractWithHttpInfo (int? contractNumber, TsiWebUpdateContractModel model);
        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse ContractsUpdateContractDocumentProperties (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> ContractsUpdateContractDocumentPropertiesWithHttpInfo (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        /// <summary>
        /// Updates a contract line item detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>TsiWebContractDetailResponse</returns>
        TsiWebContractDetailResponse ContractsUpdateContractLineItem (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model);

        /// <summary>
        /// Updates a contract line item detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>ApiResponse of TsiWebContractDetailResponse</returns>
        ApiResponse<TsiWebContractDetailResponse> ContractsUpdateContractLineItemWithHttpInfo (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model);
        /// <summary>
        /// Updates the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse ContractsUpdateCustomFields (int? contractNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> ContractsUpdateCustomFieldsWithHttpInfo (int? contractNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContractsUpdateMeterReadings (TsiWebMeterModel model);

        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContractsUpdateMeterReadingsWithHttpInfo (TsiWebMeterModel model);
        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ContractsUpdateMeterReadings_0 (TsiWebMeterModel model);

        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ContractsUpdateMeterReadings_0WithHttpInfo (TsiWebMeterModel model);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for Contract.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Contract.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a new contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebContractResponse> ContractsCreateContractAsync (TsiWebCreateContractModel model);

        /// <summary>
        /// Creates a new contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractResponse>> ContractsCreateContractAsyncWithHttpInfo (TsiWebCreateContractModel model);
        /// <summary>
        /// Creates a contract account
        /// </summary>
        /// <remarks>
        /// Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of TsiWebContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebContractResponse> ContractsCreateContractAccountAsync (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Creates a contract account
        /// </summary>
        /// <remarks>
        /// Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractResponse>> ContractsCreateContractAccountAsyncWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Creates the contract document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> ContractsCreateContractDocumentAsync (int? contractNumber);

        /// <summary>
        /// Creates the contract document.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file and the xml / json Document
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> ContractsCreateContractDocumentAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Creates a contract line item detail
        /// </summary>
        /// <remarks>
        /// ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>Task of TsiWebContractDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebContractDetailResponse> ContractsCreateContractLineItemAsync (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model);

        /// <summary>
        /// Creates a contract line item detail
        /// </summary>
        /// <remarks>
        /// ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>Task of ApiResponse (TsiWebContractDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetailResponse>> ContractsCreateContractLineItemAsyncWithHttpInfo (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model);
        /// <summary>
        /// Deletes a contract account
        /// </summary>
        /// <remarks>
        /// If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContractsDeleteContractAccountAsync (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null);

        /// <summary>
        /// Deletes a contract account
        /// </summary>
        /// <remarks>
        /// If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsDeleteContractAccountAsyncWithHttpInfo (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null);
        /// <summary>
        /// Deletes a contract line item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>Task of TsiWebContractDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebContractDetailResponse> ContractsDeleteContractLineItemAsync (int? contractNumber, int? contractDetailNumber);

        /// <summary>
        /// Deletes a contract line item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebContractDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetailResponse>> ContractsDeleteContractLineItemAsyncWithHttpInfo (int? contractNumber, int? contractDetailNumber);
        /// <summary>
        /// Gets the contract accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractAccount&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebContractAccount>> ContractsGetContractAccountsAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractAccount>>> ContractsGetContractAccountsAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of TsiWebContractDetail</returns>
        System.Threading.Tasks.Task<TsiWebContractDetail> ContractsGetContractDetailsAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContractDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetail>> ContractsGetContractDetailsAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        System.Threading.Tasks.Task<TsiWebDocumentSummary> ContractsGetContractDocumentAsync (int? contractNumber, int? documentID);

        /// <summary>
        /// Gets the contract document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> ContractsGetContractDocumentAsyncWithHttpInfo (int? contractNumber, int? documentID);
        /// <summary>
        /// Gets the contract documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebDocumentSummary&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebDocumentSummary>> ContractsGetContractDocumentsAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDocumentSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebDocumentSummary>>> ContractsGetContractDocumentsAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract items covered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebItemCovered&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebItemCovered>> ContractsGetContractItemsCoveredAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract items covered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebItemCovered&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebItemCovered>>> ContractsGetContractItemsCoveredAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract items covered by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebItemCovered&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebItemCovered>> ContractsGetContractItemsCoveredByAccountNumberAsync (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract items covered by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebItemCovered&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebItemCovered>>> ContractsGetContractItemsCoveredByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the contract meters groups by meter group ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>Task of TsiWebContractMeterGroup</returns>
        System.Threading.Tasks.Task<TsiWebContractMeterGroup> ContractsGetContractMeterGroupByIdAsync (int? contractNumber, int? meterGroupId);

        /// <summary>
        /// Gets the contract meters groups by meter group ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebContractMeterGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractMeterGroup>> ContractsGetContractMeterGroupByIdAsyncWithHttpInfo (int? contractNumber, int? meterGroupId);
        /// <summary>
        /// Gets the contract meters groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractMeterGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebContractMeterGroup>> ContractsGetContractMeterGroupsAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract meters groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractMeterGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractMeterGroup>>> ContractsGetContractMeterGroupsAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract meters for the contract detail line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractMeter&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebContractMeter>> ContractsGetContractMetersAsync (int? contractNumber, int? detailId);

        /// <summary>
        /// Gets the contract meters for the contract detail line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractMeter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractMeter>>> ContractsGetContractMetersAsyncWithHttpInfo (int? contractNumber, int? detailId);
        /// <summary>
        /// Gets the contract parts and labor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebPartAndLabor&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPartAndLabor>> ContractsGetContractPartsAndLaborAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract parts and labor.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPartAndLabor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPartAndLabor>>> ContractsGetContractPartsAndLaborAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract parts and labor by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebPartAndLabor&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPartAndLabor>> ContractsGetContractPartsAndLaborByAccountNumberAsync (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract parts and labor by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPartAndLabor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPartAndLabor>>> ContractsGetContractPartsAndLaborByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the contract service order history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractServiceOrder&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebContractServiceOrder>> ContractsGetContractServiceOrderHistoryAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract service order history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractServiceOrder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractServiceOrder>>> ContractsGetContractServiceOrderHistoryAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract service order history by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderSummary&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderSummary>> ContractsGetContractServiceOrderHistoryByAccountNumberAsync (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract service order history by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderSummary>>> ContractsGetContractServiceOrderHistoryByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the contract summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of TsiWebContractSummary</returns>
        System.Threading.Tasks.Task<TsiWebContractSummary> ContractsGetContractSummaryAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContractSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractSummary>> ContractsGetContractSummaryAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract time log.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebTimeLog&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTimeLog>> ContractsGetContractTimeLogsAsync (int? contractNumber);

        /// <summary>
        /// Gets the contract time log.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTimeLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTimeLog>>> ContractsGetContractTimeLogsAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract time log by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebTimeLog&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTimeLog>> ContractsGetContractTimeLogsByAccountNumberAsync (int? contractNumber, int? accountNumber);

        /// <summary>
        /// Gets the contract time log by account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTimeLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTimeLog>>> ContractsGetContractTimeLogsByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber);
        /// <summary>
        /// Gets the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> ContractsGetCustomFieldsAsync (int? contractNumber);

        /// <summary>
        /// Gets the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> ContractsGetCustomFieldsAsyncWithHttpInfo (int? contractNumber);
        /// <summary>
        /// Gets the contract document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ContractsGetFileAsync (int? contractNumber, int? documentID);

        /// <summary>
        /// Gets the contract document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContractsGetFileAsyncWithHttpInfo (int? contractNumber, int? documentID);
        /// <summary>
        /// Search Contract by Account Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByAccountNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Account Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByAccountNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Agreement Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByAgreementNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Agreement Number .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByAgreementNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Basis .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByBasisAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Basis .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByBasisAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Contract number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByContractNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Contract number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByContractNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Contract type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByContractTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Contract type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByContractTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Custom field .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Custom field .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by End Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByEndDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by End Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByEndDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Reference .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByReferenceAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Reference .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByReferenceAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Start Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByStartDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Start Date .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByStartDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Contract by Status .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByStatusAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Contract by Status .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByStatusAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContractsSetContractDocumentFileAsync (int? contractNumber, int? documentID);

        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsSetContractDocumentFileAsyncWithHttpInfo (int? contractNumber, int? documentID);
        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> ContractsSetContractDocumentFileNameAsync (int? contractNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> ContractsSetContractDocumentFileNameAsyncWithHttpInfo (int? contractNumber, int? documentID, string fileName);
        /// <summary>
        /// Updates a contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>Task of TsiWebContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebContractResponse> ContractsUpdateContractAsync (int? contractNumber, TsiWebUpdateContractModel model);

        /// <summary>
        /// Updates a contract.
        /// </summary>
        /// <remarks>
        /// BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>Task of ApiResponse (TsiWebContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractResponse>> ContractsUpdateContractAsyncWithHttpInfo (int? contractNumber, TsiWebUpdateContractModel model);
        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> ContractsUpdateContractDocumentPropertiesAsync (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> ContractsUpdateContractDocumentPropertiesAsyncWithHttpInfo (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        /// <summary>
        /// Updates a contract line item detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>Task of TsiWebContractDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebContractDetailResponse> ContractsUpdateContractLineItemAsync (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model);

        /// <summary>
        /// Updates a contract line item detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>Task of ApiResponse (TsiWebContractDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetailResponse>> ContractsUpdateContractLineItemAsyncWithHttpInfo (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model);
        /// <summary>
        /// Updates the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> ContractsUpdateCustomFieldsAsync (int? contractNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the custom fields for a contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> ContractsUpdateCustomFieldsAsyncWithHttpInfo (int? contractNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContractsUpdateMeterReadingsAsync (TsiWebMeterModel model);

        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsUpdateMeterReadingsAsyncWithHttpInfo (TsiWebMeterModel model);
        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ContractsUpdateMeterReadings_0Async (TsiWebMeterModel model);

        /// <summary>
        /// Update a contract meter for a DeviceID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsUpdateMeterReadings_0AsyncWithHttpInfo (TsiWebMeterModel model);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContractsApi : IContractsApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractsApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractsApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for Contract. Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for Contract. Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ContractsApi->ContractsAdvancedSearch");

            var localVarPath = "/api/contracts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Advanced search for Contract. Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for Contract. Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ContractsApi->ContractsAdvancedSearch");

            var localVarPath = "/api/contracts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Creates a new contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebContractResponse</returns>
        public TsiWebContractResponse ContractsCreateContract (TsiWebCreateContractModel model)
        {
             ApiResponse<TsiWebContractResponse> localVarResponse = ContractsCreateContractWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebContractResponse</returns>
        public ApiResponse< TsiWebContractResponse > ContractsCreateContractWithHttpInfo (TsiWebCreateContractModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsCreateContract");

            var localVarPath = "/api/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractResponse)));
        }

        /// <summary>
        /// Creates a new contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContractResponse> ContractsCreateContractAsync (TsiWebCreateContractModel model)
        {
             ApiResponse<TsiWebContractResponse> localVarResponse = await ContractsCreateContractAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractResponse>> ContractsCreateContractAsyncWithHttpInfo (TsiWebCreateContractModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsCreateContract");

            var localVarPath = "/api/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractResponse)));
        }

        /// <summary>
        /// Creates a contract account Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>TsiWebContractResponse</returns>
        public TsiWebContractResponse ContractsCreateContractAccount (int? contractNumber, int? accountNumber)
        {
             ApiResponse<TsiWebContractResponse> localVarResponse = ContractsCreateContractAccountWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a contract account Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of TsiWebContractResponse</returns>
        public ApiResponse< TsiWebContractResponse > ContractsCreateContractAccountWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsCreateContractAccount");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsCreateContractAccount");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContractAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractResponse)));
        }

        /// <summary>
        /// Creates a contract account Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of TsiWebContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContractResponse> ContractsCreateContractAccountAsync (int? contractNumber, int? accountNumber)
        {
             ApiResponse<TsiWebContractResponse> localVarResponse = await ContractsCreateContractAccountAsyncWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a contract account Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractResponse>> ContractsCreateContractAccountAsyncWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsCreateContractAccount");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsCreateContractAccount");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContractAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractResponse)));
        }

        /// <summary>
        /// Creates the contract document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse ContractsCreateContractDocument (int? contractNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = ContractsCreateContractDocumentWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the contract document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > ContractsCreateContractDocumentWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsCreateContractDocument");

            var localVarPath = "/api/contracts/{contractNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContractDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates the contract document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> ContractsCreateContractDocumentAsync (int? contractNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await ContractsCreateContractDocumentAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the contract document. Requires a multipart/form request containing the physical file and the xml / json Document
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> ContractsCreateContractDocumentAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsCreateContractDocument");

            var localVarPath = "/api/contracts/{contractNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContractDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates a contract line item detail ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>TsiWebContractDetailResponse</returns>
        public TsiWebContractDetailResponse ContractsCreateContractLineItem (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model)
        {
             ApiResponse<TsiWebContractDetailResponse> localVarResponse = ContractsCreateContractLineItemWithHttpInfo(contractNumber, accountNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a contract line item detail ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>ApiResponse of TsiWebContractDetailResponse</returns>
        public ApiResponse< TsiWebContractDetailResponse > ContractsCreateContractLineItemWithHttpInfo (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsCreateContractLineItem");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsCreateContractLineItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsCreateContractLineItem");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/itemscovered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContractLineItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetailResponse)));
        }

        /// <summary>
        /// Creates a contract line item detail ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>Task of TsiWebContractDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContractDetailResponse> ContractsCreateContractLineItemAsync (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model)
        {
             ApiResponse<TsiWebContractDetailResponse> localVarResponse = await ContractsCreateContractLineItemAsyncWithHttpInfo(contractNumber, accountNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a contract line item detail ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <param name="model">CreateContractLineItemModel.</param>
        /// <returns>Task of ApiResponse (TsiWebContractDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetailResponse>> ContractsCreateContractLineItemAsyncWithHttpInfo (int? contractNumber, int? accountNumber, TsiWebCreateContractLineItemModel model)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsCreateContractLineItem");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsCreateContractLineItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsCreateContractLineItem");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/itemscovered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsCreateContractLineItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetailResponse)));
        }

        /// <summary>
        /// Deletes a contract account If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContractsDeleteContractAccount (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContractsDeleteContractAccountWithHttpInfo(contractNumber, accountNumber, allowDeleteIfInvoiced);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a contract account If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContractsDeleteContractAccountWithHttpInfo (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsDeleteContractAccount");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsDeleteContractAccount");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (allowDeleteIfInvoiced != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowDeleteIfInvoiced", allowDeleteIfInvoiced)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsDeleteContractAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a contract account If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContractsDeleteContractAccountAsync (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContractsDeleteContractAccountAsyncWithHttpInfo(contractNumber, accountNumber, allowDeleteIfInvoiced);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a contract account If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="allowDeleteIfInvoiced"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsDeleteContractAccountAsyncWithHttpInfo (int? contractNumber, int? accountNumber, bool? allowDeleteIfInvoiced = null)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsDeleteContractAccount");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsDeleteContractAccount");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (allowDeleteIfInvoiced != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowDeleteIfInvoiced", allowDeleteIfInvoiced)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsDeleteContractAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a contract line item 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>TsiWebContractDetailResponse</returns>
        public TsiWebContractDetailResponse ContractsDeleteContractLineItem (int? contractNumber, int? contractDetailNumber)
        {
             ApiResponse<TsiWebContractDetailResponse> localVarResponse = ContractsDeleteContractLineItemWithHttpInfo(contractNumber, contractDetailNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a contract line item 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>ApiResponse of TsiWebContractDetailResponse</returns>
        public ApiResponse< TsiWebContractDetailResponse > ContractsDeleteContractLineItemWithHttpInfo (int? contractNumber, int? contractDetailNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsDeleteContractLineItem");
            // verify the required parameter 'contractDetailNumber' is set
            if (contractDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractDetailNumber' when calling ContractsApi->ContractsDeleteContractLineItem");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered/{contractDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (contractDetailNumber != null) localVarPathParams.Add("contractDetailNumber", this.Configuration.ApiClient.ParameterToString(contractDetailNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsDeleteContractLineItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetailResponse)));
        }

        /// <summary>
        /// Deletes a contract line item 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>Task of TsiWebContractDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContractDetailResponse> ContractsDeleteContractLineItemAsync (int? contractNumber, int? contractDetailNumber)
        {
             ApiResponse<TsiWebContractDetailResponse> localVarResponse = await ContractsDeleteContractLineItemAsyncWithHttpInfo(contractNumber, contractDetailNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a contract line item 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber"></param>
        /// <param name="contractDetailNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebContractDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetailResponse>> ContractsDeleteContractLineItemAsyncWithHttpInfo (int? contractNumber, int? contractDetailNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsDeleteContractLineItem");
            // verify the required parameter 'contractDetailNumber' is set
            if (contractDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractDetailNumber' when calling ContractsApi->ContractsDeleteContractLineItem");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered/{contractDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (contractDetailNumber != null) localVarPathParams.Add("contractDetailNumber", this.Configuration.ApiClient.ParameterToString(contractDetailNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsDeleteContractLineItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetailResponse)));
        }

        /// <summary>
        /// Gets the contract accounts 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractAccount&gt;</returns>
        public List<TsiWebContractAccount> ContractsGetContractAccounts (int? contractNumber)
        {
             ApiResponse<List<TsiWebContractAccount>> localVarResponse = ContractsGetContractAccountsWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract accounts 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractAccount&gt;</returns>
        public ApiResponse< List<TsiWebContractAccount> > ContractsGetContractAccountsWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractAccounts");

            var localVarPath = "/api/contracts/{contractNumber}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractAccount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractAccount>)));
        }

        /// <summary>
        /// Gets the contract accounts 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebContractAccount>> ContractsGetContractAccountsAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebContractAccount>> localVarResponse = await ContractsGetContractAccountsAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract accounts 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractAccount>>> ContractsGetContractAccountsAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractAccounts");

            var localVarPath = "/api/contracts/{contractNumber}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractAccount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractAccount>)));
        }

        /// <summary>
        /// Gets the contract detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>TsiWebContractDetail</returns>
        public TsiWebContractDetail ContractsGetContractDetails (int? contractNumber)
        {
             ApiResponse<TsiWebContractDetail> localVarResponse = ContractsGetContractDetailsWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of TsiWebContractDetail</returns>
        public ApiResponse< TsiWebContractDetail > ContractsGetContractDetailsWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractDetails");

            var localVarPath = "/api/contracts/{contractNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetail)));
        }

        /// <summary>
        /// Gets the contract detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of TsiWebContractDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebContractDetail> ContractsGetContractDetailsAsync (int? contractNumber)
        {
             ApiResponse<TsiWebContractDetail> localVarResponse = await ContractsGetContractDetailsAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContractDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetail>> ContractsGetContractDetailsAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractDetails");

            var localVarPath = "/api/contracts/{contractNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetail)));
        }

        /// <summary>
        /// Gets the contract document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        public TsiWebDocumentSummary ContractsGetContractDocument (int? contractNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = ContractsGetContractDocumentWithHttpInfo(contractNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        public ApiResponse< TsiWebDocumentSummary > ContractsGetContractDocumentWithHttpInfo (int? contractNumber, int? documentID)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsGetContractDocument");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the contract document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentSummary> ContractsGetContractDocumentAsync (int? contractNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = await ContractsGetContractDocumentAsyncWithHttpInfo(contractNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> ContractsGetContractDocumentAsyncWithHttpInfo (int? contractNumber, int? documentID)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsGetContractDocument");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the contract documents 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebDocumentSummary&gt;</returns>
        public List<TsiWebDocumentSummary> ContractsGetContractDocuments (int? contractNumber)
        {
             ApiResponse<List<TsiWebDocumentSummary>> localVarResponse = ContractsGetContractDocumentsWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract documents 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebDocumentSummary&gt;</returns>
        public ApiResponse< List<TsiWebDocumentSummary> > ContractsGetContractDocumentsWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractDocuments");

            var localVarPath = "/api/contracts/{contractNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDocumentSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDocumentSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDocumentSummary>)));
        }

        /// <summary>
        /// Gets the contract documents 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebDocumentSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebDocumentSummary>> ContractsGetContractDocumentsAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebDocumentSummary>> localVarResponse = await ContractsGetContractDocumentsAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract documents 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDocumentSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebDocumentSummary>>> ContractsGetContractDocumentsAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractDocuments");

            var localVarPath = "/api/contracts/{contractNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDocumentSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDocumentSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDocumentSummary>)));
        }

        /// <summary>
        /// Gets the contract items covered. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebItemCovered&gt;</returns>
        public List<TsiWebItemCovered> ContractsGetContractItemsCovered (int? contractNumber)
        {
             ApiResponse<List<TsiWebItemCovered>> localVarResponse = ContractsGetContractItemsCoveredWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract items covered. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebItemCovered&gt;</returns>
        public ApiResponse< List<TsiWebItemCovered> > ContractsGetContractItemsCoveredWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractItemsCovered");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractItemsCovered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebItemCovered>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebItemCovered>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebItemCovered>)));
        }

        /// <summary>
        /// Gets the contract items covered. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebItemCovered&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebItemCovered>> ContractsGetContractItemsCoveredAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebItemCovered>> localVarResponse = await ContractsGetContractItemsCoveredAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract items covered. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebItemCovered&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebItemCovered>>> ContractsGetContractItemsCoveredAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractItemsCovered");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractItemsCovered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebItemCovered>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebItemCovered>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebItemCovered>)));
        }

        /// <summary>
        /// Gets the contract items covered by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebItemCovered&gt;</returns>
        public List<TsiWebItemCovered> ContractsGetContractItemsCoveredByAccountNumber (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebItemCovered>> localVarResponse = ContractsGetContractItemsCoveredByAccountNumberWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract items covered by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebItemCovered&gt;</returns>
        public ApiResponse< List<TsiWebItemCovered> > ContractsGetContractItemsCoveredByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractItemsCoveredByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractItemsCoveredByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/itemscovered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractItemsCoveredByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebItemCovered>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebItemCovered>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebItemCovered>)));
        }

        /// <summary>
        /// Gets the contract items covered by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebItemCovered&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebItemCovered>> ContractsGetContractItemsCoveredByAccountNumberAsync (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebItemCovered>> localVarResponse = await ContractsGetContractItemsCoveredByAccountNumberAsyncWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract items covered by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebItemCovered&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebItemCovered>>> ContractsGetContractItemsCoveredByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractItemsCoveredByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractItemsCoveredByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/itemscovered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractItemsCoveredByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebItemCovered>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebItemCovered>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebItemCovered>)));
        }

        /// <summary>
        /// Gets the contract meters groups by meter group ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>TsiWebContractMeterGroup</returns>
        public TsiWebContractMeterGroup ContractsGetContractMeterGroupById (int? contractNumber, int? meterGroupId)
        {
             ApiResponse<TsiWebContractMeterGroup> localVarResponse = ContractsGetContractMeterGroupByIdWithHttpInfo(contractNumber, meterGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract meters groups by meter group ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>ApiResponse of TsiWebContractMeterGroup</returns>
        public ApiResponse< TsiWebContractMeterGroup > ContractsGetContractMeterGroupByIdWithHttpInfo (int? contractNumber, int? meterGroupId)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractMeterGroupById");
            // verify the required parameter 'meterGroupId' is set
            if (meterGroupId == null)
                throw new ApiException(400, "Missing required parameter 'meterGroupId' when calling ContractsApi->ContractsGetContractMeterGroupById");

            var localVarPath = "/api/contracts/{contractNumber}/metergroups/{meterGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (meterGroupId != null) localVarPathParams.Add("meterGroupId", this.Configuration.ApiClient.ParameterToString(meterGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractMeterGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractMeterGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractMeterGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractMeterGroup)));
        }

        /// <summary>
        /// Gets the contract meters groups by meter group ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>Task of TsiWebContractMeterGroup</returns>
        public async System.Threading.Tasks.Task<TsiWebContractMeterGroup> ContractsGetContractMeterGroupByIdAsync (int? contractNumber, int? meterGroupId)
        {
             ApiResponse<TsiWebContractMeterGroup> localVarResponse = await ContractsGetContractMeterGroupByIdAsyncWithHttpInfo(contractNumber, meterGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract meters groups by meter group ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="meterGroupId">The contract meter group identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebContractMeterGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractMeterGroup>> ContractsGetContractMeterGroupByIdAsyncWithHttpInfo (int? contractNumber, int? meterGroupId)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractMeterGroupById");
            // verify the required parameter 'meterGroupId' is set
            if (meterGroupId == null)
                throw new ApiException(400, "Missing required parameter 'meterGroupId' when calling ContractsApi->ContractsGetContractMeterGroupById");

            var localVarPath = "/api/contracts/{contractNumber}/metergroups/{meterGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (meterGroupId != null) localVarPathParams.Add("meterGroupId", this.Configuration.ApiClient.ParameterToString(meterGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractMeterGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractMeterGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractMeterGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractMeterGroup)));
        }

        /// <summary>
        /// Gets the contract meters groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractMeterGroup&gt;</returns>
        public List<TsiWebContractMeterGroup> ContractsGetContractMeterGroups (int? contractNumber)
        {
             ApiResponse<List<TsiWebContractMeterGroup>> localVarResponse = ContractsGetContractMeterGroupsWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract meters groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractMeterGroup&gt;</returns>
        public ApiResponse< List<TsiWebContractMeterGroup> > ContractsGetContractMeterGroupsWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractMeterGroups");

            var localVarPath = "/api/contracts/{contractNumber}/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractMeterGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractMeterGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractMeterGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractMeterGroup>)));
        }

        /// <summary>
        /// Gets the contract meters groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractMeterGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebContractMeterGroup>> ContractsGetContractMeterGroupsAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebContractMeterGroup>> localVarResponse = await ContractsGetContractMeterGroupsAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract meters groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractMeterGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractMeterGroup>>> ContractsGetContractMeterGroupsAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractMeterGroups");

            var localVarPath = "/api/contracts/{contractNumber}/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractMeterGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractMeterGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractMeterGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractMeterGroup>)));
        }

        /// <summary>
        /// Gets the contract meters for the contract detail line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractMeter&gt;</returns>
        public List<TsiWebContractMeter> ContractsGetContractMeters (int? contractNumber, int? detailId)
        {
             ApiResponse<List<TsiWebContractMeter>> localVarResponse = ContractsGetContractMetersWithHttpInfo(contractNumber, detailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract meters for the contract detail line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractMeter&gt;</returns>
        public ApiResponse< List<TsiWebContractMeter> > ContractsGetContractMetersWithHttpInfo (int? contractNumber, int? detailId)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractMeters");
            // verify the required parameter 'detailId' is set
            if (detailId == null)
                throw new ApiException(400, "Missing required parameter 'detailId' when calling ContractsApi->ContractsGetContractMeters");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered/{detailId}/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (detailId != null) localVarPathParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractMeters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractMeter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractMeter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractMeter>)));
        }

        /// <summary>
        /// Gets the contract meters for the contract detail line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractMeter&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebContractMeter>> ContractsGetContractMetersAsync (int? contractNumber, int? detailId)
        {
             ApiResponse<List<TsiWebContractMeter>> localVarResponse = await ContractsGetContractMetersAsyncWithHttpInfo(contractNumber, detailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract meters for the contract detail line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="detailId">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractMeter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractMeter>>> ContractsGetContractMetersAsyncWithHttpInfo (int? contractNumber, int? detailId)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractMeters");
            // verify the required parameter 'detailId' is set
            if (detailId == null)
                throw new ApiException(400, "Missing required parameter 'detailId' when calling ContractsApi->ContractsGetContractMeters");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered/{detailId}/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (detailId != null) localVarPathParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractMeters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractMeter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractMeter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractMeter>)));
        }

        /// <summary>
        /// Gets the contract parts and labor. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebPartAndLabor&gt;</returns>
        public List<TsiWebPartAndLabor> ContractsGetContractPartsAndLabor (int? contractNumber)
        {
             ApiResponse<List<TsiWebPartAndLabor>> localVarResponse = ContractsGetContractPartsAndLaborWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract parts and labor. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPartAndLabor&gt;</returns>
        public ApiResponse< List<TsiWebPartAndLabor> > ContractsGetContractPartsAndLaborWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractPartsAndLabor");

            var localVarPath = "/api/contracts/{contractNumber}/partsandlabor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractPartsAndLabor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPartAndLabor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPartAndLabor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPartAndLabor>)));
        }

        /// <summary>
        /// Gets the contract parts and labor. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebPartAndLabor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPartAndLabor>> ContractsGetContractPartsAndLaborAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebPartAndLabor>> localVarResponse = await ContractsGetContractPartsAndLaborAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract parts and labor. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPartAndLabor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPartAndLabor>>> ContractsGetContractPartsAndLaborAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractPartsAndLabor");

            var localVarPath = "/api/contracts/{contractNumber}/partsandlabor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractPartsAndLabor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPartAndLabor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPartAndLabor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPartAndLabor>)));
        }

        /// <summary>
        /// Gets the contract parts and labor by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebPartAndLabor&gt;</returns>
        public List<TsiWebPartAndLabor> ContractsGetContractPartsAndLaborByAccountNumber (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebPartAndLabor>> localVarResponse = ContractsGetContractPartsAndLaborByAccountNumberWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract parts and labor by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPartAndLabor&gt;</returns>
        public ApiResponse< List<TsiWebPartAndLabor> > ContractsGetContractPartsAndLaborByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractPartsAndLaborByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractPartsAndLaborByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/partsandlabor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractPartsAndLaborByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPartAndLabor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPartAndLabor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPartAndLabor>)));
        }

        /// <summary>
        /// Gets the contract parts and labor by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebPartAndLabor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPartAndLabor>> ContractsGetContractPartsAndLaborByAccountNumberAsync (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebPartAndLabor>> localVarResponse = await ContractsGetContractPartsAndLaborByAccountNumberAsyncWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract parts and labor by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPartAndLabor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPartAndLabor>>> ContractsGetContractPartsAndLaborByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractPartsAndLaborByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractPartsAndLaborByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/partsandlabor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractPartsAndLaborByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPartAndLabor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPartAndLabor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPartAndLabor>)));
        }

        /// <summary>
        /// Gets the contract service order history 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebContractServiceOrder&gt;</returns>
        public List<TsiWebContractServiceOrder> ContractsGetContractServiceOrderHistory (int? contractNumber)
        {
             ApiResponse<List<TsiWebContractServiceOrder>> localVarResponse = ContractsGetContractServiceOrderHistoryWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract service order history 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebContractServiceOrder&gt;</returns>
        public ApiResponse< List<TsiWebContractServiceOrder> > ContractsGetContractServiceOrderHistoryWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractServiceOrderHistory");

            var localVarPath = "/api/contracts/{contractNumber}/serviceorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractServiceOrderHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractServiceOrder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractServiceOrder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractServiceOrder>)));
        }

        /// <summary>
        /// Gets the contract service order history 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebContractServiceOrder&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebContractServiceOrder>> ContractsGetContractServiceOrderHistoryAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebContractServiceOrder>> localVarResponse = await ContractsGetContractServiceOrderHistoryAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract service order history 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContractServiceOrder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebContractServiceOrder>>> ContractsGetContractServiceOrderHistoryAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractServiceOrderHistory");

            var localVarPath = "/api/contracts/{contractNumber}/serviceorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractServiceOrderHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContractServiceOrder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContractServiceOrder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContractServiceOrder>)));
        }

        /// <summary>
        /// Gets the contract service order history by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebServiceOrderSummary&gt;</returns>
        public List<TsiWebServiceOrderSummary> ContractsGetContractServiceOrderHistoryByAccountNumber (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebServiceOrderSummary>> localVarResponse = ContractsGetContractServiceOrderHistoryByAccountNumberWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract service order history by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderSummary&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderSummary> > ContractsGetContractServiceOrderHistoryByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractServiceOrderHistoryByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractServiceOrderHistoryByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/serviceorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractServiceOrderHistoryByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderSummary>)));
        }

        /// <summary>
        /// Gets the contract service order history by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderSummary>> ContractsGetContractServiceOrderHistoryByAccountNumberAsync (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebServiceOrderSummary>> localVarResponse = await ContractsGetContractServiceOrderHistoryByAccountNumberAsyncWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract service order history by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderSummary>>> ContractsGetContractServiceOrderHistoryByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractServiceOrderHistoryByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractServiceOrderHistoryByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/serviceorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractServiceOrderHistoryByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderSummary>)));
        }

        /// <summary>
        /// Gets the contract summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>TsiWebContractSummary</returns>
        public TsiWebContractSummary ContractsGetContractSummary (int? contractNumber)
        {
             ApiResponse<TsiWebContractSummary> localVarResponse = ContractsGetContractSummaryWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of TsiWebContractSummary</returns>
        public ApiResponse< TsiWebContractSummary > ContractsGetContractSummaryWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractSummary");

            var localVarPath = "/api/contracts/{contractNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractSummary)));
        }

        /// <summary>
        /// Gets the contract summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of TsiWebContractSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebContractSummary> ContractsGetContractSummaryAsync (int? contractNumber)
        {
             ApiResponse<TsiWebContractSummary> localVarResponse = await ContractsGetContractSummaryAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebContractSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractSummary>> ContractsGetContractSummaryAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractSummary");

            var localVarPath = "/api/contracts/{contractNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractSummary)));
        }

        /// <summary>
        /// Gets the contract time log. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>List&lt;TsiWebTimeLog&gt;</returns>
        public List<TsiWebTimeLog> ContractsGetContractTimeLogs (int? contractNumber)
        {
             ApiResponse<List<TsiWebTimeLog>> localVarResponse = ContractsGetContractTimeLogsWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract time log. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebTimeLog&gt;</returns>
        public ApiResponse< List<TsiWebTimeLog> > ContractsGetContractTimeLogsWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractTimeLogs");

            var localVarPath = "/api/contracts/{contractNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractTimeLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTimeLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTimeLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTimeLog>)));
        }

        /// <summary>
        /// Gets the contract time log. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of List&lt;TsiWebTimeLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTimeLog>> ContractsGetContractTimeLogsAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebTimeLog>> localVarResponse = await ContractsGetContractTimeLogsAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract time log. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTimeLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTimeLog>>> ContractsGetContractTimeLogsAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractTimeLogs");

            var localVarPath = "/api/contracts/{contractNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractTimeLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTimeLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTimeLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTimeLog>)));
        }

        /// <summary>
        /// Gets the contract time log by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>List&lt;TsiWebTimeLog&gt;</returns>
        public List<TsiWebTimeLog> ContractsGetContractTimeLogsByAccountNumber (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebTimeLog>> localVarResponse = ContractsGetContractTimeLogsByAccountNumberWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract time log by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebTimeLog&gt;</returns>
        public ApiResponse< List<TsiWebTimeLog> > ContractsGetContractTimeLogsByAccountNumberWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractTimeLogsByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractTimeLogsByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractTimeLogsByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTimeLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTimeLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTimeLog>)));
        }

        /// <summary>
        /// Gets the contract time log by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of List&lt;TsiWebTimeLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTimeLog>> ContractsGetContractTimeLogsByAccountNumberAsync (int? contractNumber, int? accountNumber)
        {
             ApiResponse<List<TsiWebTimeLog>> localVarResponse = await ContractsGetContractTimeLogsByAccountNumberAsyncWithHttpInfo(contractNumber, accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract time log by account number 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="accountNumber">The account identifier number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTimeLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTimeLog>>> ContractsGetContractTimeLogsByAccountNumberAsyncWithHttpInfo (int? contractNumber, int? accountNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetContractTimeLogsByAccountNumber");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ContractsApi->ContractsGetContractTimeLogsByAccountNumber");

            var localVarPath = "/api/contracts/{contractNumber}/accounts/{accountNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetContractTimeLogsByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTimeLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTimeLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTimeLog>)));
        }

        /// <summary>
        /// Gets the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> ContractsGetCustomFields (int? contractNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = ContractsGetCustomFieldsWithHttpInfo(contractNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > ContractsGetCustomFieldsWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetCustomFields");

            var localVarPath = "/api/contracts/{contractNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> ContractsGetCustomFieldsAsync (int? contractNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await ContractsGetCustomFieldsAsyncWithHttpInfo(contractNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> ContractsGetCustomFieldsAsyncWithHttpInfo (int? contractNumber)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetCustomFields");

            var localVarPath = "/api/contracts/{contractNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the contract document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        public Object ContractsGetFile (int? contractNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = ContractsGetFileWithHttpInfo(contractNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contract document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ContractsGetFileWithHttpInfo (int? contractNumber, int? documentID)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsGetFile");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the contract document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ContractsGetFileAsync (int? contractNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = await ContractsGetFileAsyncWithHttpInfo(contractNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contract document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContractsGetFileAsyncWithHttpInfo (int? contractNumber, int? documentID)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsGetFile");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Search Contract by Account Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByAccountNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByAccountNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Account Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByAccountNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByAccountNumber");

            var localVarPath = "/api/contracts/search/accountnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Account Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByAccountNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByAccountNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Account Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByAccountNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByAccountNumber");

            var localVarPath = "/api/contracts/search/accountnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByAccountNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Agreement Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByAgreementNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByAgreementNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Agreement Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByAgreementNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByAgreementNumber");

            var localVarPath = "/api/contracts/search/agreementnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByAgreementNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Agreement Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByAgreementNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByAgreementNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Agreement Number . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByAgreementNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByAgreementNumber");

            var localVarPath = "/api/contracts/search/agreementnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByAgreementNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Basis . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByBasis (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByBasisWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Basis . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByBasisWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByBasis");

            var localVarPath = "/api/contracts/search/basis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByBasis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Basis . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByBasisAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByBasisAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Basis . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByBasisAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByBasis");

            var localVarPath = "/api/contracts/search/basis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByBasis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Contract number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByContractNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByContractNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Contract number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByContractNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByContractNumber");

            var localVarPath = "/api/contracts/search/contractnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByContractNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Contract number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByContractNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByContractNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Contract number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByContractNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByContractNumber");

            var localVarPath = "/api/contracts/search/contractnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByContractNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Contract type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByContractType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByContractTypeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Contract type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByContractTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByContractType");

            var localVarPath = "/api/contracts/search/contracttype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByContractType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Contract type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByContractTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByContractTypeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Contract type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByContractTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByContractType");

            var localVarPath = "/api/contracts/search/contracttype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByContractType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Custom field . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByCustomFieldWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Custom field . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsSearchByCustomField");

            var localVarPath = "/api/contracts/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Custom field . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByCustomFieldAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Custom field . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsSearchByCustomField");

            var localVarPath = "/api/contracts/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by End Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByEndDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByEndDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by End Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByEndDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsSearchByEndDate");

            var localVarPath = "/api/contracts/search/enddate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByEndDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by End Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByEndDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByEndDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by End Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByEndDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsSearchByEndDate");

            var localVarPath = "/api/contracts/search/enddate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByEndDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Reference . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByReference (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByReferenceWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Reference . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByReferenceWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByReference");

            var localVarPath = "/api/contracts/search/reference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Reference . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByReferenceAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByReferenceAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Reference . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByReferenceAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByReference");

            var localVarPath = "/api/contracts/search/reference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Start Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByStartDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByStartDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Start Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByStartDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsSearchByStartDate");

            var localVarPath = "/api/contracts/search/startdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByStartDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Start Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByStartDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByStartDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Start Date . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByStartDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsSearchByStartDate");

            var localVarPath = "/api/contracts/search/startdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByStartDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Status . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse ContractsSearchByStatus (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = ContractsSearchByStatusWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Contract by Status . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > ContractsSearchByStatusWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByStatus");

            var localVarPath = "/api/contracts/search/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search Contract by Status . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> ContractsSearchByStatusAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await ContractsSearchByStatusAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Contract by Status . 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> ContractsSearchByStatusAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ContractsApi->ContractsSearchByStatus");

            var localVarPath = "/api/contracts/search/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSearchByStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContractsSetContractDocumentFile (int? contractNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContractsSetContractDocumentFileWithHttpInfo(contractNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContractsSetContractDocumentFileWithHttpInfo (int? contractNumber, int? documentID)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsSetContractDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsSetContractDocumentFile");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSetContractDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContractsSetContractDocumentFileAsync (int? contractNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContractsSetContractDocumentFileAsyncWithHttpInfo(contractNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overwrites the contract document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsSetContractDocumentFileAsyncWithHttpInfo (int? contractNumber, int? documentID)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsSetContractDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsSetContractDocumentFile");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSetContractDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse ContractsSetContractDocumentFileName (int? contractNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = ContractsSetContractDocumentFileNameWithHttpInfo(contractNumber, documentID, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > ContractsSetContractDocumentFileNameWithHttpInfo (int? contractNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsSetContractDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsSetContractDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ContractsApi->ContractsSetContractDocumentFileName");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSetContractDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> ContractsSetContractDocumentFileNameAsync (int? contractNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await ContractsSetContractDocumentFileNameAsyncWithHttpInfo(contractNumber, documentID, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> ContractsSetContractDocumentFileNameAsyncWithHttpInfo (int? contractNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsSetContractDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsSetContractDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ContractsApi->ContractsSetContractDocumentFileName");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsSetContractDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates a contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>TsiWebContractResponse</returns>
        public TsiWebContractResponse ContractsUpdateContract (int? contractNumber, TsiWebUpdateContractModel model)
        {
             ApiResponse<TsiWebContractResponse> localVarResponse = ContractsUpdateContractWithHttpInfo(contractNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>ApiResponse of TsiWebContractResponse</returns>
        public ApiResponse< TsiWebContractResponse > ContractsUpdateContractWithHttpInfo (int? contractNumber, TsiWebUpdateContractModel model)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateContract");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateContract");

            var localVarPath = "/api/contracts/{contractNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractResponse)));
        }

        /// <summary>
        /// Updates a contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>Task of TsiWebContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContractResponse> ContractsUpdateContractAsync (int? contractNumber, TsiWebUpdateContractModel model)
        {
             ApiResponse<TsiWebContractResponse> localVarResponse = await ContractsUpdateContractAsyncWithHttpInfo(contractNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a contract. BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The account number.</param>
        /// <param name="model">Update Contract Request.</param>
        /// <returns>Task of ApiResponse (TsiWebContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractResponse>> ContractsUpdateContractAsyncWithHttpInfo (int? contractNumber, TsiWebUpdateContractModel model)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateContract");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateContract");

            var localVarPath = "/api/contracts/{contractNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractResponse)));
        }

        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse ContractsUpdateContractDocumentProperties (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = ContractsUpdateContractDocumentPropertiesWithHttpInfo(contractNumber, documentID, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > ContractsUpdateContractDocumentPropertiesWithHttpInfo (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateContractDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsUpdateContractDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ContractsApi->ContractsUpdateContractDocumentProperties");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateContractDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> ContractsUpdateContractDocumentPropertiesAsync (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await ContractsUpdateContractDocumentPropertiesAsyncWithHttpInfo(contractNumber, documentID, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the contract document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The update document request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> ContractsUpdateContractDocumentPropertiesAsyncWithHttpInfo (int? contractNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateContractDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling ContractsApi->ContractsUpdateContractDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ContractsApi->ContractsUpdateContractDocumentProperties");

            var localVarPath = "/api/contracts/{contractNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateContractDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates a contract line item detail 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>TsiWebContractDetailResponse</returns>
        public TsiWebContractDetailResponse ContractsUpdateContractLineItem (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model)
        {
             ApiResponse<TsiWebContractDetailResponse> localVarResponse = ContractsUpdateContractLineItemWithHttpInfo(contractNumber, contractDetailNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a contract line item detail 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>ApiResponse of TsiWebContractDetailResponse</returns>
        public ApiResponse< TsiWebContractDetailResponse > ContractsUpdateContractLineItemWithHttpInfo (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateContractLineItem");
            // verify the required parameter 'contractDetailNumber' is set
            if (contractDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractDetailNumber' when calling ContractsApi->ContractsUpdateContractLineItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateContractLineItem");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered/{contractDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (contractDetailNumber != null) localVarPathParams.Add("contractDetailNumber", this.Configuration.ApiClient.ParameterToString(contractDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateContractLineItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetailResponse)));
        }

        /// <summary>
        /// Updates a contract line item detail 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>Task of TsiWebContractDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebContractDetailResponse> ContractsUpdateContractLineItemAsync (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model)
        {
             ApiResponse<TsiWebContractDetailResponse> localVarResponse = await ContractsUpdateContractLineItemAsyncWithHttpInfo(contractNumber, contractDetailNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a contract line item detail 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract identifier number.</param>
        /// <param name="contractDetailNumber">The contract line item detail identifier.</param>
        /// <param name="model">UpdateContractLineItemModel.</param>
        /// <returns>Task of ApiResponse (TsiWebContractDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebContractDetailResponse>> ContractsUpdateContractLineItemAsyncWithHttpInfo (int? contractNumber, int? contractDetailNumber, TsiWebUpdateContractLineItemModel model)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateContractLineItem");
            // verify the required parameter 'contractDetailNumber' is set
            if (contractDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractDetailNumber' when calling ContractsApi->ContractsUpdateContractLineItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateContractLineItem");

            var localVarPath = "/api/contracts/{contractNumber}/itemscovered/{contractDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (contractDetailNumber != null) localVarPathParams.Add("contractDetailNumber", this.Configuration.ApiClient.ParameterToString(contractDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateContractLineItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebContractDetailResponse)));
        }

        /// <summary>
        /// Updates the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse ContractsUpdateCustomFields (int? contractNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = ContractsUpdateCustomFieldsWithHttpInfo(contractNumber, customFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > ContractsUpdateCustomFieldsWithHttpInfo (int? contractNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling ContractsApi->ContractsUpdateCustomFields");

            var localVarPath = "/api/contracts/{contractNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> ContractsUpdateCustomFieldsAsync (int? contractNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await ContractsUpdateCustomFieldsAsyncWithHttpInfo(contractNumber, customFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the custom fields for a contract. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractNumber">The contract number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> ContractsUpdateCustomFieldsAsyncWithHttpInfo (int? contractNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'contractNumber' is set
            if (contractNumber == null)
                throw new ApiException(400, "Missing required parameter 'contractNumber' when calling ContractsApi->ContractsUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling ContractsApi->ContractsUpdateCustomFields");

            var localVarPath = "/api/contracts/{contractNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractNumber != null) localVarPathParams.Add("contractNumber", this.Configuration.ApiClient.ParameterToString(contractNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContractsUpdateMeterReadings (TsiWebMeterModel model)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContractsUpdateMeterReadingsWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContractsUpdateMeterReadingsWithHttpInfo (TsiWebMeterModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateMeterReadings");

            var localVarPath = "/api/contracts/meters/readings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateMeterReadings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContractsUpdateMeterReadingsAsync (TsiWebMeterModel model)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContractsUpdateMeterReadingsAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsUpdateMeterReadingsAsyncWithHttpInfo (TsiWebMeterModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateMeterReadings");

            var localVarPath = "/api/contracts/meters/readings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateMeterReadings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ContractsUpdateMeterReadings_0 (TsiWebMeterModel model)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ContractsUpdateMeterReadings_0WithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ContractsUpdateMeterReadings_0WithHttpInfo (TsiWebMeterModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateMeterReadings_0");

            var localVarPath = "/api/contracts/meters/readings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateMeterReadings_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ContractsUpdateMeterReadings_0Async (TsiWebMeterModel model)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ContractsUpdateMeterReadings_0AsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a contract meter for a DeviceID 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">ContractMeterModel.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ContractsUpdateMeterReadings_0AsyncWithHttpInfo (TsiWebMeterModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ContractsApi->ContractsUpdateMeterReadings_0");

            var localVarPath = "/api/contracts/meters/readings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsUpdateMeterReadings_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

    }
}
