/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMasterTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates the account custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        TsiWebCustomFieldCategoryResponse MasterTablesCreateAccountCustomFieldCategory (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Creates the account custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        ApiResponse<TsiWebCustomFieldCategoryResponse> MasterTablesCreateAccountCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Creates the true / false custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateBooleanCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the true / false custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateBooleanCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        TsiWebCustomFieldCategoryResponse MasterTablesCreateContactCustomFieldCategory (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Creates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        ApiResponse<TsiWebCustomFieldCategoryResponse> MasterTablesCreateContactCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Creates the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesCreateContractMeter (string meter);

        /// <summary>
        /// Creates the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesCreateContractMeterWithHttpInfo (string meter);
        /// <summary>
        /// Creates the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesCreateContractMeterGroup (string meterGroup);

        /// <summary>
        /// Creates the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesCreateContractMeterGroupWithHttpInfo (string meterGroup);
        /// <summary>
        /// Creates the currency custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateCurrencyCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the currency custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateCurrencyCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the date custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateDateCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the date custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateDateCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the drop down custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateDropDownCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the drop down custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateDropDownCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>TsiWebExpensePaymentTypesResponse</returns>
        TsiWebExpensePaymentTypesResponse MasterTablesCreateExpensePaymentType (TsiWebExpensePaymentTypeModel expensePaymentType);

        /// <summary>
        /// Creates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>ApiResponse of TsiWebExpensePaymentTypesResponse</returns>
        ApiResponse<TsiWebExpensePaymentTypesResponse> MasterTablesCreateExpensePaymentTypeWithHttpInfo (TsiWebExpensePaymentTypeModel expensePaymentType);
        /// <summary>
        /// Create an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>TsiWebExpenseTypesResponse</returns>
        TsiWebExpenseTypesResponse MasterTablesCreateExpenseType (TsiWebExpenseTypeModel expenseType);

        /// <summary>
        /// Create an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>ApiResponse of TsiWebExpenseTypesResponse</returns>
        ApiResponse<TsiWebExpenseTypesResponse> MasterTablesCreateExpenseTypeWithHttpInfo (TsiWebExpenseTypeModel expenseType);
        /// <summary>
        /// Creates the journal action.
        /// </summary>
        /// <remarks>
        /// If Weight is excluded from the POST values it will be defaulted to 0.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>TsiWebJournalActionsResponse</returns>
        TsiWebJournalActionsResponse MasterTablesCreateJournalAction (TsiWebJournalAction action);

        /// <summary>
        /// Creates the journal action.
        /// </summary>
        /// <remarks>
        /// If Weight is excluded from the POST values it will be defaulted to 0.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>ApiResponse of TsiWebJournalActionsResponse</returns>
        ApiResponse<TsiWebJournalActionsResponse> MasterTablesCreateJournalActionWithHttpInfo (TsiWebJournalAction action);
        /// <summary>
        /// Creates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesCreateJournalTopic (string journalTopic);

        /// <summary>
        /// Creates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesCreateJournalTopicWithHttpInfo (string journalTopic);
        /// <summary>
        /// Creates the number custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateNumberCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the number custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateNumberCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        TsiWebCustomFieldCategoryResponse MasterTablesCreateOpportunityCustomFieldCategory (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Creates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        ApiResponse<TsiWebCustomFieldCategoryResponse> MasterTablesCreateOpportunityCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Creates the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesCreateResolution (string resolution);

        /// <summary>
        /// Creates the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesCreateResolutionWithHttpInfo (string resolution);
        /// <summary>
        /// Creates the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesCreateServiceOrderProfile (string profile);

        /// <summary>
        /// Creates the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesCreateServiceOrderProfileWithHttpInfo (string profile);
        /// <summary>
        /// Creates the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesCreateSymptom (string symptom);

        /// <summary>
        /// Creates the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesCreateSymptomWithHttpInfo (string symptom);
        /// <summary>
        /// Creates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateTextCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateTextCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the time custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesCreateTimeCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the time custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateTimeCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>TsiWebTimeEntryReasonResponse</returns>
        TsiWebTimeEntryReasonResponse MasterTablesCreateTimeEntryReason (TsiWebCreateTimeEntryReasonRequest reason);

        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>ApiResponse of TsiWebTimeEntryReasonResponse</returns>
        ApiResponse<TsiWebTimeEntryReasonResponse> MasterTablesCreateTimeEntryReasonWithHttpInfo (TsiWebCreateTimeEntryReasonRequest reason);
        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        List<TsiWebCustomFieldCategory> MasterTablesGetAccountCustomFields (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        ApiResponse<List<TsiWebCustomFieldCategory>> MasterTablesGetAccountCustomFieldsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        List<TsiWebCustomFieldCategory> MasterTablesGetAccountCustomFields_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        ApiResponse<List<TsiWebCustomFieldCategory>> MasterTablesGetAccountCustomFields_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMarketingGroup&gt;</returns>
        List<TsiWebMarketingGroup> MasterTablesGetAccountGroups ();

        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMarketingGroup&gt;</returns>
        ApiResponse<List<TsiWebMarketingGroup>> MasterTablesGetAccountGroupsWithHttpInfo ();
        /// <summary>
        /// Gets the account profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebAccountProfile&gt;</returns>
        List<TsiWebAccountProfile> MasterTablesGetAccountProfiles ();

        /// <summary>
        /// Gets the account profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebAccountProfile&gt;</returns>
        ApiResponse<List<TsiWebAccountProfile>> MasterTablesGetAccountProfilesWithHttpInfo ();
        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebAccountSource&gt;</returns>
        List<TsiWebAccountSource> MasterTablesGetAccountSources (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountSource&gt;</returns>
        ApiResponse<List<TsiWebAccountSource>> MasterTablesGetAccountSourcesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebAccountSource&gt;</returns>
        List<TsiWebAccountSource> MasterTablesGetAccountSources_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountSource&gt;</returns>
        ApiResponse<List<TsiWebAccountSource>> MasterTablesGetAccountSources_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebAccountStatus&gt;</returns>
        List<TsiWebAccountStatus> MasterTablesGetAccountStatuses (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountStatus&gt;</returns>
        ApiResponse<List<TsiWebAccountStatus>> MasterTablesGetAccountStatusesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebAccountStatus&gt;</returns>
        List<TsiWebAccountStatus> MasterTablesGetAccountStatuses_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountStatus&gt;</returns>
        ApiResponse<List<TsiWebAccountStatus>> MasterTablesGetAccountStatuses_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebAccountType&gt;</returns>
        List<TsiWebAccountType> MasterTablesGetAccountTypes (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountType&gt;</returns>
        ApiResponse<List<TsiWebAccountType>> MasterTablesGetAccountTypesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebAccountType&gt;</returns>
        List<TsiWebAccountType> MasterTablesGetAccountTypes_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountType&gt;</returns>
        ApiResponse<List<TsiWebAccountType>> MasterTablesGetAccountTypes_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebAssetType&gt;</returns>
        List<TsiWebAssetType> MasterTablesGetAssetTypes ();

        /// <summary>
        /// Gets the asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebAssetType&gt;</returns>
        ApiResponse<List<TsiWebAssetType>> MasterTablesGetAssetTypesWithHttpInfo ();
        /// <summary>
        /// Gets the bo tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebBOTaxCode&gt;</returns>
        List<TsiWebBOTaxCode> MasterTablesGetBOTaxCodes ();

        /// <summary>
        /// Gets the bo tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebBOTaxCode&gt;</returns>
        ApiResponse<List<TsiWebBOTaxCode>> MasterTablesGetBOTaxCodesWithHttpInfo ();
        /// <summary>
        /// Gets the bo tax types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebBOTaxType&gt;</returns>
        List<TsiWebBOTaxType> MasterTablesGetBOTaxTypes ();

        /// <summary>
        /// Gets the bo tax types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebBOTaxType&gt;</returns>
        ApiResponse<List<TsiWebBOTaxType>> MasterTablesGetBOTaxTypesWithHttpInfo ();
        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        List<TsiWebCustomFieldCategory> MasterTablesGetContactCustomFields (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        ApiResponse<List<TsiWebCustomFieldCategory>> MasterTablesGetContactCustomFieldsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        List<TsiWebCustomFieldCategory> MasterTablesGetContactCustomFields_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        ApiResponse<List<TsiWebCustomFieldCategory>> MasterTablesGetContactCustomFields_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMarketingGroup&gt;</returns>
        List<TsiWebMarketingGroup> MasterTablesGetContactGroups ();

        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMarketingGroup&gt;</returns>
        ApiResponse<List<TsiWebMarketingGroup>> MasterTablesGetContactGroupsWithHttpInfo ();
        /// <summary>
        /// Gets the contact profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebContactProfile&gt;</returns>
        List<TsiWebContactProfile> MasterTablesGetContactProfiles ();

        /// <summary>
        /// Gets the contact profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebContactProfile&gt;</returns>
        ApiResponse<List<TsiWebContactProfile>> MasterTablesGetContactProfilesWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined contract meter groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMeterGroup&gt;</returns>
        List<TsiWebMeterGroup> MasterTablesGetContractMeterGroups ();

        /// <summary>
        /// Gets a list of the defined contract meter groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMeterGroup&gt;</returns>
        ApiResponse<List<TsiWebMeterGroup>> MasterTablesGetContractMeterGroupsWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined contract meters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMeter&gt;</returns>
        List<TsiWebMeter> MasterTablesGetContractMeters ();

        /// <summary>
        /// Gets a list of the defined contract meters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMeter&gt;</returns>
        ApiResponse<List<TsiWebMeter>> MasterTablesGetContractMetersWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCountry&gt;</returns>
        List<TsiWebCountry> MasterTablesGetCountries (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCountry&gt;</returns>
        ApiResponse<List<TsiWebCountry>> MasterTablesGetCountriesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCountry&gt;</returns>
        List<TsiWebCountry> MasterTablesGetCountries_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCountry&gt;</returns>
        ApiResponse<List<TsiWebCountry>> MasterTablesGetCountries_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the departments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebDepartment&gt;</returns>
        List<TsiWebDepartment> MasterTablesGetDepartments ();

        /// <summary>
        /// Gets the departments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebDepartment&gt;</returns>
        ApiResponse<List<TsiWebDepartment>> MasterTablesGetDepartmentsWithHttpInfo ();
        /// <summary>
        /// Gets the dispatch boards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebDispatchBoard&gt;</returns>
        List<TsiWebDispatchBoard> MasterTablesGetDispatchBoards ();

        /// <summary>
        /// Gets the dispatch boards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebDispatchBoard&gt;</returns>
        ApiResponse<List<TsiWebDispatchBoard>> MasterTablesGetDispatchBoardsWithHttpInfo ();
        /// <summary>
        /// Gets the document topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebDocumentTopic&gt;</returns>
        List<TsiWebDocumentTopic> MasterTablesGetDocumentTopics ();

        /// <summary>
        /// Gets the document topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebDocumentTopic&gt;</returns>
        ApiResponse<List<TsiWebDocumentTopic>> MasterTablesGetDocumentTopicsWithHttpInfo ();
        /// <summary>
        /// Gets the expense payment types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebExpensePaymentType&gt;</returns>
        List<TsiWebExpensePaymentType> MasterTablesGetExpensePaymentTypes ();

        /// <summary>
        /// Gets the expense payment types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebExpensePaymentType&gt;</returns>
        ApiResponse<List<TsiWebExpensePaymentType>> MasterTablesGetExpensePaymentTypesWithHttpInfo ();
        /// <summary>
        /// Gets the expense types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebExpenseType&gt;</returns>
        List<TsiWebExpenseType> MasterTablesGetExpenseTypes ();

        /// <summary>
        /// Gets the expense types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebExpenseType&gt;</returns>
        ApiResponse<List<TsiWebExpenseType>> MasterTablesGetExpenseTypesWithHttpInfo ();
        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebExternalProduct&gt;</returns>
        List<TsiWebExternalProduct> MasterTablesGetExternalProducts (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebExternalProduct&gt;</returns>
        ApiResponse<List<TsiWebExternalProduct>> MasterTablesGetExternalProductsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebExternalProduct&gt;</returns>
        List<TsiWebExternalProduct> MasterTablesGetExternalProducts_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebExternalProduct&gt;</returns>
        ApiResponse<List<TsiWebExternalProduct>> MasterTablesGetExternalProducts_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Returns the freight terms from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebFreightTerm&gt;</returns>
        List<TsiWebFreightTerm> MasterTablesGetFreightTerms ();

        /// <summary>
        /// Returns the freight terms from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebFreightTerm&gt;</returns>
        ApiResponse<List<TsiWebFreightTerm>> MasterTablesGetFreightTermsWithHttpInfo ();
        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>List&lt;TsiWebInventoryLocation&gt;</returns>
        List<TsiWebInventoryLocation> MasterTablesGetInventoryLocations (bool? excludeSystemEntries = null);

        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebInventoryLocation&gt;</returns>
        ApiResponse<List<TsiWebInventoryLocation>> MasterTablesGetInventoryLocationsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>List&lt;TsiWebInventoryLocation&gt;</returns>
        List<TsiWebInventoryLocation> MasterTablesGetInventoryLocations_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>ApiResponse of List&lt;TsiWebInventoryLocation&gt;</returns>
        ApiResponse<List<TsiWebInventoryLocation>> MasterTablesGetInventoryLocations_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the invoice terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebInvoiceTerm&gt;</returns>
        List<TsiWebInvoiceTerm> MasterTablesGetInvoiceTerms ();

        /// <summary>
        /// Gets the invoice terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebInvoiceTerm&gt;</returns>
        ApiResponse<List<TsiWebInvoiceTerm>> MasterTablesGetInvoiceTermsWithHttpInfo ();
        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebJournalAction&gt;</returns>
        List<TsiWebJournalAction> MasterTablesGetJournalActions (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalAction&gt;</returns>
        ApiResponse<List<TsiWebJournalAction>> MasterTablesGetJournalActionsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebJournalAction&gt;</returns>
        List<TsiWebJournalAction> MasterTablesGetJournalActions_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalAction&gt;</returns>
        ApiResponse<List<TsiWebJournalAction>> MasterTablesGetJournalActions_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebJournalTopic&gt;</returns>
        List<TsiWebJournalTopic> MasterTablesGetJournalTopics (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalTopic&gt;</returns>
        ApiResponse<List<TsiWebJournalTopic>> MasterTablesGetJournalTopicsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebJournalTopic&gt;</returns>
        List<TsiWebJournalTopic> MasterTablesGetJournalTopics_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalTopic&gt;</returns>
        ApiResponse<List<TsiWebJournalTopic>> MasterTablesGetJournalTopics_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the name prefixes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPrefix&gt;</returns>
        List<TsiWebPrefix> MasterTablesGetNamePrefixes ();

        /// <summary>
        /// Gets the name prefixes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPrefix&gt;</returns>
        ApiResponse<List<TsiWebPrefix>> MasterTablesGetNamePrefixesWithHttpInfo ();
        /// <summary>
        /// Returns the defined Asset Next Action Tupes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebNextActionType&gt;</returns>
        List<TsiWebNextActionType> MasterTablesGetNextActionTypes ();

        /// <summary>
        /// Returns the defined Asset Next Action Tupes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebNextActionType&gt;</returns>
        ApiResponse<List<TsiWebNextActionType>> MasterTablesGetNextActionTypesWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity close reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebCloseReason&gt;</returns>
        List<TsiWebCloseReason> MasterTablesGetOpportunityCloseReasons ();

        /// <summary>
        /// Gets the opportunity close reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebCloseReason&gt;</returns>
        ApiResponse<List<TsiWebCloseReason>> MasterTablesGetOpportunityCloseReasonsWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        List<TsiWebCustomFieldCategory> MasterTablesGetOpportunityCustomFields (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        ApiResponse<List<TsiWebCustomFieldCategory>> MasterTablesGetOpportunityCustomFieldsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        List<TsiWebCustomFieldCategory> MasterTablesGetOpportunityCustomFields_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        ApiResponse<List<TsiWebCustomFieldCategory>> MasterTablesGetOpportunityCustomFields_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        List<TsiWebHowDidYouHearAboutUs> MasterTablesGetOpportunityHowDidYouHearAboutUs (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        ApiResponse<List<TsiWebHowDidYouHearAboutUs>> MasterTablesGetOpportunityHowDidYouHearAboutUsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        List<TsiWebHowDidYouHearAboutUs> MasterTablesGetOpportunityHowDidYouHearAboutUs_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        ApiResponse<List<TsiWebHowDidYouHearAboutUs>> MasterTablesGetOpportunityHowDidYouHearAboutUs_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the opportunity names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebOpportunityName&gt;</returns>
        List<TsiWebOpportunityName> MasterTablesGetOpportunityNames ();

        /// <summary>
        /// Gets the opportunity names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityName&gt;</returns>
        ApiResponse<List<TsiWebOpportunityName>> MasterTablesGetOpportunityNamesWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity stages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebOpportunityStage&gt;</returns>
        List<TsiWebOpportunityStage> MasterTablesGetOpportunityStages ();

        /// <summary>
        /// Gets the opportunity stages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityStage&gt;</returns>
        ApiResponse<List<TsiWebOpportunityStage>> MasterTablesGetOpportunityStagesWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebOpportunityStatus&gt;</returns>
        List<TsiWebOpportunityStatus> MasterTablesGetOpportunityStatuses (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityStatus&gt;</returns>
        ApiResponse<List<TsiWebOpportunityStatus>> MasterTablesGetOpportunityStatusesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebOpportunityStatus&gt;</returns>
        List<TsiWebOpportunityStatus> MasterTablesGetOpportunityStatuses_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityStatus&gt;</returns>
        ApiResponse<List<TsiWebOpportunityStatus>> MasterTablesGetOpportunityStatuses_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebOpportunityType&gt;</returns>
        List<TsiWebOpportunityType> MasterTablesGetOpportunityTypes (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityType&gt;</returns>
        ApiResponse<List<TsiWebOpportunityType>> MasterTablesGetOpportunityTypesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebOpportunityType&gt;</returns>
        List<TsiWebOpportunityType> MasterTablesGetOpportunityTypes_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityType&gt;</returns>
        ApiResponse<List<TsiWebOpportunityType>> MasterTablesGetOpportunityTypes_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebPasswordCategory&gt;</returns>
        List<TsiWebPasswordCategory> MasterTablesGetPasswordCategories (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebPasswordCategory&gt;</returns>
        ApiResponse<List<TsiWebPasswordCategory>> MasterTablesGetPasswordCategoriesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebPasswordCategory&gt;</returns>
        List<TsiWebPasswordCategory> MasterTablesGetPasswordCategories_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPasswordCategory&gt;</returns>
        ApiResponse<List<TsiWebPasswordCategory>> MasterTablesGetPasswordCategories_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the payment methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPaymentMethod&gt;</returns>
        List<TsiWebPaymentMethod> MasterTablesGetPaymentMethods ();

        /// <summary>
        /// Gets the payment methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPaymentMethod&gt;</returns>
        ApiResponse<List<TsiWebPaymentMethod>> MasterTablesGetPaymentMethodsWithHttpInfo ();
        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebPhoneLocation&gt;</returns>
        List<TsiWebPhoneLocation> MasterTablesGetPhoneLocations (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneLocation&gt;</returns>
        ApiResponse<List<TsiWebPhoneLocation>> MasterTablesGetPhoneLocationsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebPhoneLocation&gt;</returns>
        List<TsiWebPhoneLocation> MasterTablesGetPhoneLocations_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneLocation&gt;</returns>
        ApiResponse<List<TsiWebPhoneLocation>> MasterTablesGetPhoneLocations_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the price levels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPriceLevel&gt;</returns>
        List<TsiWebPriceLevel> MasterTablesGetPriceLevels ();

        /// <summary>
        /// Gets the price levels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPriceLevel&gt;</returns>
        ApiResponse<List<TsiWebPriceLevel>> MasterTablesGetPriceLevelsWithHttpInfo ();
        /// <summary>
        /// Returns the purchase order descriptions from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPurchaseOrderDescription&gt;</returns>
        List<TsiWebPurchaseOrderDescription> MasterTablesGetPurchaseOrderDescriptions ();

        /// <summary>
        /// Returns the purchase order descriptions from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderDescription&gt;</returns>
        ApiResponse<List<TsiWebPurchaseOrderDescription>> MasterTablesGetPurchaseOrderDescriptionsWithHttpInfo ();
        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>List&lt;TsiWebRepSummary&gt;</returns>
        List<TsiWebRepSummary> MasterTablesGetReps (bool? activeOnly = null);

        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebRepSummary&gt;</returns>
        ApiResponse<List<TsiWebRepSummary>> MasterTablesGetRepsWithHttpInfo (bool? activeOnly = null);
        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>List&lt;TsiWebRepSummary&gt;</returns>
        List<TsiWebRepSummary> MasterTablesGetReps_0 (bool? activeOnly);

        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>ApiResponse of List&lt;TsiWebRepSummary&gt;</returns>
        ApiResponse<List<TsiWebRepSummary>> MasterTablesGetReps_0WithHttpInfo (bool? activeOnly);
        /// <summary>
        /// Gets a list of the defined resolutions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebResolution&gt;</returns>
        List<TsiWebResolution> MasterTablesGetResolutions ();

        /// <summary>
        /// Gets a list of the defined resolutions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebResolution&gt;</returns>
        ApiResponse<List<TsiWebResolution>> MasterTablesGetResolutionsWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined SIC codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSICCode&gt;</returns>
        List<TsiWebSICCode> MasterTablesGetSICCodes ();

        /// <summary>
        /// Gets a list of the defined SIC codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSICCode&gt;</returns>
        ApiResponse<List<TsiWebSICCode>> MasterTablesGetSICCodesWithHttpInfo ();
        /// <summary>
        /// Gets the sales tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSalesTaxCode&gt;</returns>
        List<TsiWebSalesTaxCode> MasterTablesGetSalesTaxCodes ();

        /// <summary>
        /// Gets the sales tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSalesTaxCode&gt;</returns>
        ApiResponse<List<TsiWebSalesTaxCode>> MasterTablesGetSalesTaxCodesWithHttpInfo ();
        /// <summary>
        /// Returns the defined service order brief descriptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderBriefDescription&gt;</returns>
        List<TsiWebServiceOrderBriefDescription> MasterTablesGetServiceOrderBriefDescriptions ();

        /// <summary>
        /// Returns the defined service order brief descriptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderBriefDescription&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderBriefDescription>> MasterTablesGetServiceOrderBriefDescriptionsWithHttpInfo ();
        /// <summary>
        /// Returns the defined service order comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderComment&gt;</returns>
        List<TsiWebServiceOrderComment> MasterTablesGetServiceOrderComments ();

        /// <summary>
        /// Returns the defined service order comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderComment&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderComment>> MasterTablesGetServiceOrderCommentsWithHttpInfo ();
        /// <summary>
        /// Returns the defined service order detail comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderDetailComment&gt;</returns>
        List<TsiWebServiceOrderDetailComment> MasterTablesGetServiceOrderDetailComments ();

        /// <summary>
        /// Returns the defined service order detail comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderDetailComment&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderDetailComment>> MasterTablesGetServiceOrderDetailCommentsWithHttpInfo ();
        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        List<TsiWebServiceOrderNoteTopic> MasterTablesGetServiceOrderNoteTopics (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderNoteTopic>> MasterTablesGetServiceOrderNoteTopicsWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        List<TsiWebServiceOrderNoteTopic> MasterTablesGetServiceOrderNoteTopics_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderNoteTopic>> MasterTablesGetServiceOrderNoteTopics_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of defined service order priorities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderPriority&gt;</returns>
        List<TsiWebServiceOrderPriority> MasterTablesGetServiceOrderPriorities ();

        /// <summary>
        /// Gets a list of defined service order priorities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderPriority&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderPriority>> MasterTablesGetServiceOrderPrioritiesWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderProfile&gt;</returns>
        List<TsiWebServiceOrderProfile> MasterTablesGetServiceOrderProfiles ();

        /// <summary>
        /// Gets a list of the defined service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderProfile&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderProfile>> MasterTablesGetServiceOrderProfilesWithHttpInfo ();
        /// <summary>
        /// Gets a list of defined service order severities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderSeverity&gt;</returns>
        List<TsiWebServiceOrderSeverity> MasterTablesGetServiceOrderSeverities ();

        /// <summary>
        /// Gets a list of defined service order severities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderSeverity&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderSeverity>> MasterTablesGetServiceOrderSeveritiesWithHttpInfo ();
        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>TsiWebServiceOrderStatus</returns>
        TsiWebServiceOrderStatus MasterTablesGetServiceOrderStatuses (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderStatus</returns>
        ApiResponse<TsiWebServiceOrderStatus> MasterTablesGetServiceOrderStatusesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>TsiWebServiceOrderStatus</returns>
        TsiWebServiceOrderStatus MasterTablesGetServiceOrderStatuses_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderStatus</returns>
        ApiResponse<TsiWebServiceOrderStatus> MasterTablesGetServiceOrderStatuses_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderTemplate&gt;</returns>
        List<TsiWebServiceOrderTemplate> MasterTablesGetServiceOrderTemplates ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderTemplate&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderTemplate>> MasterTablesGetServiceOrderTemplatesWithHttpInfo ();
        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>List&lt;TsiWebServiceOrderType&gt;</returns>
        List<TsiWebServiceOrderType> MasterTablesGetServiceOrderTypes (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderType&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderType>> MasterTablesGetServiceOrderTypesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>List&lt;TsiWebServiceOrderType&gt;</returns>
        List<TsiWebServiceOrderType> MasterTablesGetServiceOrderTypes_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderType&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderType>> MasterTablesGetServiceOrderTypes_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of the defined service zones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceZone&gt;</returns>
        List<TsiWebServiceZone> MasterTablesGetServiceZones ();

        /// <summary>
        /// Gets a list of the defined service zones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceZone&gt;</returns>
        ApiResponse<List<TsiWebServiceZone>> MasterTablesGetServiceZonesWithHttpInfo ();
        /// <summary>
        /// Returns shippers stored in the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebShipper&gt;</returns>
        List<TsiWebShipper> MasterTablesGetShippers ();

        /// <summary>
        /// Returns shippers stored in the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebShipper&gt;</returns>
        ApiResponse<List<TsiWebShipper>> MasterTablesGetShippersWithHttpInfo ();
        /// <summary>
        /// Gets the shipping methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebShippingMethod&gt;</returns>
        List<TsiWebShippingMethod> MasterTablesGetShippingMethods ();

        /// <summary>
        /// Gets the shipping methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebShippingMethod&gt;</returns>
        ApiResponse<List<TsiWebShippingMethod>> MasterTablesGetShippingMethodsWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebState&gt;</returns>
        List<TsiWebState> MasterTablesGetStates (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebState&gt;</returns>
        ApiResponse<List<TsiWebState>> MasterTablesGetStatesWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebState&gt;</returns>
        List<TsiWebState> MasterTablesGetStates_0 (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebState&gt;</returns>
        ApiResponse<List<TsiWebState>> MasterTablesGetStates_0WithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the sub contractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSubContractor&gt;</returns>
        List<TsiWebSubContractor> MasterTablesGetSubContractors ();

        /// <summary>
        /// Gets the sub contractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSubContractor&gt;</returns>
        ApiResponse<List<TsiWebSubContractor>> MasterTablesGetSubContractorsWithHttpInfo ();
        /// <summary>
        /// Gets the systems.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSupportedSystem&gt;</returns>
        List<TsiWebSupportedSystem> MasterTablesGetSupportedSystems ();

        /// <summary>
        /// Gets the systems.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSupportedSystem&gt;</returns>
        ApiResponse<List<TsiWebSupportedSystem>> MasterTablesGetSupportedSystemsWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined symptoms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSymptom&gt;</returns>
        List<TsiWebSymptom> MasterTablesGetSymptoms ();

        /// <summary>
        /// Gets a list of the defined symptoms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSymptom&gt;</returns>
        ApiResponse<List<TsiWebSymptom>> MasterTablesGetSymptomsWithHttpInfo ();
        /// <summary>
        /// Gets the system types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSystemType&gt;</returns>
        List<TsiWebSystemType> MasterTablesGetSystemTypes ();

        /// <summary>
        /// Gets the system types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSystemType&gt;</returns>
        ApiResponse<List<TsiWebSystemType>> MasterTablesGetSystemTypesWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task action plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskActionPlan&gt;</returns>
        List<TsiWebTaskActionPlan> MasterTablesGetTaskActionPlans ();

        /// <summary>
        /// Gets a list of the task action plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskActionPlan&gt;</returns>
        ApiResponse<List<TsiWebTaskActionPlan>> MasterTablesGetTaskActionPlansWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskAction&gt;</returns>
        List<TsiWebTaskAction> MasterTablesGetTaskActions ();

        /// <summary>
        /// Gets a list of the task action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskAction&gt;</returns>
        ApiResponse<List<TsiWebTaskAction>> MasterTablesGetTaskActionsWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task checklist tempaltes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskCheckListTemplate&gt;</returns>
        List<TsiWebTaskCheckListTemplate> MasterTablesGetTaskCheckListTemplates ();

        /// <summary>
        /// Gets a list of the task checklist tempaltes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskCheckListTemplate&gt;</returns>
        ApiResponse<List<TsiWebTaskCheckListTemplate>> MasterTablesGetTaskCheckListTemplatesWithHttpInfo ();
        /// <summary>
        /// Gets a list of the tasklibrary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskLibrary&gt;</returns>
        List<TsiWebTaskLibrary> MasterTablesGetTaskLibraries ();

        /// <summary>
        /// Gets a list of the tasklibrary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskLibrary&gt;</returns>
        ApiResponse<List<TsiWebTaskLibrary>> MasterTablesGetTaskLibrariesWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskResource&gt;</returns>
        List<TsiWebTaskResource> MasterTablesGetTaskResources ();

        /// <summary>
        /// Gets a list of the task resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskResource&gt;</returns>
        ApiResponse<List<TsiWebTaskResource>> MasterTablesGetTaskResourcesWithHttpInfo ();
        /// <summary>
        /// Gets the time entry reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTimeEntryReason&gt;</returns>
        List<TsiWebTimeEntryReason> MasterTablesGetTimeEntryReasons ();

        /// <summary>
        /// Gets the time entry reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTimeEntryReason&gt;</returns>
        ApiResponse<List<TsiWebTimeEntryReason>> MasterTablesGetTimeEntryReasonsWithHttpInfo ();
        /// <summary>
        /// Gets the titles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTitle&gt;</returns>
        List<TsiWebTitle> MasterTablesGetTitles ();

        /// <summary>
        /// Gets the titles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTitle&gt;</returns>
        ApiResponse<List<TsiWebTitle>> MasterTablesGetTitlesWithHttpInfo ();
        /// <summary>
        /// Updates the account custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        TsiWebCustomFieldCategoryResponse MasterTablesUpdateAccountCustomFieldCategory (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Updates the account custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        ApiResponse<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateAccountCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Updates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        TsiWebCustomFieldCategoryResponse MasterTablesUpdateContactCustomFieldCategory (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Updates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        ApiResponse<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateContactCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Updates the the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesUpdateContractMeter (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesUpdateContractMeterWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesUpdateContractMeterGroup (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesUpdateContractMeterGroupWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        TsiWebCustomFieldDefinitionResponse MasterTablesUpdateCustomFieldDefinition (int? customFieldID, TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Updates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        ApiResponse<TsiWebCustomFieldDefinitionResponse> MasterTablesUpdateCustomFieldDefinitionWithHttpInfo (int? customFieldID, TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Updates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TsiWebExpensePaymentTypesResponse</returns>
        TsiWebExpensePaymentTypesResponse MasterTablesUpdateExpensePaymentType (TsiWebUpdateExpensePaymentTypeRequest request);

        /// <summary>
        /// Updates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of TsiWebExpensePaymentTypesResponse</returns>
        ApiResponse<TsiWebExpensePaymentTypesResponse> MasterTablesUpdateExpensePaymentTypeWithHttpInfo (TsiWebUpdateExpensePaymentTypeRequest request);
        /// <summary>
        /// Updates an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TsiWebExpenseTypesResponse</returns>
        TsiWebExpenseTypesResponse MasterTablesUpdateExpenseType (TsiWebUpdateExpenseTypeRequest request);

        /// <summary>
        /// Updates an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of TsiWebExpenseTypesResponse</returns>
        ApiResponse<TsiWebExpenseTypesResponse> MasterTablesUpdateExpenseTypeWithHttpInfo (TsiWebUpdateExpenseTypeRequest request);
        /// <summary>
        /// Updates the journal action.
        /// </summary>
        /// <remarks>
        /// ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>TsiWebJournalActionsResponse</returns>
        TsiWebJournalActionsResponse MasterTablesUpdateJournalAction (TsiWebUpdateJournalActionRequest request);

        /// <summary>
        /// Updates the journal action.
        /// </summary>
        /// <remarks>
        /// ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>ApiResponse of TsiWebJournalActionsResponse</returns>
        ApiResponse<TsiWebJournalActionsResponse> MasterTablesUpdateJournalActionWithHttpInfo (TsiWebUpdateJournalActionRequest request);
        /// <summary>
        /// Updates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesUpdateJournalTopic (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesUpdateJournalTopicWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        TsiWebCustomFieldCategoryResponse MasterTablesUpdateOpportunityCustomFieldCategory (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Updates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        ApiResponse<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateOpportunityCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Updates the the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesUpdateResolution (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesUpdateResolutionWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesUpdateServiceOrderProfile (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesUpdateServiceOrderProfileWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        TsiWebMasterTableResponse MasterTablesUpdateSymptom (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        ApiResponse<TsiWebMasterTableResponse> MasterTablesUpdateSymptomWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>TsiWebTimeEntryReasonResponse</returns>
        TsiWebTimeEntryReasonResponse MasterTablesUpdateTimeEntryReason (TsiWebUpdateTimeEntryReasonRequest reason);

        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>ApiResponse of TsiWebTimeEntryReasonResponse</returns>
        ApiResponse<TsiWebTimeEntryReasonResponse> MasterTablesUpdateTimeEntryReasonWithHttpInfo (TsiWebUpdateTimeEntryReasonRequest reason);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates the account custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesCreateAccountCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Creates the account custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesCreateAccountCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Creates the true / false custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateBooleanCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the true / false custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateBooleanCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesCreateContactCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Creates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesCreateContactCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Creates the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateContractMeterAsync (string meter);

        /// <summary>
        /// Creates the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateContractMeterAsyncWithHttpInfo (string meter);
        /// <summary>
        /// Creates the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateContractMeterGroupAsync (string meterGroup);

        /// <summary>
        /// Creates the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateContractMeterGroupAsyncWithHttpInfo (string meterGroup);
        /// <summary>
        /// Creates the currency custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateCurrencyCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the currency custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateCurrencyCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the date custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateDateCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the date custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateDateCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the drop down custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateDropDownCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the drop down custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateDropDownCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>Task of TsiWebExpensePaymentTypesResponse</returns>
        System.Threading.Tasks.Task<TsiWebExpensePaymentTypesResponse> MasterTablesCreateExpensePaymentTypeAsync (TsiWebExpensePaymentTypeModel expensePaymentType);

        /// <summary>
        /// Creates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>Task of ApiResponse (TsiWebExpensePaymentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebExpensePaymentTypesResponse>> MasterTablesCreateExpensePaymentTypeAsyncWithHttpInfo (TsiWebExpensePaymentTypeModel expensePaymentType);
        /// <summary>
        /// Create an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>Task of TsiWebExpenseTypesResponse</returns>
        System.Threading.Tasks.Task<TsiWebExpenseTypesResponse> MasterTablesCreateExpenseTypeAsync (TsiWebExpenseTypeModel expenseType);

        /// <summary>
        /// Create an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>Task of ApiResponse (TsiWebExpenseTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebExpenseTypesResponse>> MasterTablesCreateExpenseTypeAsyncWithHttpInfo (TsiWebExpenseTypeModel expenseType);
        /// <summary>
        /// Creates the journal action.
        /// </summary>
        /// <remarks>
        /// If Weight is excluded from the POST values it will be defaulted to 0.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>Task of TsiWebJournalActionsResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalActionsResponse> MasterTablesCreateJournalActionAsync (TsiWebJournalAction action);

        /// <summary>
        /// Creates the journal action.
        /// </summary>
        /// <remarks>
        /// If Weight is excluded from the POST values it will be defaulted to 0.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalActionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalActionsResponse>> MasterTablesCreateJournalActionAsyncWithHttpInfo (TsiWebJournalAction action);
        /// <summary>
        /// Creates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateJournalTopicAsync (string journalTopic);

        /// <summary>
        /// Creates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateJournalTopicAsyncWithHttpInfo (string journalTopic);
        /// <summary>
        /// Creates the number custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateNumberCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the number custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateNumberCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesCreateOpportunityCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Creates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesCreateOpportunityCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Creates the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateResolutionAsync (string resolution);

        /// <summary>
        /// Creates the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateResolutionAsyncWithHttpInfo (string resolution);
        /// <summary>
        /// Creates the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateServiceOrderProfileAsync (string profile);

        /// <summary>
        /// Creates the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateServiceOrderProfileAsyncWithHttpInfo (string profile);
        /// <summary>
        /// Creates the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateSymptomAsync (string symptom);

        /// <summary>
        /// Creates the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateSymptomAsyncWithHttpInfo (string symptom);
        /// <summary>
        /// Creates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateTextCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateTextCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates the time custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateTimeCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Creates the time custom field definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateTimeCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of TsiWebTimeEntryReasonResponse</returns>
        System.Threading.Tasks.Task<TsiWebTimeEntryReasonResponse> MasterTablesCreateTimeEntryReasonAsync (TsiWebCreateTimeEntryReasonRequest reason);

        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of ApiResponse (TsiWebTimeEntryReasonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTimeEntryReasonResponse>> MasterTablesCreateTimeEntryReasonAsyncWithHttpInfo (TsiWebCreateTimeEntryReasonRequest reason);
        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetAccountCustomFieldsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetAccountCustomFieldsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetAccountCustomFields_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetAccountCustomFields_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMarketingGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebMarketingGroup>> MasterTablesGetAccountGroupsAsync ();

        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMarketingGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebMarketingGroup>>> MasterTablesGetAccountGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the account profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebAccountProfile&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountProfile>> MasterTablesGetAccountProfilesAsync ();

        /// <summary>
        /// Gets the account profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountProfile>>> MasterTablesGetAccountProfilesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebAccountSource&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountSource>> MasterTablesGetAccountSourcesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountSource>>> MasterTablesGetAccountSourcesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebAccountSource&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountSource>> MasterTablesGetAccountSources_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the account sources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountSource>>> MasterTablesGetAccountSources_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebAccountStatus&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountStatus>> MasterTablesGetAccountStatusesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountStatus>>> MasterTablesGetAccountStatusesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebAccountStatus&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountStatus>> MasterTablesGetAccountStatuses_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined account statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountStatus>>> MasterTablesGetAccountStatuses_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebAccountType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountType>> MasterTablesGetAccountTypesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountType>>> MasterTablesGetAccountTypesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebAccountType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAccountType>> MasterTablesGetAccountTypes_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined account types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountType>>> MasterTablesGetAccountTypes_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebAssetType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebAssetType>> MasterTablesGetAssetTypesAsync ();

        /// <summary>
        /// Gets the asset types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssetType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssetType>>> MasterTablesGetAssetTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the bo tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebBOTaxCode&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebBOTaxCode>> MasterTablesGetBOTaxCodesAsync ();

        /// <summary>
        /// Gets the bo tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBOTaxCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebBOTaxCode>>> MasterTablesGetBOTaxCodesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the bo tax types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebBOTaxType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebBOTaxType>> MasterTablesGetBOTaxTypesAsync ();

        /// <summary>
        /// Gets the bo tax types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBOTaxType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebBOTaxType>>> MasterTablesGetBOTaxTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetContactCustomFieldsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetContactCustomFieldsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetContactCustomFields_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetContactCustomFields_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMarketingGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebMarketingGroup>> MasterTablesGetContactGroupsAsync ();

        /// <summary>
        /// Gets the account groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMarketingGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebMarketingGroup>>> MasterTablesGetContactGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the contact profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebContactProfile&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebContactProfile>> MasterTablesGetContactProfilesAsync ();

        /// <summary>
        /// Gets the contact profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContactProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebContactProfile>>> MasterTablesGetContactProfilesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined contract meter groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMeterGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebMeterGroup>> MasterTablesGetContractMeterGroupsAsync ();

        /// <summary>
        /// Gets a list of the defined contract meter groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMeterGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebMeterGroup>>> MasterTablesGetContractMeterGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined contract meters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMeter&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebMeter>> MasterTablesGetContractMetersAsync ();

        /// <summary>
        /// Gets a list of the defined contract meters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMeter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebMeter>>> MasterTablesGetContractMetersAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCountry&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCountry>> MasterTablesGetCountriesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCountry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCountry>>> MasterTablesGetCountriesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCountry&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCountry>> MasterTablesGetCountries_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCountry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCountry>>> MasterTablesGetCountries_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the departments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebDepartment&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebDepartment>> MasterTablesGetDepartmentsAsync ();

        /// <summary>
        /// Gets the departments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDepartment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebDepartment>>> MasterTablesGetDepartmentsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the dispatch boards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebDispatchBoard&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebDispatchBoard>> MasterTablesGetDispatchBoardsAsync ();

        /// <summary>
        /// Gets the dispatch boards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDispatchBoard&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebDispatchBoard>>> MasterTablesGetDispatchBoardsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the document topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebDocumentTopic&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebDocumentTopic>> MasterTablesGetDocumentTopicsAsync ();

        /// <summary>
        /// Gets the document topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDocumentTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebDocumentTopic>>> MasterTablesGetDocumentTopicsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the expense payment types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebExpensePaymentType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebExpensePaymentType>> MasterTablesGetExpensePaymentTypesAsync ();

        /// <summary>
        /// Gets the expense payment types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExpensePaymentType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebExpensePaymentType>>> MasterTablesGetExpensePaymentTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the expense types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebExpenseType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebExpenseType>> MasterTablesGetExpenseTypesAsync ();

        /// <summary>
        /// Gets the expense types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExpenseType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebExpenseType>>> MasterTablesGetExpenseTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebExternalProduct&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebExternalProduct>> MasterTablesGetExternalProductsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExternalProduct&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebExternalProduct>>> MasterTablesGetExternalProductsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebExternalProduct&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebExternalProduct>> MasterTablesGetExternalProducts_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the external products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExternalProduct&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebExternalProduct>>> MasterTablesGetExternalProducts_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Returns the freight terms from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebFreightTerm&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebFreightTerm>> MasterTablesGetFreightTermsAsync ();

        /// <summary>
        /// Returns the freight terms from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebFreightTerm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebFreightTerm>>> MasterTablesGetFreightTermsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of List&lt;TsiWebInventoryLocation&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebInventoryLocation>> MasterTablesGetInventoryLocationsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebInventoryLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebInventoryLocation>>> MasterTablesGetInventoryLocationsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of List&lt;TsiWebInventoryLocation&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebInventoryLocation>> MasterTablesGetInventoryLocations_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Returns the inventory locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebInventoryLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebInventoryLocation>>> MasterTablesGetInventoryLocations_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the invoice terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebInvoiceTerm&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebInvoiceTerm>> MasterTablesGetInvoiceTermsAsync ();

        /// <summary>
        /// Gets the invoice terms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebInvoiceTerm&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebInvoiceTerm>>> MasterTablesGetInvoiceTermsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebJournalAction&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebJournalAction>> MasterTablesGetJournalActionsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalAction>>> MasterTablesGetJournalActionsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebJournalAction&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebJournalAction>> MasterTablesGetJournalActions_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the journal actions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalAction>>> MasterTablesGetJournalActions_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebJournalTopic&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebJournalTopic>> MasterTablesGetJournalTopicsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalTopic>>> MasterTablesGetJournalTopicsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebJournalTopic&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebJournalTopic>> MasterTablesGetJournalTopics_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the journal topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalTopic>>> MasterTablesGetJournalTopics_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the name prefixes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPrefix&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPrefix>> MasterTablesGetNamePrefixesAsync ();

        /// <summary>
        /// Gets the name prefixes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPrefix&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPrefix>>> MasterTablesGetNamePrefixesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the defined Asset Next Action Tupes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebNextActionType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebNextActionType>> MasterTablesGetNextActionTypesAsync ();

        /// <summary>
        /// Returns the defined Asset Next Action Tupes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebNextActionType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebNextActionType>>> MasterTablesGetNextActionTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity close reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebCloseReason&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCloseReason>> MasterTablesGetOpportunityCloseReasonsAsync ();

        /// <summary>
        /// Gets the opportunity close reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCloseReason&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCloseReason>>> MasterTablesGetOpportunityCloseReasonsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetOpportunityCustomFieldsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetOpportunityCustomFieldsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetOpportunityCustomFields_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetOpportunityCustomFields_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebHowDidYouHearAboutUs>> MasterTablesGetOpportunityHowDidYouHearAboutUsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebHowDidYouHearAboutUs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebHowDidYouHearAboutUs>>> MasterTablesGetOpportunityHowDidYouHearAboutUsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebHowDidYouHearAboutUs>> MasterTablesGetOpportunityHowDidYouHearAboutUs_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity how did you hear about us entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebHowDidYouHearAboutUs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebHowDidYouHearAboutUs>>> MasterTablesGetOpportunityHowDidYouHearAboutUs_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the opportunity names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebOpportunityName&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebOpportunityName>> MasterTablesGetOpportunityNamesAsync ();

        /// <summary>
        /// Gets the opportunity names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityName&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityName>>> MasterTablesGetOpportunityNamesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity stages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebOpportunityStage&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebOpportunityStage>> MasterTablesGetOpportunityStagesAsync ();

        /// <summary>
        /// Gets the opportunity stages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityStage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityStage>>> MasterTablesGetOpportunityStagesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebOpportunityStatus&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebOpportunityStatus>> MasterTablesGetOpportunityStatusesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityStatus>>> MasterTablesGetOpportunityStatusesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebOpportunityStatus&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebOpportunityStatus>> MasterTablesGetOpportunityStatuses_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityStatus>>> MasterTablesGetOpportunityStatuses_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebOpportunityType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebOpportunityType>> MasterTablesGetOpportunityTypesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityType>>> MasterTablesGetOpportunityTypesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebOpportunityType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebOpportunityType>> MasterTablesGetOpportunityTypes_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the opportunity types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityType>>> MasterTablesGetOpportunityTypes_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebPasswordCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPasswordCategory>> MasterTablesGetPasswordCategoriesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPasswordCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPasswordCategory>>> MasterTablesGetPasswordCategoriesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebPasswordCategory&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPasswordCategory>> MasterTablesGetPasswordCategories_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the password categories.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPasswordCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPasswordCategory>>> MasterTablesGetPasswordCategories_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the payment methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPaymentMethod&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPaymentMethod>> MasterTablesGetPaymentMethodsAsync ();

        /// <summary>
        /// Gets the payment methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPaymentMethod&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPaymentMethod>>> MasterTablesGetPaymentMethodsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebPhoneLocation&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPhoneLocation>> MasterTablesGetPhoneLocationsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneLocation>>> MasterTablesGetPhoneLocationsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebPhoneLocation&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPhoneLocation>> MasterTablesGetPhoneLocations_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the phone locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneLocation>>> MasterTablesGetPhoneLocations_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the price levels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPriceLevel&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPriceLevel>> MasterTablesGetPriceLevelsAsync ();

        /// <summary>
        /// Gets the price levels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPriceLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPriceLevel>>> MasterTablesGetPriceLevelsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the purchase order descriptions from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderDescription&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPurchaseOrderDescription>> MasterTablesGetPurchaseOrderDescriptionsAsync ();

        /// <summary>
        /// Returns the purchase order descriptions from the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderDescription>>> MasterTablesGetPurchaseOrderDescriptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>Task of List&lt;TsiWebRepSummary&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebRepSummary>> MasterTablesGetRepsAsync (bool? activeOnly = null);

        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebRepSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebRepSummary>>> MasterTablesGetRepsAsyncWithHttpInfo (bool? activeOnly = null);
        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>Task of List&lt;TsiWebRepSummary&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebRepSummary>> MasterTablesGetReps_0Async (bool? activeOnly);

        /// <summary>
        /// Gets a list of Reps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebRepSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebRepSummary>>> MasterTablesGetReps_0AsyncWithHttpInfo (bool? activeOnly);
        /// <summary>
        /// Gets a list of the defined resolutions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebResolution&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebResolution>> MasterTablesGetResolutionsAsync ();

        /// <summary>
        /// Gets a list of the defined resolutions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebResolution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebResolution>>> MasterTablesGetResolutionsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined SIC codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSICCode&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebSICCode>> MasterTablesGetSICCodesAsync ();

        /// <summary>
        /// Gets a list of the defined SIC codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSICCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebSICCode>>> MasterTablesGetSICCodesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the sales tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSalesTaxCode&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebSalesTaxCode>> MasterTablesGetSalesTaxCodesAsync ();

        /// <summary>
        /// Gets the sales tax codes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSalesTaxCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebSalesTaxCode>>> MasterTablesGetSalesTaxCodesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the defined service order brief descriptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderBriefDescription&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderBriefDescription>> MasterTablesGetServiceOrderBriefDescriptionsAsync ();

        /// <summary>
        /// Returns the defined service order brief descriptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderBriefDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderBriefDescription>>> MasterTablesGetServiceOrderBriefDescriptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the defined service order comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderComment&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderComment>> MasterTablesGetServiceOrderCommentsAsync ();

        /// <summary>
        /// Returns the defined service order comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderComment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderComment>>> MasterTablesGetServiceOrderCommentsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the defined service order detail comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderDetailComment&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderDetailComment>> MasterTablesGetServiceOrderDetailCommentsAsync ();

        /// <summary>
        /// Returns the defined service order detail comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderDetailComment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderDetailComment>>> MasterTablesGetServiceOrderDetailCommentsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderNoteTopic>> MasterTablesGetServiceOrderNoteTopicsAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderNoteTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderNoteTopic>>> MasterTablesGetServiceOrderNoteTopicsAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderNoteTopic>> MasterTablesGetServiceOrderNoteTopics_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets the service order note topics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderNoteTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderNoteTopic>>> MasterTablesGetServiceOrderNoteTopics_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of defined service order priorities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderPriority&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderPriority>> MasterTablesGetServiceOrderPrioritiesAsync ();

        /// <summary>
        /// Gets a list of defined service order priorities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderPriority&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderPriority>>> MasterTablesGetServiceOrderPrioritiesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderProfile&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderProfile>> MasterTablesGetServiceOrderProfilesAsync ();

        /// <summary>
        /// Gets a list of the defined service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderProfile>>> MasterTablesGetServiceOrderProfilesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of defined service order severities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderSeverity&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderSeverity>> MasterTablesGetServiceOrderSeveritiesAsync ();

        /// <summary>
        /// Gets a list of defined service order severities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderSeverity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderSeverity>>> MasterTablesGetServiceOrderSeveritiesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderStatus</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderStatus> MasterTablesGetServiceOrderStatusesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderStatus>> MasterTablesGetServiceOrderStatusesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of TsiWebServiceOrderStatus</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderStatus> MasterTablesGetServiceOrderStatuses_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of defined service order statuses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderStatus>> MasterTablesGetServiceOrderStatuses_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderTemplate>> MasterTablesGetServiceOrderTemplatesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderTemplate>>> MasterTablesGetServiceOrderTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderType>> MasterTablesGetServiceOrderTypesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderType>>> MasterTablesGetServiceOrderTypesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of List&lt;TsiWebServiceOrderType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderType>> MasterTablesGetServiceOrderTypes_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of defined service order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderType>>> MasterTablesGetServiceOrderTypes_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets a list of the defined service zones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceZone&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceZone>> MasterTablesGetServiceZonesAsync ();

        /// <summary>
        /// Gets a list of the defined service zones.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceZone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceZone>>> MasterTablesGetServiceZonesAsyncWithHttpInfo ();
        /// <summary>
        /// Returns shippers stored in the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebShipper&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebShipper>> MasterTablesGetShippersAsync ();

        /// <summary>
        /// Returns shippers stored in the master tables.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebShipper&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebShipper>>> MasterTablesGetShippersAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the shipping methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebShippingMethod&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebShippingMethod>> MasterTablesGetShippingMethodsAsync ();

        /// <summary>
        /// Gets the shipping methods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebShippingMethod&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebShippingMethod>>> MasterTablesGetShippingMethodsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebState&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebState>> MasterTablesGetStatesAsync (bool? excludeSystemEntries = null);

        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebState&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebState>>> MasterTablesGetStatesAsyncWithHttpInfo (bool? excludeSystemEntries = null);
        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebState&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebState>> MasterTablesGetStates_0Async (bool? excludeSystemEntries);

        /// <summary>
        /// Gets a list of the defined states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebState&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebState>>> MasterTablesGetStates_0AsyncWithHttpInfo (bool? excludeSystemEntries);
        /// <summary>
        /// Gets the sub contractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSubContractor&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebSubContractor>> MasterTablesGetSubContractorsAsync ();

        /// <summary>
        /// Gets the sub contractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSubContractor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebSubContractor>>> MasterTablesGetSubContractorsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the systems.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSupportedSystem&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebSupportedSystem>> MasterTablesGetSupportedSystemsAsync ();

        /// <summary>
        /// Gets the systems.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSupportedSystem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebSupportedSystem>>> MasterTablesGetSupportedSystemsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the defined symptoms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSymptom&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebSymptom>> MasterTablesGetSymptomsAsync ();

        /// <summary>
        /// Gets a list of the defined symptoms.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSymptom&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebSymptom>>> MasterTablesGetSymptomsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the system types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSystemType&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebSystemType>> MasterTablesGetSystemTypesAsync ();

        /// <summary>
        /// Gets the system types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSystemType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebSystemType>>> MasterTablesGetSystemTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task action plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskActionPlan&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTaskActionPlan>> MasterTablesGetTaskActionPlansAsync ();

        /// <summary>
        /// Gets a list of the task action plans.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskActionPlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskActionPlan>>> MasterTablesGetTaskActionPlansAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskAction&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTaskAction>> MasterTablesGetTaskActionsAsync ();

        /// <summary>
        /// Gets a list of the task action.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskAction>>> MasterTablesGetTaskActionsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task checklist tempaltes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskCheckListTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTaskCheckListTemplate>> MasterTablesGetTaskCheckListTemplatesAsync ();

        /// <summary>
        /// Gets a list of the task checklist tempaltes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskCheckListTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskCheckListTemplate>>> MasterTablesGetTaskCheckListTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the tasklibrary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskLibrary&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTaskLibrary>> MasterTablesGetTaskLibrariesAsync ();

        /// <summary>
        /// Gets a list of the tasklibrary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskLibrary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskLibrary>>> MasterTablesGetTaskLibrariesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a list of the task resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskResource&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTaskResource>> MasterTablesGetTaskResourcesAsync ();

        /// <summary>
        /// Gets a list of the task resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskResource>>> MasterTablesGetTaskResourcesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the time entry reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTimeEntryReason&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTimeEntryReason>> MasterTablesGetTimeEntryReasonsAsync ();

        /// <summary>
        /// Gets the time entry reasons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTimeEntryReason&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTimeEntryReason>>> MasterTablesGetTimeEntryReasonsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the titles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTitle&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTitle>> MasterTablesGetTitlesAsync ();

        /// <summary>
        /// Gets the titles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTitle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTitle>>> MasterTablesGetTitlesAsyncWithHttpInfo ();
        /// <summary>
        /// Updates the account custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateAccountCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Updates the account custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesUpdateAccountCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Updates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateContactCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Updates the contact custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesUpdateContactCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Updates the the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateContractMeterAsync (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the ContractMeter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateContractMeterAsyncWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateContractMeterGroupAsync (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Contract Meter group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateContractMeterGroupAsyncWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesUpdateCustomFieldDefinitionAsync (int? customFieldID, TsiWebCustomFieldDefinitionModel model);

        /// <summary>
        /// Updates the custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesUpdateCustomFieldDefinitionAsyncWithHttpInfo (int? customFieldID, TsiWebCustomFieldDefinitionModel model);
        /// <summary>
        /// Updates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TsiWebExpensePaymentTypesResponse</returns>
        System.Threading.Tasks.Task<TsiWebExpensePaymentTypesResponse> MasterTablesUpdateExpensePaymentTypeAsync (TsiWebUpdateExpensePaymentTypeRequest request);

        /// <summary>
        /// Updates an expense payment type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TsiWebExpensePaymentTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebExpensePaymentTypesResponse>> MasterTablesUpdateExpensePaymentTypeAsyncWithHttpInfo (TsiWebUpdateExpensePaymentTypeRequest request);
        /// <summary>
        /// Updates an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TsiWebExpenseTypesResponse</returns>
        System.Threading.Tasks.Task<TsiWebExpenseTypesResponse> MasterTablesUpdateExpenseTypeAsync (TsiWebUpdateExpenseTypeRequest request);

        /// <summary>
        /// Updates an expense type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TsiWebExpenseTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebExpenseTypesResponse>> MasterTablesUpdateExpenseTypeAsyncWithHttpInfo (TsiWebUpdateExpenseTypeRequest request);
        /// <summary>
        /// Updates the journal action.
        /// </summary>
        /// <remarks>
        /// ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>Task of TsiWebJournalActionsResponse</returns>
        System.Threading.Tasks.Task<TsiWebJournalActionsResponse> MasterTablesUpdateJournalActionAsync (TsiWebUpdateJournalActionRequest request);

        /// <summary>
        /// Updates the journal action.
        /// </summary>
        /// <remarks>
        /// ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalActionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebJournalActionsResponse>> MasterTablesUpdateJournalActionAsyncWithHttpInfo (TsiWebUpdateJournalActionRequest request);
        /// <summary>
        /// Updates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateJournalTopicAsync (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the journal topic.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateJournalTopicAsyncWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateOpportunityCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request);

        /// <summary>
        /// Updates the opportunity custom field category.
        /// </summary>
        /// <remarks>
        /// To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesUpdateOpportunityCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request);
        /// <summary>
        /// Updates the the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateResolutionAsync (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Resolution.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateResolutionAsyncWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateServiceOrderProfileAsync (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Service Order Profile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateServiceOrderProfileAsyncWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates the the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateSymptomAsync (TsiWebUpdateEntryModel model);

        /// <summary>
        /// Updates the the Symptom.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateSymptomAsyncWithHttpInfo (TsiWebUpdateEntryModel model);
        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of TsiWebTimeEntryReasonResponse</returns>
        System.Threading.Tasks.Task<TsiWebTimeEntryReasonResponse> MasterTablesUpdateTimeEntryReasonAsync (TsiWebUpdateTimeEntryReasonRequest reason);

        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of ApiResponse (TsiWebTimeEntryReasonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTimeEntryReasonResponse>> MasterTablesUpdateTimeEntryReasonAsyncWithHttpInfo (TsiWebUpdateTimeEntryReasonRequest reason);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MasterTablesApi : IMasterTablesApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MasterTablesApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MasterTablesApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates the account custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        public TsiWebCustomFieldCategoryResponse MasterTablesCreateAccountCustomFieldCategory (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = MasterTablesCreateAccountCustomFieldCategoryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the account custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        public ApiResponse< TsiWebCustomFieldCategoryResponse > MasterTablesCreateAccountCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesCreateAccountCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateAccountCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Creates the account custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesCreateAccountCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = await MasterTablesCreateAccountCustomFieldCategoryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the account custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesCreateAccountCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesCreateAccountCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateAccountCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Creates the true / false custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateBooleanCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateBooleanCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the true / false custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateBooleanCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateBooleanCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/truefalse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateBooleanCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the true / false custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateBooleanCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateBooleanCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the true / false custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateBooleanCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateBooleanCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/truefalse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateBooleanCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the contact custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        public TsiWebCustomFieldCategoryResponse MasterTablesCreateContactCustomFieldCategory (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = MasterTablesCreateContactCustomFieldCategoryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the contact custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        public ApiResponse< TsiWebCustomFieldCategoryResponse > MasterTablesCreateContactCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesCreateContactCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateContactCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Creates the contact custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesCreateContactCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = await MasterTablesCreateContactCustomFieldCategoryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the contact custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesCreateContactCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesCreateContactCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateContactCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Creates the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesCreateContractMeter (string meter)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesCreateContractMeterWithHttpInfo(meter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesCreateContractMeterWithHttpInfo (string meter)
        {
            // verify the required parameter 'meter' is set
            if (meter == null)
                throw new ApiException(400, "Missing required parameter 'meter' when calling MasterTablesApi->MasterTablesCreateContractMeter");

            var localVarPath = "/api/mastertables/contracts/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meter != null && meter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateContractMeter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateContractMeterAsync (string meter)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesCreateContractMeterAsyncWithHttpInfo(meter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meter">The contract meter.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateContractMeterAsyncWithHttpInfo (string meter)
        {
            // verify the required parameter 'meter' is set
            if (meter == null)
                throw new ApiException(400, "Missing required parameter 'meter' when calling MasterTablesApi->MasterTablesCreateContractMeter");

            var localVarPath = "/api/mastertables/contracts/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meter != null && meter.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateContractMeter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesCreateContractMeterGroup (string meterGroup)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesCreateContractMeterGroupWithHttpInfo(meterGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesCreateContractMeterGroupWithHttpInfo (string meterGroup)
        {
            // verify the required parameter 'meterGroup' is set
            if (meterGroup == null)
                throw new ApiException(400, "Missing required parameter 'meterGroup' when calling MasterTablesApi->MasterTablesCreateContractMeterGroup");

            var localVarPath = "/api/mastertables/contracts/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meterGroup != null && meterGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meterGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meterGroup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateContractMeterGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateContractMeterGroupAsync (string meterGroup)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesCreateContractMeterGroupAsyncWithHttpInfo(meterGroup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meterGroup">The contract meter group.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateContractMeterGroupAsyncWithHttpInfo (string meterGroup)
        {
            // verify the required parameter 'meterGroup' is set
            if (meterGroup == null)
                throw new ApiException(400, "Missing required parameter 'meterGroup' when calling MasterTablesApi->MasterTablesCreateContractMeterGroup");

            var localVarPath = "/api/mastertables/contracts/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (meterGroup != null && meterGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(meterGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = meterGroup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateContractMeterGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the currency custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateCurrencyCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateCurrencyCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the currency custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateCurrencyCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateCurrencyCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateCurrencyCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the currency custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateCurrencyCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateCurrencyCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the currency custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateCurrencyCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateCurrencyCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateCurrencyCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the date custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateDateCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateDateCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the date custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateDateCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateDateCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/date";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateDateCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the date custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateDateCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateDateCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the date custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateDateCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateDateCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/date";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateDateCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the drop down custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateDropDownCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateDropDownCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the drop down custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateDropDownCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateDropDownCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/dropdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateDropDownCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the drop down custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateDropDownCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateDropDownCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the drop down custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateDropDownCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateDropDownCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/dropdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateDropDownCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>TsiWebExpensePaymentTypesResponse</returns>
        public TsiWebExpensePaymentTypesResponse MasterTablesCreateExpensePaymentType (TsiWebExpensePaymentTypeModel expensePaymentType)
        {
             ApiResponse<TsiWebExpensePaymentTypesResponse> localVarResponse = MasterTablesCreateExpensePaymentTypeWithHttpInfo(expensePaymentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>ApiResponse of TsiWebExpensePaymentTypesResponse</returns>
        public ApiResponse< TsiWebExpensePaymentTypesResponse > MasterTablesCreateExpensePaymentTypeWithHttpInfo (TsiWebExpensePaymentTypeModel expensePaymentType)
        {
            // verify the required parameter 'expensePaymentType' is set
            if (expensePaymentType == null)
                throw new ApiException(400, "Missing required parameter 'expensePaymentType' when calling MasterTablesApi->MasterTablesCreateExpensePaymentType");

            var localVarPath = "/api/mastertables/expensepaymenttypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expensePaymentType != null && expensePaymentType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expensePaymentType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expensePaymentType; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateExpensePaymentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpensePaymentTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpensePaymentTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpensePaymentTypesResponse)));
        }

        /// <summary>
        /// Creates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>Task of TsiWebExpensePaymentTypesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebExpensePaymentTypesResponse> MasterTablesCreateExpensePaymentTypeAsync (TsiWebExpensePaymentTypeModel expensePaymentType)
        {
             ApiResponse<TsiWebExpensePaymentTypesResponse> localVarResponse = await MasterTablesCreateExpensePaymentTypeAsyncWithHttpInfo(expensePaymentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expensePaymentType"></param>
        /// <returns>Task of ApiResponse (TsiWebExpensePaymentTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebExpensePaymentTypesResponse>> MasterTablesCreateExpensePaymentTypeAsyncWithHttpInfo (TsiWebExpensePaymentTypeModel expensePaymentType)
        {
            // verify the required parameter 'expensePaymentType' is set
            if (expensePaymentType == null)
                throw new ApiException(400, "Missing required parameter 'expensePaymentType' when calling MasterTablesApi->MasterTablesCreateExpensePaymentType");

            var localVarPath = "/api/mastertables/expensepaymenttypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expensePaymentType != null && expensePaymentType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expensePaymentType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expensePaymentType; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateExpensePaymentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpensePaymentTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpensePaymentTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpensePaymentTypesResponse)));
        }

        /// <summary>
        /// Create an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>TsiWebExpenseTypesResponse</returns>
        public TsiWebExpenseTypesResponse MasterTablesCreateExpenseType (TsiWebExpenseTypeModel expenseType)
        {
             ApiResponse<TsiWebExpenseTypesResponse> localVarResponse = MasterTablesCreateExpenseTypeWithHttpInfo(expenseType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>ApiResponse of TsiWebExpenseTypesResponse</returns>
        public ApiResponse< TsiWebExpenseTypesResponse > MasterTablesCreateExpenseTypeWithHttpInfo (TsiWebExpenseTypeModel expenseType)
        {
            // verify the required parameter 'expenseType' is set
            if (expenseType == null)
                throw new ApiException(400, "Missing required parameter 'expenseType' when calling MasterTablesApi->MasterTablesCreateExpenseType");

            var localVarPath = "/api/mastertables/expensetypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expenseType != null && expenseType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseType; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateExpenseType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpenseTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpenseTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpenseTypesResponse)));
        }

        /// <summary>
        /// Create an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>Task of TsiWebExpenseTypesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebExpenseTypesResponse> MasterTablesCreateExpenseTypeAsync (TsiWebExpenseTypeModel expenseType)
        {
             ApiResponse<TsiWebExpenseTypesResponse> localVarResponse = await MasterTablesCreateExpenseTypeAsyncWithHttpInfo(expenseType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseType"></param>
        /// <returns>Task of ApiResponse (TsiWebExpenseTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebExpenseTypesResponse>> MasterTablesCreateExpenseTypeAsyncWithHttpInfo (TsiWebExpenseTypeModel expenseType)
        {
            // verify the required parameter 'expenseType' is set
            if (expenseType == null)
                throw new ApiException(400, "Missing required parameter 'expenseType' when calling MasterTablesApi->MasterTablesCreateExpenseType");

            var localVarPath = "/api/mastertables/expensetypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expenseType != null && expenseType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseType; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateExpenseType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpenseTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpenseTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpenseTypesResponse)));
        }

        /// <summary>
        /// Creates the journal action. If Weight is excluded from the POST values it will be defaulted to 0.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>TsiWebJournalActionsResponse</returns>
        public TsiWebJournalActionsResponse MasterTablesCreateJournalAction (TsiWebJournalAction action)
        {
             ApiResponse<TsiWebJournalActionsResponse> localVarResponse = MasterTablesCreateJournalActionWithHttpInfo(action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the journal action. If Weight is excluded from the POST values it will be defaulted to 0.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>ApiResponse of TsiWebJournalActionsResponse</returns>
        public ApiResponse< TsiWebJournalActionsResponse > MasterTablesCreateJournalActionWithHttpInfo (TsiWebJournalAction action)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling MasterTablesApi->MasterTablesCreateJournalAction");

            var localVarPath = "/api/mastertables/journal/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null && action.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(action); // http body (model) parameter
            }
            else
            {
                localVarPostBody = action; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateJournalAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalActionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalActionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalActionsResponse)));
        }

        /// <summary>
        /// Creates the journal action. If Weight is excluded from the POST values it will be defaulted to 0.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>Task of TsiWebJournalActionsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalActionsResponse> MasterTablesCreateJournalActionAsync (TsiWebJournalAction action)
        {
             ApiResponse<TsiWebJournalActionsResponse> localVarResponse = await MasterTablesCreateJournalActionAsyncWithHttpInfo(action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the journal action. If Weight is excluded from the POST values it will be defaulted to 0.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">The journal action to create.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalActionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalActionsResponse>> MasterTablesCreateJournalActionAsyncWithHttpInfo (TsiWebJournalAction action)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling MasterTablesApi->MasterTablesCreateJournalAction");

            var localVarPath = "/api/mastertables/journal/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null && action.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(action); // http body (model) parameter
            }
            else
            {
                localVarPostBody = action; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateJournalAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalActionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalActionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalActionsResponse)));
        }

        /// <summary>
        /// Creates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesCreateJournalTopic (string journalTopic)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesCreateJournalTopicWithHttpInfo(journalTopic);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesCreateJournalTopicWithHttpInfo (string journalTopic)
        {
            // verify the required parameter 'journalTopic' is set
            if (journalTopic == null)
                throw new ApiException(400, "Missing required parameter 'journalTopic' when calling MasterTablesApi->MasterTablesCreateJournalTopic");

            var localVarPath = "/api/mastertables/journal/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (journalTopic != null && journalTopic.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(journalTopic); // http body (model) parameter
            }
            else
            {
                localVarPostBody = journalTopic; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateJournalTopic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateJournalTopicAsync (string journalTopic)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesCreateJournalTopicAsyncWithHttpInfo(journalTopic);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalTopic">The journal topic.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateJournalTopicAsyncWithHttpInfo (string journalTopic)
        {
            // verify the required parameter 'journalTopic' is set
            if (journalTopic == null)
                throw new ApiException(400, "Missing required parameter 'journalTopic' when calling MasterTablesApi->MasterTablesCreateJournalTopic");

            var localVarPath = "/api/mastertables/journal/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (journalTopic != null && journalTopic.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(journalTopic); // http body (model) parameter
            }
            else
            {
                localVarPostBody = journalTopic; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateJournalTopic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the number custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateNumberCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateNumberCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the number custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateNumberCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateNumberCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateNumberCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the number custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateNumberCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateNumberCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the number custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateNumberCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateNumberCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateNumberCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the opportunity custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        public TsiWebCustomFieldCategoryResponse MasterTablesCreateOpportunityCustomFieldCategory (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = MasterTablesCreateOpportunityCustomFieldCategoryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the opportunity custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        public ApiResponse< TsiWebCustomFieldCategoryResponse > MasterTablesCreateOpportunityCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesCreateOpportunityCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateOpportunityCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Creates the opportunity custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesCreateOpportunityCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = await MasterTablesCreateOpportunityCustomFieldCategoryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the opportunity custom field category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesCreateOpportunityCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesCreateOpportunityCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateOpportunityCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Creates the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesCreateResolution (string resolution)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesCreateResolutionWithHttpInfo(resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesCreateResolutionWithHttpInfo (string resolution)
        {
            // verify the required parameter 'resolution' is set
            if (resolution == null)
                throw new ApiException(400, "Missing required parameter 'resolution' when calling MasterTablesApi->MasterTablesCreateResolution");

            var localVarPath = "/api/mastertables/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resolution != null && resolution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resolution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resolution; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateResolutionAsync (string resolution)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesCreateResolutionAsyncWithHttpInfo(resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolution">The contract resolution.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateResolutionAsyncWithHttpInfo (string resolution)
        {
            // verify the required parameter 'resolution' is set
            if (resolution == null)
                throw new ApiException(400, "Missing required parameter 'resolution' when calling MasterTablesApi->MasterTablesCreateResolution");

            var localVarPath = "/api/mastertables/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resolution != null && resolution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resolution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resolution; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesCreateServiceOrderProfile (string profile)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesCreateServiceOrderProfileWithHttpInfo(profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesCreateServiceOrderProfileWithHttpInfo (string profile)
        {
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling MasterTablesApi->MasterTablesCreateServiceOrderProfile");

            var localVarPath = "/api/mastertables/serviceOrderProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateServiceOrderProfileAsync (string profile)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesCreateServiceOrderProfileAsyncWithHttpInfo(profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profile">The contract meter.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateServiceOrderProfileAsyncWithHttpInfo (string profile)
        {
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling MasterTablesApi->MasterTablesCreateServiceOrderProfile");

            var localVarPath = "/api/mastertables/serviceOrderProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesCreateSymptom (string symptom)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesCreateSymptomWithHttpInfo(symptom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesCreateSymptomWithHttpInfo (string symptom)
        {
            // verify the required parameter 'symptom' is set
            if (symptom == null)
                throw new ApiException(400, "Missing required parameter 'symptom' when calling MasterTablesApi->MasterTablesCreateSymptom");

            var localVarPath = "/api/mastertables/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symptom != null && symptom.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symptom); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symptom; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesCreateSymptomAsync (string symptom)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesCreateSymptomAsyncWithHttpInfo(symptom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symptom">The Symptom.</param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesCreateSymptomAsyncWithHttpInfo (string symptom)
        {
            // verify the required parameter 'symptom' is set
            if (symptom == null)
                throw new ApiException(400, "Missing required parameter 'symptom' when calling MasterTablesApi->MasterTablesCreateSymptom");

            var localVarPath = "/api/mastertables/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symptom != null && symptom.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symptom); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symptom; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Creates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateTextCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateTextCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateTextCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateTextCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateTextCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateTextCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateTextCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateTextCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateTextCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateTextCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the time custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesCreateTimeCustomFieldDefinition (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesCreateTimeCustomFieldDefinitionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the time custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesCreateTimeCustomFieldDefinitionWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateTimeCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/time";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateTimeCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates the time custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesCreateTimeCustomFieldDefinitionAsync (TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesCreateTimeCustomFieldDefinitionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the time custom field definition. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The custom field definition.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesCreateTimeCustomFieldDefinitionAsyncWithHttpInfo (TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesCreateTimeCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/time";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateTimeCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>TsiWebTimeEntryReasonResponse</returns>
        public TsiWebTimeEntryReasonResponse MasterTablesCreateTimeEntryReason (TsiWebCreateTimeEntryReasonRequest reason)
        {
             ApiResponse<TsiWebTimeEntryReasonResponse> localVarResponse = MasterTablesCreateTimeEntryReasonWithHttpInfo(reason);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>ApiResponse of TsiWebTimeEntryReasonResponse</returns>
        public ApiResponse< TsiWebTimeEntryReasonResponse > MasterTablesCreateTimeEntryReasonWithHttpInfo (TsiWebCreateTimeEntryReasonRequest reason)
        {
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling MasterTablesApi->MasterTablesCreateTimeEntryReason");

            var localVarPath = "/api/mastertables/timeentryreasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reason != null && reason.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reason); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reason; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateTimeEntryReason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTimeEntryReasonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTimeEntryReasonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTimeEntryReasonResponse)));
        }

        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of TsiWebTimeEntryReasonResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTimeEntryReasonResponse> MasterTablesCreateTimeEntryReasonAsync (TsiWebCreateTimeEntryReasonRequest reason)
        {
             ApiResponse<TsiWebTimeEntryReasonResponse> localVarResponse = await MasterTablesCreateTimeEntryReasonAsyncWithHttpInfo(reason);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of ApiResponse (TsiWebTimeEntryReasonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTimeEntryReasonResponse>> MasterTablesCreateTimeEntryReasonAsyncWithHttpInfo (TsiWebCreateTimeEntryReasonRequest reason)
        {
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling MasterTablesApi->MasterTablesCreateTimeEntryReason");

            var localVarPath = "/api/mastertables/timeentryreasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reason != null && reason.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reason); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reason; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesCreateTimeEntryReason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTimeEntryReasonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTimeEntryReasonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTimeEntryReasonResponse)));
        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public List<TsiWebCustomFieldCategory> MasterTablesGetAccountCustomFields (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = MasterTablesGetAccountCustomFieldsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public ApiResponse< List<TsiWebCustomFieldCategory> > MasterTablesGetAccountCustomFieldsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/customfields/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetAccountCustomFieldsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = await MasterTablesGetAccountCustomFieldsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetAccountCustomFieldsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/customfields/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public List<TsiWebCustomFieldCategory> MasterTablesGetAccountCustomFields_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = MasterTablesGetAccountCustomFields_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public ApiResponse< List<TsiWebCustomFieldCategory> > MasterTablesGetAccountCustomFields_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountCustomFields_0");

            var localVarPath = "/api/mastertables/customfields/accounts/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountCustomFields_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetAccountCustomFields_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = await MasterTablesGetAccountCustomFields_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetAccountCustomFields_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountCustomFields_0");

            var localVarPath = "/api/mastertables/customfields/accounts/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountCustomFields_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMarketingGroup&gt;</returns>
        public List<TsiWebMarketingGroup> MasterTablesGetAccountGroups ()
        {
             ApiResponse<List<TsiWebMarketingGroup>> localVarResponse = MasterTablesGetAccountGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMarketingGroup&gt;</returns>
        public ApiResponse< List<TsiWebMarketingGroup> > MasterTablesGetAccountGroupsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/accounts/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMarketingGroup>)));
        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMarketingGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebMarketingGroup>> MasterTablesGetAccountGroupsAsync ()
        {
             ApiResponse<List<TsiWebMarketingGroup>> localVarResponse = await MasterTablesGetAccountGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMarketingGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebMarketingGroup>>> MasterTablesGetAccountGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/accounts/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMarketingGroup>)));
        }

        /// <summary>
        /// Gets the account profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebAccountProfile&gt;</returns>
        public List<TsiWebAccountProfile> MasterTablesGetAccountProfiles ()
        {
             ApiResponse<List<TsiWebAccountProfile>> localVarResponse = MasterTablesGetAccountProfilesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebAccountProfile&gt;</returns>
        public ApiResponse< List<TsiWebAccountProfile> > MasterTablesGetAccountProfilesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/accounts/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountProfile>)));
        }

        /// <summary>
        /// Gets the account profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebAccountProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountProfile>> MasterTablesGetAccountProfilesAsync ()
        {
             ApiResponse<List<TsiWebAccountProfile>> localVarResponse = await MasterTablesGetAccountProfilesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountProfile>>> MasterTablesGetAccountProfilesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/accounts/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountProfile>)));
        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebAccountSource&gt;</returns>
        public List<TsiWebAccountSource> MasterTablesGetAccountSources (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebAccountSource>> localVarResponse = MasterTablesGetAccountSourcesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountSource&gt;</returns>
        public ApiResponse< List<TsiWebAccountSource> > MasterTablesGetAccountSourcesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountSource>)));
        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebAccountSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountSource>> MasterTablesGetAccountSourcesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebAccountSource>> localVarResponse = await MasterTablesGetAccountSourcesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountSource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountSource>>> MasterTablesGetAccountSourcesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountSource>)));
        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebAccountSource&gt;</returns>
        public List<TsiWebAccountSource> MasterTablesGetAccountSources_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebAccountSource>> localVarResponse = MasterTablesGetAccountSources_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountSource&gt;</returns>
        public ApiResponse< List<TsiWebAccountSource> > MasterTablesGetAccountSources_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountSources_0");

            var localVarPath = "/api/mastertables/accounts/sources/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountSources_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountSource>)));
        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebAccountSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountSource>> MasterTablesGetAccountSources_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebAccountSource>> localVarResponse = await MasterTablesGetAccountSources_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account sources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountSource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountSource>>> MasterTablesGetAccountSources_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountSources_0");

            var localVarPath = "/api/mastertables/accounts/sources/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountSources_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountSource>)));
        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebAccountStatus&gt;</returns>
        public List<TsiWebAccountStatus> MasterTablesGetAccountStatuses (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebAccountStatus>> localVarResponse = MasterTablesGetAccountStatusesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountStatus&gt;</returns>
        public ApiResponse< List<TsiWebAccountStatus> > MasterTablesGetAccountStatusesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountStatus>)));
        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebAccountStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountStatus>> MasterTablesGetAccountStatusesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebAccountStatus>> localVarResponse = await MasterTablesGetAccountStatusesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountStatus>>> MasterTablesGetAccountStatusesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountStatus>)));
        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebAccountStatus&gt;</returns>
        public List<TsiWebAccountStatus> MasterTablesGetAccountStatuses_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebAccountStatus>> localVarResponse = MasterTablesGetAccountStatuses_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountStatus&gt;</returns>
        public ApiResponse< List<TsiWebAccountStatus> > MasterTablesGetAccountStatuses_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountStatuses_0");

            var localVarPath = "/api/mastertables/account/statuses/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountStatuses_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountStatus>)));
        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebAccountStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountStatus>> MasterTablesGetAccountStatuses_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebAccountStatus>> localVarResponse = await MasterTablesGetAccountStatuses_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined account statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountStatus>>> MasterTablesGetAccountStatuses_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountStatuses_0");

            var localVarPath = "/api/mastertables/account/statuses/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountStatuses_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountStatus>)));
        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebAccountType&gt;</returns>
        public List<TsiWebAccountType> MasterTablesGetAccountTypes (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebAccountType>> localVarResponse = MasterTablesGetAccountTypesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountType&gt;</returns>
        public ApiResponse< List<TsiWebAccountType> > MasterTablesGetAccountTypesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountType>)));
        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebAccountType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountType>> MasterTablesGetAccountTypesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebAccountType>> localVarResponse = await MasterTablesGetAccountTypesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountType>>> MasterTablesGetAccountTypesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountType>)));
        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebAccountType&gt;</returns>
        public List<TsiWebAccountType> MasterTablesGetAccountTypes_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebAccountType>> localVarResponse = MasterTablesGetAccountTypes_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebAccountType&gt;</returns>
        public ApiResponse< List<TsiWebAccountType> > MasterTablesGetAccountTypes_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountTypes_0");

            var localVarPath = "/api/mastertables/accounts/types/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountTypes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountType>)));
        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebAccountType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAccountType>> MasterTablesGetAccountTypes_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebAccountType>> localVarResponse = await MasterTablesGetAccountTypes_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined account types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAccountType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAccountType>>> MasterTablesGetAccountTypes_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetAccountTypes_0");

            var localVarPath = "/api/mastertables/accounts/types/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAccountTypes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAccountType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAccountType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAccountType>)));
        }

        /// <summary>
        /// Gets the asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebAssetType&gt;</returns>
        public List<TsiWebAssetType> MasterTablesGetAssetTypes ()
        {
             ApiResponse<List<TsiWebAssetType>> localVarResponse = MasterTablesGetAssetTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebAssetType&gt;</returns>
        public ApiResponse< List<TsiWebAssetType> > MasterTablesGetAssetTypesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/assettypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAssetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssetType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssetType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssetType>)));
        }

        /// <summary>
        /// Gets the asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebAssetType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebAssetType>> MasterTablesGetAssetTypesAsync ()
        {
             ApiResponse<List<TsiWebAssetType>> localVarResponse = await MasterTablesGetAssetTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the asset types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebAssetType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebAssetType>>> MasterTablesGetAssetTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/assettypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetAssetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebAssetType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebAssetType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebAssetType>)));
        }

        /// <summary>
        /// Gets the bo tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebBOTaxCode&gt;</returns>
        public List<TsiWebBOTaxCode> MasterTablesGetBOTaxCodes ()
        {
             ApiResponse<List<TsiWebBOTaxCode>> localVarResponse = MasterTablesGetBOTaxCodesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the bo tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebBOTaxCode&gt;</returns>
        public ApiResponse< List<TsiWebBOTaxCode> > MasterTablesGetBOTaxCodesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/botaxcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetBOTaxCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBOTaxCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBOTaxCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBOTaxCode>)));
        }

        /// <summary>
        /// Gets the bo tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebBOTaxCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebBOTaxCode>> MasterTablesGetBOTaxCodesAsync ()
        {
             ApiResponse<List<TsiWebBOTaxCode>> localVarResponse = await MasterTablesGetBOTaxCodesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the bo tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBOTaxCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebBOTaxCode>>> MasterTablesGetBOTaxCodesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/botaxcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetBOTaxCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBOTaxCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBOTaxCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBOTaxCode>)));
        }

        /// <summary>
        /// Gets the bo tax types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebBOTaxType&gt;</returns>
        public List<TsiWebBOTaxType> MasterTablesGetBOTaxTypes ()
        {
             ApiResponse<List<TsiWebBOTaxType>> localVarResponse = MasterTablesGetBOTaxTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the bo tax types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebBOTaxType&gt;</returns>
        public ApiResponse< List<TsiWebBOTaxType> > MasterTablesGetBOTaxTypesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/botaxtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetBOTaxTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBOTaxType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBOTaxType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBOTaxType>)));
        }

        /// <summary>
        /// Gets the bo tax types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebBOTaxType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebBOTaxType>> MasterTablesGetBOTaxTypesAsync ()
        {
             ApiResponse<List<TsiWebBOTaxType>> localVarResponse = await MasterTablesGetBOTaxTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the bo tax types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebBOTaxType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebBOTaxType>>> MasterTablesGetBOTaxTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/botaxtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetBOTaxTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebBOTaxType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebBOTaxType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebBOTaxType>)));
        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public List<TsiWebCustomFieldCategory> MasterTablesGetContactCustomFields (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = MasterTablesGetContactCustomFieldsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public ApiResponse< List<TsiWebCustomFieldCategory> > MasterTablesGetContactCustomFieldsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/customfields/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetContactCustomFieldsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = await MasterTablesGetContactCustomFieldsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetContactCustomFieldsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/customfields/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public List<TsiWebCustomFieldCategory> MasterTablesGetContactCustomFields_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = MasterTablesGetContactCustomFields_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public ApiResponse< List<TsiWebCustomFieldCategory> > MasterTablesGetContactCustomFields_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetContactCustomFields_0");

            var localVarPath = "/api/mastertables/customfields/contacts/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactCustomFields_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetContactCustomFields_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = await MasterTablesGetContactCustomFields_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetContactCustomFields_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetContactCustomFields_0");

            var localVarPath = "/api/mastertables/customfields/contacts/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactCustomFields_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMarketingGroup&gt;</returns>
        public List<TsiWebMarketingGroup> MasterTablesGetContactGroups ()
        {
             ApiResponse<List<TsiWebMarketingGroup>> localVarResponse = MasterTablesGetContactGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMarketingGroup&gt;</returns>
        public ApiResponse< List<TsiWebMarketingGroup> > MasterTablesGetContactGroupsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contact/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMarketingGroup>)));
        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMarketingGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebMarketingGroup>> MasterTablesGetContactGroupsAsync ()
        {
             ApiResponse<List<TsiWebMarketingGroup>> localVarResponse = await MasterTablesGetContactGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMarketingGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebMarketingGroup>>> MasterTablesGetContactGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contact/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMarketingGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMarketingGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMarketingGroup>)));
        }

        /// <summary>
        /// Gets the contact profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebContactProfile&gt;</returns>
        public List<TsiWebContactProfile> MasterTablesGetContactProfiles ()
        {
             ApiResponse<List<TsiWebContactProfile>> localVarResponse = MasterTablesGetContactProfilesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebContactProfile&gt;</returns>
        public ApiResponse< List<TsiWebContactProfile> > MasterTablesGetContactProfilesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contact/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContactProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContactProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContactProfile>)));
        }

        /// <summary>
        /// Gets the contact profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebContactProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebContactProfile>> MasterTablesGetContactProfilesAsync ()
        {
             ApiResponse<List<TsiWebContactProfile>> localVarResponse = await MasterTablesGetContactProfilesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contact profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebContactProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebContactProfile>>> MasterTablesGetContactProfilesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contact/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContactProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebContactProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebContactProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebContactProfile>)));
        }

        /// <summary>
        /// Gets a list of the defined contract meter groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMeterGroup&gt;</returns>
        public List<TsiWebMeterGroup> MasterTablesGetContractMeterGroups ()
        {
             ApiResponse<List<TsiWebMeterGroup>> localVarResponse = MasterTablesGetContractMeterGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined contract meter groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMeterGroup&gt;</returns>
        public ApiResponse< List<TsiWebMeterGroup> > MasterTablesGetContractMeterGroupsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contracts/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContractMeterGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMeterGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMeterGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMeterGroup>)));
        }

        /// <summary>
        /// Gets a list of the defined contract meter groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMeterGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebMeterGroup>> MasterTablesGetContractMeterGroupsAsync ()
        {
             ApiResponse<List<TsiWebMeterGroup>> localVarResponse = await MasterTablesGetContractMeterGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined contract meter groups. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMeterGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebMeterGroup>>> MasterTablesGetContractMeterGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contracts/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContractMeterGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMeterGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMeterGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMeterGroup>)));
        }

        /// <summary>
        /// Gets a list of the defined contract meters. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebMeter&gt;</returns>
        public List<TsiWebMeter> MasterTablesGetContractMeters ()
        {
             ApiResponse<List<TsiWebMeter>> localVarResponse = MasterTablesGetContractMetersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined contract meters. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebMeter&gt;</returns>
        public ApiResponse< List<TsiWebMeter> > MasterTablesGetContractMetersWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contracts/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContractMeters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMeter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMeter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMeter>)));
        }

        /// <summary>
        /// Gets a list of the defined contract meters. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebMeter&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebMeter>> MasterTablesGetContractMetersAsync ()
        {
             ApiResponse<List<TsiWebMeter>> localVarResponse = await MasterTablesGetContractMetersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined contract meters. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMeter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebMeter>>> MasterTablesGetContractMetersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/contracts/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetContractMeters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMeter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMeter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMeter>)));
        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCountry&gt;</returns>
        public List<TsiWebCountry> MasterTablesGetCountries (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCountry>> localVarResponse = MasterTablesGetCountriesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCountry&gt;</returns>
        public ApiResponse< List<TsiWebCountry> > MasterTablesGetCountriesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCountry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCountry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCountry>)));
        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCountry&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCountry>> MasterTablesGetCountriesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCountry>> localVarResponse = await MasterTablesGetCountriesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCountry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCountry>>> MasterTablesGetCountriesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCountry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCountry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCountry>)));
        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCountry&gt;</returns>
        public List<TsiWebCountry> MasterTablesGetCountries_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCountry>> localVarResponse = MasterTablesGetCountries_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCountry&gt;</returns>
        public ApiResponse< List<TsiWebCountry> > MasterTablesGetCountries_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetCountries_0");

            var localVarPath = "/api/mastertables/countries/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetCountries_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCountry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCountry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCountry>)));
        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCountry&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCountry>> MasterTablesGetCountries_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCountry>> localVarResponse = await MasterTablesGetCountries_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined countries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCountry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCountry>>> MasterTablesGetCountries_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetCountries_0");

            var localVarPath = "/api/mastertables/countries/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetCountries_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCountry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCountry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCountry>)));
        }

        /// <summary>
        /// Gets the departments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebDepartment&gt;</returns>
        public List<TsiWebDepartment> MasterTablesGetDepartments ()
        {
             ApiResponse<List<TsiWebDepartment>> localVarResponse = MasterTablesGetDepartmentsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the departments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebDepartment&gt;</returns>
        public ApiResponse< List<TsiWebDepartment> > MasterTablesGetDepartmentsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/departments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetDepartments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDepartment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDepartment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDepartment>)));
        }

        /// <summary>
        /// Gets the departments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebDepartment&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebDepartment>> MasterTablesGetDepartmentsAsync ()
        {
             ApiResponse<List<TsiWebDepartment>> localVarResponse = await MasterTablesGetDepartmentsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the departments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDepartment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebDepartment>>> MasterTablesGetDepartmentsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/departments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetDepartments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDepartment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDepartment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDepartment>)));
        }

        /// <summary>
        /// Gets the dispatch boards. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebDispatchBoard&gt;</returns>
        public List<TsiWebDispatchBoard> MasterTablesGetDispatchBoards ()
        {
             ApiResponse<List<TsiWebDispatchBoard>> localVarResponse = MasterTablesGetDispatchBoardsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the dispatch boards. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebDispatchBoard&gt;</returns>
        public ApiResponse< List<TsiWebDispatchBoard> > MasterTablesGetDispatchBoardsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/dispatchboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetDispatchBoards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDispatchBoard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDispatchBoard>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDispatchBoard>)));
        }

        /// <summary>
        /// Gets the dispatch boards. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebDispatchBoard&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebDispatchBoard>> MasterTablesGetDispatchBoardsAsync ()
        {
             ApiResponse<List<TsiWebDispatchBoard>> localVarResponse = await MasterTablesGetDispatchBoardsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the dispatch boards. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDispatchBoard&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebDispatchBoard>>> MasterTablesGetDispatchBoardsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/dispatchboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetDispatchBoards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDispatchBoard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDispatchBoard>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDispatchBoard>)));
        }

        /// <summary>
        /// Gets the document topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebDocumentTopic&gt;</returns>
        public List<TsiWebDocumentTopic> MasterTablesGetDocumentTopics ()
        {
             ApiResponse<List<TsiWebDocumentTopic>> localVarResponse = MasterTablesGetDocumentTopicsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the document topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebDocumentTopic&gt;</returns>
        public ApiResponse< List<TsiWebDocumentTopic> > MasterTablesGetDocumentTopicsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/documenttopics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetDocumentTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDocumentTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDocumentTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDocumentTopic>)));
        }

        /// <summary>
        /// Gets the document topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebDocumentTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebDocumentTopic>> MasterTablesGetDocumentTopicsAsync ()
        {
             ApiResponse<List<TsiWebDocumentTopic>> localVarResponse = await MasterTablesGetDocumentTopicsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the document topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebDocumentTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebDocumentTopic>>> MasterTablesGetDocumentTopicsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/documenttopics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetDocumentTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebDocumentTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebDocumentTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebDocumentTopic>)));
        }

        /// <summary>
        /// Gets the expense payment types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebExpensePaymentType&gt;</returns>
        public List<TsiWebExpensePaymentType> MasterTablesGetExpensePaymentTypes ()
        {
             ApiResponse<List<TsiWebExpensePaymentType>> localVarResponse = MasterTablesGetExpensePaymentTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the expense payment types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebExpensePaymentType&gt;</returns>
        public ApiResponse< List<TsiWebExpensePaymentType> > MasterTablesGetExpensePaymentTypesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/expensepaymenttypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExpensePaymentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExpensePaymentType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExpensePaymentType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExpensePaymentType>)));
        }

        /// <summary>
        /// Gets the expense payment types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebExpensePaymentType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebExpensePaymentType>> MasterTablesGetExpensePaymentTypesAsync ()
        {
             ApiResponse<List<TsiWebExpensePaymentType>> localVarResponse = await MasterTablesGetExpensePaymentTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the expense payment types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExpensePaymentType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebExpensePaymentType>>> MasterTablesGetExpensePaymentTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/expensepaymenttypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExpensePaymentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExpensePaymentType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExpensePaymentType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExpensePaymentType>)));
        }

        /// <summary>
        /// Gets the expense types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebExpenseType&gt;</returns>
        public List<TsiWebExpenseType> MasterTablesGetExpenseTypes ()
        {
             ApiResponse<List<TsiWebExpenseType>> localVarResponse = MasterTablesGetExpenseTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the expense types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebExpenseType&gt;</returns>
        public ApiResponse< List<TsiWebExpenseType> > MasterTablesGetExpenseTypesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/expensetypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExpenseTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExpenseType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExpenseType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExpenseType>)));
        }

        /// <summary>
        /// Gets the expense types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebExpenseType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebExpenseType>> MasterTablesGetExpenseTypesAsync ()
        {
             ApiResponse<List<TsiWebExpenseType>> localVarResponse = await MasterTablesGetExpenseTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the expense types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExpenseType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebExpenseType>>> MasterTablesGetExpenseTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/expensetypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExpenseTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExpenseType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExpenseType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExpenseType>)));
        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebExternalProduct&gt;</returns>
        public List<TsiWebExternalProduct> MasterTablesGetExternalProducts (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebExternalProduct>> localVarResponse = MasterTablesGetExternalProductsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebExternalProduct&gt;</returns>
        public ApiResponse< List<TsiWebExternalProduct> > MasterTablesGetExternalProductsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExternalProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExternalProduct>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExternalProduct>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExternalProduct>)));
        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebExternalProduct&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebExternalProduct>> MasterTablesGetExternalProductsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebExternalProduct>> localVarResponse = await MasterTablesGetExternalProductsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExternalProduct&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebExternalProduct>>> MasterTablesGetExternalProductsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/externalproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExternalProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExternalProduct>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExternalProduct>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExternalProduct>)));
        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebExternalProduct&gt;</returns>
        public List<TsiWebExternalProduct> MasterTablesGetExternalProducts_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebExternalProduct>> localVarResponse = MasterTablesGetExternalProducts_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebExternalProduct&gt;</returns>
        public ApiResponse< List<TsiWebExternalProduct> > MasterTablesGetExternalProducts_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetExternalProducts_0");

            var localVarPath = "/api/mastertables/externalproducts/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExternalProducts_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExternalProduct>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExternalProduct>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExternalProduct>)));
        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebExternalProduct&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebExternalProduct>> MasterTablesGetExternalProducts_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebExternalProduct>> localVarResponse = await MasterTablesGetExternalProducts_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the external products. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebExternalProduct&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebExternalProduct>>> MasterTablesGetExternalProducts_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetExternalProducts_0");

            var localVarPath = "/api/mastertables/externalproducts/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetExternalProducts_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebExternalProduct>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebExternalProduct>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebExternalProduct>)));
        }

        /// <summary>
        /// Returns the freight terms from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebFreightTerm&gt;</returns>
        public List<TsiWebFreightTerm> MasterTablesGetFreightTerms ()
        {
             ApiResponse<List<TsiWebFreightTerm>> localVarResponse = MasterTablesGetFreightTermsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the freight terms from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebFreightTerm&gt;</returns>
        public ApiResponse< List<TsiWebFreightTerm> > MasterTablesGetFreightTermsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/freightterms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetFreightTerms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebFreightTerm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebFreightTerm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebFreightTerm>)));
        }

        /// <summary>
        /// Returns the freight terms from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebFreightTerm&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebFreightTerm>> MasterTablesGetFreightTermsAsync ()
        {
             ApiResponse<List<TsiWebFreightTerm>> localVarResponse = await MasterTablesGetFreightTermsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the freight terms from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebFreightTerm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebFreightTerm>>> MasterTablesGetFreightTermsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/freightterms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetFreightTerms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebFreightTerm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebFreightTerm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebFreightTerm>)));
        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>List&lt;TsiWebInventoryLocation&gt;</returns>
        public List<TsiWebInventoryLocation> MasterTablesGetInventoryLocations (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebInventoryLocation>> localVarResponse = MasterTablesGetInventoryLocationsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebInventoryLocation&gt;</returns>
        public ApiResponse< List<TsiWebInventoryLocation> > MasterTablesGetInventoryLocationsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/inventorylocations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetInventoryLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebInventoryLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebInventoryLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebInventoryLocation>)));
        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of List&lt;TsiWebInventoryLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebInventoryLocation>> MasterTablesGetInventoryLocationsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebInventoryLocation>> localVarResponse = await MasterTablesGetInventoryLocationsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebInventoryLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebInventoryLocation>>> MasterTablesGetInventoryLocationsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/inventorylocations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetInventoryLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebInventoryLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebInventoryLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebInventoryLocation>)));
        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>List&lt;TsiWebInventoryLocation&gt;</returns>
        public List<TsiWebInventoryLocation> MasterTablesGetInventoryLocations_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebInventoryLocation>> localVarResponse = MasterTablesGetInventoryLocations_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>ApiResponse of List&lt;TsiWebInventoryLocation&gt;</returns>
        public ApiResponse< List<TsiWebInventoryLocation> > MasterTablesGetInventoryLocations_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetInventoryLocations_0");

            var localVarPath = "/api/mastertables/inventorylocations/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetInventoryLocations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebInventoryLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebInventoryLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebInventoryLocation>)));
        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of List&lt;TsiWebInventoryLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebInventoryLocation>> MasterTablesGetInventoryLocations_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebInventoryLocation>> localVarResponse = await MasterTablesGetInventoryLocations_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the inventory locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebInventoryLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebInventoryLocation>>> MasterTablesGetInventoryLocations_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetInventoryLocations_0");

            var localVarPath = "/api/mastertables/inventorylocations/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetInventoryLocations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebInventoryLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebInventoryLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebInventoryLocation>)));
        }

        /// <summary>
        /// Gets the invoice terms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebInvoiceTerm&gt;</returns>
        public List<TsiWebInvoiceTerm> MasterTablesGetInvoiceTerms ()
        {
             ApiResponse<List<TsiWebInvoiceTerm>> localVarResponse = MasterTablesGetInvoiceTermsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the invoice terms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebInvoiceTerm&gt;</returns>
        public ApiResponse< List<TsiWebInvoiceTerm> > MasterTablesGetInvoiceTermsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/invoiceterms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetInvoiceTerms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebInvoiceTerm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebInvoiceTerm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebInvoiceTerm>)));
        }

        /// <summary>
        /// Gets the invoice terms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebInvoiceTerm&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebInvoiceTerm>> MasterTablesGetInvoiceTermsAsync ()
        {
             ApiResponse<List<TsiWebInvoiceTerm>> localVarResponse = await MasterTablesGetInvoiceTermsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the invoice terms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebInvoiceTerm&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebInvoiceTerm>>> MasterTablesGetInvoiceTermsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/invoiceterms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetInvoiceTerms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebInvoiceTerm>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebInvoiceTerm>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebInvoiceTerm>)));
        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebJournalAction&gt;</returns>
        public List<TsiWebJournalAction> MasterTablesGetJournalActions (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebJournalAction>> localVarResponse = MasterTablesGetJournalActionsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalAction&gt;</returns>
        public ApiResponse< List<TsiWebJournalAction> > MasterTablesGetJournalActionsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/journal/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalAction>)));
        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebJournalAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebJournalAction>> MasterTablesGetJournalActionsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebJournalAction>> localVarResponse = await MasterTablesGetJournalActionsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalAction>>> MasterTablesGetJournalActionsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/journal/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalAction>)));
        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebJournalAction&gt;</returns>
        public List<TsiWebJournalAction> MasterTablesGetJournalActions_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebJournalAction>> localVarResponse = MasterTablesGetJournalActions_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalAction&gt;</returns>
        public ApiResponse< List<TsiWebJournalAction> > MasterTablesGetJournalActions_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetJournalActions_0");

            var localVarPath = "/api/mastertables/journal/actions/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalActions_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalAction>)));
        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebJournalAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebJournalAction>> MasterTablesGetJournalActions_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebJournalAction>> localVarResponse = await MasterTablesGetJournalActions_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the journal actions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalAction>>> MasterTablesGetJournalActions_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetJournalActions_0");

            var localVarPath = "/api/mastertables/journal/actions/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalActions_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalAction>)));
        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebJournalTopic&gt;</returns>
        public List<TsiWebJournalTopic> MasterTablesGetJournalTopics (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebJournalTopic>> localVarResponse = MasterTablesGetJournalTopicsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalTopic&gt;</returns>
        public ApiResponse< List<TsiWebJournalTopic> > MasterTablesGetJournalTopicsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/journal/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalTopic>)));
        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebJournalTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebJournalTopic>> MasterTablesGetJournalTopicsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebJournalTopic>> localVarResponse = await MasterTablesGetJournalTopicsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalTopic>>> MasterTablesGetJournalTopicsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/journal/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalTopic>)));
        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebJournalTopic&gt;</returns>
        public List<TsiWebJournalTopic> MasterTablesGetJournalTopics_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebJournalTopic>> localVarResponse = MasterTablesGetJournalTopics_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebJournalTopic&gt;</returns>
        public ApiResponse< List<TsiWebJournalTopic> > MasterTablesGetJournalTopics_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetJournalTopics_0");

            var localVarPath = "/api/mastertables/journal/topics/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalTopics_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalTopic>)));
        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebJournalTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebJournalTopic>> MasterTablesGetJournalTopics_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebJournalTopic>> localVarResponse = await MasterTablesGetJournalTopics_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the journal topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebJournalTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebJournalTopic>>> MasterTablesGetJournalTopics_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetJournalTopics_0");

            var localVarPath = "/api/mastertables/journal/topics/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetJournalTopics_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebJournalTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebJournalTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebJournalTopic>)));
        }

        /// <summary>
        /// Gets the name prefixes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPrefix&gt;</returns>
        public List<TsiWebPrefix> MasterTablesGetNamePrefixes ()
        {
             ApiResponse<List<TsiWebPrefix>> localVarResponse = MasterTablesGetNamePrefixesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the name prefixes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPrefix&gt;</returns>
        public ApiResponse< List<TsiWebPrefix> > MasterTablesGetNamePrefixesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/nameprefixes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetNamePrefixes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPrefix>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPrefix>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPrefix>)));
        }

        /// <summary>
        /// Gets the name prefixes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPrefix&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPrefix>> MasterTablesGetNamePrefixesAsync ()
        {
             ApiResponse<List<TsiWebPrefix>> localVarResponse = await MasterTablesGetNamePrefixesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the name prefixes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPrefix&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPrefix>>> MasterTablesGetNamePrefixesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/nameprefixes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetNamePrefixes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPrefix>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPrefix>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPrefix>)));
        }

        /// <summary>
        /// Returns the defined Asset Next Action Tupes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebNextActionType&gt;</returns>
        public List<TsiWebNextActionType> MasterTablesGetNextActionTypes ()
        {
             ApiResponse<List<TsiWebNextActionType>> localVarResponse = MasterTablesGetNextActionTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the defined Asset Next Action Tupes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebNextActionType&gt;</returns>
        public ApiResponse< List<TsiWebNextActionType> > MasterTablesGetNextActionTypesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/nextActionTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetNextActionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebNextActionType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebNextActionType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebNextActionType>)));
        }

        /// <summary>
        /// Returns the defined Asset Next Action Tupes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebNextActionType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebNextActionType>> MasterTablesGetNextActionTypesAsync ()
        {
             ApiResponse<List<TsiWebNextActionType>> localVarResponse = await MasterTablesGetNextActionTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the defined Asset Next Action Tupes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebNextActionType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebNextActionType>>> MasterTablesGetNextActionTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/nextActionTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetNextActionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebNextActionType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebNextActionType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebNextActionType>)));
        }

        /// <summary>
        /// Gets the opportunity close reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebCloseReason&gt;</returns>
        public List<TsiWebCloseReason> MasterTablesGetOpportunityCloseReasons ()
        {
             ApiResponse<List<TsiWebCloseReason>> localVarResponse = MasterTablesGetOpportunityCloseReasonsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity close reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebCloseReason&gt;</returns>
        public ApiResponse< List<TsiWebCloseReason> > MasterTablesGetOpportunityCloseReasonsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/opportunities/closereasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityCloseReasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCloseReason>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCloseReason>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCloseReason>)));
        }

        /// <summary>
        /// Gets the opportunity close reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebCloseReason&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCloseReason>> MasterTablesGetOpportunityCloseReasonsAsync ()
        {
             ApiResponse<List<TsiWebCloseReason>> localVarResponse = await MasterTablesGetOpportunityCloseReasonsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity close reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCloseReason&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCloseReason>>> MasterTablesGetOpportunityCloseReasonsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/opportunities/closereasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityCloseReasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCloseReason>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCloseReason>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCloseReason>)));
        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public List<TsiWebCustomFieldCategory> MasterTablesGetOpportunityCustomFields (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = MasterTablesGetOpportunityCustomFieldsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public ApiResponse< List<TsiWebCustomFieldCategory> > MasterTablesGetOpportunityCustomFieldsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/customfields/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetOpportunityCustomFieldsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = await MasterTablesGetOpportunityCustomFieldsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetOpportunityCustomFieldsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/customfields/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public List<TsiWebCustomFieldCategory> MasterTablesGetOpportunityCustomFields_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = MasterTablesGetOpportunityCustomFields_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public ApiResponse< List<TsiWebCustomFieldCategory> > MasterTablesGetOpportunityCustomFields_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityCustomFields_0");

            var localVarPath = "/api/mastertables/customfields/opportunities/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityCustomFields_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebCustomFieldCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomFieldCategory>> MasterTablesGetOpportunityCustomFields_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebCustomFieldCategory>> localVarResponse = await MasterTablesGetOpportunityCustomFields_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomFieldCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomFieldCategory>>> MasterTablesGetOpportunityCustomFields_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityCustomFields_0");

            var localVarPath = "/api/mastertables/customfields/opportunities/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityCustomFields_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomFieldCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomFieldCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomFieldCategory>)));
        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        public List<TsiWebHowDidYouHearAboutUs> MasterTablesGetOpportunityHowDidYouHearAboutUs (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebHowDidYouHearAboutUs>> localVarResponse = MasterTablesGetOpportunityHowDidYouHearAboutUsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        public ApiResponse< List<TsiWebHowDidYouHearAboutUs> > MasterTablesGetOpportunityHowDidYouHearAboutUsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/opportunities/howdidyouhearaboutus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityHowDidYouHearAboutUs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebHowDidYouHearAboutUs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebHowDidYouHearAboutUs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebHowDidYouHearAboutUs>)));
        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebHowDidYouHearAboutUs>> MasterTablesGetOpportunityHowDidYouHearAboutUsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebHowDidYouHearAboutUs>> localVarResponse = await MasterTablesGetOpportunityHowDidYouHearAboutUsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebHowDidYouHearAboutUs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebHowDidYouHearAboutUs>>> MasterTablesGetOpportunityHowDidYouHearAboutUsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/opportunities/howdidyouhearaboutus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityHowDidYouHearAboutUs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebHowDidYouHearAboutUs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebHowDidYouHearAboutUs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebHowDidYouHearAboutUs>)));
        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        public List<TsiWebHowDidYouHearAboutUs> MasterTablesGetOpportunityHowDidYouHearAboutUs_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebHowDidYouHearAboutUs>> localVarResponse = MasterTablesGetOpportunityHowDidYouHearAboutUs_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        public ApiResponse< List<TsiWebHowDidYouHearAboutUs> > MasterTablesGetOpportunityHowDidYouHearAboutUs_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityHowDidYouHearAboutUs_0");

            var localVarPath = "/api/mastertables/opportunities/howdidyouhearaboutus/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityHowDidYouHearAboutUs_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebHowDidYouHearAboutUs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebHowDidYouHearAboutUs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebHowDidYouHearAboutUs>)));
        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebHowDidYouHearAboutUs&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebHowDidYouHearAboutUs>> MasterTablesGetOpportunityHowDidYouHearAboutUs_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebHowDidYouHearAboutUs>> localVarResponse = await MasterTablesGetOpportunityHowDidYouHearAboutUs_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity how did you hear about us entries. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebHowDidYouHearAboutUs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebHowDidYouHearAboutUs>>> MasterTablesGetOpportunityHowDidYouHearAboutUs_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityHowDidYouHearAboutUs_0");

            var localVarPath = "/api/mastertables/opportunities/howdidyouhearaboutus/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityHowDidYouHearAboutUs_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebHowDidYouHearAboutUs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebHowDidYouHearAboutUs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebHowDidYouHearAboutUs>)));
        }

        /// <summary>
        /// Gets the opportunity names. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebOpportunityName&gt;</returns>
        public List<TsiWebOpportunityName> MasterTablesGetOpportunityNames ()
        {
             ApiResponse<List<TsiWebOpportunityName>> localVarResponse = MasterTablesGetOpportunityNamesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity names. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityName&gt;</returns>
        public ApiResponse< List<TsiWebOpportunityName> > MasterTablesGetOpportunityNamesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/opportunities/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityName>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityName>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityName>)));
        }

        /// <summary>
        /// Gets the opportunity names. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebOpportunityName&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebOpportunityName>> MasterTablesGetOpportunityNamesAsync ()
        {
             ApiResponse<List<TsiWebOpportunityName>> localVarResponse = await MasterTablesGetOpportunityNamesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity names. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityName&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityName>>> MasterTablesGetOpportunityNamesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/opportunities/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityName>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityName>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityName>)));
        }

        /// <summary>
        /// Gets the opportunity stages. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebOpportunityStage&gt;</returns>
        public List<TsiWebOpportunityStage> MasterTablesGetOpportunityStages ()
        {
             ApiResponse<List<TsiWebOpportunityStage>> localVarResponse = MasterTablesGetOpportunityStagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity stages. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityStage&gt;</returns>
        public ApiResponse< List<TsiWebOpportunityStage> > MasterTablesGetOpportunityStagesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/opportunities/stages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityStages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityStage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityStage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityStage>)));
        }

        /// <summary>
        /// Gets the opportunity stages. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebOpportunityStage&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebOpportunityStage>> MasterTablesGetOpportunityStagesAsync ()
        {
             ApiResponse<List<TsiWebOpportunityStage>> localVarResponse = await MasterTablesGetOpportunityStagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity stages. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityStage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityStage>>> MasterTablesGetOpportunityStagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/opportunities/stages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityStages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityStage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityStage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityStage>)));
        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebOpportunityStatus&gt;</returns>
        public List<TsiWebOpportunityStatus> MasterTablesGetOpportunityStatuses (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebOpportunityStatus>> localVarResponse = MasterTablesGetOpportunityStatusesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityStatus&gt;</returns>
        public ApiResponse< List<TsiWebOpportunityStatus> > MasterTablesGetOpportunityStatusesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/opportunities/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityStatus>)));
        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebOpportunityStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebOpportunityStatus>> MasterTablesGetOpportunityStatusesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebOpportunityStatus>> localVarResponse = await MasterTablesGetOpportunityStatusesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityStatus>>> MasterTablesGetOpportunityStatusesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/opportunities/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityStatus>)));
        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebOpportunityStatus&gt;</returns>
        public List<TsiWebOpportunityStatus> MasterTablesGetOpportunityStatuses_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebOpportunityStatus>> localVarResponse = MasterTablesGetOpportunityStatuses_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityStatus&gt;</returns>
        public ApiResponse< List<TsiWebOpportunityStatus> > MasterTablesGetOpportunityStatuses_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityStatuses_0");

            var localVarPath = "/api/mastertables/opportunities/statuses/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityStatuses_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityStatus>)));
        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebOpportunityStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebOpportunityStatus>> MasterTablesGetOpportunityStatuses_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebOpportunityStatus>> localVarResponse = await MasterTablesGetOpportunityStatuses_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityStatus>>> MasterTablesGetOpportunityStatuses_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityStatuses_0");

            var localVarPath = "/api/mastertables/opportunities/statuses/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityStatuses_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityStatus>)));
        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebOpportunityType&gt;</returns>
        public List<TsiWebOpportunityType> MasterTablesGetOpportunityTypes (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebOpportunityType>> localVarResponse = MasterTablesGetOpportunityTypesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityType&gt;</returns>
        public ApiResponse< List<TsiWebOpportunityType> > MasterTablesGetOpportunityTypesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/opportunities/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityType>)));
        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebOpportunityType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebOpportunityType>> MasterTablesGetOpportunityTypesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebOpportunityType>> localVarResponse = await MasterTablesGetOpportunityTypesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityType>>> MasterTablesGetOpportunityTypesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/opportunities/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityType>)));
        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebOpportunityType&gt;</returns>
        public List<TsiWebOpportunityType> MasterTablesGetOpportunityTypes_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebOpportunityType>> localVarResponse = MasterTablesGetOpportunityTypes_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebOpportunityType&gt;</returns>
        public ApiResponse< List<TsiWebOpportunityType> > MasterTablesGetOpportunityTypes_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityTypes_0");

            var localVarPath = "/api/mastertables/opportunities/types/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityTypes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityType>)));
        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebOpportunityType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebOpportunityType>> MasterTablesGetOpportunityTypes_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebOpportunityType>> localVarResponse = await MasterTablesGetOpportunityTypes_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebOpportunityType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebOpportunityType>>> MasterTablesGetOpportunityTypes_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetOpportunityTypes_0");

            var localVarPath = "/api/mastertables/opportunities/types/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetOpportunityTypes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebOpportunityType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebOpportunityType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebOpportunityType>)));
        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebPasswordCategory&gt;</returns>
        public List<TsiWebPasswordCategory> MasterTablesGetPasswordCategories (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebPasswordCategory>> localVarResponse = MasterTablesGetPasswordCategoriesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebPasswordCategory&gt;</returns>
        public ApiResponse< List<TsiWebPasswordCategory> > MasterTablesGetPasswordCategoriesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/passwordcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPasswordCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPasswordCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPasswordCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPasswordCategory>)));
        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebPasswordCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPasswordCategory>> MasterTablesGetPasswordCategoriesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebPasswordCategory>> localVarResponse = await MasterTablesGetPasswordCategoriesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPasswordCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPasswordCategory>>> MasterTablesGetPasswordCategoriesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/accounts/passwordcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPasswordCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPasswordCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPasswordCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPasswordCategory>)));
        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebPasswordCategory&gt;</returns>
        public List<TsiWebPasswordCategory> MasterTablesGetPasswordCategories_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebPasswordCategory>> localVarResponse = MasterTablesGetPasswordCategories_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPasswordCategory&gt;</returns>
        public ApiResponse< List<TsiWebPasswordCategory> > MasterTablesGetPasswordCategories_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetPasswordCategories_0");

            var localVarPath = "/api/mastertables/accounts/passwordcategories/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPasswordCategories_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPasswordCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPasswordCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPasswordCategory>)));
        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebPasswordCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPasswordCategory>> MasterTablesGetPasswordCategories_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebPasswordCategory>> localVarResponse = await MasterTablesGetPasswordCategories_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the password categories. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPasswordCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPasswordCategory>>> MasterTablesGetPasswordCategories_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetPasswordCategories_0");

            var localVarPath = "/api/mastertables/accounts/passwordcategories/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPasswordCategories_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPasswordCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPasswordCategory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPasswordCategory>)));
        }

        /// <summary>
        /// Gets the payment methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPaymentMethod&gt;</returns>
        public List<TsiWebPaymentMethod> MasterTablesGetPaymentMethods ()
        {
             ApiResponse<List<TsiWebPaymentMethod>> localVarResponse = MasterTablesGetPaymentMethodsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the payment methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPaymentMethod&gt;</returns>
        public ApiResponse< List<TsiWebPaymentMethod> > MasterTablesGetPaymentMethodsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/paymentmethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPaymentMethod>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPaymentMethod>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPaymentMethod>)));
        }

        /// <summary>
        /// Gets the payment methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPaymentMethod&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPaymentMethod>> MasterTablesGetPaymentMethodsAsync ()
        {
             ApiResponse<List<TsiWebPaymentMethod>> localVarResponse = await MasterTablesGetPaymentMethodsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the payment methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPaymentMethod&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPaymentMethod>>> MasterTablesGetPaymentMethodsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/paymentmethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPaymentMethod>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPaymentMethod>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPaymentMethod>)));
        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebPhoneLocation&gt;</returns>
        public List<TsiWebPhoneLocation> MasterTablesGetPhoneLocations (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebPhoneLocation>> localVarResponse = MasterTablesGetPhoneLocationsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneLocation&gt;</returns>
        public ApiResponse< List<TsiWebPhoneLocation> > MasterTablesGetPhoneLocationsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/phonelocations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPhoneLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneLocation>)));
        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebPhoneLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPhoneLocation>> MasterTablesGetPhoneLocationsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebPhoneLocation>> localVarResponse = await MasterTablesGetPhoneLocationsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneLocation>>> MasterTablesGetPhoneLocationsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/phonelocations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPhoneLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneLocation>)));
        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebPhoneLocation&gt;</returns>
        public List<TsiWebPhoneLocation> MasterTablesGetPhoneLocations_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebPhoneLocation>> localVarResponse = MasterTablesGetPhoneLocations_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebPhoneLocation&gt;</returns>
        public ApiResponse< List<TsiWebPhoneLocation> > MasterTablesGetPhoneLocations_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetPhoneLocations_0");

            var localVarPath = "/api/mastertables/phonelocations/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPhoneLocations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneLocation>)));
        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebPhoneLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPhoneLocation>> MasterTablesGetPhoneLocations_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebPhoneLocation>> localVarResponse = await MasterTablesGetPhoneLocations_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the phone locations. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPhoneLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPhoneLocation>>> MasterTablesGetPhoneLocations_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetPhoneLocations_0");

            var localVarPath = "/api/mastertables/phonelocations/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPhoneLocations_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPhoneLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPhoneLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPhoneLocation>)));
        }

        /// <summary>
        /// Gets the price levels. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPriceLevel&gt;</returns>
        public List<TsiWebPriceLevel> MasterTablesGetPriceLevels ()
        {
             ApiResponse<List<TsiWebPriceLevel>> localVarResponse = MasterTablesGetPriceLevelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the price levels. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPriceLevel&gt;</returns>
        public ApiResponse< List<TsiWebPriceLevel> > MasterTablesGetPriceLevelsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/pricelevels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPriceLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPriceLevel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPriceLevel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPriceLevel>)));
        }

        /// <summary>
        /// Gets the price levels. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPriceLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPriceLevel>> MasterTablesGetPriceLevelsAsync ()
        {
             ApiResponse<List<TsiWebPriceLevel>> localVarResponse = await MasterTablesGetPriceLevelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the price levels. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPriceLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPriceLevel>>> MasterTablesGetPriceLevelsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/pricelevels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPriceLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPriceLevel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPriceLevel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPriceLevel>)));
        }

        /// <summary>
        /// Returns the purchase order descriptions from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebPurchaseOrderDescription&gt;</returns>
        public List<TsiWebPurchaseOrderDescription> MasterTablesGetPurchaseOrderDescriptions ()
        {
             ApiResponse<List<TsiWebPurchaseOrderDescription>> localVarResponse = MasterTablesGetPurchaseOrderDescriptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the purchase order descriptions from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderDescription&gt;</returns>
        public ApiResponse< List<TsiWebPurchaseOrderDescription> > MasterTablesGetPurchaseOrderDescriptionsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/purchaseorderdescriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPurchaseOrderDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderDescription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderDescription>)));
        }

        /// <summary>
        /// Returns the purchase order descriptions from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPurchaseOrderDescription>> MasterTablesGetPurchaseOrderDescriptionsAsync ()
        {
             ApiResponse<List<TsiWebPurchaseOrderDescription>> localVarResponse = await MasterTablesGetPurchaseOrderDescriptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the purchase order descriptions from the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderDescription>>> MasterTablesGetPurchaseOrderDescriptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/purchaseorderdescriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetPurchaseOrderDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderDescription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderDescription>)));
        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>List&lt;TsiWebRepSummary&gt;</returns>
        public List<TsiWebRepSummary> MasterTablesGetReps (bool? activeOnly = null)
        {
             ApiResponse<List<TsiWebRepSummary>> localVarResponse = MasterTablesGetRepsWithHttpInfo(activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebRepSummary&gt;</returns>
        public ApiResponse< List<TsiWebRepSummary> > MasterTablesGetRepsWithHttpInfo (bool? activeOnly = null)
        {

            var localVarPath = "/api/mastertables/reps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetReps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebRepSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebRepSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebRepSummary>)));
        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>Task of List&lt;TsiWebRepSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebRepSummary>> MasterTablesGetRepsAsync (bool? activeOnly = null)
        {
             ApiResponse<List<TsiWebRepSummary>> localVarResponse = await MasterTablesGetRepsAsyncWithHttpInfo(activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebRepSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebRepSummary>>> MasterTablesGetRepsAsyncWithHttpInfo (bool? activeOnly = null)
        {

            var localVarPath = "/api/mastertables/reps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activeOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeOnly", activeOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetReps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebRepSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebRepSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebRepSummary>)));
        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>List&lt;TsiWebRepSummary&gt;</returns>
        public List<TsiWebRepSummary> MasterTablesGetReps_0 (bool? activeOnly)
        {
             ApiResponse<List<TsiWebRepSummary>> localVarResponse = MasterTablesGetReps_0WithHttpInfo(activeOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>ApiResponse of List&lt;TsiWebRepSummary&gt;</returns>
        public ApiResponse< List<TsiWebRepSummary> > MasterTablesGetReps_0WithHttpInfo (bool? activeOnly)
        {
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling MasterTablesApi->MasterTablesGetReps_0");

            var localVarPath = "/api/mastertables/reps/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetReps_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebRepSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebRepSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebRepSummary>)));
        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>Task of List&lt;TsiWebRepSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebRepSummary>> MasterTablesGetReps_0Async (bool? activeOnly)
        {
             ApiResponse<List<TsiWebRepSummary>> localVarResponse = await MasterTablesGetReps_0AsyncWithHttpInfo(activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of Reps. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeOnly">If true excludes inactive reps.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebRepSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebRepSummary>>> MasterTablesGetReps_0AsyncWithHttpInfo (bool? activeOnly)
        {
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling MasterTablesApi->MasterTablesGetReps_0");

            var localVarPath = "/api/mastertables/reps/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetReps_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebRepSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebRepSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebRepSummary>)));
        }

        /// <summary>
        /// Gets a list of the defined resolutions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebResolution&gt;</returns>
        public List<TsiWebResolution> MasterTablesGetResolutions ()
        {
             ApiResponse<List<TsiWebResolution>> localVarResponse = MasterTablesGetResolutionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined resolutions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebResolution&gt;</returns>
        public ApiResponse< List<TsiWebResolution> > MasterTablesGetResolutionsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebResolution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebResolution>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebResolution>)));
        }

        /// <summary>
        /// Gets a list of the defined resolutions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebResolution&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebResolution>> MasterTablesGetResolutionsAsync ()
        {
             ApiResponse<List<TsiWebResolution>> localVarResponse = await MasterTablesGetResolutionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined resolutions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebResolution&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebResolution>>> MasterTablesGetResolutionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebResolution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebResolution>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebResolution>)));
        }

        /// <summary>
        /// Gets a list of the defined SIC codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSICCode&gt;</returns>
        public List<TsiWebSICCode> MasterTablesGetSICCodes ()
        {
             ApiResponse<List<TsiWebSICCode>> localVarResponse = MasterTablesGetSICCodesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined SIC codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSICCode&gt;</returns>
        public ApiResponse< List<TsiWebSICCode> > MasterTablesGetSICCodesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSICCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSICCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSICCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSICCode>)));
        }

        /// <summary>
        /// Gets a list of the defined SIC codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSICCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebSICCode>> MasterTablesGetSICCodesAsync ()
        {
             ApiResponse<List<TsiWebSICCode>> localVarResponse = await MasterTablesGetSICCodesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined SIC codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSICCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebSICCode>>> MasterTablesGetSICCodesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/siccodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSICCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSICCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSICCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSICCode>)));
        }

        /// <summary>
        /// Gets the sales tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSalesTaxCode&gt;</returns>
        public List<TsiWebSalesTaxCode> MasterTablesGetSalesTaxCodes ()
        {
             ApiResponse<List<TsiWebSalesTaxCode>> localVarResponse = MasterTablesGetSalesTaxCodesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the sales tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSalesTaxCode&gt;</returns>
        public ApiResponse< List<TsiWebSalesTaxCode> > MasterTablesGetSalesTaxCodesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/salestaxcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSalesTaxCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSalesTaxCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSalesTaxCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSalesTaxCode>)));
        }

        /// <summary>
        /// Gets the sales tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSalesTaxCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebSalesTaxCode>> MasterTablesGetSalesTaxCodesAsync ()
        {
             ApiResponse<List<TsiWebSalesTaxCode>> localVarResponse = await MasterTablesGetSalesTaxCodesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the sales tax codes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSalesTaxCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebSalesTaxCode>>> MasterTablesGetSalesTaxCodesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/salestaxcodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSalesTaxCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSalesTaxCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSalesTaxCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSalesTaxCode>)));
        }

        /// <summary>
        /// Returns the defined service order brief descriptions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderBriefDescription&gt;</returns>
        public List<TsiWebServiceOrderBriefDescription> MasterTablesGetServiceOrderBriefDescriptions ()
        {
             ApiResponse<List<TsiWebServiceOrderBriefDescription>> localVarResponse = MasterTablesGetServiceOrderBriefDescriptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the defined service order brief descriptions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderBriefDescription&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderBriefDescription> > MasterTablesGetServiceOrderBriefDescriptionsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrders/descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderBriefDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderBriefDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderBriefDescription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderBriefDescription>)));
        }

        /// <summary>
        /// Returns the defined service order brief descriptions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderBriefDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderBriefDescription>> MasterTablesGetServiceOrderBriefDescriptionsAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderBriefDescription>> localVarResponse = await MasterTablesGetServiceOrderBriefDescriptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the defined service order brief descriptions. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderBriefDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderBriefDescription>>> MasterTablesGetServiceOrderBriefDescriptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrders/descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderBriefDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderBriefDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderBriefDescription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderBriefDescription>)));
        }

        /// <summary>
        /// Returns the defined service order comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderComment&gt;</returns>
        public List<TsiWebServiceOrderComment> MasterTablesGetServiceOrderComments ()
        {
             ApiResponse<List<TsiWebServiceOrderComment>> localVarResponse = MasterTablesGetServiceOrderCommentsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the defined service order comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderComment&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderComment> > MasterTablesGetServiceOrderCommentsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrders/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderComment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderComment>)));
        }

        /// <summary>
        /// Returns the defined service order comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderComment&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderComment>> MasterTablesGetServiceOrderCommentsAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderComment>> localVarResponse = await MasterTablesGetServiceOrderCommentsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the defined service order comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderComment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderComment>>> MasterTablesGetServiceOrderCommentsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrders/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderComment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderComment>)));
        }

        /// <summary>
        /// Returns the defined service order detail comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderDetailComment&gt;</returns>
        public List<TsiWebServiceOrderDetailComment> MasterTablesGetServiceOrderDetailComments ()
        {
             ApiResponse<List<TsiWebServiceOrderDetailComment>> localVarResponse = MasterTablesGetServiceOrderDetailCommentsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the defined service order detail comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderDetailComment&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderDetailComment> > MasterTablesGetServiceOrderDetailCommentsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrders/detailComments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderDetailComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderDetailComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderDetailComment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderDetailComment>)));
        }

        /// <summary>
        /// Returns the defined service order detail comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderDetailComment&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderDetailComment>> MasterTablesGetServiceOrderDetailCommentsAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderDetailComment>> localVarResponse = await MasterTablesGetServiceOrderDetailCommentsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the defined service order detail comments. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderDetailComment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderDetailComment>>> MasterTablesGetServiceOrderDetailCommentsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrders/detailComments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderDetailComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderDetailComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderDetailComment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderDetailComment>)));
        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        public List<TsiWebServiceOrderNoteTopic> MasterTablesGetServiceOrderNoteTopics (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebServiceOrderNoteTopic>> localVarResponse = MasterTablesGetServiceOrderNoteTopicsWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderNoteTopic> > MasterTablesGetServiceOrderNoteTopicsWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/serviceOrder/noteTopics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderNoteTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderNoteTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderNoteTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderNoteTopic>)));
        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderNoteTopic>> MasterTablesGetServiceOrderNoteTopicsAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebServiceOrderNoteTopic>> localVarResponse = await MasterTablesGetServiceOrderNoteTopicsAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderNoteTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderNoteTopic>>> MasterTablesGetServiceOrderNoteTopicsAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/serviceOrder/noteTopics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderNoteTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderNoteTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderNoteTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderNoteTopic>)));
        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        public List<TsiWebServiceOrderNoteTopic> MasterTablesGetServiceOrderNoteTopics_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebServiceOrderNoteTopic>> localVarResponse = MasterTablesGetServiceOrderNoteTopics_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderNoteTopic> > MasterTablesGetServiceOrderNoteTopics_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetServiceOrderNoteTopics_0");

            var localVarPath = "/api/mastertables/serviceOrder/noteTopics/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderNoteTopics_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderNoteTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderNoteTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderNoteTopic>)));
        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderNoteTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderNoteTopic>> MasterTablesGetServiceOrderNoteTopics_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebServiceOrderNoteTopic>> localVarResponse = await MasterTablesGetServiceOrderNoteTopics_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order note topics. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderNoteTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderNoteTopic>>> MasterTablesGetServiceOrderNoteTopics_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetServiceOrderNoteTopics_0");

            var localVarPath = "/api/mastertables/serviceOrder/noteTopics/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderNoteTopics_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderNoteTopic>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderNoteTopic>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderNoteTopic>)));
        }

        /// <summary>
        /// Gets a list of defined service order priorities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderPriority&gt;</returns>
        public List<TsiWebServiceOrderPriority> MasterTablesGetServiceOrderPriorities ()
        {
             ApiResponse<List<TsiWebServiceOrderPriority>> localVarResponse = MasterTablesGetServiceOrderPrioritiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of defined service order priorities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderPriority&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderPriority> > MasterTablesGetServiceOrderPrioritiesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/priorities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderPriorities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderPriority>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderPriority>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderPriority>)));
        }

        /// <summary>
        /// Gets a list of defined service order priorities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderPriority&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderPriority>> MasterTablesGetServiceOrderPrioritiesAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderPriority>> localVarResponse = await MasterTablesGetServiceOrderPrioritiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of defined service order priorities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderPriority&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderPriority>>> MasterTablesGetServiceOrderPrioritiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/priorities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderPriorities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderPriority>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderPriority>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderPriority>)));
        }

        /// <summary>
        /// Gets a list of the defined service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderProfile&gt;</returns>
        public List<TsiWebServiceOrderProfile> MasterTablesGetServiceOrderProfiles ()
        {
             ApiResponse<List<TsiWebServiceOrderProfile>> localVarResponse = MasterTablesGetServiceOrderProfilesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderProfile&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderProfile> > MasterTablesGetServiceOrderProfilesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrderProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderProfile>)));
        }

        /// <summary>
        /// Gets a list of the defined service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderProfile>> MasterTablesGetServiceOrderProfilesAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderProfile>> localVarResponse = await MasterTablesGetServiceOrderProfilesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderProfile>>> MasterTablesGetServiceOrderProfilesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceOrderProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderProfile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderProfile>)));
        }

        /// <summary>
        /// Gets a list of defined service order severities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderSeverity&gt;</returns>
        public List<TsiWebServiceOrderSeverity> MasterTablesGetServiceOrderSeverities ()
        {
             ApiResponse<List<TsiWebServiceOrderSeverity>> localVarResponse = MasterTablesGetServiceOrderSeveritiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of defined service order severities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderSeverity&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderSeverity> > MasterTablesGetServiceOrderSeveritiesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/severities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderSeverities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderSeverity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderSeverity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderSeverity>)));
        }

        /// <summary>
        /// Gets a list of defined service order severities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderSeverity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderSeverity>> MasterTablesGetServiceOrderSeveritiesAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderSeverity>> localVarResponse = await MasterTablesGetServiceOrderSeveritiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of defined service order severities. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderSeverity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderSeverity>>> MasterTablesGetServiceOrderSeveritiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/severities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderSeverities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderSeverity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderSeverity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderSeverity>)));
        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>TsiWebServiceOrderStatus</returns>
        public TsiWebServiceOrderStatus MasterTablesGetServiceOrderStatuses (bool? excludeSystemEntries = null)
        {
             ApiResponse<TsiWebServiceOrderStatus> localVarResponse = MasterTablesGetServiceOrderStatusesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderStatus</returns>
        public ApiResponse< TsiWebServiceOrderStatus > MasterTablesGetServiceOrderStatusesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/serviceorders/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderStatus)));
        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderStatus</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderStatus> MasterTablesGetServiceOrderStatusesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<TsiWebServiceOrderStatus> localVarResponse = await MasterTablesGetServiceOrderStatusesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderStatus>> MasterTablesGetServiceOrderStatusesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/serviceorders/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderStatus)));
        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>TsiWebServiceOrderStatus</returns>
        public TsiWebServiceOrderStatus MasterTablesGetServiceOrderStatuses_0 (bool? excludeSystemEntries)
        {
             ApiResponse<TsiWebServiceOrderStatus> localVarResponse = MasterTablesGetServiceOrderStatuses_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderStatus</returns>
        public ApiResponse< TsiWebServiceOrderStatus > MasterTablesGetServiceOrderStatuses_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetServiceOrderStatuses_0");

            var localVarPath = "/api/mastertables/serviceorders/statuses/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderStatuses_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderStatus)));
        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of TsiWebServiceOrderStatus</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderStatus> MasterTablesGetServiceOrderStatuses_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<TsiWebServiceOrderStatus> localVarResponse = await MasterTablesGetServiceOrderStatuses_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of defined service order statuses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderStatus>> MasterTablesGetServiceOrderStatuses_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetServiceOrderStatuses_0");

            var localVarPath = "/api/mastertables/serviceorders/statuses/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderStatuses_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceOrderTemplate&gt;</returns>
        public List<TsiWebServiceOrderTemplate> MasterTablesGetServiceOrderTemplates ()
        {
             ApiResponse<List<TsiWebServiceOrderTemplate>> localVarResponse = MasterTablesGetServiceOrderTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderTemplate&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderTemplate> > MasterTablesGetServiceOrderTemplatesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceorders/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderTemplate>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceOrderTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderTemplate>> MasterTablesGetServiceOrderTemplatesAsync ()
        {
             ApiResponse<List<TsiWebServiceOrderTemplate>> localVarResponse = await MasterTablesGetServiceOrderTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderTemplate>>> MasterTablesGetServiceOrderTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/serviceorders/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderTemplate>)));
        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>List&lt;TsiWebServiceOrderType&gt;</returns>
        public List<TsiWebServiceOrderType> MasterTablesGetServiceOrderTypes (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebServiceOrderType>> localVarResponse = MasterTablesGetServiceOrderTypesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderType&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderType> > MasterTablesGetServiceOrderTypesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/serviceOrders/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderType>)));
        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderType>> MasterTablesGetServiceOrderTypesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebServiceOrderType>> localVarResponse = await MasterTablesGetServiceOrderTypesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderType>>> MasterTablesGetServiceOrderTypesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/serviceOrders/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderType>)));
        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>List&lt;TsiWebServiceOrderType&gt;</returns>
        public List<TsiWebServiceOrderType> MasterTablesGetServiceOrderTypes_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebServiceOrderType>> localVarResponse = MasterTablesGetServiceOrderTypes_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderType&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderType> > MasterTablesGetServiceOrderTypes_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetServiceOrderTypes_0");

            var localVarPath = "/api/mastertables/serviceOrders/types/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderTypes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderType>)));
        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of List&lt;TsiWebServiceOrderType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderType>> MasterTablesGetServiceOrderTypes_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebServiceOrderType>> localVarResponse = await MasterTablesGetServiceOrderTypes_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of defined service order types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderType>>> MasterTablesGetServiceOrderTypes_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetServiceOrderTypes_0");

            var localVarPath = "/api/mastertables/serviceOrders/types/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceOrderTypes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderType>)));
        }

        /// <summary>
        /// Gets a list of the defined service zones. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebServiceZone&gt;</returns>
        public List<TsiWebServiceZone> MasterTablesGetServiceZones ()
        {
             ApiResponse<List<TsiWebServiceZone>> localVarResponse = MasterTablesGetServiceZonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined service zones. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebServiceZone&gt;</returns>
        public ApiResponse< List<TsiWebServiceZone> > MasterTablesGetServiceZonesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/servicezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceZone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceZone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceZone>)));
        }

        /// <summary>
        /// Gets a list of the defined service zones. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebServiceZone&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceZone>> MasterTablesGetServiceZonesAsync ()
        {
             ApiResponse<List<TsiWebServiceZone>> localVarResponse = await MasterTablesGetServiceZonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined service zones. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceZone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceZone>>> MasterTablesGetServiceZonesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/servicezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetServiceZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceZone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceZone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceZone>)));
        }

        /// <summary>
        /// Returns shippers stored in the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebShipper&gt;</returns>
        public List<TsiWebShipper> MasterTablesGetShippers ()
        {
             ApiResponse<List<TsiWebShipper>> localVarResponse = MasterTablesGetShippersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns shippers stored in the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebShipper&gt;</returns>
        public ApiResponse< List<TsiWebShipper> > MasterTablesGetShippersWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/shippers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetShippers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebShipper>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebShipper>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebShipper>)));
        }

        /// <summary>
        /// Returns shippers stored in the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebShipper&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebShipper>> MasterTablesGetShippersAsync ()
        {
             ApiResponse<List<TsiWebShipper>> localVarResponse = await MasterTablesGetShippersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns shippers stored in the master tables. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebShipper&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebShipper>>> MasterTablesGetShippersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/shippers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetShippers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebShipper>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebShipper>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebShipper>)));
        }

        /// <summary>
        /// Gets the shipping methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebShippingMethod&gt;</returns>
        public List<TsiWebShippingMethod> MasterTablesGetShippingMethods ()
        {
             ApiResponse<List<TsiWebShippingMethod>> localVarResponse = MasterTablesGetShippingMethodsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the shipping methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebShippingMethod&gt;</returns>
        public ApiResponse< List<TsiWebShippingMethod> > MasterTablesGetShippingMethodsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/shippingmethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetShippingMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebShippingMethod>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebShippingMethod>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebShippingMethod>)));
        }

        /// <summary>
        /// Gets the shipping methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebShippingMethod&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebShippingMethod>> MasterTablesGetShippingMethodsAsync ()
        {
             ApiResponse<List<TsiWebShippingMethod>> localVarResponse = await MasterTablesGetShippingMethodsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the shipping methods. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebShippingMethod&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebShippingMethod>>> MasterTablesGetShippingMethodsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/shippingmethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetShippingMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebShippingMethod>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebShippingMethod>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebShippingMethod>)));
        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>List&lt;TsiWebState&gt;</returns>
        public List<TsiWebState> MasterTablesGetStates (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebState>> localVarResponse = MasterTablesGetStatesWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebState&gt;</returns>
        public ApiResponse< List<TsiWebState> > MasterTablesGetStatesWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/states";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebState>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebState>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebState>)));
        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of List&lt;TsiWebState&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebState>> MasterTablesGetStatesAsync (bool? excludeSystemEntries = null)
        {
             ApiResponse<List<TsiWebState>> localVarResponse = await MasterTablesGetStatesAsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebState&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebState>>> MasterTablesGetStatesAsyncWithHttpInfo (bool? excludeSystemEntries = null)
        {

            var localVarPath = "/api/mastertables/states";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSystemEntries", excludeSystemEntries)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebState>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebState>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebState>)));
        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>List&lt;TsiWebState&gt;</returns>
        public List<TsiWebState> MasterTablesGetStates_0 (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebState>> localVarResponse = MasterTablesGetStates_0WithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>ApiResponse of List&lt;TsiWebState&gt;</returns>
        public ApiResponse< List<TsiWebState> > MasterTablesGetStates_0WithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetStates_0");

            var localVarPath = "/api/mastertables/states/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetStates_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebState>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebState>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebState>)));
        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of List&lt;TsiWebState&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebState>> MasterTablesGetStates_0Async (bool? excludeSystemEntries)
        {
             ApiResponse<List<TsiWebState>> localVarResponse = await MasterTablesGetStates_0AsyncWithHttpInfo(excludeSystemEntries);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined states. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSystemEntries">If true excludes master table system entries.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebState&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebState>>> MasterTablesGetStates_0AsyncWithHttpInfo (bool? excludeSystemEntries)
        {
            // verify the required parameter 'excludeSystemEntries' is set
            if (excludeSystemEntries == null)
                throw new ApiException(400, "Missing required parameter 'excludeSystemEntries' when calling MasterTablesApi->MasterTablesGetStates_0");

            var localVarPath = "/api/mastertables/states/{excludeSystemEntries}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSystemEntries != null) localVarPathParams.Add("excludeSystemEntries", this.Configuration.ApiClient.ParameterToString(excludeSystemEntries)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetStates_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebState>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebState>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebState>)));
        }

        /// <summary>
        /// Gets the sub contractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSubContractor&gt;</returns>
        public List<TsiWebSubContractor> MasterTablesGetSubContractors ()
        {
             ApiResponse<List<TsiWebSubContractor>> localVarResponse = MasterTablesGetSubContractorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the sub contractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSubContractor&gt;</returns>
        public ApiResponse< List<TsiWebSubContractor> > MasterTablesGetSubContractorsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/subcontractors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSubContractors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSubContractor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSubContractor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSubContractor>)));
        }

        /// <summary>
        /// Gets the sub contractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSubContractor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebSubContractor>> MasterTablesGetSubContractorsAsync ()
        {
             ApiResponse<List<TsiWebSubContractor>> localVarResponse = await MasterTablesGetSubContractorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the sub contractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSubContractor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebSubContractor>>> MasterTablesGetSubContractorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/subcontractors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSubContractors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSubContractor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSubContractor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSubContractor>)));
        }

        /// <summary>
        /// Gets the systems. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSupportedSystem&gt;</returns>
        public List<TsiWebSupportedSystem> MasterTablesGetSupportedSystems ()
        {
             ApiResponse<List<TsiWebSupportedSystem>> localVarResponse = MasterTablesGetSupportedSystemsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the systems. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSupportedSystem&gt;</returns>
        public ApiResponse< List<TsiWebSupportedSystem> > MasterTablesGetSupportedSystemsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSupportedSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSupportedSystem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSupportedSystem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSupportedSystem>)));
        }

        /// <summary>
        /// Gets the systems. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSupportedSystem&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebSupportedSystem>> MasterTablesGetSupportedSystemsAsync ()
        {
             ApiResponse<List<TsiWebSupportedSystem>> localVarResponse = await MasterTablesGetSupportedSystemsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the systems. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSupportedSystem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebSupportedSystem>>> MasterTablesGetSupportedSystemsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSupportedSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSupportedSystem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSupportedSystem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSupportedSystem>)));
        }

        /// <summary>
        /// Gets a list of the defined symptoms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSymptom&gt;</returns>
        public List<TsiWebSymptom> MasterTablesGetSymptoms ()
        {
             ApiResponse<List<TsiWebSymptom>> localVarResponse = MasterTablesGetSymptomsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the defined symptoms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSymptom&gt;</returns>
        public ApiResponse< List<TsiWebSymptom> > MasterTablesGetSymptomsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSymptoms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSymptom>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSymptom>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSymptom>)));
        }

        /// <summary>
        /// Gets a list of the defined symptoms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSymptom&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebSymptom>> MasterTablesGetSymptomsAsync ()
        {
             ApiResponse<List<TsiWebSymptom>> localVarResponse = await MasterTablesGetSymptomsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the defined symptoms. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSymptom&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebSymptom>>> MasterTablesGetSymptomsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSymptoms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSymptom>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSymptom>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSymptom>)));
        }

        /// <summary>
        /// Gets the system types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebSystemType&gt;</returns>
        public List<TsiWebSystemType> MasterTablesGetSystemTypes ()
        {
             ApiResponse<List<TsiWebSystemType>> localVarResponse = MasterTablesGetSystemTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the system types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebSystemType&gt;</returns>
        public ApiResponse< List<TsiWebSystemType> > MasterTablesGetSystemTypesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/systemtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSystemTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSystemType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSystemType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSystemType>)));
        }

        /// <summary>
        /// Gets the system types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebSystemType&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebSystemType>> MasterTablesGetSystemTypesAsync ()
        {
             ApiResponse<List<TsiWebSystemType>> localVarResponse = await MasterTablesGetSystemTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the system types. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebSystemType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebSystemType>>> MasterTablesGetSystemTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/systemtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetSystemTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebSystemType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebSystemType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebSystemType>)));
        }

        /// <summary>
        /// Gets a list of the task action plans. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskActionPlan&gt;</returns>
        public List<TsiWebTaskActionPlan> MasterTablesGetTaskActionPlans ()
        {
             ApiResponse<List<TsiWebTaskActionPlan>> localVarResponse = MasterTablesGetTaskActionPlansWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the task action plans. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskActionPlan&gt;</returns>
        public ApiResponse< List<TsiWebTaskActionPlan> > MasterTablesGetTaskActionPlansWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/actionplans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskActionPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskActionPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskActionPlan>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskActionPlan>)));
        }

        /// <summary>
        /// Gets a list of the task action plans. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskActionPlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTaskActionPlan>> MasterTablesGetTaskActionPlansAsync ()
        {
             ApiResponse<List<TsiWebTaskActionPlan>> localVarResponse = await MasterTablesGetTaskActionPlansAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the task action plans. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskActionPlan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskActionPlan>>> MasterTablesGetTaskActionPlansAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/actionplans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskActionPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskActionPlan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskActionPlan>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskActionPlan>)));
        }

        /// <summary>
        /// Gets a list of the task action. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskAction&gt;</returns>
        public List<TsiWebTaskAction> MasterTablesGetTaskActions ()
        {
             ApiResponse<List<TsiWebTaskAction>> localVarResponse = MasterTablesGetTaskActionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the task action. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskAction&gt;</returns>
        public ApiResponse< List<TsiWebTaskAction> > MasterTablesGetTaskActionsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskAction>)));
        }

        /// <summary>
        /// Gets a list of the task action. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTaskAction>> MasterTablesGetTaskActionsAsync ()
        {
             ApiResponse<List<TsiWebTaskAction>> localVarResponse = await MasterTablesGetTaskActionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the task action. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskAction>>> MasterTablesGetTaskActionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskAction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskAction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskAction>)));
        }

        /// <summary>
        /// Gets a list of the task checklist tempaltes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskCheckListTemplate&gt;</returns>
        public List<TsiWebTaskCheckListTemplate> MasterTablesGetTaskCheckListTemplates ()
        {
             ApiResponse<List<TsiWebTaskCheckListTemplate>> localVarResponse = MasterTablesGetTaskCheckListTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the task checklist tempaltes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskCheckListTemplate&gt;</returns>
        public ApiResponse< List<TsiWebTaskCheckListTemplate> > MasterTablesGetTaskCheckListTemplatesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/checklisttemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskCheckListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskCheckListTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskCheckListTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskCheckListTemplate>)));
        }

        /// <summary>
        /// Gets a list of the task checklist tempaltes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskCheckListTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTaskCheckListTemplate>> MasterTablesGetTaskCheckListTemplatesAsync ()
        {
             ApiResponse<List<TsiWebTaskCheckListTemplate>> localVarResponse = await MasterTablesGetTaskCheckListTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the task checklist tempaltes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskCheckListTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskCheckListTemplate>>> MasterTablesGetTaskCheckListTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/checklisttemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskCheckListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskCheckListTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskCheckListTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskCheckListTemplate>)));
        }

        /// <summary>
        /// Gets a list of the tasklibrary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskLibrary&gt;</returns>
        public List<TsiWebTaskLibrary> MasterTablesGetTaskLibraries ()
        {
             ApiResponse<List<TsiWebTaskLibrary>> localVarResponse = MasterTablesGetTaskLibrariesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the tasklibrary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskLibrary&gt;</returns>
        public ApiResponse< List<TsiWebTaskLibrary> > MasterTablesGetTaskLibrariesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/libraries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskLibraries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskLibrary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskLibrary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskLibrary>)));
        }

        /// <summary>
        /// Gets a list of the tasklibrary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskLibrary&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTaskLibrary>> MasterTablesGetTaskLibrariesAsync ()
        {
             ApiResponse<List<TsiWebTaskLibrary>> localVarResponse = await MasterTablesGetTaskLibrariesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the tasklibrary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskLibrary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskLibrary>>> MasterTablesGetTaskLibrariesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/libraries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskLibraries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskLibrary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskLibrary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskLibrary>)));
        }

        /// <summary>
        /// Gets a list of the task resources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTaskResource&gt;</returns>
        public List<TsiWebTaskResource> MasterTablesGetTaskResources ()
        {
             ApiResponse<List<TsiWebTaskResource>> localVarResponse = MasterTablesGetTaskResourcesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the task resources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTaskResource&gt;</returns>
        public ApiResponse< List<TsiWebTaskResource> > MasterTablesGetTaskResourcesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskResource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskResource>)));
        }

        /// <summary>
        /// Gets a list of the task resources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTaskResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTaskResource>> MasterTablesGetTaskResourcesAsync ()
        {
             ApiResponse<List<TsiWebTaskResource>> localVarResponse = await MasterTablesGetTaskResourcesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the task resources. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskResource>>> MasterTablesGetTaskResourcesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/tasks/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTaskResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskResource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskResource>)));
        }

        /// <summary>
        /// Gets the time entry reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTimeEntryReason&gt;</returns>
        public List<TsiWebTimeEntryReason> MasterTablesGetTimeEntryReasons ()
        {
             ApiResponse<List<TsiWebTimeEntryReason>> localVarResponse = MasterTablesGetTimeEntryReasonsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the time entry reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTimeEntryReason&gt;</returns>
        public ApiResponse< List<TsiWebTimeEntryReason> > MasterTablesGetTimeEntryReasonsWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/timeentryreasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTimeEntryReasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTimeEntryReason>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTimeEntryReason>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTimeEntryReason>)));
        }

        /// <summary>
        /// Gets the time entry reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTimeEntryReason&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTimeEntryReason>> MasterTablesGetTimeEntryReasonsAsync ()
        {
             ApiResponse<List<TsiWebTimeEntryReason>> localVarResponse = await MasterTablesGetTimeEntryReasonsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the time entry reasons. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTimeEntryReason&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTimeEntryReason>>> MasterTablesGetTimeEntryReasonsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/timeentryreasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTimeEntryReasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTimeEntryReason>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTimeEntryReason>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTimeEntryReason>)));
        }

        /// <summary>
        /// Gets the titles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsiWebTitle&gt;</returns>
        public List<TsiWebTitle> MasterTablesGetTitles ()
        {
             ApiResponse<List<TsiWebTitle>> localVarResponse = MasterTablesGetTitlesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the titles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsiWebTitle&gt;</returns>
        public ApiResponse< List<TsiWebTitle> > MasterTablesGetTitlesWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTitle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTitle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTitle>)));
        }

        /// <summary>
        /// Gets the titles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsiWebTitle&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTitle>> MasterTablesGetTitlesAsync ()
        {
             ApiResponse<List<TsiWebTitle>> localVarResponse = await MasterTablesGetTitlesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the titles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTitle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTitle>>> MasterTablesGetTitlesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/mastertables/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesGetTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTitle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTitle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTitle>)));
        }

        /// <summary>
        /// Updates the account custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        public TsiWebCustomFieldCategoryResponse MasterTablesUpdateAccountCustomFieldCategory (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = MasterTablesUpdateAccountCustomFieldCategoryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the account custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        public ApiResponse< TsiWebCustomFieldCategoryResponse > MasterTablesUpdateAccountCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateAccountCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateAccountCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Updates the account custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateAccountCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = await MasterTablesUpdateAccountCustomFieldCategoryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the account custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesUpdateAccountCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateAccountCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateAccountCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Updates the contact custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        public TsiWebCustomFieldCategoryResponse MasterTablesUpdateContactCustomFieldCategory (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = MasterTablesUpdateContactCustomFieldCategoryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contact custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        public ApiResponse< TsiWebCustomFieldCategoryResponse > MasterTablesUpdateContactCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateContactCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateContactCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Updates the contact custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateContactCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = await MasterTablesUpdateContactCustomFieldCategoryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the contact custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesUpdateContactCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateContactCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateContactCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Updates the the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesUpdateContractMeter (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesUpdateContractMeterWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesUpdateContractMeterWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateContractMeter");

            var localVarPath = "/api/mastertables/contracts/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateContractMeter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateContractMeterAsync (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesUpdateContractMeterAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the the ContractMeter. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateContractMeterAsyncWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateContractMeter");

            var localVarPath = "/api/mastertables/contracts/meters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateContractMeter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesUpdateContractMeterGroup (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesUpdateContractMeterGroupWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesUpdateContractMeterGroupWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateContractMeterGroup");

            var localVarPath = "/api/mastertables/contracts/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateContractMeterGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateContractMeterGroupAsync (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesUpdateContractMeterGroupAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the the Contract Meter group. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateContractMeterGroupAsyncWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateContractMeterGroup");

            var localVarPath = "/api/mastertables/contracts/metergroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateContractMeterGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>TsiWebCustomFieldDefinitionResponse</returns>
        public TsiWebCustomFieldDefinitionResponse MasterTablesUpdateCustomFieldDefinition (int? customFieldID, TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = MasterTablesUpdateCustomFieldDefinitionWithHttpInfo(customFieldID, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldDefinitionResponse</returns>
        public ApiResponse< TsiWebCustomFieldDefinitionResponse > MasterTablesUpdateCustomFieldDefinitionWithHttpInfo (int? customFieldID, TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'customFieldID' is set
            if (customFieldID == null)
                throw new ApiException(400, "Missing required parameter 'customFieldID' when calling MasterTablesApi->MasterTablesUpdateCustomFieldDefinition");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/{customFieldID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldID != null) localVarPathParams.Add("customFieldID", this.Configuration.ApiClient.ParameterToString(customFieldID)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Updates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>Task of TsiWebCustomFieldDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldDefinitionResponse> MasterTablesUpdateCustomFieldDefinitionAsync (int? customFieldID, TsiWebCustomFieldDefinitionModel model)
        {
             ApiResponse<TsiWebCustomFieldDefinitionResponse> localVarResponse = await MasterTablesUpdateCustomFieldDefinitionAsyncWithHttpInfo(customFieldID, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the custom field. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldID">The custom field identifier.</param>
        /// <param name="model">The custom field defintion.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldDefinitionResponse>> MasterTablesUpdateCustomFieldDefinitionAsyncWithHttpInfo (int? customFieldID, TsiWebCustomFieldDefinitionModel model)
        {
            // verify the required parameter 'customFieldID' is set
            if (customFieldID == null)
                throw new ApiException(400, "Missing required parameter 'customFieldID' when calling MasterTablesApi->MasterTablesUpdateCustomFieldDefinition");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateCustomFieldDefinition");

            var localVarPath = "/api/mastertables/customfields/definitions/{customFieldID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldID != null) localVarPathParams.Add("customFieldID", this.Configuration.ApiClient.ParameterToString(customFieldID)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateCustomFieldDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldDefinitionResponse)));
        }

        /// <summary>
        /// Updates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TsiWebExpensePaymentTypesResponse</returns>
        public TsiWebExpensePaymentTypesResponse MasterTablesUpdateExpensePaymentType (TsiWebUpdateExpensePaymentTypeRequest request)
        {
             ApiResponse<TsiWebExpensePaymentTypesResponse> localVarResponse = MasterTablesUpdateExpensePaymentTypeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of TsiWebExpensePaymentTypesResponse</returns>
        public ApiResponse< TsiWebExpensePaymentTypesResponse > MasterTablesUpdateExpensePaymentTypeWithHttpInfo (TsiWebUpdateExpensePaymentTypeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateExpensePaymentType");

            var localVarPath = "/api/mastertables/expensepaymenttypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateExpensePaymentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpensePaymentTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpensePaymentTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpensePaymentTypesResponse)));
        }

        /// <summary>
        /// Updates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TsiWebExpensePaymentTypesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebExpensePaymentTypesResponse> MasterTablesUpdateExpensePaymentTypeAsync (TsiWebUpdateExpensePaymentTypeRequest request)
        {
             ApiResponse<TsiWebExpensePaymentTypesResponse> localVarResponse = await MasterTablesUpdateExpensePaymentTypeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an expense payment type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TsiWebExpensePaymentTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebExpensePaymentTypesResponse>> MasterTablesUpdateExpensePaymentTypeAsyncWithHttpInfo (TsiWebUpdateExpensePaymentTypeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateExpensePaymentType");

            var localVarPath = "/api/mastertables/expensepaymenttypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateExpensePaymentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpensePaymentTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpensePaymentTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpensePaymentTypesResponse)));
        }

        /// <summary>
        /// Updates an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TsiWebExpenseTypesResponse</returns>
        public TsiWebExpenseTypesResponse MasterTablesUpdateExpenseType (TsiWebUpdateExpenseTypeRequest request)
        {
             ApiResponse<TsiWebExpenseTypesResponse> localVarResponse = MasterTablesUpdateExpenseTypeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of TsiWebExpenseTypesResponse</returns>
        public ApiResponse< TsiWebExpenseTypesResponse > MasterTablesUpdateExpenseTypeWithHttpInfo (TsiWebUpdateExpenseTypeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateExpenseType");

            var localVarPath = "/api/mastertables/expenseTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateExpenseType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpenseTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpenseTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpenseTypesResponse)));
        }

        /// <summary>
        /// Updates an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TsiWebExpenseTypesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebExpenseTypesResponse> MasterTablesUpdateExpenseTypeAsync (TsiWebUpdateExpenseTypeRequest request)
        {
             ApiResponse<TsiWebExpenseTypesResponse> localVarResponse = await MasterTablesUpdateExpenseTypeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an expense type. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TsiWebExpenseTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebExpenseTypesResponse>> MasterTablesUpdateExpenseTypeAsyncWithHttpInfo (TsiWebUpdateExpenseTypeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateExpenseType");

            var localVarPath = "/api/mastertables/expenseTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateExpenseType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebExpenseTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebExpenseTypesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebExpenseTypesResponse)));
        }

        /// <summary>
        /// Updates the journal action. ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>TsiWebJournalActionsResponse</returns>
        public TsiWebJournalActionsResponse MasterTablesUpdateJournalAction (TsiWebUpdateJournalActionRequest request)
        {
             ApiResponse<TsiWebJournalActionsResponse> localVarResponse = MasterTablesUpdateJournalActionWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the journal action. ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>ApiResponse of TsiWebJournalActionsResponse</returns>
        public ApiResponse< TsiWebJournalActionsResponse > MasterTablesUpdateJournalActionWithHttpInfo (TsiWebUpdateJournalActionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateJournalAction");

            var localVarPath = "/api/mastertables/journal/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateJournalAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalActionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalActionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalActionsResponse)));
        }

        /// <summary>
        /// Updates the journal action. ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>Task of TsiWebJournalActionsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebJournalActionsResponse> MasterTablesUpdateJournalActionAsync (TsiWebUpdateJournalActionRequest request)
        {
             ApiResponse<TsiWebJournalActionsResponse> localVarResponse = await MasterTablesUpdateJournalActionAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the journal action. ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request used to update the existing journal action.</param>
        /// <returns>Task of ApiResponse (TsiWebJournalActionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebJournalActionsResponse>> MasterTablesUpdateJournalActionAsyncWithHttpInfo (TsiWebUpdateJournalActionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateJournalAction");

            var localVarPath = "/api/mastertables/journal/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateJournalAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebJournalActionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebJournalActionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebJournalActionsResponse)));
        }

        /// <summary>
        /// Updates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesUpdateJournalTopic (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesUpdateJournalTopicWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesUpdateJournalTopicWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateJournalTopic");

            var localVarPath = "/api/mastertables/journal/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateJournalTopic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateJournalTopicAsync (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesUpdateJournalTopicAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the journal topic. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateJournalTopicAsyncWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateJournalTopic");

            var localVarPath = "/api/mastertables/journal/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateJournalTopic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the opportunity custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebCustomFieldCategoryResponse</returns>
        public TsiWebCustomFieldCategoryResponse MasterTablesUpdateOpportunityCustomFieldCategory (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = MasterTablesUpdateOpportunityCustomFieldCategoryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the opportunity custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldCategoryResponse</returns>
        public ApiResponse< TsiWebCustomFieldCategoryResponse > MasterTablesUpdateOpportunityCustomFieldCategoryWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateOpportunityCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateOpportunityCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Updates the opportunity custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebCustomFieldCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldCategoryResponse> MasterTablesUpdateOpportunityCustomFieldCategoryAsync (TsiWebCustomFieldCategoryRequest request)
        {
             ApiResponse<TsiWebCustomFieldCategoryResponse> localVarResponse = await MasterTablesUpdateOpportunityCustomFieldCategoryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the opportunity custom field category. To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldCategoryResponse>> MasterTablesUpdateOpportunityCustomFieldCategoryAsyncWithHttpInfo (TsiWebCustomFieldCategoryRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MasterTablesApi->MasterTablesUpdateOpportunityCustomFieldCategory");

            var localVarPath = "/api/mastertables/customfields/categories/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateOpportunityCustomFieldCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldCategoryResponse)));
        }

        /// <summary>
        /// Updates the the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesUpdateResolution (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesUpdateResolutionWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesUpdateResolutionWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateResolution");

            var localVarPath = "/api/mastertables/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateResolutionAsync (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesUpdateResolutionAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the the Resolution. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateResolutionAsyncWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateResolution");

            var localVarPath = "/api/mastertables/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesUpdateServiceOrderProfile (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesUpdateServiceOrderProfileWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesUpdateServiceOrderProfileWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateServiceOrderProfile");

            var localVarPath = "/api/mastertables/serviceOrderProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateServiceOrderProfileAsync (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesUpdateServiceOrderProfileAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the the Service Order Profile. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateServiceOrderProfileAsyncWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateServiceOrderProfile");

            var localVarPath = "/api/mastertables/serviceOrderProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebMasterTableResponse</returns>
        public TsiWebMasterTableResponse MasterTablesUpdateSymptom (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = MasterTablesUpdateSymptomWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebMasterTableResponse</returns>
        public ApiResponse< TsiWebMasterTableResponse > MasterTablesUpdateSymptomWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateSymptom");

            var localVarPath = "/api/mastertables/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates the the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebMasterTableResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebMasterTableResponse> MasterTablesUpdateSymptomAsync (TsiWebUpdateEntryModel model)
        {
             ApiResponse<TsiWebMasterTableResponse> localVarResponse = await MasterTablesUpdateSymptomAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the the Symptom. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebMasterTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebMasterTableResponse>> MasterTablesUpdateSymptomAsyncWithHttpInfo (TsiWebUpdateEntryModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling MasterTablesApi->MasterTablesUpdateSymptom");

            var localVarPath = "/api/mastertables/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebMasterTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebMasterTableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebMasterTableResponse)));
        }

        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>TsiWebTimeEntryReasonResponse</returns>
        public TsiWebTimeEntryReasonResponse MasterTablesUpdateTimeEntryReason (TsiWebUpdateTimeEntryReasonRequest reason)
        {
             ApiResponse<TsiWebTimeEntryReasonResponse> localVarResponse = MasterTablesUpdateTimeEntryReasonWithHttpInfo(reason);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>ApiResponse of TsiWebTimeEntryReasonResponse</returns>
        public ApiResponse< TsiWebTimeEntryReasonResponse > MasterTablesUpdateTimeEntryReasonWithHttpInfo (TsiWebUpdateTimeEntryReasonRequest reason)
        {
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling MasterTablesApi->MasterTablesUpdateTimeEntryReason");

            var localVarPath = "/api/mastertables/timeentryreasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reason != null && reason.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reason); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reason; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateTimeEntryReason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTimeEntryReasonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTimeEntryReasonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTimeEntryReasonResponse)));
        }

        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of TsiWebTimeEntryReasonResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTimeEntryReasonResponse> MasterTablesUpdateTimeEntryReasonAsync (TsiWebUpdateTimeEntryReasonRequest reason)
        {
             ApiResponse<TsiWebTimeEntryReasonResponse> localVarResponse = await MasterTablesUpdateTimeEntryReasonAsyncWithHttpInfo(reason);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt; 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reason"></param>
        /// <returns>Task of ApiResponse (TsiWebTimeEntryReasonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTimeEntryReasonResponse>> MasterTablesUpdateTimeEntryReasonAsyncWithHttpInfo (TsiWebUpdateTimeEntryReasonRequest reason)
        {
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling MasterTablesApi->MasterTablesUpdateTimeEntryReason");

            var localVarPath = "/api/mastertables/timeentryreasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reason != null && reason.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reason); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reason; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MasterTablesUpdateTimeEntryReason", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTimeEntryReasonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTimeEntryReasonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTimeEntryReasonResponse)));
        }

    }
}
