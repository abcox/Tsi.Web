/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOpportunityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for opportunities.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunityAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for opportunities.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunityAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>TsiWebOpportunityResponse</returns>
        TsiWebOpportunityResponse OpportunityCreateOpportunity (TsiWebOpportunity opportunity);

        /// <summary>
        /// Creates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>ApiResponse of TsiWebOpportunityResponse</returns>
        ApiResponse<TsiWebOpportunityResponse> OpportunityCreateOpportunityWithHttpInfo (TsiWebOpportunity opportunity);
        /// <summary>
        /// Creates the opportunity document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse OpportunityCreateOpportunityDocument (int? opportunityNumber);

        /// <summary>
        /// Creates the opportunity document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> OpportunityCreateOpportunityDocumentWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets a list of opportunities by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunityGetAccountOpportunities (int? accountNumber);

        /// <summary>
        /// Gets a list of opportunities by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunityGetAccountOpportunitiesWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a list of opportunities by contact number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunityGetContactOpportunities (int? contactNumber);

        /// <summary>
        /// Gets a list of opportunities by contact number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunityGetContactOpportunitiesWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the custom fields for the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> OpportunityGetCustomFields (int? opportunityNumber);

        /// <summary>
        /// Gets the custom fields for the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> OpportunityGetCustomFieldsWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets the opportunity document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        Object OpportunityGetFile (int? opportunityNumber, int? documentID);

        /// <summary>
        /// Gets the opportunity document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OpportunityGetFileWithHttpInfo (int? opportunityNumber, int? documentID);
        /// <summary>
        /// Gets the Opportunity completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse OpportunityGetOpportunityCompletedTasks (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Opportunity completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> OpportunityGetOpportunityCompletedTasksWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the opportunity detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>TsiWebOpportunityDetail</returns>
        TsiWebOpportunityDetail OpportunityGetOpportunityDetail (int? opportunityNumber);

        /// <summary>
        /// Gets the opportunity detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>ApiResponse of TsiWebOpportunityDetail</returns>
        ApiResponse<TsiWebOpportunityDetail> OpportunityGetOpportunityDetailWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        TsiWebDocumentSummary OpportunityGetOpportunityDocument (int? opportunityNumber, int? documentID);

        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        ApiResponse<TsiWebDocumentSummary> OpportunityGetOpportunityDocumentWithHttpInfo (int? opportunityNumber, int? documentID);
        /// <summary>
        /// Gets the opportunity documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        TsiWebDocumentsResponse OpportunityGetOpportunityDocuments (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the opportunity documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        ApiResponse<TsiWebDocumentsResponse> OpportunityGetOpportunityDocumentsWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Opportunity incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse OpportunityGetOpportunityIncompleteTasks (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Opportunity incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> OpportunityGetOpportunityIncompleteTasksWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the opportunity summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>TsiWebOpportunitySummary</returns>
        TsiWebOpportunitySummary OpportunityGetOpportunitySummary (int? opportunityNumber);

        /// <summary>
        /// Gets the opportunity summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>ApiResponse of TsiWebOpportunitySummary</returns>
        ApiResponse<TsiWebOpportunitySummary> OpportunityGetOpportunitySummaryWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse OpportunityGetOpportunityTasks (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> OpportunityGetOpportunityTasksWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets a list of opportunities by owner (Rep).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunityGetOwnerOpportunities (int? repNumber);

        /// <summary>
        /// Gets a list of opportunities by owner (Rep).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunityGetOwnerOpportunitiesWithHttpInfo (int? repNumber);
        /// <summary>
        /// Searches opportunities by account name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunitySearchByAccountName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by account name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunitySearchByAccountNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches opportunities by contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunitySearchByContactName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunitySearchByContactNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Opportunities using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunitySearchByCustomField (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Opportunities using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunitySearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches opportunities by opportuniyt name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunitySearchByName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by opportuniyt name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunitySearchByNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches opportunities by opportunity number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        TsiWebSearchOpportunityResponse OpportunitySearchByNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by opportunity number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        ApiResponse<TsiWebSearchOpportunityResponse> OpportunitySearchByNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse OpportunitySetOpportunityDocumentFile (int? opportunityNumber, int? documentID);

        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> OpportunitySetOpportunityDocumentFileWithHttpInfo (int? opportunityNumber, int? documentID);
        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse OpportunitySetOpportunityDocumentFileName (int? opportunityNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> OpportunitySetOpportunityDocumentFileNameWithHttpInfo (int? opportunityNumber, int? documentID, string fileName);
        /// <summary>
        /// Updates the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse OpportunityUpdateCustomFields (int? opportunityNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> OpportunityUpdateCustomFieldsWithHttpInfo (int? opportunityNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>TsiWebOpportunityResponse</returns>
        TsiWebOpportunityResponse OpportunityUpdateOpportunity (int? opportunityNumber, TsiWebOpportunity opportunity);

        /// <summary>
        /// Updates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>ApiResponse of TsiWebOpportunityResponse</returns>
        ApiResponse<TsiWebOpportunityResponse> OpportunityUpdateOpportunityWithHttpInfo (int? opportunityNumber, TsiWebOpportunity opportunity);
        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse OpportunityUpdateOpportunityDocumentProperties (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> OpportunityUpdateOpportunityDocumentPropertiesWithHttpInfo (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for opportunities.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for opportunities.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of TsiWebOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebOpportunityResponse> OpportunityCreateOpportunityAsync (TsiWebOpportunity opportunity);

        /// <summary>
        /// Creates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunityResponse>> OpportunityCreateOpportunityAsyncWithHttpInfo (TsiWebOpportunity opportunity);
        /// <summary>
        /// Creates the opportunity document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> OpportunityCreateOpportunityDocumentAsync (int? opportunityNumber);

        /// <summary>
        /// Creates the opportunity document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> OpportunityCreateOpportunityDocumentAsyncWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets a list of opportunities by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityGetAccountOpportunitiesAsync (int? accountNumber);

        /// <summary>
        /// Gets a list of opportunities by account number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityGetAccountOpportunitiesAsyncWithHttpInfo (int? accountNumber);
        /// <summary>
        /// Gets a list of opportunities by contact number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityGetContactOpportunitiesAsync (int? contactNumber);

        /// <summary>
        /// Gets a list of opportunities by contact number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityGetContactOpportunitiesAsyncWithHttpInfo (int? contactNumber);
        /// <summary>
        /// Gets the custom fields for the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> OpportunityGetCustomFieldsAsync (int? opportunityNumber);

        /// <summary>
        /// Gets the custom fields for the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> OpportunityGetCustomFieldsAsyncWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets the opportunity document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OpportunityGetFileAsync (int? opportunityNumber, int? documentID);

        /// <summary>
        /// Gets the opportunity document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpportunityGetFileAsyncWithHttpInfo (int? opportunityNumber, int? documentID);
        /// <summary>
        /// Gets the Opportunity completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> OpportunityGetOpportunityCompletedTasksAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Opportunity completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> OpportunityGetOpportunityCompletedTasksAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the opportunity detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of TsiWebOpportunityDetail</returns>
        System.Threading.Tasks.Task<TsiWebOpportunityDetail> OpportunityGetOpportunityDetailAsync (int? opportunityNumber);

        /// <summary>
        /// Gets the opportunity detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunityDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunityDetail>> OpportunityGetOpportunityDetailAsyncWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        System.Threading.Tasks.Task<TsiWebDocumentSummary> OpportunityGetOpportunityDocumentAsync (int? opportunityNumber, int? documentID);

        /// <summary>
        /// Gets the account document with the file bytes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> OpportunityGetOpportunityDocumentAsyncWithHttpInfo (int? opportunityNumber, int? documentID);
        /// <summary>
        /// Gets the opportunity documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentsResponse> OpportunityGetOpportunityDocumentsAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the opportunity documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> OpportunityGetOpportunityDocumentsAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Opportunity incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> OpportunityGetOpportunityIncompleteTasksAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Opportunity incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> OpportunityGetOpportunityIncompleteTasksAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the opportunity summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of TsiWebOpportunitySummary</returns>
        System.Threading.Tasks.Task<TsiWebOpportunitySummary> OpportunityGetOpportunitySummaryAsync (int? opportunityNumber);

        /// <summary>
        /// Gets the opportunity summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunitySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunitySummary>> OpportunityGetOpportunitySummaryAsyncWithHttpInfo (int? opportunityNumber);
        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> OpportunityGetOpportunityTasksAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> OpportunityGetOpportunityTasksAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets a list of opportunities by owner (Rep).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityGetOwnerOpportunitiesAsync (int? repNumber);

        /// <summary>
        /// Gets a list of opportunities by owner (Rep).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityGetOwnerOpportunitiesAsyncWithHttpInfo (int? repNumber);
        /// <summary>
        /// Searches opportunities by account name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByAccountNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by account name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByAccountNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches opportunities by contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByContactNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by contact name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByContactNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Opportunities using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByCustomFieldAsync (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Opportunities using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches opportunities by opportuniyt name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by opportuniyt name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Searches opportunities by opportunity number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Searches opportunities by opportunity number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> OpportunitySetOpportunityDocumentFileAsync (int? opportunityNumber, int? documentID);

        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> OpportunitySetOpportunityDocumentFileAsyncWithHttpInfo (int? opportunityNumber, int? documentID);
        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> OpportunitySetOpportunityDocumentFileNameAsync (int? opportunityNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the documents file name and renames the associated file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> OpportunitySetOpportunityDocumentFileNameAsyncWithHttpInfo (int? opportunityNumber, int? documentID, string fileName);
        /// <summary>
        /// Updates the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> OpportunityUpdateCustomFieldsAsync (int? opportunityNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the opportunity custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> OpportunityUpdateCustomFieldsAsyncWithHttpInfo (int? opportunityNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of TsiWebOpportunityResponse</returns>
        System.Threading.Tasks.Task<TsiWebOpportunityResponse> OpportunityUpdateOpportunityAsync (int? opportunityNumber, TsiWebOpportunity opportunity);

        /// <summary>
        /// Updates the opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunityResponse>> OpportunityUpdateOpportunityAsyncWithHttpInfo (int? opportunityNumber, TsiWebOpportunity opportunity);
        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> OpportunityUpdateOpportunityDocumentPropertiesAsync (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> OpportunityUpdateOpportunityDocumentPropertiesAsyncWithHttpInfo (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OpportunityApi : IOpportunityApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OpportunityApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OpportunityApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for opportunities. &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunityAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunityAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for opportunities. &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunityAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OpportunityApi->OpportunityAdvancedSearch");

            var localVarPath = "/api/opportunities/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Advanced search for opportunities. &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunityAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for opportunities. &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OpportunityApi->OpportunityAdvancedSearch");

            var localVarPath = "/api/opportunities/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Creates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>TsiWebOpportunityResponse</returns>
        public TsiWebOpportunityResponse OpportunityCreateOpportunity (TsiWebOpportunity opportunity)
        {
             ApiResponse<TsiWebOpportunityResponse> localVarResponse = OpportunityCreateOpportunityWithHttpInfo(opportunity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>ApiResponse of TsiWebOpportunityResponse</returns>
        public ApiResponse< TsiWebOpportunityResponse > OpportunityCreateOpportunityWithHttpInfo (TsiWebOpportunity opportunity)
        {
            // verify the required parameter 'opportunity' is set
            if (opportunity == null)
                throw new ApiException(400, "Missing required parameter 'opportunity' when calling OpportunityApi->OpportunityCreateOpportunity");

            var localVarPath = "/api/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunity != null && opportunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(opportunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = opportunity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityCreateOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunityResponse)));
        }

        /// <summary>
        /// Creates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of TsiWebOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebOpportunityResponse> OpportunityCreateOpportunityAsync (TsiWebOpportunity opportunity)
        {
             ApiResponse<TsiWebOpportunityResponse> localVarResponse = await OpportunityCreateOpportunityAsyncWithHttpInfo(opportunity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunityResponse>> OpportunityCreateOpportunityAsyncWithHttpInfo (TsiWebOpportunity opportunity)
        {
            // verify the required parameter 'opportunity' is set
            if (opportunity == null)
                throw new ApiException(400, "Missing required parameter 'opportunity' when calling OpportunityApi->OpportunityCreateOpportunity");

            var localVarPath = "/api/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunity != null && opportunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(opportunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = opportunity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityCreateOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunityResponse)));
        }

        /// <summary>
        /// Creates the opportunity document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse OpportunityCreateOpportunityDocument (int? opportunityNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = OpportunityCreateOpportunityDocumentWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the opportunity document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > OpportunityCreateOpportunityDocumentWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityCreateOpportunityDocument");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityCreateOpportunityDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates the opportunity document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> OpportunityCreateOpportunityDocumentAsync (int? opportunityNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await OpportunityCreateOpportunityDocumentAsyncWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the opportunity document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> OpportunityCreateOpportunityDocumentAsyncWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityCreateOpportunityDocument");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityCreateOpportunityDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Gets a list of opportunities by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunityGetAccountOpportunities (int? accountNumber)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunityGetAccountOpportunitiesWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of opportunities by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunityGetAccountOpportunitiesWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling OpportunityApi->OpportunityGetAccountOpportunities");

            var localVarPath = "/api/opportunities/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetAccountOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Gets a list of opportunities by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityGetAccountOpportunitiesAsync (int? accountNumber)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunityGetAccountOpportunitiesAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of opportunities by account number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityGetAccountOpportunitiesAsyncWithHttpInfo (int? accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling OpportunityApi->OpportunityGetAccountOpportunities");

            var localVarPath = "/api/opportunities/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetAccountOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Gets a list of opportunities by contact number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunityGetContactOpportunities (int? contactNumber)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunityGetContactOpportunitiesWithHttpInfo(contactNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of opportunities by contact number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunityGetContactOpportunitiesWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling OpportunityApi->OpportunityGetContactOpportunities");

            var localVarPath = "/api/opportunities/contact/{contactNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetContactOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Gets a list of opportunities by contact number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityGetContactOpportunitiesAsync (int? contactNumber)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunityGetContactOpportunitiesAsyncWithHttpInfo(contactNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of opportunities by contact number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactNumber">The contact number.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityGetContactOpportunitiesAsyncWithHttpInfo (int? contactNumber)
        {
            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
                throw new ApiException(400, "Missing required parameter 'contactNumber' when calling OpportunityApi->OpportunityGetContactOpportunities");

            var localVarPath = "/api/opportunities/contact/{contactNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactNumber != null) localVarPathParams.Add("contactNumber", this.Configuration.ApiClient.ParameterToString(contactNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetContactOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Gets the custom fields for the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> OpportunityGetCustomFields (int? opportunityNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = OpportunityGetCustomFieldsWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > OpportunityGetCustomFieldsWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetCustomFields");

            var localVarPath = "/api/opportunities/{opportunityNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> OpportunityGetCustomFieldsAsync (int? opportunityNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await OpportunityGetCustomFieldsAsyncWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> OpportunityGetCustomFieldsAsyncWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetCustomFields");

            var localVarPath = "/api/opportunities/{opportunityNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the opportunity document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        public Object OpportunityGetFile (int? opportunityNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = OpportunityGetFileWithHttpInfo(opportunityNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OpportunityGetFileWithHttpInfo (int? opportunityNumber, int? documentID)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunityGetFile");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the opportunity document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OpportunityGetFileAsync (int? opportunityNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = await OpportunityGetFileAsyncWithHttpInfo(opportunityNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OpportunityGetFileAsyncWithHttpInfo (int? opportunityNumber, int? documentID)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunityGetFile");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the Opportunity completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse OpportunityGetOpportunityCompletedTasks (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = OpportunityGetOpportunityCompletedTasksWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Opportunity completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > OpportunityGetOpportunityCompletedTasksWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityCompletedTasks");

            var localVarPath = "/api/opportunities/{OpportunityNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("OpportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Opportunity completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> OpportunityGetOpportunityCompletedTasksAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await OpportunityGetOpportunityCompletedTasksAsyncWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Opportunity completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> OpportunityGetOpportunityCompletedTasksAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityCompletedTasks");

            var localVarPath = "/api/opportunities/{OpportunityNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("OpportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the opportunity detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>TsiWebOpportunityDetail</returns>
        public TsiWebOpportunityDetail OpportunityGetOpportunityDetail (int? opportunityNumber)
        {
             ApiResponse<TsiWebOpportunityDetail> localVarResponse = OpportunityGetOpportunityDetailWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>ApiResponse of TsiWebOpportunityDetail</returns>
        public ApiResponse< TsiWebOpportunityDetail > OpportunityGetOpportunityDetailWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityDetail");

            var localVarPath = "/api/opportunities/{opportunityNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunityDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunityDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunityDetail)));
        }

        /// <summary>
        /// Gets the opportunity detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of TsiWebOpportunityDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebOpportunityDetail> OpportunityGetOpportunityDetailAsync (int? opportunityNumber)
        {
             ApiResponse<TsiWebOpportunityDetail> localVarResponse = await OpportunityGetOpportunityDetailAsyncWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunityDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunityDetail>> OpportunityGetOpportunityDetailAsyncWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityDetail");

            var localVarPath = "/api/opportunities/{opportunityNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunityDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunityDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunityDetail)));
        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        public TsiWebDocumentSummary OpportunityGetOpportunityDocument (int? opportunityNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = OpportunityGetOpportunityDocumentWithHttpInfo(opportunityNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        public ApiResponse< TsiWebDocumentSummary > OpportunityGetOpportunityDocumentWithHttpInfo (int? opportunityNumber, int? documentID)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunityGetOpportunityDocument");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentSummary> OpportunityGetOpportunityDocumentAsync (int? opportunityNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = await OpportunityGetOpportunityDocumentAsyncWithHttpInfo(opportunityNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account document with the file bytes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> OpportunityGetOpportunityDocumentAsyncWithHttpInfo (int? opportunityNumber, int? documentID)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunityGetOpportunityDocument");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the opportunity documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        public TsiWebDocumentsResponse OpportunityGetOpportunityDocuments (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = OpportunityGetOpportunityDocumentsWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        public ApiResponse< TsiWebDocumentsResponse > OpportunityGetOpportunityDocumentsWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityDocuments");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the opportunity documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentsResponse> OpportunityGetOpportunityDocumentsAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = await OpportunityGetOpportunityDocumentsAsyncWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity documents. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> OpportunityGetOpportunityDocumentsAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityDocuments");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the Opportunity incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse OpportunityGetOpportunityIncompleteTasks (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = OpportunityGetOpportunityIncompleteTasksWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Opportunity incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > OpportunityGetOpportunityIncompleteTasksWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityIncompleteTasks");

            var localVarPath = "/api/opportunities/{OpportunityNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("OpportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Opportunity incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> OpportunityGetOpportunityIncompleteTasksAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await OpportunityGetOpportunityIncompleteTasksAsyncWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Opportunity incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> OpportunityGetOpportunityIncompleteTasksAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityIncompleteTasks");

            var localVarPath = "/api/opportunities/{OpportunityNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("OpportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the opportunity summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>TsiWebOpportunitySummary</returns>
        public TsiWebOpportunitySummary OpportunityGetOpportunitySummary (int? opportunityNumber)
        {
             ApiResponse<TsiWebOpportunitySummary> localVarResponse = OpportunityGetOpportunitySummaryWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the opportunity summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>ApiResponse of TsiWebOpportunitySummary</returns>
        public ApiResponse< TsiWebOpportunitySummary > OpportunityGetOpportunitySummaryWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunitySummary");

            var localVarPath = "/api/opportunities/{opportunityNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunitySummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunitySummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunitySummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunitySummary)));
        }

        /// <summary>
        /// Gets the opportunity summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of TsiWebOpportunitySummary</returns>
        public async System.Threading.Tasks.Task<TsiWebOpportunitySummary> OpportunityGetOpportunitySummaryAsync (int? opportunityNumber)
        {
             ApiResponse<TsiWebOpportunitySummary> localVarResponse = await OpportunityGetOpportunitySummaryAsyncWithHttpInfo(opportunityNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the opportunity summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity identifier number.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunitySummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunitySummary>> OpportunityGetOpportunitySummaryAsyncWithHttpInfo (int? opportunityNumber)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunitySummary");

            var localVarPath = "/api/opportunities/{opportunityNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunitySummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunitySummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunitySummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunitySummary)));
        }

        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse OpportunityGetOpportunityTasks (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = OpportunityGetOpportunityTasksWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > OpportunityGetOpportunityTasksWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityTasks");

            var localVarPath = "/api/opportunities/{OpportunityNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("OpportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> OpportunityGetOpportunityTasksAsync (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await OpportunityGetOpportunityTasksAsyncWithHttpInfo(opportunityNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Opportunity tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The Opportunity number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> OpportunityGetOpportunityTasksAsyncWithHttpInfo (int? opportunityNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityGetOpportunityTasks");

            var localVarPath = "/api/opportunities/{OpportunityNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("OpportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOpportunityTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets a list of opportunities by owner (Rep). 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunityGetOwnerOpportunities (int? repNumber)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunityGetOwnerOpportunitiesWithHttpInfo(repNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of opportunities by owner (Rep). 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunityGetOwnerOpportunitiesWithHttpInfo (int? repNumber)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling OpportunityApi->OpportunityGetOwnerOpportunities");

            var localVarPath = "/api/opportunities/owner/{repNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOwnerOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Gets a list of opportunities by owner (Rep). 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunityGetOwnerOpportunitiesAsync (int? repNumber)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunityGetOwnerOpportunitiesAsyncWithHttpInfo(repNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of opportunities by owner (Rep). 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The owner rep number.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunityGetOwnerOpportunitiesAsyncWithHttpInfo (int? repNumber)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling OpportunityApi->OpportunityGetOwnerOpportunities");

            var localVarPath = "/api/opportunities/owner/{repNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityGetOwnerOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by account name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunitySearchByAccountName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunitySearchByAccountNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches opportunities by account name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunitySearchByAccountNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByAccountName");

            var localVarPath = "/api/opportunities/search/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByAccountName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by account name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByAccountNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunitySearchByAccountNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches opportunities by account name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByAccountNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByAccountName");

            var localVarPath = "/api/opportunities/search/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByAccountName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunitySearchByContactName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunitySearchByContactNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches opportunities by contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunitySearchByContactNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByContactName");

            var localVarPath = "/api/opportunities/search/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByContactName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByContactNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunitySearchByContactNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches opportunities by contact name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByContactNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByContactName");

            var localVarPath = "/api/opportunities/search/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByContactName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Search Opportunities using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunitySearchByCustomField (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunitySearchByCustomFieldWithHttpInfo(searchModel, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Opportunities using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunitySearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'searchModel' is set
            if (searchModel == null)
                throw new ApiException(400, "Missing required parameter 'searchModel' when calling OpportunityApi->OpportunitySearchByCustomField");

            var localVarPath = "/api/opportunities/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (searchModel != null && searchModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Search Opportunities using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByCustomFieldAsync (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunitySearchByCustomFieldAsyncWithHttpInfo(searchModel, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Opportunities using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchModel">A JSON or XML request containing the category, field and criteria to search for.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel searchModel, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'searchModel' is set
            if (searchModel == null)
                throw new ApiException(400, "Missing required parameter 'searchModel' when calling OpportunityApi->OpportunitySearchByCustomField");

            var localVarPath = "/api/opportunities/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (searchModel != null && searchModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by opportuniyt name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunitySearchByName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunitySearchByNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches opportunities by opportuniyt name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunitySearchByNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByName");

            var localVarPath = "/api/opportunities/search/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by opportuniyt name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunitySearchByNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches opportunities by opportuniyt name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByName");

            var localVarPath = "/api/opportunities/search/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by opportunity number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchOpportunityResponse</returns>
        public TsiWebSearchOpportunityResponse OpportunitySearchByNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = OpportunitySearchByNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches opportunities by opportunity number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchOpportunityResponse</returns>
        public ApiResponse< TsiWebSearchOpportunityResponse > OpportunitySearchByNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByNumber");

            var localVarPath = "/api/opportunities/search/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Searches opportunities by opportunity number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchOpportunityResponse> OpportunitySearchByNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchOpportunityResponse> localVarResponse = await OpportunitySearchByNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches opportunities by opportunity number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchOpportunityResponse>> OpportunitySearchByNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling OpportunityApi->OpportunitySearchByNumber");

            var localVarPath = "/api/opportunities/search/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySearchByNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchOpportunityResponse)));
        }

        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse OpportunitySetOpportunityDocumentFile (int? opportunityNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = OpportunitySetOpportunityDocumentFileWithHttpInfo(opportunityNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > OpportunitySetOpportunityDocumentFileWithHttpInfo (int? opportunityNumber, int? documentID)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunitySetOpportunityDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunitySetOpportunityDocumentFile");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySetOpportunityDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> OpportunitySetOpportunityDocumentFileAsync (int? opportunityNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await OpportunitySetOpportunityDocumentFileAsyncWithHttpInfo(opportunityNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overwrites the opportuntiy document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> OpportunitySetOpportunityDocumentFileAsyncWithHttpInfo (int? opportunityNumber, int? documentID)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunitySetOpportunityDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunitySetOpportunityDocumentFile");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySetOpportunityDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse OpportunitySetOpportunityDocumentFileName (int? opportunityNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = OpportunitySetOpportunityDocumentFileNameWithHttpInfo(opportunityNumber, documentID, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > OpportunitySetOpportunityDocumentFileNameWithHttpInfo (int? opportunityNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunitySetOpportunityDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunitySetOpportunityDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OpportunityApi->OpportunitySetOpportunityDocumentFileName");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySetOpportunityDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> OpportunitySetOpportunityDocumentFileNameAsync (int? opportunityNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await OpportunitySetOpportunityDocumentFileNameAsyncWithHttpInfo(opportunityNumber, documentID, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the documents file name and renames the associated file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> OpportunitySetOpportunityDocumentFileNameAsyncWithHttpInfo (int? opportunityNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunitySetOpportunityDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunitySetOpportunityDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling OpportunityApi->OpportunitySetOpportunityDocumentFileName");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunitySetOpportunityDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse OpportunityUpdateCustomFields (int? opportunityNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = OpportunityUpdateCustomFieldsWithHttpInfo(opportunityNumber, customFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > OpportunityUpdateCustomFieldsWithHttpInfo (int? opportunityNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling OpportunityApi->OpportunityUpdateCustomFields");

            var localVarPath = "/api/opportunities/{opportunityNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> OpportunityUpdateCustomFieldsAsync (int? opportunityNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await OpportunityUpdateCustomFieldsAsyncWithHttpInfo(opportunityNumber, customFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the opportunity custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> OpportunityUpdateCustomFieldsAsyncWithHttpInfo (int? opportunityNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling OpportunityApi->OpportunityUpdateCustomFields");

            var localVarPath = "/api/opportunities/{opportunityNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>TsiWebOpportunityResponse</returns>
        public TsiWebOpportunityResponse OpportunityUpdateOpportunity (int? opportunityNumber, TsiWebOpportunity opportunity)
        {
             ApiResponse<TsiWebOpportunityResponse> localVarResponse = OpportunityUpdateOpportunityWithHttpInfo(opportunityNumber, opportunity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>ApiResponse of TsiWebOpportunityResponse</returns>
        public ApiResponse< TsiWebOpportunityResponse > OpportunityUpdateOpportunityWithHttpInfo (int? opportunityNumber, TsiWebOpportunity opportunity)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityUpdateOpportunity");
            // verify the required parameter 'opportunity' is set
            if (opportunity == null)
                throw new ApiException(400, "Missing required parameter 'opportunity' when calling OpportunityApi->OpportunityUpdateOpportunity");

            var localVarPath = "/api/opportunities/{opportunityNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (opportunity != null && opportunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(opportunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = opportunity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityUpdateOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunityResponse)));
        }

        /// <summary>
        /// Updates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of TsiWebOpportunityResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebOpportunityResponse> OpportunityUpdateOpportunityAsync (int? opportunityNumber, TsiWebOpportunity opportunity)
        {
             ApiResponse<TsiWebOpportunityResponse> localVarResponse = await OpportunityUpdateOpportunityAsyncWithHttpInfo(opportunityNumber, opportunity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="opportunity">The opportunity.</param>
        /// <returns>Task of ApiResponse (TsiWebOpportunityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebOpportunityResponse>> OpportunityUpdateOpportunityAsyncWithHttpInfo (int? opportunityNumber, TsiWebOpportunity opportunity)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityUpdateOpportunity");
            // verify the required parameter 'opportunity' is set
            if (opportunity == null)
                throw new ApiException(400, "Missing required parameter 'opportunity' when calling OpportunityApi->OpportunityUpdateOpportunity");

            var localVarPath = "/api/opportunities/{opportunityNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (opportunity != null && opportunity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(opportunity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = opportunity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityUpdateOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebOpportunityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebOpportunityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebOpportunityResponse)));
        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse OpportunityUpdateOpportunityDocumentProperties (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = OpportunityUpdateOpportunityDocumentPropertiesWithHttpInfo(opportunityNumber, documentID, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > OpportunityUpdateOpportunityDocumentPropertiesWithHttpInfo (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityUpdateOpportunityDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunityUpdateOpportunityDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OpportunityApi->OpportunityUpdateOpportunityDocumentProperties");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityUpdateOpportunityDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> OpportunityUpdateOpportunityDocumentPropertiesAsync (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await OpportunityUpdateOpportunityDocumentPropertiesAsyncWithHttpInfo(opportunityNumber, documentID, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the account document information. Does not allow the file name property to be changed. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> OpportunityUpdateOpportunityDocumentPropertiesAsyncWithHttpInfo (int? opportunityNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling OpportunityApi->OpportunityUpdateOpportunityDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling OpportunityApi->OpportunityUpdateOpportunityDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OpportunityApi->OpportunityUpdateOpportunityDocumentProperties");

            var localVarPath = "/api/opportunities/{opportunityNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpportunityUpdateOpportunityDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

    }
}
