/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceBookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for Pricebook.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Pricebook.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookCreatePriceBookItem (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null);

        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemWithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null);
        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookCreatePriceBookItemAssemblyDetail (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null);

        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAssemblyDetailWithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null);
        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookCreatePriceBookItemAssemblyDetail_0 (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAssemblyDetail_0WithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost);
        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookCreatePriceBookItem_0 (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost);

        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItem_0WithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost);
        /// <summary>
        /// Deletes an assembly detail item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookDeletePriceBookItemAssemblyDetail (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Deletes an assembly detail item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookDeletePriceBookItemAssemblyDetailWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost);
        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> PriceBookGetCustomFields (int? priceBooItemNumber, string priceBookItemNumber);

        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> PriceBookGetCustomFieldsWithHttpInfo (int? priceBooItemNumber, string priceBookItemNumber);
        /// <summary>
        /// Gets the custom fields by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> PriceBookGetCustomFieldsByItemId (string itemId);

        /// <summary>
        /// Gets the custom fields by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> PriceBookGetCustomFieldsByItemIdWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>List&lt;TsiWebLocationDetail&gt;</returns>
        List<TsiWebLocationDetail> PriceBookGetLocations (string itemId);

        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>ApiResponse of List&lt;TsiWebLocationDetail&gt;</returns>
        ApiResponse<List<TsiWebLocationDetail>> PriceBookGetLocationsWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>List&lt;TsiWebLocationDetail&gt;</returns>
        List<TsiWebLocationDetail> PriceBookGetLocationsByPriceBookNumber (int? priceBookItemNumber);

        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebLocationDetail&gt;</returns>
        ApiResponse<List<TsiWebLocationDetail>> PriceBookGetLocationsByPriceBookNumberWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>List&lt;TsiWebMovementLog&gt;</returns>
        List<TsiWebMovementLog> PriceBookGetMovementLogs (string itemId);

        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>ApiResponse of List&lt;TsiWebMovementLog&gt;</returns>
        ApiResponse<List<TsiWebMovementLog>> PriceBookGetMovementLogsWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>List&lt;TsiWebMovementLog&gt;</returns>
        List<TsiWebMovementLog> PriceBookGetMovementLogsByPriceBookNumber (int? priceBookItemNumber);

        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebMovementLog&gt;</returns>
        ApiResponse<List<TsiWebMovementLog>> PriceBookGetMovementLogsByPriceBookNumberWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>TsiWebPriceBookItemDetail</returns>
        TsiWebPriceBookItemDetail PriceBookGetPriceBookDetails (string itemId);

        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemDetail</returns>
        ApiResponse<TsiWebPriceBookItemDetail> PriceBookGetPriceBookDetailsWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>TsiWebPriceBookItemDetail</returns>
        TsiWebPriceBookItemDetail PriceBookGetPriceBookDetailsByPriceBookNumber (int? priceBookItemNumber);

        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemDetail</returns>
        ApiResponse<TsiWebPriceBookItemDetail> PriceBookGetPriceBookDetailsByPriceBookNumberWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>TsiWebPriceBookItemSummary</returns>
        TsiWebPriceBookItemSummary PriceBookGetPriceBookSummary (string itemId);

        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemSummary</returns>
        ApiResponse<TsiWebPriceBookItemSummary> PriceBookGetPriceBookSummaryWithHttpInfo (string itemId);
        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>TsiWebPriceBookItemSummary</returns>
        TsiWebPriceBookItemSummary PriceBookGetPriceBookSummaryByPriceBookNumber (int? priceBookItemNumber);

        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemSummary</returns>
        ApiResponse<TsiWebPriceBookItemSummary> PriceBookGetPriceBookSummaryByPriceBookNumberWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Search pricebook by category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByCategory (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByCategoryWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Pricebook using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        TsiWebSearchAccountResponse PriceBookSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Pricebook using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        ApiResponse<TsiWebSearchAccountResponse> PriceBookSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by any criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByGlobalPricebook (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by any criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByGlobalPricebookWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByItemDescription (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByItemDescriptionWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by itemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByItemId (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by itemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByItemIdWithHttpInfo (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by item type.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByItemType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by item type.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByItemTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by mfg partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByMfgPartNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by mfg partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByMfgPartNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by our partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByOurPartNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by our partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByOurPartNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by UPC.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByUpc (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by UPC.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByUpcWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by Vendor part number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        TsiWebSearchPriceBookResponse PriceBookSearchByVendorPartNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by Vendor part number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        ApiResponse<TsiWebSearchPriceBookResponse> PriceBookSearchByVendorPartNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Updates the custom fields for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse PriceBookUpdateCustomFields (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber);

        /// <summary>
        /// Updates the custom fields for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> PriceBookUpdateCustomFieldsWithHttpInfo (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber);
        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookUpdatePriceBookItem (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null);

        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItemWithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null);
        /// <summary>
        /// Updates assembly detail quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookUpdatePriceBookItemAssemblyDetailQuantity (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Updates assembly detail quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItemAssemblyDetailQuantityWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost);
        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        TsiWebPriceBookItemResponse PriceBookUpdatePriceBookItem_0 (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        ApiResponse<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItem_0WithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for Pricebook.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Pricebook.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAsync (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null);

        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItemAsyncWithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null);
        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAssemblyDetailAsync (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null);

        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItemAssemblyDetailAsyncWithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null);
        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAssemblyDetail_0Async (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Creates an assembly detail item on an existing assembly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItemAssemblyDetail_0AsyncWithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost);
        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItem_0Async (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost);

        /// <summary>
        /// Creates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItem_0AsyncWithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost);
        /// <summary>
        /// Deletes an assembly detail item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookDeletePriceBookItemAssemblyDetailAsync (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Deletes an assembly detail item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookDeletePriceBookItemAssemblyDetailAsyncWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost);
        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> PriceBookGetCustomFieldsAsync (int? priceBooItemNumber, string priceBookItemNumber);

        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> PriceBookGetCustomFieldsAsyncWithHttpInfo (int? priceBooItemNumber, string priceBookItemNumber);
        /// <summary>
        /// Gets the custom fields by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> PriceBookGetCustomFieldsByItemIdAsync (string itemId);

        /// <summary>
        /// Gets the custom fields by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> PriceBookGetCustomFieldsByItemIdAsyncWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of List&lt;TsiWebLocationDetail&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebLocationDetail>> PriceBookGetLocationsAsync (string itemId);

        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebLocationDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebLocationDetail>>> PriceBookGetLocationsAsyncWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of List&lt;TsiWebLocationDetail&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebLocationDetail>> PriceBookGetLocationsByPriceBookNumberAsync (int? priceBookItemNumber);

        /// <summary>
        /// Gets the location details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebLocationDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebLocationDetail>>> PriceBookGetLocationsByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of List&lt;TsiWebMovementLog&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebMovementLog>> PriceBookGetMovementLogsAsync (string itemId);

        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMovementLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebMovementLog>>> PriceBookGetMovementLogsAsyncWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of List&lt;TsiWebMovementLog&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebMovementLog>> PriceBookGetMovementLogsByPriceBookNumberAsync (int? priceBookItemNumber);

        /// <summary>
        /// Gets the movement logs for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMovementLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebMovementLog>>> PriceBookGetMovementLogsByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>Task of TsiWebPriceBookItemDetail</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemDetail> PriceBookGetPriceBookDetailsAsync (string itemId);

        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemDetail>> PriceBookGetPriceBookDetailsAsyncWithHttpInfo (string itemId);
        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of TsiWebPriceBookItemDetail</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemDetail> PriceBookGetPriceBookDetailsByPriceBookNumberAsync (int? priceBookItemNumber);

        /// <summary>
        /// Gets the details of a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemDetail>> PriceBookGetPriceBookDetailsByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of TsiWebPriceBookItemSummary</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemSummary> PriceBookGetPriceBookSummaryAsync (string itemId);

        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemSummary>> PriceBookGetPriceBookSummaryAsyncWithHttpInfo (string itemId);
        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of TsiWebPriceBookItemSummary</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemSummary> PriceBookGetPriceBookSummaryByPriceBookNumberAsync (int? priceBookItemNumber);

        /// <summary>
        /// Gets a summary of the price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemSummary>> PriceBookGetPriceBookSummaryByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber);
        /// <summary>
        /// Search pricebook by category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByCategoryAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by category.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByCategoryAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Pricebook using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchAccountResponse> PriceBookSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Pricebook using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> PriceBookSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by any criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByGlobalPricebookAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by any criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByGlobalPricebookAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByItemDescriptionAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByItemDescriptionAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by itemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByItemIdAsync (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by itemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByItemIdAsyncWithHttpInfo (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by item type.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByItemTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by item type.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByItemTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by mfg partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByMfgPartNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by mfg partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByMfgPartNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by our partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByOurPartNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by our partnumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByOurPartNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by UPC.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByUpcAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by UPC.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByUpcAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search pricebook by Vendor part number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByVendorPartNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search pricebook by Vendor part number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByVendorPartNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Updates the custom fields for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> PriceBookUpdateCustomFieldsAsync (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber);

        /// <summary>
        /// Updates the custom fields for a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> PriceBookUpdateCustomFieldsAsyncWithHttpInfo (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber);
        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItemAsync (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null);

        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookUpdatePriceBookItemAsyncWithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null);
        /// <summary>
        /// Updates assembly detail quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItemAssemblyDetailQuantityAsync (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Updates assembly detail quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookUpdatePriceBookItemAssemblyDetailQuantityAsyncWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost);
        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItem_0Async (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost);

        /// <summary>
        /// Updates a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookUpdatePriceBookItem_0AsyncWithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PriceBookApi : IPriceBookApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PriceBookApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PriceBookApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for Pricebook. &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for Pricebook. &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PriceBookApi->PriceBookAdvancedSearch");

            var localVarPath = "/api/pricebook/items/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Advanced search for Pricebook. &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for Pricebook. &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PriceBookApi->PriceBookAdvancedSearch");

            var localVarPath = "/api/pricebook/items/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookCreatePriceBookItem (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookCreatePriceBookItemWithHttpInfo(priceBookItem, calculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookCreatePriceBookItemWithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null)
        {
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookCreatePriceBookItem");

            var localVarPath = "/api/pricebook/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateClosedAssemblyCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "calculateClosedAssemblyCost", calculateClosedAssemblyCost)); // query parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAsync (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookCreatePriceBookItemAsyncWithHttpInfo(priceBookItem, calculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItemAsyncWithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost = null)
        {
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookCreatePriceBookItem");

            var localVarPath = "/api/pricebook/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateClosedAssemblyCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "calculateClosedAssemblyCost", calculateClosedAssemblyCost)); // query parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookCreatePriceBookItemAssemblyDetail (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookCreatePriceBookItemAssemblyDetailWithHttpInfo(priceBookItemNumber, assemblyItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookCreatePriceBookItemAssemblyDetailWithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail");
            // verify the required parameter 'assemblyItem' is set
            if (assemblyItem == null)
                throw new ApiException(400, "Missing required parameter 'assemblyItem' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recalculateClosedAssemblyCost", recalculateClosedAssemblyCost)); // query parameter
            if (assemblyItem != null && assemblyItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assemblyItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assemblyItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItemAssemblyDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAssemblyDetailAsync (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookCreatePriceBookItemAssemblyDetailAsyncWithHttpInfo(priceBookItemNumber, assemblyItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItemAssemblyDetailAsyncWithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost = null)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail");
            // verify the required parameter 'assemblyItem' is set
            if (assemblyItem == null)
                throw new ApiException(400, "Missing required parameter 'assemblyItem' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recalculateClosedAssemblyCost", recalculateClosedAssemblyCost)); // query parameter
            if (assemblyItem != null && assemblyItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assemblyItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assemblyItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItemAssemblyDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookCreatePriceBookItemAssemblyDetail_0 (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookCreatePriceBookItemAssemblyDetail_0WithHttpInfo(priceBookItemNumber, assemblyItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookCreatePriceBookItemAssemblyDetail_0WithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail_0");
            // verify the required parameter 'assemblyItem' is set
            if (assemblyItem == null)
                throw new ApiException(400, "Missing required parameter 'assemblyItem' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail_0");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail_0");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter
            if (assemblyItem != null && assemblyItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assemblyItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assemblyItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItemAssemblyDetail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItemAssemblyDetail_0Async (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookCreatePriceBookItemAssemblyDetail_0AsyncWithHttpInfo(priceBookItemNumber, assemblyItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an assembly detail item on an existing assembly. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyItem">The assembly item to add.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItemAssemblyDetail_0AsyncWithHttpInfo (int? priceBookItemNumber, TsiWebAssemblyItem assemblyItem, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail_0");
            // verify the required parameter 'assemblyItem' is set
            if (assemblyItem == null)
                throw new ApiException(400, "Missing required parameter 'assemblyItem' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail_0");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookCreatePriceBookItemAssemblyDetail_0");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter
            if (assemblyItem != null && assemblyItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assemblyItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assemblyItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItemAssemblyDetail_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookCreatePriceBookItem_0 (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookCreatePriceBookItem_0WithHttpInfo(priceBookItem, calculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookCreatePriceBookItem_0WithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookCreatePriceBookItem_0");
            // verify the required parameter 'calculateClosedAssemblyCost' is set
            if (calculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'calculateClosedAssemblyCost' when calling PriceBookApi->PriceBookCreatePriceBookItem_0");

            var localVarPath = "/api/pricebook/items/{calculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateClosedAssemblyCost != null) localVarPathParams.Add("calculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(calculateClosedAssemblyCost)); // path parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookCreatePriceBookItem_0Async (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookCreatePriceBookItem_0AsyncWithHttpInfo(priceBookItem, calculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItem">The price book item to add.</param>
        /// <param name="calculateClosedAssemblyCost">If set to true calculate the BaseCost of the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookCreatePriceBookItem_0AsyncWithHttpInfo (TsiWebCreatePriceBookItemModel priceBookItem, bool? calculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookCreatePriceBookItem_0");
            // verify the required parameter 'calculateClosedAssemblyCost' is set
            if (calculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'calculateClosedAssemblyCost' when calling PriceBookApi->PriceBookCreatePriceBookItem_0");

            var localVarPath = "/api/pricebook/items/{calculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateClosedAssemblyCost != null) localVarPathParams.Add("calculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(calculateClosedAssemblyCost)); // path parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookCreatePriceBookItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Deletes an assembly detail item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookDeletePriceBookItemAssemblyDetail (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookDeletePriceBookItemAssemblyDetailWithHttpInfo(priceBookItemNumber, assemblyDetailNumber, recalculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an assembly detail item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookDeletePriceBookItemAssemblyDetailWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookDeletePriceBookItemAssemblyDetail");
            // verify the required parameter 'assemblyDetailNumber' is set
            if (assemblyDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'assemblyDetailNumber' when calling PriceBookApi->PriceBookDeletePriceBookItemAssemblyDetail");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookDeletePriceBookItemAssemblyDetail");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly/details/{assemblyDetailNumber}/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (assemblyDetailNumber != null) localVarPathParams.Add("assemblyDetailNumber", this.Configuration.ApiClient.ParameterToString(assemblyDetailNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookDeletePriceBookItemAssemblyDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Deletes an assembly detail item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookDeletePriceBookItemAssemblyDetailAsync (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookDeletePriceBookItemAssemblyDetailAsyncWithHttpInfo(priceBookItemNumber, assemblyDetailNumber, recalculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an assembly detail item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookDeletePriceBookItemAssemblyDetailAsyncWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookDeletePriceBookItemAssemblyDetail");
            // verify the required parameter 'assemblyDetailNumber' is set
            if (assemblyDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'assemblyDetailNumber' when calling PriceBookApi->PriceBookDeletePriceBookItemAssemblyDetail");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookDeletePriceBookItemAssemblyDetail");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly/details/{assemblyDetailNumber}/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (assemblyDetailNumber != null) localVarPathParams.Add("assemblyDetailNumber", this.Configuration.ApiClient.ParameterToString(assemblyDetailNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookDeletePriceBookItemAssemblyDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> PriceBookGetCustomFields (int? priceBooItemNumber, string priceBookItemNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = PriceBookGetCustomFieldsWithHttpInfo(priceBooItemNumber, priceBookItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > PriceBookGetCustomFieldsWithHttpInfo (int? priceBooItemNumber, string priceBookItemNumber)
        {
            // verify the required parameter 'priceBooItemNumber' is set
            if (priceBooItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBooItemNumber' when calling PriceBookApi->PriceBookGetCustomFields");
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetCustomFields");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (priceBooItemNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priceBooItemNumber", priceBooItemNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> PriceBookGetCustomFieldsAsync (int? priceBooItemNumber, string priceBookItemNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await PriceBookGetCustomFieldsAsyncWithHttpInfo(priceBooItemNumber, priceBookItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price book item number.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> PriceBookGetCustomFieldsAsyncWithHttpInfo (int? priceBooItemNumber, string priceBookItemNumber)
        {
            // verify the required parameter 'priceBooItemNumber' is set
            if (priceBooItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBooItemNumber' when calling PriceBookApi->PriceBookGetCustomFields");
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetCustomFields");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (priceBooItemNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priceBooItemNumber", priceBooItemNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> PriceBookGetCustomFieldsByItemId (string itemId)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = PriceBookGetCustomFieldsByItemIdWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > PriceBookGetCustomFieldsByItemIdWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetCustomFieldsByItemId");

            var localVarPath = "/api/pricebook/items/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetCustomFieldsByItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> PriceBookGetCustomFieldsByItemIdAsync (string itemId)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await PriceBookGetCustomFieldsByItemIdAsyncWithHttpInfo(itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> PriceBookGetCustomFieldsByItemIdAsyncWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetCustomFieldsByItemId");

            var localVarPath = "/api/pricebook/items/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetCustomFieldsByItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>List&lt;TsiWebLocationDetail&gt;</returns>
        public List<TsiWebLocationDetail> PriceBookGetLocations (string itemId)
        {
             ApiResponse<List<TsiWebLocationDetail>> localVarResponse = PriceBookGetLocationsWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>ApiResponse of List&lt;TsiWebLocationDetail&gt;</returns>
        public ApiResponse< List<TsiWebLocationDetail> > PriceBookGetLocationsWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetLocations");

            var localVarPath = "/api/pricebook/items/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebLocationDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebLocationDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebLocationDetail>)));
        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of List&lt;TsiWebLocationDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebLocationDetail>> PriceBookGetLocationsAsync (string itemId)
        {
             ApiResponse<List<TsiWebLocationDetail>> localVarResponse = await PriceBookGetLocationsAsyncWithHttpInfo(itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebLocationDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebLocationDetail>>> PriceBookGetLocationsAsyncWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetLocations");

            var localVarPath = "/api/pricebook/items/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebLocationDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebLocationDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebLocationDetail>)));
        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>List&lt;TsiWebLocationDetail&gt;</returns>
        public List<TsiWebLocationDetail> PriceBookGetLocationsByPriceBookNumber (int? priceBookItemNumber)
        {
             ApiResponse<List<TsiWebLocationDetail>> localVarResponse = PriceBookGetLocationsByPriceBookNumberWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebLocationDetail&gt;</returns>
        public ApiResponse< List<TsiWebLocationDetail> > PriceBookGetLocationsByPriceBookNumberWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetLocationsByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetLocationsByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebLocationDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebLocationDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebLocationDetail>)));
        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of List&lt;TsiWebLocationDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebLocationDetail>> PriceBookGetLocationsByPriceBookNumberAsync (int? priceBookItemNumber)
        {
             ApiResponse<List<TsiWebLocationDetail>> localVarResponse = await PriceBookGetLocationsByPriceBookNumberAsyncWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the location details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebLocationDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebLocationDetail>>> PriceBookGetLocationsByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetLocationsByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetLocationsByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebLocationDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebLocationDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebLocationDetail>)));
        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>List&lt;TsiWebMovementLog&gt;</returns>
        public List<TsiWebMovementLog> PriceBookGetMovementLogs (string itemId)
        {
             ApiResponse<List<TsiWebMovementLog>> localVarResponse = PriceBookGetMovementLogsWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>ApiResponse of List&lt;TsiWebMovementLog&gt;</returns>
        public ApiResponse< List<TsiWebMovementLog> > PriceBookGetMovementLogsWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetMovementLogs");

            var localVarPath = "/api/pricebook/items/movementlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetMovementLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMovementLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMovementLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMovementLog>)));
        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of List&lt;TsiWebMovementLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebMovementLog>> PriceBookGetMovementLogsAsync (string itemId)
        {
             ApiResponse<List<TsiWebMovementLog>> localVarResponse = await PriceBookGetMovementLogsAsyncWithHttpInfo(itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMovementLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebMovementLog>>> PriceBookGetMovementLogsAsyncWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetMovementLogs");

            var localVarPath = "/api/pricebook/items/movementlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetMovementLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMovementLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMovementLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMovementLog>)));
        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>List&lt;TsiWebMovementLog&gt;</returns>
        public List<TsiWebMovementLog> PriceBookGetMovementLogsByPriceBookNumber (int? priceBookItemNumber)
        {
             ApiResponse<List<TsiWebMovementLog>> localVarResponse = PriceBookGetMovementLogsByPriceBookNumberWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebMovementLog&gt;</returns>
        public ApiResponse< List<TsiWebMovementLog> > PriceBookGetMovementLogsByPriceBookNumberWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetMovementLogsByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/movementlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetMovementLogsByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMovementLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMovementLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMovementLog>)));
        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of List&lt;TsiWebMovementLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebMovementLog>> PriceBookGetMovementLogsByPriceBookNumberAsync (int? priceBookItemNumber)
        {
             ApiResponse<List<TsiWebMovementLog>> localVarResponse = await PriceBookGetMovementLogsByPriceBookNumberAsyncWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the movement logs for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebMovementLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebMovementLog>>> PriceBookGetMovementLogsByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetMovementLogsByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/movementlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetMovementLogsByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebMovementLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebMovementLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebMovementLog>)));
        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>TsiWebPriceBookItemDetail</returns>
        public TsiWebPriceBookItemDetail PriceBookGetPriceBookDetails (string itemId)
        {
             ApiResponse<TsiWebPriceBookItemDetail> localVarResponse = PriceBookGetPriceBookDetailsWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemDetail</returns>
        public ApiResponse< TsiWebPriceBookItemDetail > PriceBookGetPriceBookDetailsWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetPriceBookDetails");

            var localVarPath = "/api/pricebook/items/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemDetail)));
        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>Task of TsiWebPriceBookItemDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemDetail> PriceBookGetPriceBookDetailsAsync (string itemId)
        {
             ApiResponse<TsiWebPriceBookItemDetail> localVarResponse = await PriceBookGetPriceBookDetailsAsyncWithHttpInfo(itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemDetail>> PriceBookGetPriceBookDetailsAsyncWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetPriceBookDetails");

            var localVarPath = "/api/pricebook/items/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemDetail)));
        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>TsiWebPriceBookItemDetail</returns>
        public TsiWebPriceBookItemDetail PriceBookGetPriceBookDetailsByPriceBookNumber (int? priceBookItemNumber)
        {
             ApiResponse<TsiWebPriceBookItemDetail> localVarResponse = PriceBookGetPriceBookDetailsByPriceBookNumberWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemDetail</returns>
        public ApiResponse< TsiWebPriceBookItemDetail > PriceBookGetPriceBookDetailsByPriceBookNumberWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetPriceBookDetailsByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookDetailsByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemDetail)));
        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of TsiWebPriceBookItemDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemDetail> PriceBookGetPriceBookDetailsByPriceBookNumberAsync (int? priceBookItemNumber)
        {
             ApiResponse<TsiWebPriceBookItemDetail> localVarResponse = await PriceBookGetPriceBookDetailsByPriceBookNumberAsyncWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemDetail>> PriceBookGetPriceBookDetailsByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetPriceBookDetailsByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookDetailsByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemDetail)));
        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>TsiWebPriceBookItemSummary</returns>
        public TsiWebPriceBookItemSummary PriceBookGetPriceBookSummary (string itemId)
        {
             ApiResponse<TsiWebPriceBookItemSummary> localVarResponse = PriceBookGetPriceBookSummaryWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemSummary</returns>
        public ApiResponse< TsiWebPriceBookItemSummary > PriceBookGetPriceBookSummaryWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetPriceBookSummary");

            var localVarPath = "/api/pricebook/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemSummary)));
        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of TsiWebPriceBookItemSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemSummary> PriceBookGetPriceBookSummaryAsync (string itemId)
        {
             ApiResponse<TsiWebPriceBookItemSummary> localVarResponse = await PriceBookGetPriceBookSummaryAsyncWithHttpInfo(itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The Item Id.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemSummary>> PriceBookGetPriceBookSummaryAsyncWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PriceBookApi->PriceBookGetPriceBookSummary");

            var localVarPath = "/api/pricebook/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemSummary)));
        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>TsiWebPriceBookItemSummary</returns>
        public TsiWebPriceBookItemSummary PriceBookGetPriceBookSummaryByPriceBookNumber (int? priceBookItemNumber)
        {
             ApiResponse<TsiWebPriceBookItemSummary> localVarResponse = PriceBookGetPriceBookSummaryByPriceBookNumberWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemSummary</returns>
        public ApiResponse< TsiWebPriceBookItemSummary > PriceBookGetPriceBookSummaryByPriceBookNumberWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetPriceBookSummaryByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookSummaryByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemSummary)));
        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of TsiWebPriceBookItemSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemSummary> PriceBookGetPriceBookSummaryByPriceBookNumberAsync (int? priceBookItemNumber)
        {
             ApiResponse<TsiWebPriceBookItemSummary> localVarResponse = await PriceBookGetPriceBookSummaryByPriceBookNumberAsyncWithHttpInfo(priceBookItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a summary of the price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book item number.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemSummary>> PriceBookGetPriceBookSummaryByPriceBookNumberAsyncWithHttpInfo (int? priceBookItemNumber)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookGetPriceBookSummaryByPriceBookNumber");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookGetPriceBookSummaryByPriceBookNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemSummary)));
        }

        /// <summary>
        /// Search pricebook by category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByCategory (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByCategoryWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByCategoryWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByCategory");

            var localVarPath = "/api/pricebook/items/search/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByCategoryAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByCategoryAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by category. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByCategoryAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByCategory");

            var localVarPath = "/api/pricebook/items/search/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search Pricebook using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchAccountResponse</returns>
        public TsiWebSearchAccountResponse PriceBookSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = PriceBookSearchByCustomFieldWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Pricebook using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchAccountResponse</returns>
        public ApiResponse< TsiWebSearchAccountResponse > PriceBookSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling PriceBookApi->PriceBookSearchByCustomField");

            var localVarPath = "/api/pricebook/items/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search Pricebook using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchAccountResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchAccountResponse> PriceBookSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchAccountResponse> localVarResponse = await PriceBookSearchByCustomFieldAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Pricebook using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchAccountResponse>> PriceBookSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling PriceBookApi->PriceBookSearchByCustomField");

            var localVarPath = "/api/pricebook/items/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchAccountResponse)));
        }

        /// <summary>
        /// Search pricebook by any criteria. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByGlobalPricebook (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByGlobalPricebookWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by any criteria. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByGlobalPricebookWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByGlobalPricebook");

            var localVarPath = "/api/pricebook/items/search/global";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByGlobalPricebook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by any criteria. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByGlobalPricebookAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByGlobalPricebookAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by any criteria. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByGlobalPricebookAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByGlobalPricebook");

            var localVarPath = "/api/pricebook/items/search/global";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByGlobalPricebook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByItemDescription (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByItemDescriptionWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByItemDescriptionWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByItemDescription");

            var localVarPath = "/api/pricebook/items/search/itemdescription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByItemDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByItemDescriptionAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByItemDescriptionAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByItemDescriptionAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByItemDescription");

            var localVarPath = "/api/pricebook/items/search/itemdescription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByItemDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by itemID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByItemId (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByItemIdWithHttpInfo(criteria, activeOnly, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by itemID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByItemIdWithHttpInfo (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByItemId");
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling PriceBookApi->PriceBookSearchByItemId");

            var localVarPath = "/api/pricebook/items/search/itemid/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by itemID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByItemIdAsync (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByItemIdAsyncWithHttpInfo(criteria, activeOnly, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by itemID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="activeOnly">if set to true searches only the active item ids.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByItemIdAsyncWithHttpInfo (string criteria, bool? activeOnly, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByItemId");
            // verify the required parameter 'activeOnly' is set
            if (activeOnly == null)
                throw new ApiException(400, "Missing required parameter 'activeOnly' when calling PriceBookApi->PriceBookSearchByItemId");

            var localVarPath = "/api/pricebook/items/search/itemid/{activeOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activeOnly != null) localVarPathParams.Add("activeOnly", this.Configuration.ApiClient.ParameterToString(activeOnly)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by item type. &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByItemType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByItemTypeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by item type. &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByItemTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByItemType");

            var localVarPath = "/api/pricebook/items/search/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByItemType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by item type. &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByItemTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByItemTypeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by item type. &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByItemTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByItemType");

            var localVarPath = "/api/pricebook/items/search/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByItemType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by mfg partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByMfgPartNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByMfgPartNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by mfg partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByMfgPartNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByMfgPartNumber");

            var localVarPath = "/api/pricebook/items/search/mfgpartnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByMfgPartNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by mfg partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByMfgPartNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByMfgPartNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by mfg partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByMfgPartNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByMfgPartNumber");

            var localVarPath = "/api/pricebook/items/search/mfgpartnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByMfgPartNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by our partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByOurPartNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByOurPartNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by our partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByOurPartNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByOurPartNumber");

            var localVarPath = "/api/pricebook/items/search/ourpartnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByOurPartNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by our partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByOurPartNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByOurPartNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by our partnumber. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByOurPartNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByOurPartNumber");

            var localVarPath = "/api/pricebook/items/search/ourpartnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByOurPartNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by UPC. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByUpc (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByUpcWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by UPC. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByUpcWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByUpc");

            var localVarPath = "/api/pricebook/items/search/upc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByUpc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by UPC. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByUpcAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByUpcAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by UPC. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByUpcAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByUpc");

            var localVarPath = "/api/pricebook/items/search/upc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByUpc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by Vendor part number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchPriceBookResponse</returns>
        public TsiWebSearchPriceBookResponse PriceBookSearchByVendorPartNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = PriceBookSearchByVendorPartNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search pricebook by Vendor part number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchPriceBookResponse</returns>
        public ApiResponse< TsiWebSearchPriceBookResponse > PriceBookSearchByVendorPartNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByVendorPartNumber");

            var localVarPath = "/api/pricebook/items/search/vendorpartnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByVendorPartNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Search pricebook by Vendor part number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchPriceBookResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchPriceBookResponse> PriceBookSearchByVendorPartNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchPriceBookResponse> localVarResponse = await PriceBookSearchByVendorPartNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search pricebook by Vendor part number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchPriceBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchPriceBookResponse>> PriceBookSearchByVendorPartNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling PriceBookApi->PriceBookSearchByVendorPartNumber");

            var localVarPath = "/api/pricebook/items/search/vendorpartnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookSearchByVendorPartNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchPriceBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchPriceBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchPriceBookResponse)));
        }

        /// <summary>
        /// Updates the custom fields for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse PriceBookUpdateCustomFields (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = PriceBookUpdateCustomFieldsWithHttpInfo(priceBooItemNumber, customFields, priceBookItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the custom fields for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > PriceBookUpdateCustomFieldsWithHttpInfo (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber)
        {
            // verify the required parameter 'priceBooItemNumber' is set
            if (priceBooItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBooItemNumber' when calling PriceBookApi->PriceBookUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling PriceBookApi->PriceBookUpdateCustomFields");
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdateCustomFields");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (priceBooItemNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priceBooItemNumber", priceBooItemNumber)); // query parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the custom fields for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> PriceBookUpdateCustomFieldsAsync (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await PriceBookUpdateCustomFieldsAsyncWithHttpInfo(priceBooItemNumber, customFields, priceBookItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the custom fields for a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBooItemNumber">The price boo item number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <param name="priceBookItemNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> PriceBookUpdateCustomFieldsAsyncWithHttpInfo (int? priceBooItemNumber, List<TsiWebCustomField> customFields, string priceBookItemNumber)
        {
            // verify the required parameter 'priceBooItemNumber' is set
            if (priceBooItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBooItemNumber' when calling PriceBookApi->PriceBookUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling PriceBookApi->PriceBookUpdateCustomFields");
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdateCustomFields");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (priceBooItemNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priceBooItemNumber", priceBooItemNumber)); // query parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookUpdatePriceBookItem (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookUpdatePriceBookItemWithHttpInfo(priceBookItemNumber, priceBookItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookUpdatePriceBookItemWithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItem");
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookUpdatePriceBookItem");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recalculateClosedAssemblyCost", recalculateClosedAssemblyCost)); // query parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdatePriceBookItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItemAsync (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookUpdatePriceBookItemAsyncWithHttpInfo(priceBookItemNumber, priceBookItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookUpdatePriceBookItemAsyncWithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost = null)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItem");
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookUpdatePriceBookItem");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recalculateClosedAssemblyCost", recalculateClosedAssemblyCost)); // query parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdatePriceBookItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Updates assembly detail quantity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookUpdatePriceBookItemAssemblyDetailQuantity (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookUpdatePriceBookItemAssemblyDetailQuantityWithHttpInfo(priceBookItemNumber, assemblyDetailNumber, quantity, recalculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates assembly detail quantity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookUpdatePriceBookItemAssemblyDetailQuantityWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");
            // verify the required parameter 'assemblyDetailNumber' is set
            if (assemblyDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'assemblyDetailNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly/details/{assemblyDetailNumber}/quantity/{quantity}/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (assemblyDetailNumber != null) localVarPathParams.Add("assemblyDetailNumber", this.Configuration.ApiClient.ParameterToString(assemblyDetailNumber)); // path parameter
            if (quantity != null) localVarPathParams.Add("quantity", this.Configuration.ApiClient.ParameterToString(quantity)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdatePriceBookItemAssemblyDetailQuantity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Updates assembly detail quantity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItemAssemblyDetailQuantityAsync (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookUpdatePriceBookItemAssemblyDetailQuantityAsyncWithHttpInfo(priceBookItemNumber, assemblyDetailNumber, quantity, recalculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates assembly detail quantity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="assemblyDetailNumber">The assembly detail number.</param>
        /// <param name="quantity">The quantity.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookUpdatePriceBookItemAssemblyDetailQuantityAsyncWithHttpInfo (int? priceBookItemNumber, int? assemblyDetailNumber, double? quantity, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");
            // verify the required parameter 'assemblyDetailNumber' is set
            if (assemblyDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'assemblyDetailNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookUpdatePriceBookItemAssemblyDetailQuantity");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/assembly/details/{assemblyDetailNumber}/quantity/{quantity}/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (assemblyDetailNumber != null) localVarPathParams.Add("assemblyDetailNumber", this.Configuration.ApiClient.ParameterToString(assemblyDetailNumber)); // path parameter
            if (quantity != null) localVarPathParams.Add("quantity", this.Configuration.ApiClient.ParameterToString(quantity)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdatePriceBookItemAssemblyDetailQuantity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>TsiWebPriceBookItemResponse</returns>
        public TsiWebPriceBookItemResponse PriceBookUpdatePriceBookItem_0 (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = PriceBookUpdatePriceBookItem_0WithHttpInfo(priceBookItemNumber, priceBookItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>ApiResponse of TsiWebPriceBookItemResponse</returns>
        public ApiResponse< TsiWebPriceBookItemResponse > PriceBookUpdatePriceBookItem_0WithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItem_0");
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookUpdatePriceBookItem_0");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookUpdatePriceBookItem_0");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdatePriceBookItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of TsiWebPriceBookItemResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPriceBookItemResponse> PriceBookUpdatePriceBookItem_0Async (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost)
        {
             ApiResponse<TsiWebPriceBookItemResponse> localVarResponse = await PriceBookUpdatePriceBookItem_0AsyncWithHttpInfo(priceBookItemNumber, priceBookItem, recalculateClosedAssemblyCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="priceBookItemNumber">The price book number.</param>
        /// <param name="priceBookItem">The updated price book item.</param>
        /// <param name="recalculateClosedAssemblyCost">If set to true forces the cost to be recalcuated for the closed assembly.</param>
        /// <returns>Task of ApiResponse (TsiWebPriceBookItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPriceBookItemResponse>> PriceBookUpdatePriceBookItem_0AsyncWithHttpInfo (int? priceBookItemNumber, TsiWebUpdatePriceBookItemModel priceBookItem, bool? recalculateClosedAssemblyCost)
        {
            // verify the required parameter 'priceBookItemNumber' is set
            if (priceBookItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItemNumber' when calling PriceBookApi->PriceBookUpdatePriceBookItem_0");
            // verify the required parameter 'priceBookItem' is set
            if (priceBookItem == null)
                throw new ApiException(400, "Missing required parameter 'priceBookItem' when calling PriceBookApi->PriceBookUpdatePriceBookItem_0");
            // verify the required parameter 'recalculateClosedAssemblyCost' is set
            if (recalculateClosedAssemblyCost == null)
                throw new ApiException(400, "Missing required parameter 'recalculateClosedAssemblyCost' when calling PriceBookApi->PriceBookUpdatePriceBookItem_0");

            var localVarPath = "/api/pricebook/items/{priceBookItemNumber}/{recalculateClosedAssemblyCost}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (priceBookItemNumber != null) localVarPathParams.Add("priceBookItemNumber", this.Configuration.ApiClient.ParameterToString(priceBookItemNumber)); // path parameter
            if (recalculateClosedAssemblyCost != null) localVarPathParams.Add("recalculateClosedAssemblyCost", this.Configuration.ApiClient.ParameterToString(recalculateClosedAssemblyCost)); // path parameter
            if (priceBookItem != null && priceBookItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(priceBookItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = priceBookItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PriceBookUpdatePriceBookItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPriceBookItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPriceBookItemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPriceBookItemResponse)));
        }

    }
}
