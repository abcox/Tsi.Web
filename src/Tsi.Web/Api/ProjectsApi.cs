/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the phase completed tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ProjectsGetPhaseCompletedTasks (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the phase completed tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ProjectsGetPhaseCompletedTasksWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the phase incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ProjectsGetPhaseIncompleteTasks (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the phase incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ProjectsGetPhaseIncompleteTasksWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ProjectsGetPhaseTasks (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ProjectsGetPhaseTasksWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Project completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ProjectsGetProjectCompletedTasks (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Project completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ProjectsGetProjectCompletedTasksWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Project incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ProjectsGetProjectIncompleteTasks (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Project incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ProjectsGetProjectIncompleteTasksWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ProjectsGetProjectTasks (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ProjectsGetProjectTasksWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the phase completed tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetPhaseCompletedTasksAsync (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the phase completed tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetPhaseCompletedTasksAsyncWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the phase incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetPhaseIncompleteTasksAsync (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the phase incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetPhaseIncompleteTasksAsyncWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetPhaseTasksAsync (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetPhaseTasksAsyncWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Project completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetProjectCompletedTasksAsync (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Project completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetProjectCompletedTasksAsyncWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Project incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetProjectIncompleteTasksAsync (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Project incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetProjectIncompleteTasksAsyncWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetProjectTasksAsync (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetProjectTasksAsyncWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the phase completed tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ProjectsGetPhaseCompletedTasks (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ProjectsGetPhaseCompletedTasksWithHttpInfo(phaseNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the phase completed tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ProjectsGetPhaseCompletedTasksWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'phaseNumber' is set
            if (phaseNumber == null)
                throw new ApiException(400, "Missing required parameter 'phaseNumber' when calling ProjectsApi->ProjectsGetPhaseCompletedTasks");

            var localVarPath = "/api/projects/phases/{PhaseNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phaseNumber != null) localVarPathParams.Add("PhaseNumber", this.Configuration.ApiClient.ParameterToString(phaseNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetPhaseCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the phase completed tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetPhaseCompletedTasksAsync (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ProjectsGetPhaseCompletedTasksAsyncWithHttpInfo(phaseNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the phase completed tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetPhaseCompletedTasksAsyncWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'phaseNumber' is set
            if (phaseNumber == null)
                throw new ApiException(400, "Missing required parameter 'phaseNumber' when calling ProjectsApi->ProjectsGetPhaseCompletedTasks");

            var localVarPath = "/api/projects/phases/{PhaseNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phaseNumber != null) localVarPathParams.Add("PhaseNumber", this.Configuration.ApiClient.ParameterToString(phaseNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetPhaseCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the phase incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ProjectsGetPhaseIncompleteTasks (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ProjectsGetPhaseIncompleteTasksWithHttpInfo(phaseNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the phase incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ProjectsGetPhaseIncompleteTasksWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'phaseNumber' is set
            if (phaseNumber == null)
                throw new ApiException(400, "Missing required parameter 'phaseNumber' when calling ProjectsApi->ProjectsGetPhaseIncompleteTasks");

            var localVarPath = "/api/projects/phases/{PhaseNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phaseNumber != null) localVarPathParams.Add("PhaseNumber", this.Configuration.ApiClient.ParameterToString(phaseNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetPhaseIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the phase incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetPhaseIncompleteTasksAsync (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ProjectsGetPhaseIncompleteTasksAsyncWithHttpInfo(phaseNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the phase incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetPhaseIncompleteTasksAsyncWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'phaseNumber' is set
            if (phaseNumber == null)
                throw new ApiException(400, "Missing required parameter 'phaseNumber' when calling ProjectsApi->ProjectsGetPhaseIncompleteTasks");

            var localVarPath = "/api/projects/phases/{PhaseNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phaseNumber != null) localVarPathParams.Add("PhaseNumber", this.Configuration.ApiClient.ParameterToString(phaseNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetPhaseIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ProjectsGetPhaseTasks (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ProjectsGetPhaseTasksWithHttpInfo(phaseNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ProjectsGetPhaseTasksWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'phaseNumber' is set
            if (phaseNumber == null)
                throw new ApiException(400, "Missing required parameter 'phaseNumber' when calling ProjectsApi->ProjectsGetPhaseTasks");

            var localVarPath = "/api/projects/phases/{PhaseNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phaseNumber != null) localVarPathParams.Add("PhaseNumber", this.Configuration.ApiClient.ParameterToString(phaseNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetPhaseTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetPhaseTasksAsync (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ProjectsGetPhaseTasksAsyncWithHttpInfo(phaseNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the phase tasks. Includes both completed and incomplete tasks. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phaseNumber">The phase number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetPhaseTasksAsyncWithHttpInfo (int? phaseNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'phaseNumber' is set
            if (phaseNumber == null)
                throw new ApiException(400, "Missing required parameter 'phaseNumber' when calling ProjectsApi->ProjectsGetPhaseTasks");

            var localVarPath = "/api/projects/phases/{PhaseNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phaseNumber != null) localVarPathParams.Add("PhaseNumber", this.Configuration.ApiClient.ParameterToString(phaseNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetPhaseTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Project completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ProjectsGetProjectCompletedTasks (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ProjectsGetProjectCompletedTasksWithHttpInfo(projectNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Project completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ProjectsGetProjectCompletedTasksWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'projectNumber' is set
            if (projectNumber == null)
                throw new ApiException(400, "Missing required parameter 'projectNumber' when calling ProjectsApi->ProjectsGetProjectCompletedTasks");

            var localVarPath = "/api/projects/{ProjectNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectNumber != null) localVarPathParams.Add("ProjectNumber", this.Configuration.ApiClient.ParameterToString(projectNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetProjectCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Project completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetProjectCompletedTasksAsync (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ProjectsGetProjectCompletedTasksAsyncWithHttpInfo(projectNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Project completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetProjectCompletedTasksAsyncWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'projectNumber' is set
            if (projectNumber == null)
                throw new ApiException(400, "Missing required parameter 'projectNumber' when calling ProjectsApi->ProjectsGetProjectCompletedTasks");

            var localVarPath = "/api/projects/{ProjectNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectNumber != null) localVarPathParams.Add("ProjectNumber", this.Configuration.ApiClient.ParameterToString(projectNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetProjectCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Project incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ProjectsGetProjectIncompleteTasks (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ProjectsGetProjectIncompleteTasksWithHttpInfo(projectNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Project incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ProjectsGetProjectIncompleteTasksWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'projectNumber' is set
            if (projectNumber == null)
                throw new ApiException(400, "Missing required parameter 'projectNumber' when calling ProjectsApi->ProjectsGetProjectIncompleteTasks");

            var localVarPath = "/api/projects/{ProjectNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectNumber != null) localVarPathParams.Add("ProjectNumber", this.Configuration.ApiClient.ParameterToString(projectNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetProjectIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Project incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetProjectIncompleteTasksAsync (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ProjectsGetProjectIncompleteTasksAsyncWithHttpInfo(projectNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Project incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetProjectIncompleteTasksAsyncWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'projectNumber' is set
            if (projectNumber == null)
                throw new ApiException(400, "Missing required parameter 'projectNumber' when calling ProjectsApi->ProjectsGetProjectIncompleteTasks");

            var localVarPath = "/api/projects/{ProjectNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectNumber != null) localVarPathParams.Add("ProjectNumber", this.Configuration.ApiClient.ParameterToString(projectNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetProjectIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ProjectsGetProjectTasks (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ProjectsGetProjectTasksWithHttpInfo(projectNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ProjectsGetProjectTasksWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'projectNumber' is set
            if (projectNumber == null)
                throw new ApiException(400, "Missing required parameter 'projectNumber' when calling ProjectsApi->ProjectsGetProjectTasks");

            var localVarPath = "/api/projects/{ProjectNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectNumber != null) localVarPathParams.Add("ProjectNumber", this.Configuration.ApiClient.ParameterToString(projectNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ProjectsGetProjectTasksAsync (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ProjectsGetProjectTasksAsyncWithHttpInfo(projectNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Project tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectNumber">The Project number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ProjectsGetProjectTasksAsyncWithHttpInfo (int? projectNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'projectNumber' is set
            if (projectNumber == null)
                throw new ApiException(400, "Missing required parameter 'projectNumber' when calling ProjectsApi->ProjectsGetProjectTasks");

            var localVarPath = "/api/projects/{ProjectNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectNumber != null) localVarPathParams.Add("ProjectNumber", this.Configuration.ApiClient.ParameterToString(projectNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsGetProjectTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

    }
}
