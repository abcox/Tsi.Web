/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPurchaseOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a purchase order.
        /// </summary>
        /// <remarks>
        /// AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebCreatePurchaseOrderResponse</returns>
        TsiWebCreatePurchaseOrderResponse PurchaseOrdersCreatePurchaseOrder (TsiWebCreatePurchaseOrderModel model);

        /// <summary>
        /// Creates a purchase order.
        /// </summary>
        /// <remarks>
        /// AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebCreatePurchaseOrderResponse</returns>
        ApiResponse<TsiWebCreatePurchaseOrderResponse> PurchaseOrdersCreatePurchaseOrderWithHttpInfo (TsiWebCreatePurchaseOrderModel model);
        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Gets the purchase order details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>TsiWebPurchaseOrderDetail</returns>
        TsiWebPurchaseOrderDetail PurchaseOrdersGetPurchaseOrderDetail (int? purchaseOrderNumber);

        /// <summary>
        /// Gets the purchase order details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderDetail</returns>
        ApiResponse<TsiWebPurchaseOrderDetail> PurchaseOrdersGetPurchaseOrderDetailWithHttpInfo (int? purchaseOrderNumber);
        /// <summary>
        /// Returns the receipts on the line items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;</returns>
        List<TsiWebPurchaseOrderLineItemReceipt> PurchaseOrdersGetPurchaseOrderLineItemReciepts (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);

        /// <summary>
        /// Returns the receipts on the line items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;</returns>
        ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>> PurchaseOrdersGetPurchaseOrderLineItemRecieptsWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);
        /// <summary>
        /// Returns the serial numbers on the line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;</returns>
        List<TsiWebPurchaseOrderLineItemSerialNumber> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);

        /// <summary>
        /// Returns the serial numbers on the line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;</returns>
        ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);
        /// <summary>
        /// Returns the line items on the purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>List&lt;TsiWebPurchaseOrderLineItem&gt;</returns>
        List<TsiWebPurchaseOrderLineItem> PurchaseOrdersGetPurchaseOrderLineItems (int? purchaseOrderNumber);

        /// <summary>
        /// Returns the line items on the purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderLineItem&gt;</returns>
        ApiResponse<List<TsiWebPurchaseOrderLineItem>> PurchaseOrdersGetPurchaseOrderLineItemsWithHttpInfo (int? purchaseOrderNumber);
        /// <summary>
        /// Gets the purchase order summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>TsiWebPurchaseOrderSummary</returns>
        TsiWebPurchaseOrderSummary PurchaseOrdersGetPurchaseOrderSummary (int? purchaseOrderNumber);

        /// <summary>
        /// Gets the purchase order summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderSummary</returns>
        ApiResponse<TsiWebPurchaseOrderSummary> PurchaseOrdersGetPurchaseOrderSummaryWithHttpInfo (int? purchaseOrderNumber);
        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Updates a purchase order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebPurchaseOrderResponse</returns>
        TsiWebPurchaseOrderResponse PurchaseOrdersUpdatePurchaseOrder (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model);

        /// <summary>
        /// Updates a purchase order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderResponse</returns>
        ApiResponse<TsiWebPurchaseOrderResponse> PurchaseOrdersUpdatePurchaseOrderWithHttpInfo (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a purchase order.
        /// </summary>
        /// <remarks>
        /// AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebCreatePurchaseOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebCreatePurchaseOrderResponse> PurchaseOrdersCreatePurchaseOrderAsync (TsiWebCreatePurchaseOrderModel model);

        /// <summary>
        /// Creates a purchase order.
        /// </summary>
        /// <remarks>
        /// AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebCreatePurchaseOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCreatePurchaseOrderResponse>> PurchaseOrdersCreatePurchaseOrderAsyncWithHttpInfo (TsiWebCreatePurchaseOrderModel model);
        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Gets the purchase order details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of TsiWebPurchaseOrderDetail</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderDetail> PurchaseOrdersGetPurchaseOrderDetailAsync (int? purchaseOrderNumber);

        /// <summary>
        /// Gets the purchase order details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderDetail>> PurchaseOrdersGetPurchaseOrderDetailAsyncWithHttpInfo (int? purchaseOrderNumber);
        /// <summary>
        /// Returns the receipts on the line items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPurchaseOrderLineItemReceipt>> PurchaseOrdersGetPurchaseOrderLineItemRecieptsAsync (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);

        /// <summary>
        /// Returns the receipts on the line items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>>> PurchaseOrdersGetPurchaseOrderLineItemRecieptsAsyncWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);
        /// <summary>
        /// Returns the serial numbers on the line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPurchaseOrderLineItemSerialNumber>> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersAsync (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);

        /// <summary>
        /// Returns the serial numbers on the line item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>>> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersAsyncWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber);
        /// <summary>
        /// Returns the line items on the purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderLineItem&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebPurchaseOrderLineItem>> PurchaseOrdersGetPurchaseOrderLineItemsAsync (int? purchaseOrderNumber);

        /// <summary>
        /// Returns the line items on the purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderLineItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderLineItem>>> PurchaseOrdersGetPurchaseOrderLineItemsAsyncWithHttpInfo (int? purchaseOrderNumber);
        /// <summary>
        /// Gets the purchase order summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of TsiWebPurchaseOrderSummary</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderSummary> PurchaseOrdersGetPurchaseOrderSummaryAsync (int? purchaseOrderNumber);

        /// <summary>
        /// Gets the purchase order summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderSummary>> PurchaseOrdersGetPurchaseOrderSummaryAsyncWithHttpInfo (int? purchaseOrderNumber);
        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor.
        /// </summary>
        /// <remarks>
        /// A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null);
        /// <summary>
        /// Updates a purchase order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebPurchaseOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebPurchaseOrderResponse> PurchaseOrdersUpdatePurchaseOrderAsync (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model);

        /// <summary>
        /// Updates a purchase order.
        /// </summary>
        /// <remarks>
        /// purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderResponse>> PurchaseOrdersUpdatePurchaseOrderAsyncWithHttpInfo (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PurchaseOrdersApi : IPurchaseOrdersApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PurchaseOrdersApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PurchaseOrdersApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a purchase order. AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebCreatePurchaseOrderResponse</returns>
        public TsiWebCreatePurchaseOrderResponse PurchaseOrdersCreatePurchaseOrder (TsiWebCreatePurchaseOrderModel model)
        {
             ApiResponse<TsiWebCreatePurchaseOrderResponse> localVarResponse = PurchaseOrdersCreatePurchaseOrderWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a purchase order. AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebCreatePurchaseOrderResponse</returns>
        public ApiResponse< TsiWebCreatePurchaseOrderResponse > PurchaseOrdersCreatePurchaseOrderWithHttpInfo (TsiWebCreatePurchaseOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling PurchaseOrdersApi->PurchaseOrdersCreatePurchaseOrder");

            var localVarPath = "/api/PurchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersCreatePurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCreatePurchaseOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCreatePurchaseOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCreatePurchaseOrderResponse)));
        }

        /// <summary>
        /// Creates a purchase order. AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebCreatePurchaseOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCreatePurchaseOrderResponse> PurchaseOrdersCreatePurchaseOrderAsync (TsiWebCreatePurchaseOrderModel model)
        {
             ApiResponse<TsiWebCreatePurchaseOrderResponse> localVarResponse = await PurchaseOrdersCreatePurchaseOrderAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a purchase order. AssemblyCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost.&lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  UseVendorCostInPriceBook: if true the cost for pricebook items will be overriden if the vendor is configured with a cost on the price book item. Not applicable if CostToUseType &#x3D; OrderDetailEstimatedCost&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebCreatePurchaseOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCreatePurchaseOrderResponse>> PurchaseOrdersCreatePurchaseOrderAsyncWithHttpInfo (TsiWebCreatePurchaseOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling PurchaseOrdersApi->PurchaseOrdersCreatePurchaseOrder");

            var localVarPath = "/api/PurchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersCreatePurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCreatePurchaseOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCreatePurchaseOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCreatePurchaseOrderResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/lowestcostvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorAsyncWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/lowestcostvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderLowestCostVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/onevendor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorAsyncWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/onevendor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOneVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/orderprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorAsyncWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from service orders using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/orderprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderOrderPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendor (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/pricebookprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorAsync (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorAsyncWithHttpInfo(serviceOrderNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from service order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendorAsyncWithHttpInfo (int? serviceOrderNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendor");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/purchaseorder/neededItems/pricebookprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetCreateServiceOrderItemsWorkOrderPriceBookPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Gets the purchase order details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>TsiWebPurchaseOrderDetail</returns>
        public TsiWebPurchaseOrderDetail PurchaseOrdersGetPurchaseOrderDetail (int? purchaseOrderNumber)
        {
             ApiResponse<TsiWebPurchaseOrderDetail> localVarResponse = PurchaseOrdersGetPurchaseOrderDetailWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the purchase order details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderDetail</returns>
        public ApiResponse< TsiWebPurchaseOrderDetail > PurchaseOrdersGetPurchaseOrderDetailWithHttpInfo (int? purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderDetail");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderDetail)));
        }

        /// <summary>
        /// Gets the purchase order details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of TsiWebPurchaseOrderDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderDetail> PurchaseOrdersGetPurchaseOrderDetailAsync (int? purchaseOrderNumber)
        {
             ApiResponse<TsiWebPurchaseOrderDetail> localVarResponse = await PurchaseOrdersGetPurchaseOrderDetailAsyncWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the purchase order details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderDetail>> PurchaseOrdersGetPurchaseOrderDetailAsyncWithHttpInfo (int? purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderDetail");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderDetail)));
        }

        /// <summary>
        /// Returns the receipts on the line items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;</returns>
        public List<TsiWebPurchaseOrderLineItemReceipt> PurchaseOrdersGetPurchaseOrderLineItemReciepts (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
             ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>> localVarResponse = PurchaseOrdersGetPurchaseOrderLineItemRecieptsWithHttpInfo(purchaseOrderNumber, purchaseOrderLineItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the receipts on the line items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;</returns>
        public ApiResponse< List<TsiWebPurchaseOrderLineItemReceipt> > PurchaseOrdersGetPurchaseOrderLineItemRecieptsWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemReciepts");
            // verify the required parameter 'purchaseOrderLineItemNumber' is set
            if (purchaseOrderLineItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderLineItemNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemReciepts");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/items/{purchaseOrderLineItemNumber}/receipts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter
            if (purchaseOrderLineItemNumber != null) localVarPathParams.Add("purchaseOrderLineItemNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderLineItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderLineItemReciepts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderLineItemReceipt>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderLineItemReceipt>)));
        }

        /// <summary>
        /// Returns the receipts on the line items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPurchaseOrderLineItemReceipt>> PurchaseOrdersGetPurchaseOrderLineItemRecieptsAsync (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
             ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>> localVarResponse = await PurchaseOrdersGetPurchaseOrderLineItemRecieptsAsyncWithHttpInfo(purchaseOrderNumber, purchaseOrderLineItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the receipts on the line items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderLineItemReceipt&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>>> PurchaseOrdersGetPurchaseOrderLineItemRecieptsAsyncWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemReciepts");
            // verify the required parameter 'purchaseOrderLineItemNumber' is set
            if (purchaseOrderLineItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderLineItemNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemReciepts");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/items/{purchaseOrderLineItemNumber}/receipts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter
            if (purchaseOrderLineItemNumber != null) localVarPathParams.Add("purchaseOrderLineItemNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderLineItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderLineItemReciepts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderLineItemReceipt>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderLineItemReceipt>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderLineItemReceipt>)));
        }

        /// <summary>
        /// Returns the serial numbers on the line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;</returns>
        public List<TsiWebPurchaseOrderLineItemSerialNumber> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
             ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>> localVarResponse = PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersWithHttpInfo(purchaseOrderNumber, purchaseOrderLineItemNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the serial numbers on the line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;</returns>
        public ApiResponse< List<TsiWebPurchaseOrderLineItemSerialNumber> > PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers");
            // verify the required parameter 'purchaseOrderLineItemNumber' is set
            if (purchaseOrderLineItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderLineItemNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/items/{purchaseOrderLineItemNumber}/serialnumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter
            if (purchaseOrderLineItemNumber != null) localVarPathParams.Add("purchaseOrderLineItemNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderLineItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderLineItemSerialNumber>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderLineItemSerialNumber>)));
        }

        /// <summary>
        /// Returns the serial numbers on the line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPurchaseOrderLineItemSerialNumber>> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersAsync (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
             ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>> localVarResponse = await PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersAsyncWithHttpInfo(purchaseOrderNumber, purchaseOrderLineItemNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the serial numbers on the line item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="purchaseOrderLineItemNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderLineItemSerialNumber&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>>> PurchaseOrdersGetPurchaseOrderLineItemSerialNumbersAsyncWithHttpInfo (int? purchaseOrderNumber, int? purchaseOrderLineItemNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers");
            // verify the required parameter 'purchaseOrderLineItemNumber' is set
            if (purchaseOrderLineItemNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderLineItemNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/items/{purchaseOrderLineItemNumber}/serialnumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter
            if (purchaseOrderLineItemNumber != null) localVarPathParams.Add("purchaseOrderLineItemNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderLineItemNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderLineItemSerialNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderLineItemSerialNumber>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderLineItemSerialNumber>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderLineItemSerialNumber>)));
        }

        /// <summary>
        /// Returns the line items on the purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>List&lt;TsiWebPurchaseOrderLineItem&gt;</returns>
        public List<TsiWebPurchaseOrderLineItem> PurchaseOrdersGetPurchaseOrderLineItems (int? purchaseOrderNumber)
        {
             ApiResponse<List<TsiWebPurchaseOrderLineItem>> localVarResponse = PurchaseOrdersGetPurchaseOrderLineItemsWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the line items on the purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>ApiResponse of List&lt;TsiWebPurchaseOrderLineItem&gt;</returns>
        public ApiResponse< List<TsiWebPurchaseOrderLineItem> > PurchaseOrdersGetPurchaseOrderLineItemsWithHttpInfo (int? purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItems");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderLineItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderLineItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderLineItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderLineItem>)));
        }

        /// <summary>
        /// Returns the line items on the purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>Task of List&lt;TsiWebPurchaseOrderLineItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebPurchaseOrderLineItem>> PurchaseOrdersGetPurchaseOrderLineItemsAsync (int? purchaseOrderNumber)
        {
             ApiResponse<List<TsiWebPurchaseOrderLineItem>> localVarResponse = await PurchaseOrdersGetPurchaseOrderLineItemsAsyncWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the line items on the purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebPurchaseOrderLineItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebPurchaseOrderLineItem>>> PurchaseOrdersGetPurchaseOrderLineItemsAsyncWithHttpInfo (int? purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderLineItems");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderLineItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebPurchaseOrderLineItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebPurchaseOrderLineItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebPurchaseOrderLineItem>)));
        }

        /// <summary>
        /// Gets the purchase order summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>TsiWebPurchaseOrderSummary</returns>
        public TsiWebPurchaseOrderSummary PurchaseOrdersGetPurchaseOrderSummary (int? purchaseOrderNumber)
        {
             ApiResponse<TsiWebPurchaseOrderSummary> localVarResponse = PurchaseOrdersGetPurchaseOrderSummaryWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the purchase order summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderSummary</returns>
        public ApiResponse< TsiWebPurchaseOrderSummary > PurchaseOrdersGetPurchaseOrderSummaryWithHttpInfo (int? purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderSummary");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderSummary)));
        }

        /// <summary>
        /// Gets the purchase order summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of TsiWebPurchaseOrderSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderSummary> PurchaseOrdersGetPurchaseOrderSummaryAsync (int? purchaseOrderNumber)
        {
             ApiResponse<TsiWebPurchaseOrderSummary> localVarResponse = await PurchaseOrdersGetPurchaseOrderSummaryAsyncWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the purchase order summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The purchase order number.</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderSummary>> PurchaseOrdersGetPurchaseOrderSummaryAsyncWithHttpInfo (int? purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderSummary");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderSummary)));
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/lowestcostvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorAsyncWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s lowest cost vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/lowestcostvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderLowestCostVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/onevendor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorAsyncWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists work order using the price book item&#39;s lowest cost vendor. A value is required for VendorAcountNumber.&lt;br /&gt;  purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/onevendor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOneVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/orderprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorAsyncWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the item&#39;s primary vendor on the order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/orderprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderOrderPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>TsiWebPurchaseOrderVendorItemsResponse</returns>
        public TsiWebPurchaseOrderVendorItemsResponse PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendor (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderVendorItemsResponse > PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/pricebookprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of TsiWebPurchaseOrderVendorItemsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderVendorItemsResponse> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorAsync (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
             ApiResponse<TsiWebPurchaseOrderVendorItemsResponse> localVarResponse = await PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorAsyncWithHttpInfo(quoteNumber, purchaseOrderCostToUseType, vendorAccountNumber, orderItemsInPhaseNumber, orderItemsInPhase, orderLaborItems, orderOnlyInsufficentItems, orderVendorlessItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve vendor item lists from work order using the price book item&#39;s primary vendor. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  orderItemsInPhaseNumber: null for all phases, 0 for no phase, or the specific number for that phase.&lt;br /&gt;  orderVendorlessItems: if true a value is required for VendorAcountNumber.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="purchaseOrderCostToUseType"> (optional)</param>
        /// <param name="vendorAccountNumber"> (optional)</param>
        /// <param name="orderItemsInPhaseNumber"> (optional)</param>
        /// <param name="orderItemsInPhase"> (optional)</param>
        /// <param name="orderLaborItems"> (optional)</param>
        /// <param name="orderOnlyInsufficentItems"> (optional)</param>
        /// <param name="orderVendorlessItems"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderVendorItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>> PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendorAsyncWithHttpInfo (int? quoteNumber, string purchaseOrderCostToUseType = null, int? vendorAccountNumber = null, int? orderItemsInPhaseNumber = null, bool? orderItemsInPhase = null, bool? orderLaborItems = null, bool? orderOnlyInsufficentItems = null, bool? orderVendorlessItems = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling PurchaseOrdersApi->PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendor");

            var localVarPath = "/api/quotes/{quoteNumber}/purchaseorder/neededItems/pricebookprimaryvendors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (purchaseOrderCostToUseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purchaseOrderCostToUseType", purchaseOrderCostToUseType)); // query parameter
            if (vendorAccountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendorAccountNumber", vendorAccountNumber)); // query parameter
            if (orderItemsInPhaseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhaseNumber", orderItemsInPhaseNumber)); // query parameter
            if (orderItemsInPhase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderItemsInPhase", orderItemsInPhase)); // query parameter
            if (orderLaborItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderLaborItems", orderLaborItems)); // query parameter
            if (orderOnlyInsufficentItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderOnlyInsufficentItems", orderOnlyInsufficentItems)); // query parameter
            if (orderVendorlessItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderVendorlessItems", orderVendorlessItems)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersGetPurchaseOrderVendorItemsWorkOrderPriceBookPrimaryVendor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderVendorItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderVendorItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderVendorItemsResponse)));
        }

        /// <summary>
        /// Updates a purchase order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebPurchaseOrderResponse</returns>
        public TsiWebPurchaseOrderResponse PurchaseOrdersUpdatePurchaseOrder (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model)
        {
             ApiResponse<TsiWebPurchaseOrderResponse> localVarResponse = PurchaseOrdersUpdatePurchaseOrderWithHttpInfo(purchaseOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a purchase order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebPurchaseOrderResponse</returns>
        public ApiResponse< TsiWebPurchaseOrderResponse > PurchaseOrdersUpdatePurchaseOrderWithHttpInfo (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersUpdatePurchaseOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling PurchaseOrdersApi->PurchaseOrdersUpdatePurchaseOrder");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersUpdatePurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderResponse)));
        }

        /// <summary>
        /// Updates a purchase order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebPurchaseOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebPurchaseOrderResponse> PurchaseOrdersUpdatePurchaseOrderAsync (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model)
        {
             ApiResponse<TsiWebPurchaseOrderResponse> localVarResponse = await PurchaseOrdersUpdatePurchaseOrderAsyncWithHttpInfo(purchaseOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a purchase order. purchaseOrderCostToUseType : Base, Average, Latest, OrderDetailEstimatedCost - - the order item cost will only be used if \&quot;Use  this estimated cost when purchasing\&quot; is selected on the work/serivce order item, otherwise the base price will be used. &lt;br /&gt;  ShipToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;  BillToAddressType: Default,PrimaryAlternate, AccountNumber,None,AlternateAddressId.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebPurchaseOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebPurchaseOrderResponse>> PurchaseOrdersUpdatePurchaseOrderAsyncWithHttpInfo (int? purchaseOrderNumber, TsiWebUpdatePurchaseOrderModel model)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling PurchaseOrdersApi->PurchaseOrdersUpdatePurchaseOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling PurchaseOrdersApi->PurchaseOrdersUpdatePurchaseOrder");

            var localVarPath = "/api/purchaseorders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseOrdersUpdatePurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebPurchaseOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebPurchaseOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebPurchaseOrderResponse)));
        }

    }
}
