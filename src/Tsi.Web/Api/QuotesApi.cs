/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuotesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a quote to an existing service order.
        /// </summary>
        /// <remarks>
        /// QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebQuoteToServiceOrderResponse</returns>
        TsiWebQuoteToServiceOrderResponse QuotesAddQuoteToExistingServiceOrder (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model);

        /// <summary>
        /// Adds a quote to an existing service order.
        /// </summary>
        /// <remarks>
        /// QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebQuoteToServiceOrderResponse</returns>
        ApiResponse<TsiWebQuoteToServiceOrderResponse> QuotesAddQuoteToExistingServiceOrderWithHttpInfo (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model);
        /// <summary>
        /// Adds a quote to a new service order.
        /// </summary>
        /// <remarks>
        /// The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteToServiceOrderResponse</returns>
        TsiWebQuoteToServiceOrderResponse QuotesAddQuoteToNewServiceOrder (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model);

        /// <summary>
        /// Adds a quote to a new service order.
        /// </summary>
        /// <remarks>
        /// The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteToServiceOrderResponse</returns>
        ApiResponse<TsiWebQuoteToServiceOrderResponse> QuotesAddQuoteToNewServiceOrderWithHttpInfo (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model);
        /// <summary>
        /// Advanced search for Quotes.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Quotes.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Converts a quote into a work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>TsiWebWorkOrderResponse</returns>
        TsiWebWorkOrderResponse QuotesConvertQuoteToWorkOrder (int? quoteNumber);

        /// <summary>
        /// Converts a quote into a work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>ApiResponse of TsiWebWorkOrderResponse</returns>
        ApiResponse<TsiWebWorkOrderResponse> QuotesConvertQuoteToWorkOrderWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Creates a quote.
        /// </summary>
        /// <remarks>
        /// AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>TsiWebQuoteResponse</returns>
        TsiWebQuoteResponse QuotesCreateQuote (TsiWebCreateQuoteModel request);

        /// <summary>
        /// Creates a quote.
        /// </summary>
        /// <remarks>
        /// AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>ApiResponse of TsiWebQuoteResponse</returns>
        ApiResponse<TsiWebQuoteResponse> QuotesCreateQuoteWithHttpInfo (TsiWebCreateQuoteModel request);
        /// <summary>
        /// Creates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesCreateQuoteDetailComment (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model);

        /// <summary>
        /// Creates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailCommentWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model);
        /// <summary>
        /// Creates the quote detail item from a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesCreateQuoteDetailItem (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model);

        /// <summary>
        /// Creates the quote detail item from a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailItemWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model);
        /// <summary>
        /// Creates the quote detail using a non stock item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesCreateQuoteDetailNonStock (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model);

        /// <summary>
        /// Creates the quote detail using a non stock item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailNonStockWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model);
        /// <summary>
        /// Creates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesCreateQuoteDetailSubtotal (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model);

        /// <summary>
        /// Creates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailSubtotalWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model);
        /// <summary>
        /// Creates the quote document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse QuotesCreateQuoteDocument (int? quoteNumber);

        /// <summary>
        /// Creates the quote document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> QuotesCreateQuoteDocumentWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Creates a quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>TsiWebQuoteNoteResponse</returns>
        TsiWebQuoteNoteResponse QuotesCreateQuoteNote (int? quoteNumber, TsiWebQuoteNoteModel note);

        /// <summary>
        /// Creates a quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>ApiResponse of TsiWebQuoteNoteResponse</returns>
        ApiResponse<TsiWebQuoteNoteResponse> QuotesCreateQuoteNoteWithHttpInfo (int? quoteNumber, TsiWebQuoteNoteModel note);
        /// <summary>
        /// Deletes the quote detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesDeleteQuoteDetail (int? quoteNumber, int? quoteDetailNumber);

        /// <summary>
        /// Deletes the quote detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesDeleteQuoteDetailWithHttpInfo (int? quoteNumber, int? quoteDetailNumber);
        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse QuotesGetAccountQuotes (int? accountNumber, bool? openOnly = null);

        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> QuotesGetAccountQuotesWithHttpInfo (int? accountNumber, bool? openOnly = null);
        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse QuotesGetAccountQuotes_0 (int? accountNumber, bool? openOnly);

        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> QuotesGetAccountQuotes_0WithHttpInfo (int? accountNumber, bool? openOnly);
        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> QuotesGetCustomFields (int? quoteNumber);

        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> QuotesGetCustomFieldsWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        Object QuotesGetFile (int? quoteNumber, int? documentID);

        /// <summary>
        /// Gets the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> QuotesGetFileWithHttpInfo (int? quoteNumber, int? documentID);
        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse QuotesGetOpportunityQuotes (int? opportunityNumber, bool? openOnly = null);

        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> QuotesGetOpportunityQuotesWithHttpInfo (int? opportunityNumber, bool? openOnly = null);
        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        TsiWebSearchContactResponse QuotesGetOpportunityQuotes_0 (int? opportunityNumber, bool? openOnly);

        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        ApiResponse<TsiWebSearchContactResponse> QuotesGetOpportunityQuotes_0WithHttpInfo (int? opportunityNumber, bool? openOnly);
        /// <summary>
        /// Gets the quote completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse QuotesGetQuoteCompletedTasks (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> QuotesGetQuoteCompletedTasksWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the quote details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebQuoteDetail</returns>
        TsiWebQuoteDetail QuotesGetQuoteDetail (int? quoteNumber);

        /// <summary>
        /// Gets the quote details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebQuoteDetail</returns>
        ApiResponse<TsiWebQuoteDetail> QuotesGetQuoteDetailWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets a document for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        TsiWebDocumentSummary QuotesGetQuoteDocument (int? quoteNumber, int? documentID);

        /// <summary>
        /// Gets a document for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        ApiResponse<TsiWebDocumentSummary> QuotesGetQuoteDocumentWithHttpInfo (int? quoteNumber, int? documentID);
        /// <summary>
        /// Gets the documents for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        TsiWebDocumentsResponse QuotesGetQuoteDocuments (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the documents for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        ApiResponse<TsiWebDocumentsResponse> QuotesGetQuoteDocumentsWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the quote incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse QuotesGetQuoteIncompleteTasks (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> QuotesGetQuoteIncompleteTasksWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the quote notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebQuoteNotesResponse</returns>
        TsiWebQuoteNotesResponse QuotesGetQuoteNotes (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebQuoteNotesResponse</returns>
        ApiResponse<TsiWebQuoteNotesResponse> QuotesGetQuoteNotesWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the related documents for the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebQuoteRelatedDocuments</returns>
        TsiWebQuoteRelatedDocuments QuotesGetQuoteRelatedDocuments (int? quoteNumber);

        /// <summary>
        /// Gets the related documents for the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebQuoteRelatedDocuments</returns>
        ApiResponse<TsiWebQuoteRelatedDocuments> QuotesGetQuoteRelatedDocumentsWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets a summary of the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebQuoteSummary</returns>
        TsiWebQuoteSummary QuotesGetQuoteSummary (int? quoteNumber);

        /// <summary>
        /// Gets a summary of the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebQuoteSummary</returns>
        ApiResponse<TsiWebQuoteSummary> QuotesGetQuoteSummaryWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse QuotesGetQuoteTasks (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> QuotesGetQuoteTasksWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesSearchByCustomerPurchaseOrder (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesSearchByCustomerPurchaseOrderWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesSearchByItemDescription (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesSearchByItemDescriptionWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesSearchByItemId (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesSearchByItemIdWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by Job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesSearchByJob (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by Job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesSearchByJobWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by quote number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        TsiWebSearchQuotesResponse QuotesSearchByQuoteNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by quote number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        ApiResponse<TsiWebSearchQuotesResponse> QuotesSearchByQuoteNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse QuotesSetQuoteDocumentFile (int? quoteNumber, int? documentID);

        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> QuotesSetQuoteDocumentFileWithHttpInfo (int? quoteNumber, int? documentID);
        /// <summary>
        /// Sets the name of the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse QuotesSetQuoteDocumentFileName (int? quoteNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the name of the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> QuotesSetQuoteDocumentFileNameWithHttpInfo (int? quoteNumber, int? documentID, string fileName);
        /// <summary>
        /// Updates the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse QuotesUpdateCustomFields (int? quoteNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> QuotesUpdateCustomFieldsWithHttpInfo (int? quoteNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>TsiWebQuoteResponse</returns>
        TsiWebQuoteResponse QuotesUpdateQuote (int? quoteNumber, TsiWebUpdateQuoteModel model);

        /// <summary>
        /// Updates the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>ApiResponse of TsiWebQuoteResponse</returns>
        ApiResponse<TsiWebQuoteResponse> QuotesUpdateQuoteWithHttpInfo (int? quoteNumber, TsiWebUpdateQuoteModel model);
        /// <summary>
        /// Updates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailComment (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model);

        /// <summary>
        /// Updates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailCommentWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model);
        /// <summary>
        /// Updates the quote detail install location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailInstallLocation (int? quoteNumber, int? quoteDetailNumber, string installLocation);

        /// <summary>
        /// Updates the quote detail install location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailInstallLocationWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, string installLocation);
        /// <summary>
        /// Updates quote stock and non stock detail items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailItem (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model);

        /// <summary>
        /// Updates quote stock and non stock detail items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailItemWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model);
        /// <summary>
        /// Updates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailSubtotal (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model);

        /// <summary>
        /// Updates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        ApiResponse<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailSubtotalWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model);
        /// <summary>
        /// Updates the quote document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        TsiWebDocumentResponse QuotesUpdateQuoteDocumentProperties (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the quote document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        ApiResponse<TsiWebDocumentResponse> QuotesUpdateQuoteDocumentPropertiesWithHttpInfo (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        /// <summary>
        /// Updates an existing quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>TsiWebQuoteNoteResponse</returns>
        TsiWebQuoteNoteResponse QuotesUpdateQuoteNote (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note);

        /// <summary>
        /// Updates an existing quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>ApiResponse of TsiWebQuoteNoteResponse</returns>
        ApiResponse<TsiWebQuoteNoteResponse> QuotesUpdateQuoteNoteWithHttpInfo (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a quote to an existing service order.
        /// </summary>
        /// <remarks>
        /// QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebQuoteToServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteToServiceOrderResponse> QuotesAddQuoteToExistingServiceOrderAsync (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model);

        /// <summary>
        /// Adds a quote to an existing service order.
        /// </summary>
        /// <remarks>
        /// QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteToServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteToServiceOrderResponse>> QuotesAddQuoteToExistingServiceOrderAsyncWithHttpInfo (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model);
        /// <summary>
        /// Adds a quote to a new service order.
        /// </summary>
        /// <remarks>
        /// The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteToServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteToServiceOrderResponse> QuotesAddQuoteToNewServiceOrderAsync (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model);

        /// <summary>
        /// Adds a quote to a new service order.
        /// </summary>
        /// <remarks>
        /// The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteToServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteToServiceOrderResponse>> QuotesAddQuoteToNewServiceOrderAsyncWithHttpInfo (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model);
        /// <summary>
        /// Advanced search for Quotes.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Quotes.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Converts a quote into a work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>Task of TsiWebWorkOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebWorkOrderResponse> QuotesConvertQuoteToWorkOrderAsync (int? quoteNumber);

        /// <summary>
        /// Converts a quote into a work order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebWorkOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebWorkOrderResponse>> QuotesConvertQuoteToWorkOrderAsyncWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Creates a quote.
        /// </summary>
        /// <remarks>
        /// AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>Task of TsiWebQuoteResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteResponse> QuotesCreateQuoteAsync (TsiWebCreateQuoteModel request);

        /// <summary>
        /// Creates a quote.
        /// </summary>
        /// <remarks>
        /// AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteResponse>> QuotesCreateQuoteAsyncWithHttpInfo (TsiWebCreateQuoteModel request);
        /// <summary>
        /// Creates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailCommentAsync (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model);

        /// <summary>
        /// Creates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailCommentAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model);
        /// <summary>
        /// Creates the quote detail item from a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailItemAsync (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model);

        /// <summary>
        /// Creates the quote detail item from a price book item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailItemAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model);
        /// <summary>
        /// Creates the quote detail using a non stock item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailNonStockAsync (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model);

        /// <summary>
        /// Creates the quote detail using a non stock item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailNonStockAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model);
        /// <summary>
        /// Creates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailSubtotalAsync (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model);

        /// <summary>
        /// Creates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailSubtotalAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model);
        /// <summary>
        /// Creates the quote document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> QuotesCreateQuoteDocumentAsync (int? quoteNumber);

        /// <summary>
        /// Creates the quote document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> QuotesCreateQuoteDocumentAsyncWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Creates a quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of TsiWebQuoteNoteResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteNoteResponse> QuotesCreateQuoteNoteAsync (int? quoteNumber, TsiWebQuoteNoteModel note);

        /// <summary>
        /// Creates a quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteNoteResponse>> QuotesCreateQuoteNoteAsyncWithHttpInfo (int? quoteNumber, TsiWebQuoteNoteModel note);
        /// <summary>
        /// Deletes the quote detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesDeleteQuoteDetailAsync (int? quoteNumber, int? quoteDetailNumber);

        /// <summary>
        /// Deletes the quote detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesDeleteQuoteDetailAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber);
        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetAccountQuotesAsync (int? accountNumber, bool? openOnly = null);

        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetAccountQuotesAsyncWithHttpInfo (int? accountNumber, bool? openOnly = null);
        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetAccountQuotes_0Async (int? accountNumber, bool? openOnly);

        /// <summary>
        /// Gets the quotes for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetAccountQuotes_0AsyncWithHttpInfo (int? accountNumber, bool? openOnly);
        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> QuotesGetCustomFieldsAsync (int? quoteNumber);

        /// <summary>
        /// Gets the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> QuotesGetCustomFieldsAsyncWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> QuotesGetFileAsync (int? quoteNumber, int? documentID);

        /// <summary>
        /// Gets the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> QuotesGetFileAsyncWithHttpInfo (int? quoteNumber, int? documentID);
        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetOpportunityQuotesAsync (int? opportunityNumber, bool? openOnly = null);

        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetOpportunityQuotesAsyncWithHttpInfo (int? opportunityNumber, bool? openOnly = null);
        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetOpportunityQuotes_0Async (int? opportunityNumber, bool? openOnly);

        /// <summary>
        /// Gets the quotes for an opportunity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetOpportunityQuotes_0AsyncWithHttpInfo (int? opportunityNumber, bool? openOnly);
        /// <summary>
        /// Gets the quote completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> QuotesGetQuoteCompletedTasksAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> QuotesGetQuoteCompletedTasksAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the quote details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebQuoteDetail</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetail> QuotesGetQuoteDetailAsync (int? quoteNumber);

        /// <summary>
        /// Gets the quote details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetail>> QuotesGetQuoteDetailAsyncWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets a document for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        System.Threading.Tasks.Task<TsiWebDocumentSummary> QuotesGetQuoteDocumentAsync (int? quoteNumber, int? documentID);

        /// <summary>
        /// Gets a document for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> QuotesGetQuoteDocumentAsyncWithHttpInfo (int? quoteNumber, int? documentID);
        /// <summary>
        /// Gets the documents for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentsResponse> QuotesGetQuoteDocumentsAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the documents for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> QuotesGetQuoteDocumentsAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the quote incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> QuotesGetQuoteIncompleteTasksAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> QuotesGetQuoteIncompleteTasksAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the quote notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebQuoteNotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteNotesResponse> QuotesGetQuoteNotesAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteNotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteNotesResponse>> QuotesGetQuoteNotesAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the related documents for the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebQuoteRelatedDocuments</returns>
        System.Threading.Tasks.Task<TsiWebQuoteRelatedDocuments> QuotesGetQuoteRelatedDocumentsAsync (int? quoteNumber);

        /// <summary>
        /// Gets the related documents for the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteRelatedDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteRelatedDocuments>> QuotesGetQuoteRelatedDocumentsAsyncWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets a summary of the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebQuoteSummary</returns>
        System.Threading.Tasks.Task<TsiWebQuoteSummary> QuotesGetQuoteSummaryAsync (int? quoteNumber);

        /// <summary>
        /// Gets a summary of the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteSummary>> QuotesGetQuoteSummaryAsyncWithHttpInfo (int? quoteNumber);
        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> QuotesGetQuoteTasksAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> QuotesGetQuoteTasksAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByCustomerPurchaseOrderAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByCustomerPurchaseOrderAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByItemDescriptionAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by item description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByItemDescriptionAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByItemIdAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by item id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByItemIdAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by Job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByJobAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by Job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByJobAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Quotes by quote number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByQuoteNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Quotes by quote number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByQuoteNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> QuotesSetQuoteDocumentFileAsync (int? quoteNumber, int? documentID);

        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file.
        /// </summary>
        /// <remarks>
        /// Requires a multipart/form request containing the physical file.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> QuotesSetQuoteDocumentFileAsyncWithHttpInfo (int? quoteNumber, int? documentID);
        /// <summary>
        /// Sets the name of the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> QuotesSetQuoteDocumentFileNameAsync (int? quoteNumber, int? documentID, string fileName);

        /// <summary>
        /// Sets the name of the quote document file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> QuotesSetQuoteDocumentFileNameAsyncWithHttpInfo (int? quoteNumber, int? documentID, string fileName);
        /// <summary>
        /// Updates the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> QuotesUpdateCustomFieldsAsync (int? quoteNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates the custom fields for a quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> QuotesUpdateCustomFieldsAsyncWithHttpInfo (int? quoteNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>Task of TsiWebQuoteResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteResponse> QuotesUpdateQuoteAsync (int? quoteNumber, TsiWebUpdateQuoteModel model);

        /// <summary>
        /// Updates the quote.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteResponse>> QuotesUpdateQuoteAsyncWithHttpInfo (int? quoteNumber, TsiWebUpdateQuoteModel model);
        /// <summary>
        /// Updates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailCommentAsync (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model);

        /// <summary>
        /// Updates the quote detail comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailCommentAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model);
        /// <summary>
        /// Updates the quote detail install location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailInstallLocationAsync (int? quoteNumber, int? quoteDetailNumber, string installLocation);

        /// <summary>
        /// Updates the quote detail install location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailInstallLocationAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, string installLocation);
        /// <summary>
        /// Updates quote stock and non stock detail items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailItemAsync (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model);

        /// <summary>
        /// Updates quote stock and non stock detail items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailItemAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model);
        /// <summary>
        /// Updates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailSubtotalAsync (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model);

        /// <summary>
        /// Updates the quote detail subtotal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailSubtotalAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model);
        /// <summary>
        /// Updates the quote document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        System.Threading.Tasks.Task<TsiWebDocumentResponse> QuotesUpdateQuoteDocumentPropertiesAsync (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);

        /// <summary>
        /// Updates the quote document properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> QuotesUpdateQuoteDocumentPropertiesAsyncWithHttpInfo (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request);
        /// <summary>
        /// Updates an existing quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of TsiWebQuoteNoteResponse</returns>
        System.Threading.Tasks.Task<TsiWebQuoteNoteResponse> QuotesUpdateQuoteNoteAsync (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note);

        /// <summary>
        /// Updates an existing quote note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteNoteResponse>> QuotesUpdateQuoteNoteAsyncWithHttpInfo (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuotesApi : IQuotesApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuotesApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuotesApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a quote to an existing service order. QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebQuoteToServiceOrderResponse</returns>
        public TsiWebQuoteToServiceOrderResponse QuotesAddQuoteToExistingServiceOrder (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model)
        {
             ApiResponse<TsiWebQuoteToServiceOrderResponse> localVarResponse = QuotesAddQuoteToExistingServiceOrderWithHttpInfo(quoteNumber, serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a quote to an existing service order. QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebQuoteToServiceOrderResponse</returns>
        public ApiResponse< TsiWebQuoteToServiceOrderResponse > QuotesAddQuoteToExistingServiceOrderWithHttpInfo (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesAddQuoteToExistingServiceOrder");
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling QuotesApi->QuotesAddQuoteToExistingServiceOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesAddQuoteToExistingServiceOrder");

            var localVarPath = "/api/quotes/{quoteNumber}/convert/serviceOrder/{serviceOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesAddQuoteToExistingServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteToServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteToServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteToServiceOrderResponse)));
        }

        /// <summary>
        /// Adds a quote to an existing service order. QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebQuoteToServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteToServiceOrderResponse> QuotesAddQuoteToExistingServiceOrderAsync (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model)
        {
             ApiResponse<TsiWebQuoteToServiceOrderResponse> localVarResponse = await QuotesAddQuoteToExistingServiceOrderAsyncWithHttpInfo(quoteNumber, serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a quote to an existing service order. QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteToServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteToServiceOrderResponse>> QuotesAddQuoteToExistingServiceOrderAsyncWithHttpInfo (int? quoteNumber, int? serviceOrderNumber, TsiWebAddQuoteToExistingServiceOrderModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesAddQuoteToExistingServiceOrder");
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling QuotesApi->QuotesAddQuoteToExistingServiceOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesAddQuoteToExistingServiceOrder");

            var localVarPath = "/api/quotes/{quoteNumber}/convert/serviceOrder/{serviceOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesAddQuoteToExistingServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteToServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteToServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteToServiceOrderResponse)));
        }

        /// <summary>
        /// Adds a quote to a new service order. The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteToServiceOrderResponse</returns>
        public TsiWebQuoteToServiceOrderResponse QuotesAddQuoteToNewServiceOrder (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model)
        {
             ApiResponse<TsiWebQuoteToServiceOrderResponse> localVarResponse = QuotesAddQuoteToNewServiceOrderWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a quote to a new service order. The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteToServiceOrderResponse</returns>
        public ApiResponse< TsiWebQuoteToServiceOrderResponse > QuotesAddQuoteToNewServiceOrderWithHttpInfo (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesAddQuoteToNewServiceOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesAddQuoteToNewServiceOrder");

            var localVarPath = "/api/quotes/{quoteNumber}/convert/serviceOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesAddQuoteToNewServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteToServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteToServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteToServiceOrderResponse)));
        }

        /// <summary>
        /// Adds a quote to a new service order. The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteToServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteToServiceOrderResponse> QuotesAddQuoteToNewServiceOrderAsync (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model)
        {
             ApiResponse<TsiWebQuoteToServiceOrderResponse> localVarResponse = await QuotesAddQuoteToNewServiceOrderAsyncWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a quote to a new service order. The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteToServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteToServiceOrderResponse>> QuotesAddQuoteToNewServiceOrderAsyncWithHttpInfo (int? quoteNumber, TsiWebAddQuoteToNewServiceOrderModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesAddQuoteToNewServiceOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesAddQuoteToNewServiceOrder");

            var localVarPath = "/api/quotes/{quoteNumber}/convert/serviceOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesAddQuoteToNewServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteToServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteToServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteToServiceOrderResponse)));
        }

        /// <summary>
        /// Advanced search for Quotes. Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for Quotes. Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling QuotesApi->QuotesAdvancedSearch");

            var localVarPath = "/api/quotes/items/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Advanced search for Quotes. Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for Quotes. Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling QuotesApi->QuotesAdvancedSearch");

            var localVarPath = "/api/quotes/items/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Converts a quote into a work order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>TsiWebWorkOrderResponse</returns>
        public TsiWebWorkOrderResponse QuotesConvertQuoteToWorkOrder (int? quoteNumber)
        {
             ApiResponse<TsiWebWorkOrderResponse> localVarResponse = QuotesConvertQuoteToWorkOrderWithHttpInfo(quoteNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts a quote into a work order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>ApiResponse of TsiWebWorkOrderResponse</returns>
        public ApiResponse< TsiWebWorkOrderResponse > QuotesConvertQuoteToWorkOrderWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesConvertQuoteToWorkOrder");

            var localVarPath = "/api/quotes/{quoteNumber}/convert/workOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesConvertQuoteToWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebWorkOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebWorkOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebWorkOrderResponse)));
        }

        /// <summary>
        /// Converts a quote into a work order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>Task of TsiWebWorkOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebWorkOrderResponse> QuotesConvertQuoteToWorkOrderAsync (int? quoteNumber)
        {
             ApiResponse<TsiWebWorkOrderResponse> localVarResponse = await QuotesConvertQuoteToWorkOrderAsyncWithHttpInfo(quoteNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts a quote into a work order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebWorkOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebWorkOrderResponse>> QuotesConvertQuoteToWorkOrderAsyncWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesConvertQuoteToWorkOrder");

            var localVarPath = "/api/quotes/{quoteNumber}/convert/workOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesConvertQuoteToWorkOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebWorkOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebWorkOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebWorkOrderResponse)));
        }

        /// <summary>
        /// Creates a quote. AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>TsiWebQuoteResponse</returns>
        public TsiWebQuoteResponse QuotesCreateQuote (TsiWebCreateQuoteModel request)
        {
             ApiResponse<TsiWebQuoteResponse> localVarResponse = QuotesCreateQuoteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a quote. AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>ApiResponse of TsiWebQuoteResponse</returns>
        public ApiResponse< TsiWebQuoteResponse > QuotesCreateQuoteWithHttpInfo (TsiWebCreateQuoteModel request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling QuotesApi->QuotesCreateQuote");

            var localVarPath = "/api/Quotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteResponse)));
        }

        /// <summary>
        /// Creates a quote. AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>Task of TsiWebQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteResponse> QuotesCreateQuoteAsync (TsiWebCreateQuoteModel request)
        {
             ApiResponse<TsiWebQuoteResponse> localVarResponse = await QuotesCreateQuoteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a quote. AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request used to create the quote.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteResponse>> QuotesCreateQuoteAsyncWithHttpInfo (TsiWebCreateQuoteModel request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling QuotesApi->QuotesCreateQuote");

            var localVarPath = "/api/Quotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteResponse)));
        }

        /// <summary>
        /// Creates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesCreateQuoteDetailComment (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesCreateQuoteDetailCommentWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesCreateQuoteDetailCommentWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailComment");

            var localVarPath = "/api/quotes/{quoteNumber}/details/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailCommentAsync (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesCreateQuoteDetailCommentAsyncWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailCommentAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailCommentModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailComment");

            var localVarPath = "/api/quotes/{quoteNumber}/details/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail item from a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesCreateQuoteDetailItem (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesCreateQuoteDetailItemWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the quote detail item from a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesCreateQuoteDetailItemWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailItem");

            var localVarPath = "/api/quotes/{quoteNumber}/details/items/stock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail item from a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailItemAsync (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesCreateQuoteDetailItemAsyncWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the quote detail item from a price book item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailItemAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailItemModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailItem");

            var localVarPath = "/api/quotes/{quoteNumber}/details/items/stock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail using a non stock item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesCreateQuoteDetailNonStock (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesCreateQuoteDetailNonStockWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the quote detail using a non stock item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesCreateQuoteDetailNonStockWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailNonStock");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailNonStock");

            var localVarPath = "/api/quotes/{quoteNumber}/details/items/nonstock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailNonStock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail using a non stock item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailNonStockAsync (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesCreateQuoteDetailNonStockAsyncWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the quote detail using a non stock item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailNonStockAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailNonStockModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailNonStock");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailNonStock");

            var localVarPath = "/api/quotes/{quoteNumber}/details/items/nonstock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailNonStock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesCreateQuoteDetailSubtotal (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesCreateQuoteDetailSubtotalWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesCreateQuoteDetailSubtotalWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailSubtotal");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailSubtotal");

            var localVarPath = "/api/quotes/{quoteNumber}/details/subtotals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailSubtotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesCreateQuoteDetailSubtotalAsync (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesCreateQuoteDetailSubtotalAsyncWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesCreateQuoteDetailSubtotalAsyncWithHttpInfo (int? quoteNumber, TsiWebCreateQuoteDetailSubTotalModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDetailSubtotal");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesCreateQuoteDetailSubtotal");

            var localVarPath = "/api/quotes/{quoteNumber}/details/subtotals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDetailSubtotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Creates the quote document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse QuotesCreateQuoteDocument (int? quoteNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = QuotesCreateQuoteDocumentWithHttpInfo(quoteNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the quote document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > QuotesCreateQuoteDocumentWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDocument");

            var localVarPath = "/api/quotes/{quoteNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates the quote document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> QuotesCreateQuoteDocumentAsync (int? quoteNumber)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await QuotesCreateQuoteDocumentAsyncWithHttpInfo(quoteNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the quote document. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> QuotesCreateQuoteDocumentAsyncWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteDocument");

            var localVarPath = "/api/quotes/{quoteNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Creates a quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>TsiWebQuoteNoteResponse</returns>
        public TsiWebQuoteNoteResponse QuotesCreateQuoteNote (int? quoteNumber, TsiWebQuoteNoteModel note)
        {
             ApiResponse<TsiWebQuoteNoteResponse> localVarResponse = QuotesCreateQuoteNoteWithHttpInfo(quoteNumber, note);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>ApiResponse of TsiWebQuoteNoteResponse</returns>
        public ApiResponse< TsiWebQuoteNoteResponse > QuotesCreateQuoteNoteWithHttpInfo (int? quoteNumber, TsiWebQuoteNoteModel note)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling QuotesApi->QuotesCreateQuoteNote");

            var localVarPath = "/api/quotes/{quoteNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteNoteResponse)));
        }

        /// <summary>
        /// Creates a quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of TsiWebQuoteNoteResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteNoteResponse> QuotesCreateQuoteNoteAsync (int? quoteNumber, TsiWebQuoteNoteModel note)
        {
             ApiResponse<TsiWebQuoteNoteResponse> localVarResponse = await QuotesCreateQuoteNoteAsyncWithHttpInfo(quoteNumber, note);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteNoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteNoteResponse>> QuotesCreateQuoteNoteAsyncWithHttpInfo (int? quoteNumber, TsiWebQuoteNoteModel note)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesCreateQuoteNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling QuotesApi->QuotesCreateQuoteNote");

            var localVarPath = "/api/quotes/{quoteNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesCreateQuoteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteNoteResponse)));
        }

        /// <summary>
        /// Deletes the quote detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesDeleteQuoteDetail (int? quoteNumber, int? quoteDetailNumber)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesDeleteQuoteDetailWithHttpInfo(quoteNumber, quoteDetailNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the quote detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesDeleteQuoteDetailWithHttpInfo (int? quoteNumber, int? quoteDetailNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesDeleteQuoteDetail");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesDeleteQuoteDetail");

            var localVarPath = "/api/quotes/{quoteNumber}/details/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesDeleteQuoteDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Deletes the quote detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesDeleteQuoteDetailAsync (int? quoteNumber, int? quoteDetailNumber)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesDeleteQuoteDetailAsyncWithHttpInfo(quoteNumber, quoteDetailNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the quote detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesDeleteQuoteDetailAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesDeleteQuoteDetail");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesDeleteQuoteDetail");

            var localVarPath = "/api/quotes/{quoteNumber}/details/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesDeleteQuoteDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse QuotesGetAccountQuotes (int? accountNumber, bool? openOnly = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = QuotesGetAccountQuotesWithHttpInfo(accountNumber, openOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > QuotesGetAccountQuotesWithHttpInfo (int? accountNumber, bool? openOnly = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling QuotesApi->QuotesGetAccountQuotes");

            var localVarPath = "/api/quotes/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (openOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openOnly", openOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetAccountQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetAccountQuotesAsync (int? accountNumber, bool? openOnly = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await QuotesGetAccountQuotesAsyncWithHttpInfo(accountNumber, openOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetAccountQuotesAsyncWithHttpInfo (int? accountNumber, bool? openOnly = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling QuotesApi->QuotesGetAccountQuotes");

            var localVarPath = "/api/quotes/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (openOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openOnly", openOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetAccountQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse QuotesGetAccountQuotes_0 (int? accountNumber, bool? openOnly)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = QuotesGetAccountQuotes_0WithHttpInfo(accountNumber, openOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > QuotesGetAccountQuotes_0WithHttpInfo (int? accountNumber, bool? openOnly)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling QuotesApi->QuotesGetAccountQuotes_0");
            // verify the required parameter 'openOnly' is set
            if (openOnly == null)
                throw new ApiException(400, "Missing required parameter 'openOnly' when calling QuotesApi->QuotesGetAccountQuotes_0");

            var localVarPath = "/api/quotes/account/{accountNumber}/{openOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (openOnly != null) localVarPathParams.Add("openOnly", this.Configuration.ApiClient.ParameterToString(openOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetAccountQuotes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetAccountQuotes_0Async (int? accountNumber, bool? openOnly)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await QuotesGetAccountQuotes_0AsyncWithHttpInfo(accountNumber, openOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quotes for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetAccountQuotes_0AsyncWithHttpInfo (int? accountNumber, bool? openOnly)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling QuotesApi->QuotesGetAccountQuotes_0");
            // verify the required parameter 'openOnly' is set
            if (openOnly == null)
                throw new ApiException(400, "Missing required parameter 'openOnly' when calling QuotesApi->QuotesGetAccountQuotes_0");

            var localVarPath = "/api/quotes/account/{accountNumber}/{openOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (openOnly != null) localVarPathParams.Add("openOnly", this.Configuration.ApiClient.ParameterToString(openOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetAccountQuotes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> QuotesGetCustomFields (int? quoteNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = QuotesGetCustomFieldsWithHttpInfo(quoteNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > QuotesGetCustomFieldsWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetCustomFields");

            var localVarPath = "/api/quotes/{quoteNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> QuotesGetCustomFieldsAsync (int? quoteNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await QuotesGetCustomFieldsAsyncWithHttpInfo(quoteNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> QuotesGetCustomFieldsAsyncWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetCustomFields");

            var localVarPath = "/api/quotes/{quoteNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Object</returns>
        public Object QuotesGetFile (int? quoteNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = QuotesGetFileWithHttpInfo(quoteNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > QuotesGetFileWithHttpInfo (int? quoteNumber, int? documentID)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesGetFile");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> QuotesGetFileAsync (int? quoteNumber, int? documentID)
        {
             ApiResponse<Object> localVarResponse = await QuotesGetFileAsyncWithHttpInfo(quoteNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> QuotesGetFileAsyncWithHttpInfo (int? quoteNumber, int? documentID)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesGetFile");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse QuotesGetOpportunityQuotes (int? opportunityNumber, bool? openOnly = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = QuotesGetOpportunityQuotesWithHttpInfo(opportunityNumber, openOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > QuotesGetOpportunityQuotesWithHttpInfo (int? opportunityNumber, bool? openOnly = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling QuotesApi->QuotesGetOpportunityQuotes");

            var localVarPath = "/api/quotes/opportunity/{opportunityNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (openOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openOnly", openOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetOpportunityQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetOpportunityQuotesAsync (int? opportunityNumber, bool? openOnly = null)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await QuotesGetOpportunityQuotesAsyncWithHttpInfo(opportunityNumber, openOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes. (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetOpportunityQuotesAsyncWithHttpInfo (int? opportunityNumber, bool? openOnly = null)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling QuotesApi->QuotesGetOpportunityQuotes");

            var localVarPath = "/api/quotes/opportunity/{opportunityNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (openOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openOnly", openOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetOpportunityQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>TsiWebSearchContactResponse</returns>
        public TsiWebSearchContactResponse QuotesGetOpportunityQuotes_0 (int? opportunityNumber, bool? openOnly)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = QuotesGetOpportunityQuotes_0WithHttpInfo(opportunityNumber, openOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>ApiResponse of TsiWebSearchContactResponse</returns>
        public ApiResponse< TsiWebSearchContactResponse > QuotesGetOpportunityQuotes_0WithHttpInfo (int? opportunityNumber, bool? openOnly)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling QuotesApi->QuotesGetOpportunityQuotes_0");
            // verify the required parameter 'openOnly' is set
            if (openOnly == null)
                throw new ApiException(400, "Missing required parameter 'openOnly' when calling QuotesApi->QuotesGetOpportunityQuotes_0");

            var localVarPath = "/api/quotes/opportunity/{opportunityNumber}/{openOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (openOnly != null) localVarPathParams.Add("openOnly", this.Configuration.ApiClient.ParameterToString(openOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetOpportunityQuotes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of TsiWebSearchContactResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContactResponse> QuotesGetOpportunityQuotes_0Async (int? opportunityNumber, bool? openOnly)
        {
             ApiResponse<TsiWebSearchContactResponse> localVarResponse = await QuotesGetOpportunityQuotes_0AsyncWithHttpInfo(opportunityNumber, openOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quotes for an opportunity. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityNumber">The opportunity number.</param>
        /// <param name="openOnly">If set to true returns only the open Quotes.</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContactResponse>> QuotesGetOpportunityQuotes_0AsyncWithHttpInfo (int? opportunityNumber, bool? openOnly)
        {
            // verify the required parameter 'opportunityNumber' is set
            if (opportunityNumber == null)
                throw new ApiException(400, "Missing required parameter 'opportunityNumber' when calling QuotesApi->QuotesGetOpportunityQuotes_0");
            // verify the required parameter 'openOnly' is set
            if (openOnly == null)
                throw new ApiException(400, "Missing required parameter 'openOnly' when calling QuotesApi->QuotesGetOpportunityQuotes_0");

            var localVarPath = "/api/quotes/opportunity/{opportunityNumber}/{openOnly}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (opportunityNumber != null) localVarPathParams.Add("opportunityNumber", this.Configuration.ApiClient.ParameterToString(opportunityNumber)); // path parameter
            if (openOnly != null) localVarPathParams.Add("openOnly", this.Configuration.ApiClient.ParameterToString(openOnly)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetOpportunityQuotes_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContactResponse)));
        }

        /// <summary>
        /// Gets the quote completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse QuotesGetQuoteCompletedTasks (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = QuotesGetQuoteCompletedTasksWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quote completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > QuotesGetQuoteCompletedTasksWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteCompletedTasks");

            var localVarPath = "/api/quotes/{QuoteNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("QuoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the quote completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> QuotesGetQuoteCompletedTasksAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await QuotesGetQuoteCompletedTasksAsyncWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quote completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> QuotesGetQuoteCompletedTasksAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteCompletedTasks");

            var localVarPath = "/api/quotes/{QuoteNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("QuoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the quote details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebQuoteDetail</returns>
        public TsiWebQuoteDetail QuotesGetQuoteDetail (int? quoteNumber)
        {
             ApiResponse<TsiWebQuoteDetail> localVarResponse = QuotesGetQuoteDetailWithHttpInfo(quoteNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quote details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebQuoteDetail</returns>
        public ApiResponse< TsiWebQuoteDetail > QuotesGetQuoteDetailWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteDetail");

            var localVarPath = "/api/quotes/{quoteNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetail)));
        }

        /// <summary>
        /// Gets the quote details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebQuoteDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetail> QuotesGetQuoteDetailAsync (int? quoteNumber)
        {
             ApiResponse<TsiWebQuoteDetail> localVarResponse = await QuotesGetQuoteDetailAsyncWithHttpInfo(quoteNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quote details. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetail>> QuotesGetQuoteDetailAsyncWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteDetail");

            var localVarPath = "/api/quotes/{quoteNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetail)));
        }

        /// <summary>
        /// Gets a document for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebDocumentSummary</returns>
        public TsiWebDocumentSummary QuotesGetQuoteDocument (int? quoteNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = QuotesGetQuoteDocumentWithHttpInfo(quoteNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a document for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebDocumentSummary</returns>
        public ApiResponse< TsiWebDocumentSummary > QuotesGetQuoteDocumentWithHttpInfo (int? quoteNumber, int? documentID)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesGetQuoteDocument");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets a document for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebDocumentSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentSummary> QuotesGetQuoteDocumentAsync (int? quoteNumber, int? documentID)
        {
             ApiResponse<TsiWebDocumentSummary> localVarResponse = await QuotesGetQuoteDocumentAsyncWithHttpInfo(quoteNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a document for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentSummary>> QuotesGetQuoteDocumentAsyncWithHttpInfo (int? quoteNumber, int? documentID)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteDocument");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesGetQuoteDocument");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentSummary)));
        }

        /// <summary>
        /// Gets the documents for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebDocumentsResponse</returns>
        public TsiWebDocumentsResponse QuotesGetQuoteDocuments (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = QuotesGetQuoteDocumentsWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the documents for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebDocumentsResponse</returns>
        public ApiResponse< TsiWebDocumentsResponse > QuotesGetQuoteDocumentsWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteDocuments");

            var localVarPath = "/api/quotes/{quoteNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the documents for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentsResponse> QuotesGetQuoteDocumentsAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebDocumentsResponse> localVarResponse = await QuotesGetQuoteDocumentsAsyncWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the documents for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentsResponse>> QuotesGetQuoteDocumentsAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteDocuments");

            var localVarPath = "/api/quotes/{quoteNumber}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentsResponse)));
        }

        /// <summary>
        /// Gets the quote incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse QuotesGetQuoteIncompleteTasks (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = QuotesGetQuoteIncompleteTasksWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quote incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > QuotesGetQuoteIncompleteTasksWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteIncompleteTasks");

            var localVarPath = "/api/quotes/{QuoteNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("QuoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the quote incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> QuotesGetQuoteIncompleteTasksAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await QuotesGetQuoteIncompleteTasksAsyncWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quote incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> QuotesGetQuoteIncompleteTasksAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteIncompleteTasks");

            var localVarPath = "/api/quotes/{QuoteNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("QuoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the quote notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebQuoteNotesResponse</returns>
        public TsiWebQuoteNotesResponse QuotesGetQuoteNotes (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebQuoteNotesResponse> localVarResponse = QuotesGetQuoteNotesWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quote notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebQuoteNotesResponse</returns>
        public ApiResponse< TsiWebQuoteNotesResponse > QuotesGetQuoteNotesWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteNotes");

            var localVarPath = "/api/quotes/{quoteNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteNotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteNotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteNotesResponse)));
        }

        /// <summary>
        /// Gets the quote notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebQuoteNotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteNotesResponse> QuotesGetQuoteNotesAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebQuoteNotesResponse> localVarResponse = await QuotesGetQuoteNotesAsyncWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quote notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteNotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteNotesResponse>> QuotesGetQuoteNotesAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteNotes");

            var localVarPath = "/api/quotes/{quoteNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteNotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteNotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteNotesResponse)));
        }

        /// <summary>
        /// Gets the related documents for the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebQuoteRelatedDocuments</returns>
        public TsiWebQuoteRelatedDocuments QuotesGetQuoteRelatedDocuments (int? quoteNumber)
        {
             ApiResponse<TsiWebQuoteRelatedDocuments> localVarResponse = QuotesGetQuoteRelatedDocumentsWithHttpInfo(quoteNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the related documents for the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebQuoteRelatedDocuments</returns>
        public ApiResponse< TsiWebQuoteRelatedDocuments > QuotesGetQuoteRelatedDocumentsWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteRelatedDocuments");

            var localVarPath = "/api/quotes/{quoteNumber}/relateddocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteRelatedDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteRelatedDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteRelatedDocuments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteRelatedDocuments)));
        }

        /// <summary>
        /// Gets the related documents for the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebQuoteRelatedDocuments</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteRelatedDocuments> QuotesGetQuoteRelatedDocumentsAsync (int? quoteNumber)
        {
             ApiResponse<TsiWebQuoteRelatedDocuments> localVarResponse = await QuotesGetQuoteRelatedDocumentsAsyncWithHttpInfo(quoteNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the related documents for the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteRelatedDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteRelatedDocuments>> QuotesGetQuoteRelatedDocumentsAsyncWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteRelatedDocuments");

            var localVarPath = "/api/quotes/{quoteNumber}/relateddocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteRelatedDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteRelatedDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteRelatedDocuments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteRelatedDocuments)));
        }

        /// <summary>
        /// Gets a summary of the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>TsiWebQuoteSummary</returns>
        public TsiWebQuoteSummary QuotesGetQuoteSummary (int? quoteNumber)
        {
             ApiResponse<TsiWebQuoteSummary> localVarResponse = QuotesGetQuoteSummaryWithHttpInfo(quoteNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a summary of the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>ApiResponse of TsiWebQuoteSummary</returns>
        public ApiResponse< TsiWebQuoteSummary > QuotesGetQuoteSummaryWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteSummary");

            var localVarPath = "/api/quotes/{quoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteSummary)));
        }

        /// <summary>
        /// Gets a summary of the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of TsiWebQuoteSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteSummary> QuotesGetQuoteSummaryAsync (int? quoteNumber)
        {
             ApiResponse<TsiWebQuoteSummary> localVarResponse = await QuotesGetQuoteSummaryAsyncWithHttpInfo(quoteNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a summary of the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteSummary>> QuotesGetQuoteSummaryAsyncWithHttpInfo (int? quoteNumber)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteSummary");

            var localVarPath = "/api/quotes/{quoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteSummary)));
        }

        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse QuotesGetQuoteTasks (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = QuotesGetQuoteTasksWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > QuotesGetQuoteTasksWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteTasks");

            var localVarPath = "/api/quotes/{QuoteNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("QuoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> QuotesGetQuoteTasksAsync (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await QuotesGetQuoteTasksAsyncWithHttpInfo(quoteNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the quote tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> QuotesGetQuoteTasksAsyncWithHttpInfo (int? quoteNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesGetQuoteTasks");

            var localVarPath = "/api/quotes/{QuoteNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("QuoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesGetQuoteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Search Quotes using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesSearchByCustomFieldWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quotes using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesSearchByCustomField");

            var localVarPath = "/api/quotes/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesSearchByCustomFieldAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Quotes using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesSearchByCustomField");

            var localVarPath = "/api/quotes/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesSearchByCustomerPurchaseOrder (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesSearchByCustomerPurchaseOrderWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quotes by customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesSearchByCustomerPurchaseOrderWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByCustomerPurchaseOrder");

            var localVarPath = "/api/quotes/search/customerpo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByCustomerPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByCustomerPurchaseOrderAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesSearchByCustomerPurchaseOrderAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Quotes by customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByCustomerPurchaseOrderAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByCustomerPurchaseOrder");

            var localVarPath = "/api/quotes/search/customerpo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByCustomerPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesSearchByItemDescription (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesSearchByItemDescriptionWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quotes by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesSearchByItemDescriptionWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByItemDescription");

            var localVarPath = "/api/quotes/search/itemdescription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByItemDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByItemDescriptionAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesSearchByItemDescriptionAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Quotes by item description. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByItemDescriptionAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByItemDescription");

            var localVarPath = "/api/quotes/search/itemdescription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByItemDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesSearchByItemId (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesSearchByItemIdWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quotes by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesSearchByItemIdWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByItemId");

            var localVarPath = "/api/quotes/search/itemid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByItemIdAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesSearchByItemIdAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Quotes by item id. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByItemIdAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByItemId");

            var localVarPath = "/api/quotes/search/itemid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByItemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by Job. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesSearchByJob (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesSearchByJobWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quotes by Job. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesSearchByJobWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByJob");

            var localVarPath = "/api/quotes/search/job";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by Job. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByJobAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesSearchByJobAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Quotes by Job. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByJobAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByJob");

            var localVarPath = "/api/quotes/search/job";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by quote number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchQuotesResponse</returns>
        public TsiWebSearchQuotesResponse QuotesSearchByQuoteNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = QuotesSearchByQuoteNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quotes by quote number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchQuotesResponse</returns>
        public ApiResponse< TsiWebSearchQuotesResponse > QuotesSearchByQuoteNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByQuoteNumber");

            var localVarPath = "/api/quotes/search/quotenumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByQuoteNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Search Quotes by quote number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchQuotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchQuotesResponse> QuotesSearchByQuoteNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchQuotesResponse> localVarResponse = await QuotesSearchByQuoteNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Quotes by quote number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">The criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchQuotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchQuotesResponse>> QuotesSearchByQuoteNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling QuotesApi->QuotesSearchByQuoteNumber");

            var localVarPath = "/api/quotes/search/quotenumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSearchByQuoteNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchQuotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchQuotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchQuotesResponse)));
        }

        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse QuotesSetQuoteDocumentFile (int? quoteNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = QuotesSetQuoteDocumentFileWithHttpInfo(quoteNumber, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > QuotesSetQuoteDocumentFileWithHttpInfo (int? quoteNumber, int? documentID)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesSetQuoteDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesSetQuoteDocumentFile");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSetQuoteDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> QuotesSetQuoteDocumentFileAsync (int? quoteNumber, int? documentID)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await QuotesSetQuoteDocumentFileAsyncWithHttpInfo(quoteNumber, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overwrites the quote document physical file, does not rename the file. Requires a multipart/form request containing the physical file.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> QuotesSetQuoteDocumentFileAsyncWithHttpInfo (int? quoteNumber, int? documentID)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesSetQuoteDocumentFile");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesSetQuoteDocumentFile");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSetQuoteDocumentFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Sets the name of the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse QuotesSetQuoteDocumentFileName (int? quoteNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = QuotesSetQuoteDocumentFileNameWithHttpInfo(quoteNumber, documentID, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the name of the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > QuotesSetQuoteDocumentFileNameWithHttpInfo (int? quoteNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesSetQuoteDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesSetQuoteDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling QuotesApi->QuotesSetQuoteDocumentFileName");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSetQuoteDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Sets the name of the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> QuotesSetQuoteDocumentFileNameAsync (int? quoteNumber, int? documentID, string fileName)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await QuotesSetQuoteDocumentFileNameAsyncWithHttpInfo(quoteNumber, documentID, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the name of the quote document file. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> QuotesSetQuoteDocumentFileNameAsyncWithHttpInfo (int? quoteNumber, int? documentID, string fileName)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesSetQuoteDocumentFileName");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesSetQuoteDocumentFileName");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling QuotesApi->QuotesSetQuoteDocumentFileName");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (fileName != null && fileName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fileName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileName; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesSetQuoteDocumentFileName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse QuotesUpdateCustomFields (int? quoteNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = QuotesUpdateCustomFieldsWithHttpInfo(quoteNumber, customFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > QuotesUpdateCustomFieldsWithHttpInfo (int? quoteNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling QuotesApi->QuotesUpdateCustomFields");

            var localVarPath = "/api/quotes/{quoteNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> QuotesUpdateCustomFieldsAsync (int? quoteNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await QuotesUpdateCustomFieldsAsyncWithHttpInfo(quoteNumber, customFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the custom fields for a quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> QuotesUpdateCustomFieldsAsyncWithHttpInfo (int? quoteNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling QuotesApi->QuotesUpdateCustomFields");

            var localVarPath = "/api/quotes/{quoteNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>TsiWebQuoteResponse</returns>
        public TsiWebQuoteResponse QuotesUpdateQuote (int? quoteNumber, TsiWebUpdateQuoteModel model)
        {
             ApiResponse<TsiWebQuoteResponse> localVarResponse = QuotesUpdateQuoteWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>ApiResponse of TsiWebQuoteResponse</returns>
        public ApiResponse< TsiWebQuoteResponse > QuotesUpdateQuoteWithHttpInfo (int? quoteNumber, TsiWebUpdateQuoteModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuote");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuote");

            var localVarPath = "/api/quotes/{quoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteResponse)));
        }

        /// <summary>
        /// Updates the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>Task of TsiWebQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteResponse> QuotesUpdateQuoteAsync (int? quoteNumber, TsiWebUpdateQuoteModel model)
        {
             ApiResponse<TsiWebQuoteResponse> localVarResponse = await QuotesUpdateQuoteAsyncWithHttpInfo(quoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the quote. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="model">The quote.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteResponse>> QuotesUpdateQuoteAsyncWithHttpInfo (int? quoteNumber, TsiWebUpdateQuoteModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuote");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuote");

            var localVarPath = "/api/quotes/{quoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteResponse)));
        }

        /// <summary>
        /// Updates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailComment (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesUpdateQuoteDetailCommentWithHttpInfo(quoteNumber, quoteDetailNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesUpdateQuoteDetailCommentWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailComment");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuoteDetailComment");

            var localVarPath = "/api/quotes/{quoteNumber}/details/comments/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailCommentAsync (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesUpdateQuoteDetailCommentAsyncWithHttpInfo(quoteNumber, quoteDetailNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the quote detail comment. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailCommentAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailCommentModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailComment");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuoteDetailComment");

            var localVarPath = "/api/quotes/{quoteNumber}/details/comments/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates the quote detail install location. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailInstallLocation (int? quoteNumber, int? quoteDetailNumber, string installLocation)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesUpdateQuoteDetailInstallLocationWithHttpInfo(quoteNumber, quoteDetailNumber, installLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the quote detail install location. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesUpdateQuoteDetailInstallLocationWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, string installLocation)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailInstallLocation");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailInstallLocation");
            // verify the required parameter 'installLocation' is set
            if (installLocation == null)
                throw new ApiException(400, "Missing required parameter 'installLocation' when calling QuotesApi->QuotesUpdateQuoteDetailInstallLocation");

            var localVarPath = "/api/quotes/{quoteNumber}/details/installlocation/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (installLocation != null && installLocation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installLocation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installLocation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailInstallLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates the quote detail install location. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailInstallLocationAsync (int? quoteNumber, int? quoteDetailNumber, string installLocation)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesUpdateQuoteDetailInstallLocationAsyncWithHttpInfo(quoteNumber, quoteDetailNumber, installLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the quote detail install location. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="installLocation">The install location.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailInstallLocationAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, string installLocation)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailInstallLocation");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailInstallLocation");
            // verify the required parameter 'installLocation' is set
            if (installLocation == null)
                throw new ApiException(400, "Missing required parameter 'installLocation' when calling QuotesApi->QuotesUpdateQuoteDetailInstallLocation");

            var localVarPath = "/api/quotes/{quoteNumber}/details/installlocation/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (installLocation != null && installLocation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(installLocation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = installLocation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailInstallLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates quote stock and non stock detail items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailItem (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesUpdateQuoteDetailItemWithHttpInfo(quoteNumber, quoteDetailNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates quote stock and non stock detail items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesUpdateQuoteDetailItemWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailItem");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuoteDetailItem");

            var localVarPath = "/api/quotes/{quoteNumber}/details/items/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates quote stock and non stock detail items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailItemAsync (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesUpdateQuoteDetailItemAsyncWithHttpInfo(quoteNumber, quoteDetailNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates quote stock and non stock detail items. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote stock or non stock detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailItemAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailItemModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailItem");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuoteDetailItem");

            var localVarPath = "/api/quotes/{quoteNumber}/details/items/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebQuoteDetailResponse</returns>
        public TsiWebQuoteDetailResponse QuotesUpdateQuoteDetailSubtotal (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = QuotesUpdateQuoteDetailSubtotalWithHttpInfo(quoteNumber, quoteDetailNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebQuoteDetailResponse</returns>
        public ApiResponse< TsiWebQuoteDetailResponse > QuotesUpdateQuoteDetailSubtotalWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailSubtotal");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailSubtotal");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuoteDetailSubtotal");

            var localVarPath = "/api/quotes/{quoteNumber}/details/subtotals/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailSubtotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebQuoteDetailResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteDetailResponse> QuotesUpdateQuoteDetailSubtotalAsync (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model)
        {
             ApiResponse<TsiWebQuoteDetailResponse> localVarResponse = await QuotesUpdateQuoteDetailSubtotalAsyncWithHttpInfo(quoteNumber, quoteDetailNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the quote detail subtotal. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteDetailNumber">The quote detail number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebQuoteDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteDetailResponse>> QuotesUpdateQuoteDetailSubtotalAsyncWithHttpInfo (int? quoteNumber, int? quoteDetailNumber, TsiWebQuoteDetailSubtotalModel model)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDetailSubtotal");
            // verify the required parameter 'quoteDetailNumber' is set
            if (quoteDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteDetailNumber' when calling QuotesApi->QuotesUpdateQuoteDetailSubtotal");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling QuotesApi->QuotesUpdateQuoteDetailSubtotal");

            var localVarPath = "/api/quotes/{quoteNumber}/details/subtotals/{quoteDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteDetailNumber != null) localVarPathParams.Add("quoteDetailNumber", this.Configuration.ApiClient.ParameterToString(quoteDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDetailSubtotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteDetailResponse)));
        }

        /// <summary>
        /// Updates the quote document properties. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>TsiWebDocumentResponse</returns>
        public TsiWebDocumentResponse QuotesUpdateQuoteDocumentProperties (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = QuotesUpdateQuoteDocumentPropertiesWithHttpInfo(quoteNumber, documentID, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the quote document properties. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>ApiResponse of TsiWebDocumentResponse</returns>
        public ApiResponse< TsiWebDocumentResponse > QuotesUpdateQuoteDocumentPropertiesWithHttpInfo (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesUpdateQuoteDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling QuotesApi->QuotesUpdateQuoteDocumentProperties");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates the quote document properties. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of TsiWebDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebDocumentResponse> QuotesUpdateQuoteDocumentPropertiesAsync (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
             ApiResponse<TsiWebDocumentResponse> localVarResponse = await QuotesUpdateQuoteDocumentPropertiesAsyncWithHttpInfo(quoteNumber, documentID, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the quote document properties. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="documentID">The document identifier.</param>
        /// <param name="request">The request.</param>
        /// <returns>Task of ApiResponse (TsiWebDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebDocumentResponse>> QuotesUpdateQuoteDocumentPropertiesAsyncWithHttpInfo (int? quoteNumber, int? documentID, TsiWebAreasWebApiUpdateDocumentModel request)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteDocumentProperties");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling QuotesApi->QuotesUpdateQuoteDocumentProperties");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling QuotesApi->QuotesUpdateQuoteDocumentProperties");

            var localVarPath = "/api/quotes/{quoteNumber}/documents/{documentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (documentID != null) localVarPathParams.Add("documentID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebDocumentResponse)));
        }

        /// <summary>
        /// Updates an existing quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>TsiWebQuoteNoteResponse</returns>
        public TsiWebQuoteNoteResponse QuotesUpdateQuoteNote (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note)
        {
             ApiResponse<TsiWebQuoteNoteResponse> localVarResponse = QuotesUpdateQuoteNoteWithHttpInfo(quoteNumber, quoteNoteNumber, note);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>ApiResponse of TsiWebQuoteNoteResponse</returns>
        public ApiResponse< TsiWebQuoteNoteResponse > QuotesUpdateQuoteNoteWithHttpInfo (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteNote");
            // verify the required parameter 'quoteNoteNumber' is set
            if (quoteNoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNoteNumber' when calling QuotesApi->QuotesUpdateQuoteNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling QuotesApi->QuotesUpdateQuoteNote");

            var localVarPath = "/api/quotes/{quoteNumber}/notes/{quoteNoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteNoteNumber != null) localVarPathParams.Add("quoteNoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNoteNumber)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteNoteResponse)));
        }

        /// <summary>
        /// Updates an existing quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of TsiWebQuoteNoteResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebQuoteNoteResponse> QuotesUpdateQuoteNoteAsync (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note)
        {
             ApiResponse<TsiWebQuoteNoteResponse> localVarResponse = await QuotesUpdateQuoteNoteAsyncWithHttpInfo(quoteNumber, quoteNoteNumber, note);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing quote note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteNumber">The quote number.</param>
        /// <param name="quoteNoteNumber">The quote note number.</param>
        /// <param name="note">The note.</param>
        /// <returns>Task of ApiResponse (TsiWebQuoteNoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebQuoteNoteResponse>> QuotesUpdateQuoteNoteAsyncWithHttpInfo (int? quoteNumber, int? quoteNoteNumber, TsiWebQuoteNoteModel note)
        {
            // verify the required parameter 'quoteNumber' is set
            if (quoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNumber' when calling QuotesApi->QuotesUpdateQuoteNote");
            // verify the required parameter 'quoteNoteNumber' is set
            if (quoteNoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'quoteNoteNumber' when calling QuotesApi->QuotesUpdateQuoteNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling QuotesApi->QuotesUpdateQuoteNote");

            var localVarPath = "/api/quotes/{quoteNumber}/notes/{quoteNoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (quoteNumber != null) localVarPathParams.Add("quoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNumber)); // path parameter
            if (quoteNoteNumber != null) localVarPathParams.Add("quoteNoteNumber", this.Configuration.ApiClient.ParameterToString(quoteNoteNumber)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesUpdateQuoteNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebQuoteNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebQuoteNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebQuoteNoteResponse)));
        }

    }
}
