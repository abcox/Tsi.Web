/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRepsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the Rep completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse RepsGetRepCompletedTasks (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Rep completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> RepsGetRepCompletedTasksWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Rep detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>TsiWebRepDetail</returns>
        TsiWebRepDetail RepsGetRepDetail (int? repNumber);

        /// <summary>
        /// Gets the Rep detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>ApiResponse of TsiWebRepDetail</returns>
        ApiResponse<TsiWebRepDetail> RepsGetRepDetailWithHttpInfo (int? repNumber);
        /// <summary>
        /// Gets the Rep incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse RepsGetRepIncompleteTasks (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Rep incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> RepsGetRepIncompleteTasksWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Rep summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>TsiWebRepSummary</returns>
        TsiWebRepSummary RepsGetRepSummary (int? repNumber);

        /// <summary>
        /// Gets the Rep summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>ApiResponse of TsiWebRepSummary</returns>
        ApiResponse<TsiWebRepSummary> RepsGetRepSummaryWithHttpInfo (int? repNumber);
        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse RepsGetRepTasks (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> RepsGetRepTasksWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the Rep completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> RepsGetRepCompletedTasksAsync (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Rep completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> RepsGetRepCompletedTasksAsyncWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Rep detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of TsiWebRepDetail</returns>
        System.Threading.Tasks.Task<TsiWebRepDetail> RepsGetRepDetailAsync (int? repNumber);

        /// <summary>
        /// Gets the Rep detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of ApiResponse (TsiWebRepDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebRepDetail>> RepsGetRepDetailAsyncWithHttpInfo (int? repNumber);
        /// <summary>
        /// Gets the Rep incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> RepsGetRepIncompleteTasksAsync (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Rep incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> RepsGetRepIncompleteTasksAsyncWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Rep summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of TsiWebRepSummary</returns>
        System.Threading.Tasks.Task<TsiWebRepSummary> RepsGetRepSummaryAsync (int? repNumber);

        /// <summary>
        /// Gets the Rep summary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of ApiResponse (TsiWebRepSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebRepSummary>> RepsGetRepSummaryAsyncWithHttpInfo (int? repNumber);
        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> RepsGetRepTasksAsync (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> RepsGetRepTasksAsyncWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RepsApi : IRepsApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RepsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepsApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RepsApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the Rep completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse RepsGetRepCompletedTasks (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = RepsGetRepCompletedTasksWithHttpInfo(repNumber, repModelScheduledFor, repModelScheduledBy, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Rep completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > RepsGetRepCompletedTasksWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepCompletedTasks");

            var localVarPath = "/api/reps/{repNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter
            if (repModelScheduledFor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledFor", repModelScheduledFor)); // query parameter
            if (repModelScheduledBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledBy", repModelScheduledBy)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Rep completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> RepsGetRepCompletedTasksAsync (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await RepsGetRepCompletedTasksAsyncWithHttpInfo(repNumber, repModelScheduledFor, repModelScheduledBy, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Rep completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> RepsGetRepCompletedTasksAsyncWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepCompletedTasks");

            var localVarPath = "/api/reps/{repNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter
            if (repModelScheduledFor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledFor", repModelScheduledFor)); // query parameter
            if (repModelScheduledBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledBy", repModelScheduledBy)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Rep detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>TsiWebRepDetail</returns>
        public TsiWebRepDetail RepsGetRepDetail (int? repNumber)
        {
             ApiResponse<TsiWebRepDetail> localVarResponse = RepsGetRepDetailWithHttpInfo(repNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Rep detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>ApiResponse of TsiWebRepDetail</returns>
        public ApiResponse< TsiWebRepDetail > RepsGetRepDetailWithHttpInfo (int? repNumber)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepDetail");

            var localVarPath = "/api/reps/{repNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRepDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRepDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRepDetail)));
        }

        /// <summary>
        /// Gets the Rep detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of TsiWebRepDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebRepDetail> RepsGetRepDetailAsync (int? repNumber)
        {
             ApiResponse<TsiWebRepDetail> localVarResponse = await RepsGetRepDetailAsyncWithHttpInfo(repNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Rep detail. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of ApiResponse (TsiWebRepDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebRepDetail>> RepsGetRepDetailAsyncWithHttpInfo (int? repNumber)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepDetail");

            var localVarPath = "/api/reps/{repNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRepDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRepDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRepDetail)));
        }

        /// <summary>
        /// Gets the Rep incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse RepsGetRepIncompleteTasks (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = RepsGetRepIncompleteTasksWithHttpInfo(repNumber, repModelScheduledFor, repModelScheduledBy, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Rep incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > RepsGetRepIncompleteTasksWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepIncompleteTasks");

            var localVarPath = "/api/reps/{repNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter
            if (repModelScheduledFor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledFor", repModelScheduledFor)); // query parameter
            if (repModelScheduledBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledBy", repModelScheduledBy)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Rep incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> RepsGetRepIncompleteTasksAsync (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await RepsGetRepIncompleteTasksAsyncWithHttpInfo(repNumber, repModelScheduledFor, repModelScheduledBy, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Rep incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> RepsGetRepIncompleteTasksAsyncWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepIncompleteTasks");

            var localVarPath = "/api/reps/{repNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter
            if (repModelScheduledFor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledFor", repModelScheduledFor)); // query parameter
            if (repModelScheduledBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledBy", repModelScheduledBy)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Rep summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>TsiWebRepSummary</returns>
        public TsiWebRepSummary RepsGetRepSummary (int? repNumber)
        {
             ApiResponse<TsiWebRepSummary> localVarResponse = RepsGetRepSummaryWithHttpInfo(repNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Rep summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>ApiResponse of TsiWebRepSummary</returns>
        public ApiResponse< TsiWebRepSummary > RepsGetRepSummaryWithHttpInfo (int? repNumber)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepSummary");

            var localVarPath = "/api/reps/{repNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRepSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRepSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRepSummary)));
        }

        /// <summary>
        /// Gets the Rep summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of TsiWebRepSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebRepSummary> RepsGetRepSummaryAsync (int? repNumber)
        {
             ApiResponse<TsiWebRepSummary> localVarResponse = await RepsGetRepSummaryAsyncWithHttpInfo(repNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Rep summary. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <returns>Task of ApiResponse (TsiWebRepSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebRepSummary>> RepsGetRepSummaryAsyncWithHttpInfo (int? repNumber)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepSummary");

            var localVarPath = "/api/reps/{repNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRepSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRepSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRepSummary)));
        }

        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse RepsGetRepTasks (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = RepsGetRepTasksWithHttpInfo(repNumber, repModelScheduledFor, repModelScheduledBy, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > RepsGetRepTasksWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepTasks");

            var localVarPath = "/api/reps/{repNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter
            if (repModelScheduledFor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledFor", repModelScheduledFor)); // query parameter
            if (repModelScheduledBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledBy", repModelScheduledBy)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> RepsGetRepTasksAsync (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await RepsGetRepTasksAsyncWithHttpInfo(repNumber, repModelScheduledFor, repModelScheduledBy, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Rep tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repNumber">The Rep number.</param>
        /// <param name="repModelScheduledFor"> (optional)</param>
        /// <param name="repModelScheduledBy"> (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> RepsGetRepTasksAsyncWithHttpInfo (int? repNumber, bool? repModelScheduledFor = null, bool? repModelScheduledBy = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'repNumber' is set
            if (repNumber == null)
                throw new ApiException(400, "Missing required parameter 'repNumber' when calling RepsApi->RepsGetRepTasks");

            var localVarPath = "/api/reps/{repNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repNumber != null) localVarPathParams.Add("repNumber", this.Configuration.ApiClient.ParameterToString(repNumber)); // path parameter
            if (repModelScheduledFor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledFor", repModelScheduledFor)); // query parameter
            if (repModelScheduledBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repModel.scheduledBy", repModelScheduledBy)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepsGetRepTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

    }
}
