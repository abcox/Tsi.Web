/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Converts selected time logs to a new labor item on the service order.
        /// </summary>
        /// <remarks>
        /// Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ServiceOrdersConvertTimeLogsToLaborItem (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model);

        /// <summary>
        /// Converts selected time logs to a new labor item on the service order.
        /// </summary>
        /// <remarks>
        /// Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ServiceOrdersConvertTimeLogsToLaborItemWithHttpInfo (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model);
        /// <summary>
        /// Creates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderExpensesResponse</returns>
        TsiWebServiceOrderExpensesResponse ServiceOrdersCreateExpense (int? serviceOrderNumber, TsiWebExpenseModel model);

        /// <summary>
        /// Creates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpensesResponse</returns>
        ApiResponse<TsiWebServiceOrderExpensesResponse> ServiceOrdersCreateExpenseWithHttpInfo (int? serviceOrderNumber, TsiWebExpenseModel model);
        /// <summary>
        /// Creates a managed print service order based on a device id.
        /// </summary>
        /// <remarks>
        /// Used by managed print providers to create a service order for a metered device
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        TsiWebServiceOrderResponse ServiceOrdersCreateManagedPrintServiceOrder (TsiWebCreateManagedPrintServiceOrderModel model);

        /// <summary>
        /// Creates a managed print service order based on a device id.
        /// </summary>
        /// <remarks>
        /// Used by managed print providers to create a service order for a metered device
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        ApiResponse<TsiWebServiceOrderResponse> ServiceOrdersCreateManagedPrintServiceOrderWithHttpInfo (TsiWebCreateManagedPrintServiceOrderModel model);
        /// <summary>
        /// Creates recurring service orders schedules.
        /// </summary>
        /// <remarks>
        /// The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebCreateRecurringServiceOrderScheduleResponse</returns>
        TsiWebCreateRecurringServiceOrderScheduleResponse ServiceOrdersCreateRecurringServiceOrderSchedule (TsiWebCreateRecurringServiceOrderScheduleModel model);

        /// <summary>
        /// Creates recurring service orders schedules.
        /// </summary>
        /// <remarks>
        /// The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebCreateRecurringServiceOrderScheduleResponse</returns>
        ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse> ServiceOrdersCreateRecurringServiceOrderScheduleWithHttpInfo (TsiWebCreateRecurringServiceOrderScheduleModel model);
        /// <summary>
        /// Creates a service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        TsiWebServiceOrderResponse ServiceOrdersCreateServiceOrder (TsiWebCreateServiceOrderModel model);

        /// <summary>
        /// Creates a service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        ApiResponse<TsiWebServiceOrderResponse> ServiceOrdersCreateServiceOrderWithHttpInfo (TsiWebCreateServiceOrderModel model);
        /// <summary>
        /// Creates an item serviced.
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderItemServicedResponse</returns>
        TsiWebServiceOrderItemServicedResponse ServiceOrdersCreateServiceOrderItemServiced (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model);

        /// <summary>
        /// Creates an item serviced.
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemServicedResponse</returns>
        ApiResponse<TsiWebServiceOrderItemServicedResponse> ServiceOrdersCreateServiceOrderItemServicedWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model);
        /// <summary>
        /// Creates a non stock item for a service order.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        TsiWebServiceOrderPartsUsedResponse ServiceOrdersCreateServiceOrderNonStockPartsUsed (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model);

        /// <summary>
        /// Creates a non stock item for a service order.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersCreateServiceOrderNonStockPartsUsedWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model);
        /// <summary>
        /// Creates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderNoteResponse</returns>
        TsiWebServiceOrderNoteResponse ServiceOrdersCreateServiceOrderNote (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model);

        /// <summary>
        /// Creates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderNoteResponse</returns>
        ApiResponse<TsiWebServiceOrderNoteResponse> ServiceOrdersCreateServiceOrderNoteWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model);
        /// <summary>
        /// Creates the service order parts used item.
        /// </summary>
        /// <remarks>
        /// The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        TsiWebServiceOrderPartsUsedResponse ServiceOrdersCreateServiceOrderPartsUsed (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model);

        /// <summary>
        /// Creates the service order parts used item.
        /// </summary>
        /// <remarks>
        /// The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersCreateServiceOrderPartsUsedWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model);
        /// <summary>
        /// Creates a line item comment for the service order,
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartUsedResponse</returns>
        TsiWebServiceOrderPartUsedResponse ServiceOrdersCreateServiceOrderPartsUsedComment (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model);

        /// <summary>
        /// Creates a line item comment for the service order,
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartUsedResponse> ServiceOrdersCreateServiceOrderPartsUsedCommentWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model);
        /// <summary>
        /// Creates a resolution on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>TsiWebServiceOrderResolutionResponse</returns>
        TsiWebServiceOrderResolutionResponse ServiceOrdersCreateServiceOrderResolution (int? serviceOrderNumber, string resolution);

        /// <summary>
        /// Creates a resolution on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResolutionResponse</returns>
        ApiResponse<TsiWebServiceOrderResolutionResponse> ServiceOrdersCreateServiceOrderResolutionWithHttpInfo (int? serviceOrderNumber, string resolution);
        /// <summary>
        /// Creates a symptom on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>TsiWebServiceOrderSymptomResponse</returns>
        TsiWebServiceOrderSymptomResponse ServiceOrdersCreateServiceOrderSymptom (int? serviceOrderNumber, string symptom);

        /// <summary>
        /// Creates a symptom on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderSymptomResponse</returns>
        ApiResponse<TsiWebServiceOrderSymptomResponse> ServiceOrdersCreateServiceOrderSymptomWithHttpInfo (int? serviceOrderNumber, string symptom);
        /// <summary>
        /// Creates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>TsiWebServiceOrderTimeLogResponse</returns>
        TsiWebServiceOrderTimeLogResponse ServiceOrdersCreateServiceOrderTimeLog (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model);

        /// <summary>
        /// Creates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogResponse</returns>
        ApiResponse<TsiWebServiceOrderTimeLogResponse> ServiceOrdersCreateServiceOrderTimeLogWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model);
        /// <summary>
        /// Deletes a part used on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        TsiWebServiceOrderPartsUsedResponse ServiceOrdersDeleteServiceOrderPartsUsed (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model);

        /// <summary>
        /// Deletes a part used on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersDeleteServiceOrderPartsUsedWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model);
        /// <summary>
        /// Deletes a profile from the service order.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>TsiWebResponse</returns>
        TsiWebResponse ServiceOrdersDeleteServiceOrderProfile (int? serviceOrderNumber, string id);

        /// <summary>
        /// Deletes a profile from the service order.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        ApiResponse<TsiWebResponse> ServiceOrdersDeleteServiceOrderProfileWithHttpInfo (int? serviceOrderNumber, string id);
        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>TsiWebServiceOrderResolutionResponse</returns>
        TsiWebServiceOrderResolutionResponse ServiceOrdersDeleteServiceOrderResolution (int? serviceOrderNumber, int? resolutionIndex);

        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResolutionResponse</returns>
        ApiResponse<TsiWebServiceOrderResolutionResponse> ServiceOrdersDeleteServiceOrderResolutionWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex);
        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>TsiWebServiceOrderSymptomResponse</returns>
        TsiWebServiceOrderSymptomResponse ServiceOrdersDeleteServiceOrderSymptom (int? serviceOrderNumber, int? symptomIndex);

        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderSymptomResponse</returns>
        ApiResponse<TsiWebServiceOrderSymptomResponse> ServiceOrdersDeleteServiceOrderSymptomWithHttpInfo (int? serviceOrderNumber, int? symptomIndex);
        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        TsiWebServiceOrderExpenseSearchResponse ServiceOrdersExpenseAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        ApiResponse<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersExpenseAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Gets the recurring service order schedules for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebRecurringServiceOrderSchedulesResponse</returns>
        TsiWebRecurringServiceOrderSchedulesResponse ServiceOrdersGetAccountRecurringServiceOrderSchedules (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the recurring service order schedules for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebRecurringServiceOrderSchedulesResponse</returns>
        ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse> ServiceOrdersGetAccountRecurringServiceOrderSchedulesWithHttpInfo (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersGetAccountServiceOrders (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersGetAccountServiceOrdersWithHttpInfo (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersGetAccountServiceOrders_0 (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersGetAccountServiceOrders_0WithHttpInfo (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> ServiceOrdersGetCustomFields (int? serviceOrderNumber);

        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> ServiceOrdersGetCustomFieldsWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets a single recurring service order schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>TsiWebRecurringServiceOrderSchedule</returns>
        TsiWebRecurringServiceOrderSchedule ServiceOrdersGetRecurringServiceOrderSchedule (int? recurringServiceOrderScheduleId);

        /// <summary>
        /// Gets a single recurring service order schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>ApiResponse of TsiWebRecurringServiceOrderSchedule</returns>
        ApiResponse<TsiWebRecurringServiceOrderSchedule> ServiceOrdersGetRecurringServiceOrderScheduleWithHttpInfo (int? recurringServiceOrderScheduleId);
        /// <summary>
        /// Gets the service order assigned technicians.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>List&lt;TsiWebServiceOrderAssignedTech&gt;</returns>
        List<TsiWebServiceOrderAssignedTech> ServiceOrdersGetServiceOrderAssignedTechs (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order assigned technicians.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderAssignedTech&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderAssignedTech>> ServiceOrdersGetServiceOrderAssignedTechsWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order details by external ticket identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>TsiWebServiceOrderDetail</returns>
        TsiWebServiceOrderDetail ServiceOrdersGetServiceOrderByExternalTicket (string externalTicketId);

        /// <summary>
        /// Gets the service order details by external ticket identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderDetail</returns>
        ApiResponse<TsiWebServiceOrderDetail> ServiceOrdersGetServiceOrderByExternalTicketWithHttpInfo (string externalTicketId);
        /// <summary>
        /// Gets the service order completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ServiceOrdersGetServiceOrderCompletedTasks (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ServiceOrdersGetServiceOrderCompletedTasksWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order details.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>TsiWebServiceOrderDetail</returns>
        TsiWebServiceOrderDetail ServiceOrdersGetServiceOrderDetail (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order details.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderDetail</returns>
        ApiResponse<TsiWebServiceOrderDetail> ServiceOrdersGetServiceOrderDetailWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets a single service orde expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>TsiWebServiceOrderExpense</returns>
        TsiWebServiceOrderExpense ServiceOrdersGetServiceOrderExpense (int? serviceOrderNumber, int? serviceOrderExpenseNumber);

        /// <summary>
        /// Gets a single service orde expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpense</returns>
        ApiResponse<TsiWebServiceOrderExpense> ServiceOrdersGetServiceOrderExpenseWithHttpInfo (int? serviceOrderNumber, int? serviceOrderExpenseNumber);
        /// <summary>
        /// Gets the service order expenses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>List&lt;TsiWebServiceOrderExpense&gt;</returns>
        List<TsiWebServiceOrderExpense> ServiceOrdersGetServiceOrderExpenses (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order expenses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderExpense&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderExpense>> ServiceOrdersGetServiceOrderExpensesWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ServiceOrdersGetServiceOrderIncompleteTasks (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ServiceOrdersGetServiceOrderIncompleteTasksWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>TsiWebServiceOrderItemServicedResponse</returns>
        TsiWebServiceOrderItemServicedResponse ServiceOrdersGetServiceOrderItemServiced (int? serviceOrderNumber, int? itemServicedNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemServicedResponse</returns>
        ApiResponse<TsiWebServiceOrderItemServicedResponse> ServiceOrdersGetServiceOrderItemServicedWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber);
        /// <summary>
        /// Gets the service order items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderItemsServicedResponse</returns>
        TsiWebServiceOrderItemsServicedResponse ServiceOrdersGetServiceOrderItemsServiced (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemsServicedResponse</returns>
        ApiResponse<TsiWebServiceOrderItemsServicedResponse> ServiceOrdersGetServiceOrderItemsServicedWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderNotesResponse</returns>
        TsiWebServiceOrderNotesResponse ServiceOrdersGetServiceOrderNotes (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderNotesResponse</returns>
        ApiResponse<TsiWebServiceOrderNotesResponse> ServiceOrdersGetServiceOrderNotesWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order parts used.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        TsiWebServiceOrderPartsUsedResponse ServiceOrdersGetServiceOrderParts (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order parts used.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersGetServiceOrderPartsWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        TsiWebAssignedMarketingProfilesResponse ServiceOrdersGetServiceOrderProfiles (int? serviceOrderNumber);

        /// <summary>
        /// Gets the Service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        ApiResponse<TsiWebAssignedMarketingProfilesResponse> ServiceOrdersGetServiceOrderProfilesWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order quotes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>List&lt;TsiWebServiceOrderQuote&gt;</returns>
        List<TsiWebServiceOrderQuote> ServiceOrdersGetServiceOrderQuotes (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order quotes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderQuote&gt;</returns>
        ApiResponse<List<TsiWebServiceOrderQuote>> ServiceOrdersGetServiceOrderQuotesWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order subcontractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderSubContractorsResponse</returns>
        TsiWebServiceOrderSubContractorsResponse ServiceOrdersGetServiceOrderSubContractors (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order subcontractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderSubContractorsResponse</returns>
        ApiResponse<TsiWebServiceOrderSubContractorsResponse> ServiceOrdersGetServiceOrderSubContractorsWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order summary.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>TsiWebServiceOrderSummary</returns>
        TsiWebServiceOrderSummary ServiceOrdersGetServiceOrderSummary (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order summary.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderSummary</returns>
        ApiResponse<TsiWebServiceOrderSummary> ServiceOrdersGetServiceOrderSummaryWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse ServiceOrdersGetServiceOrderTasks (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> ServiceOrdersGetServiceOrderTasksWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order time logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderTimeLogsResponse</returns>
        TsiWebServiceOrderTimeLogsResponse ServiceOrdersGetServiceOrderTimeLogs (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order time logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogsResponse</returns>
        ApiResponse<TsiWebServiceOrderTimeLogsResponse> ServiceOrdersGetServiceOrderTimeLogsWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order time logs based on the log ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>TsiWebServiceOrderTimeLogsResponse</returns>
        TsiWebServiceOrderTimeLogsResponse ServiceOrdersGetServiceOrderTimeLogsByLogNumber (int? serviceOrderNumber, int? timeLogNumber);

        /// <summary>
        /// Gets the service order time logs based on the log ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogsResponse</returns>
        ApiResponse<TsiWebServiceOrderTimeLogsResponse> ServiceOrdersGetServiceOrderTimeLogsByLogNumberWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber);
        /// <summary>
        /// Search service orders using an agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByAgreementNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using an agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByAgreementNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Service Orders using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Service Orders using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByCustomerPurchaseOrder (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByCustomerPurchaseOrderWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using an external product name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByExternalProduct (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using an external product name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByExternalProductWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using invoice number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByInvoiceNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using invoice number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByInvoiceNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByItemServiced (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByItemServicedWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using reference value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByReference (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using reference value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByReferenceWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using service order number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        TsiWebSearchServiceOrderResponse ServiceOrdersSearchByServiceOrderNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using service order number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        ApiResponse<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByServiceOrderNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using an acceptanc estatus.
        /// </summary>
        /// <remarks>
        /// Valid criteria is an integer to specify the rep requested.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByAcceptanceStatus (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using an acceptanc estatus.
        /// </summary>
        /// <remarks>
        /// Valid criteria is an integer to specify the rep requested.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        ApiResponse<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByAcceptanceStatusWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using an expense date.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByExpenseDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using an expense date.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        ApiResponse<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByExpenseDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using an expense type.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a string with the expense type description or an integer expense type number.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByExpenseType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using an expense type.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a string with the expense type description or an integer expense type number.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        ApiResponse<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByExpenseTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using a technician name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByTechnician (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using a technician name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        ApiResponse<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByTechnicianWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Assigns a profile to a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        TsiWebAssignedMarketingProfilesResponse ServiceOrdersSetServiceOrderProfile (int? serviceOrderNumber, string profile);

        /// <summary>
        /// Assigns a profile to a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        ApiResponse<TsiWebAssignedMarketingProfilesResponse> ServiceOrdersSetServiceOrderProfileWithHttpInfo (int? serviceOrderNumber, string profile);
        /// <summary>
        /// Advanced search for service orders time logs.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchTimeLogResponse</returns>
        TsiWebSearchTimeLogResponse ServiceOrdersTimeLogAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for service orders time logs.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchTimeLogResponse</returns>
        ApiResponse<TsiWebSearchTimeLogResponse> ServiceOrdersTimeLogAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        TsiWebCustomFieldsResponse ServiceOrdersUpdateCustomFields (int? serviceOrderNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        ApiResponse<TsiWebCustomFieldsResponse> ServiceOrdersUpdateCustomFieldsWithHttpInfo (int? serviceOrderNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderExpensesResponse</returns>
        TsiWebServiceOrderExpensesResponse ServiceOrdersUpdateExpense (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model);

        /// <summary>
        /// Updates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpensesResponse</returns>
        ApiResponse<TsiWebServiceOrderExpensesResponse> ServiceOrdersUpdateExpenseWithHttpInfo (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        TsiWebServiceOrderResponse ServiceOrdersUpdateManagedServiceOrder (TsiWebUpdateManagedServiceOrderModel model);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        ApiResponse<TsiWebServiceOrderResponse> ServiceOrdersUpdateManagedServiceOrderWithHttpInfo (TsiWebUpdateManagedServiceOrderModel model);
        /// <summary>
        /// Updates the service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        TsiWebServiceOrderResponse ServiceOrdersUpdateServiceOrder (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model);

        /// <summary>
        /// Updates the service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        ApiResponse<TsiWebServiceOrderResponse> ServiceOrdersUpdateServiceOrderWithHttpInfo (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model);
        /// <summary>
        /// Updates the item serviced
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderItemServicedResponse</returns>
        TsiWebServiceOrderItemServicedResponse ServiceOrdersUpdateServiceOrderItemServiced (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model);

        /// <summary>
        /// Updates the item serviced
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemServicedResponse</returns>
        ApiResponse<TsiWebServiceOrderItemServicedResponse> ServiceOrdersUpdateServiceOrderItemServicedWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model);
        /// <summary>
        /// Updates a non-stock part.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        TsiWebServiceOrderPartsUsedResponse ServiceOrdersUpdateServiceOrderNonStockPartsUsed (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model);

        /// <summary>
        /// Updates a non-stock part.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersUpdateServiceOrderNonStockPartsUsedWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model);
        /// <summary>
        /// Updates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderNoteResponse</returns>
        TsiWebServiceOrderNoteResponse ServiceOrdersUpdateServiceOrderNote (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model);

        /// <summary>
        /// Updates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderNoteResponse</returns>
        ApiResponse<TsiWebServiceOrderNoteResponse> ServiceOrdersUpdateServiceOrderNoteWithHttpInfo (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model);
        /// <summary>
        /// Updates a part on a service order.
        /// </summary>
        /// <remarks>
        /// The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        TsiWebServiceOrderPartsUsedResponse ServiceOrdersUpdateServiceOrderPartsUsed (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model);

        /// <summary>
        /// Updates a part on a service order.
        /// </summary>
        /// <remarks>
        /// The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model);
        /// <summary>
        /// Updates the assembly detail for a service order part
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartUsedResponse</returns>
        TsiWebServiceOrderPartUsedResponse ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model);

        /// <summary>
        /// Updates the assembly detail for a service order part
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model);
        /// <summary>
        /// Updates a line item comment for the service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartUsedResponse</returns>
        TsiWebServiceOrderPartUsedResponse ServiceOrdersUpdateServiceOrderPartsUsedComment (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model);

        /// <summary>
        /// Updates a line item comment for the service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartUsedResponse</returns>
        ApiResponse<TsiWebServiceOrderPartUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedCommentWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model);
        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>TsiWebServiceOrderResolutionResponse</returns>
        TsiWebServiceOrderResolutionResponse ServiceOrdersUpdateServiceOrderResolution (int? serviceOrderNumber, int? resolutionIndex, string resolution);

        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResolutionResponse</returns>
        ApiResponse<TsiWebServiceOrderResolutionResponse> ServiceOrdersUpdateServiceOrderResolutionWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex, string resolution);
        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>TsiWebServiceOrderSymptomResponse</returns>
        TsiWebServiceOrderSymptomResponse ServiceOrdersUpdateServiceOrderSymptom (int? serviceOrderNumber, int? symptomIndex, string symptom);

        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderSymptomResponse</returns>
        ApiResponse<TsiWebServiceOrderSymptomResponse> ServiceOrdersUpdateServiceOrderSymptomWithHttpInfo (int? serviceOrderNumber, int? symptomIndex, string symptom);
        /// <summary>
        /// Updates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>TsiWebServiceOrderTimeLogResponse</returns>
        TsiWebServiceOrderTimeLogResponse ServiceOrdersUpdateServiceOrderTimeLog (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model);

        /// <summary>
        /// Updates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogResponse</returns>
        ApiResponse<TsiWebServiceOrderTimeLogResponse> ServiceOrdersUpdateServiceOrderTimeLogWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Converts selected time logs to a new labor item on the service order.
        /// </summary>
        /// <remarks>
        /// Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ServiceOrdersConvertTimeLogsToLaborItemAsync (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model);

        /// <summary>
        /// Converts selected time logs to a new labor item on the service order.
        /// </summary>
        /// <remarks>
        /// Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ServiceOrdersConvertTimeLogsToLaborItemAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model);
        /// <summary>
        /// Creates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderExpensesResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpensesResponse> ServiceOrdersCreateExpenseAsync (int? serviceOrderNumber, TsiWebExpenseModel model);

        /// <summary>
        /// Creates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpensesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpensesResponse>> ServiceOrdersCreateExpenseAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebExpenseModel model);
        /// <summary>
        /// Creates a managed print service order based on a device id.
        /// </summary>
        /// <remarks>
        /// Used by managed print providers to create a service order for a metered device
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersCreateManagedPrintServiceOrderAsync (TsiWebCreateManagedPrintServiceOrderModel model);

        /// <summary>
        /// Creates a managed print service order based on a device id.
        /// </summary>
        /// <remarks>
        /// Used by managed print providers to create a service order for a metered device
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersCreateManagedPrintServiceOrderAsyncWithHttpInfo (TsiWebCreateManagedPrintServiceOrderModel model);
        /// <summary>
        /// Creates recurring service orders schedules.
        /// </summary>
        /// <remarks>
        /// The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebCreateRecurringServiceOrderScheduleResponse</returns>
        System.Threading.Tasks.Task<TsiWebCreateRecurringServiceOrderScheduleResponse> ServiceOrdersCreateRecurringServiceOrderScheduleAsync (TsiWebCreateRecurringServiceOrderScheduleModel model);

        /// <summary>
        /// Creates recurring service orders schedules.
        /// </summary>
        /// <remarks>
        /// The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebCreateRecurringServiceOrderScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse>> ServiceOrdersCreateRecurringServiceOrderScheduleAsyncWithHttpInfo (TsiWebCreateRecurringServiceOrderScheduleModel model);
        /// <summary>
        /// Creates a service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersCreateServiceOrderAsync (TsiWebCreateServiceOrderModel model);

        /// <summary>
        /// Creates a service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersCreateServiceOrderAsyncWithHttpInfo (TsiWebCreateServiceOrderModel model);
        /// <summary>
        /// Creates an item serviced.
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderItemServicedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderItemServicedResponse> ServiceOrdersCreateServiceOrderItemServicedAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model);

        /// <summary>
        /// Creates an item serviced.
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemServicedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemServicedResponse>> ServiceOrdersCreateServiceOrderItemServicedAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model);
        /// <summary>
        /// Creates a non stock item for a service order.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersCreateServiceOrderNonStockPartsUsedAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model);

        /// <summary>
        /// Creates a non stock item for a service order.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersCreateServiceOrderNonStockPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model);
        /// <summary>
        /// Creates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderNoteResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderNoteResponse> ServiceOrdersCreateServiceOrderNoteAsync (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model);

        /// <summary>
        /// Creates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderNoteResponse>> ServiceOrdersCreateServiceOrderNoteAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model);
        /// <summary>
        /// Creates the service order parts used item.
        /// </summary>
        /// <remarks>
        /// The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersCreateServiceOrderPartsUsedAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model);

        /// <summary>
        /// Creates the service order parts used item.
        /// </summary>
        /// <remarks>
        /// The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersCreateServiceOrderPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model);
        /// <summary>
        /// Creates a line item comment for the service order,
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartUsedResponse> ServiceOrdersCreateServiceOrderPartsUsedCommentAsync (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model);

        /// <summary>
        /// Creates a line item comment for the service order,
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartUsedResponse>> ServiceOrdersCreateServiceOrderPartsUsedCommentAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model);
        /// <summary>
        /// Creates a resolution on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of TsiWebServiceOrderResolutionResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResolutionResponse> ServiceOrdersCreateServiceOrderResolutionAsync (int? serviceOrderNumber, string resolution);

        /// <summary>
        /// Creates a resolution on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResolutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResolutionResponse>> ServiceOrdersCreateServiceOrderResolutionAsyncWithHttpInfo (int? serviceOrderNumber, string resolution);
        /// <summary>
        /// Creates a symptom on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of TsiWebServiceOrderSymptomResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderSymptomResponse> ServiceOrdersCreateServiceOrderSymptomAsync (int? serviceOrderNumber, string symptom);

        /// <summary>
        /// Creates a symptom on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSymptomResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSymptomResponse>> ServiceOrdersCreateServiceOrderSymptomAsyncWithHttpInfo (int? serviceOrderNumber, string symptom);
        /// <summary>
        /// Creates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogResponse> ServiceOrdersCreateServiceOrderTimeLogAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model);

        /// <summary>
        /// Creates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogResponse>> ServiceOrdersCreateServiceOrderTimeLogAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model);
        /// <summary>
        /// Deletes a part used on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersDeleteServiceOrderPartsUsedAsync (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model);

        /// <summary>
        /// Deletes a part used on a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersDeleteServiceOrderPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model);
        /// <summary>
        /// Deletes a profile from the service order.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of TsiWebResponse</returns>
        System.Threading.Tasks.Task<TsiWebResponse> ServiceOrdersDeleteServiceOrderProfileAsync (int? serviceOrderNumber, string id);

        /// <summary>
        /// Deletes a profile from the service order.
        /// </summary>
        /// <remarks>
        /// The profile must be url encoded
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ServiceOrdersDeleteServiceOrderProfileAsyncWithHttpInfo (int? serviceOrderNumber, string id);
        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>Task of TsiWebServiceOrderResolutionResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResolutionResponse> ServiceOrdersDeleteServiceOrderResolutionAsync (int? serviceOrderNumber, int? resolutionIndex);

        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResolutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResolutionResponse>> ServiceOrdersDeleteServiceOrderResolutionAsyncWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex);
        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>Task of TsiWebServiceOrderSymptomResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderSymptomResponse> ServiceOrdersDeleteServiceOrderSymptomAsync (int? serviceOrderNumber, int? symptomIndex);

        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSymptomResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSymptomResponse>> ServiceOrdersDeleteServiceOrderSymptomAsyncWithHttpInfo (int? serviceOrderNumber, int? symptomIndex);
        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersExpenseAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for service orders.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersExpenseAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Gets the recurring service order schedules for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebRecurringServiceOrderSchedulesResponse</returns>
        System.Threading.Tasks.Task<TsiWebRecurringServiceOrderSchedulesResponse> ServiceOrdersGetAccountRecurringServiceOrderSchedulesAsync (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the recurring service order schedules for an account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebRecurringServiceOrderSchedulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse>> ServiceOrdersGetAccountRecurringServiceOrderSchedulesAsyncWithHttpInfo (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersGetAccountServiceOrdersAsync (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersGetAccountServiceOrdersAsyncWithHttpInfo (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersGetAccountServiceOrders_0Async (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the account service orders.
        /// </summary>
        /// <remarks>
        /// Voided Service Orders are excluded by default.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersGetAccountServiceOrders_0AsyncWithHttpInfo (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> ServiceOrdersGetCustomFieldsAsync (int? serviceOrderNumber);

        /// <summary>
        /// Gets the custom fields for the account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> ServiceOrdersGetCustomFieldsAsyncWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets a single recurring service order schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>Task of TsiWebRecurringServiceOrderSchedule</returns>
        System.Threading.Tasks.Task<TsiWebRecurringServiceOrderSchedule> ServiceOrdersGetRecurringServiceOrderScheduleAsync (int? recurringServiceOrderScheduleId);

        /// <summary>
        /// Gets a single recurring service order schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>Task of ApiResponse (TsiWebRecurringServiceOrderSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebRecurringServiceOrderSchedule>> ServiceOrdersGetRecurringServiceOrderScheduleAsyncWithHttpInfo (int? recurringServiceOrderScheduleId);
        /// <summary>
        /// Gets the service order assigned technicians.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderAssignedTech&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderAssignedTech>> ServiceOrdersGetServiceOrderAssignedTechsAsync (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order assigned technicians.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderAssignedTech&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderAssignedTech>>> ServiceOrdersGetServiceOrderAssignedTechsAsyncWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order details by external ticket identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>Task of TsiWebServiceOrderDetail</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderDetail> ServiceOrdersGetServiceOrderByExternalTicketAsync (string externalTicketId);

        /// <summary>
        /// Gets the service order details by external ticket identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderDetail>> ServiceOrdersGetServiceOrderByExternalTicketAsyncWithHttpInfo (string externalTicketId);
        /// <summary>
        /// Gets the service order completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ServiceOrdersGetServiceOrderCompletedTasksAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order completed tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ServiceOrdersGetServiceOrderCompletedTasksAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order details.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of TsiWebServiceOrderDetail</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderDetail> ServiceOrdersGetServiceOrderDetailAsync (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order details.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderDetail>> ServiceOrdersGetServiceOrderDetailAsyncWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets a single service orde expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>Task of TsiWebServiceOrderExpense</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpense> ServiceOrdersGetServiceOrderExpenseAsync (int? serviceOrderNumber, int? serviceOrderExpenseNumber);

        /// <summary>
        /// Gets a single service orde expense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpense)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpense>> ServiceOrdersGetServiceOrderExpenseAsyncWithHttpInfo (int? serviceOrderNumber, int? serviceOrderExpenseNumber);
        /// <summary>
        /// Gets the service order expenses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderExpense&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderExpense>> ServiceOrdersGetServiceOrderExpensesAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order expenses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderExpense&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderExpense>>> ServiceOrdersGetServiceOrderExpensesAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ServiceOrdersGetServiceOrderIncompleteTasksAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ServiceOrdersGetServiceOrderIncompleteTasksAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>Task of TsiWebServiceOrderItemServicedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderItemServicedResponse> ServiceOrdersGetServiceOrderItemServicedAsync (int? serviceOrderNumber, int? itemServicedNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemServicedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemServicedResponse>> ServiceOrdersGetServiceOrderItemServicedAsyncWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber);
        /// <summary>
        /// Gets the service order items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderItemsServicedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderItemsServicedResponse> ServiceOrdersGetServiceOrderItemsServicedAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemsServicedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemsServicedResponse>> ServiceOrdersGetServiceOrderItemsServicedAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderNotesResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderNotesResponse> ServiceOrdersGetServiceOrderNotesAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderNotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderNotesResponse>> ServiceOrdersGetServiceOrderNotesAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order parts used.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersGetServiceOrderPartsAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order parts used.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersGetServiceOrderPartsAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the Service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> ServiceOrdersGetServiceOrderProfilesAsync (int? serviceOrderNumber);

        /// <summary>
        /// Gets the Service order profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> ServiceOrdersGetServiceOrderProfilesAsyncWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order quotes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderQuote&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebServiceOrderQuote>> ServiceOrdersGetServiceOrderQuotesAsync (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order quotes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderQuote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderQuote>>> ServiceOrdersGetServiceOrderQuotesAsyncWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order subcontractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderSubContractorsResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderSubContractorsResponse> ServiceOrdersGetServiceOrderSubContractorsAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order subcontractors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSubContractorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSubContractorsResponse>> ServiceOrdersGetServiceOrderSubContractorsAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order summary.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of TsiWebServiceOrderSummary</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderSummary> ServiceOrdersGetServiceOrderSummaryAsync (int? serviceOrderNumber);

        /// <summary>
        /// Gets the service order summary.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSummary>> ServiceOrdersGetServiceOrderSummaryAsyncWithHttpInfo (int? serviceOrderNumber);
        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> ServiceOrdersGetServiceOrderTasksAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ServiceOrdersGetServiceOrderTasksAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order time logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogsResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogsResponse> ServiceOrdersGetServiceOrderTimeLogsAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Gets the service order time logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogsResponse>> ServiceOrdersGetServiceOrderTimeLogsAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Gets the service order time logs based on the log ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogsResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogsResponse> ServiceOrdersGetServiceOrderTimeLogsByLogNumberAsync (int? serviceOrderNumber, int? timeLogNumber);

        /// <summary>
        /// Gets the service order time logs based on the log ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogsResponse>> ServiceOrdersGetServiceOrderTimeLogsByLogNumberAsyncWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber);
        /// <summary>
        /// Search service orders using an agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByAgreementNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using an agreement number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByAgreementNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search Service Orders using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search Service Orders using a custom category and field label.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByCustomerPurchaseOrderAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using customer purchase order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByCustomerPurchaseOrderAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using an external product name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByExternalProductAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using an external product name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByExternalProductAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using invoice number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByInvoiceNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using invoice number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByInvoiceNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByItemServicedAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using items serviced.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByItemServicedAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using reference value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByReferenceAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using reference value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByReferenceAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search service orders using service order number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByServiceOrderNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search service orders using service order number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByServiceOrderNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using an acceptanc estatus.
        /// </summary>
        /// <remarks>
        /// Valid criteria is an integer to specify the rep requested.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByAcceptanceStatusAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using an acceptanc estatus.
        /// </summary>
        /// <remarks>
        /// Valid criteria is an integer to specify the rep requested.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByAcceptanceStatusAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using an expense date.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByExpenseDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using an expense date.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByExpenseDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using an expense type.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a string with the expense type description or an integer expense type number.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByExpenseTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using an expense type.
        /// </summary>
        /// <remarks>
        /// Valid criteria is a string with the expense type description or an integer expense type number.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByExpenseTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search expenses using a technician name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByTechnicianAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search expenses using a technician name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByTechnicianAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Assigns a profile to a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> ServiceOrdersSetServiceOrderProfileAsync (int? serviceOrderNumber, string profile);

        /// <summary>
        /// Assigns a profile to a service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> ServiceOrdersSetServiceOrderProfileAsyncWithHttpInfo (int? serviceOrderNumber, string profile);
        /// <summary>
        /// Advanced search for service orders time logs.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchTimeLogResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTimeLogResponse> ServiceOrdersTimeLogAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for service orders time logs.
        /// </summary>
        /// <remarks>
        /// Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTimeLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTimeLogResponse>> ServiceOrdersTimeLogAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> ServiceOrdersUpdateCustomFieldsAsync (int? serviceOrderNumber, List<TsiWebCustomField> customFields);

        /// <summary>
        /// Updates account custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> ServiceOrdersUpdateCustomFieldsAsyncWithHttpInfo (int? serviceOrderNumber, List<TsiWebCustomField> customFields);
        /// <summary>
        /// Updates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderExpensesResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderExpensesResponse> ServiceOrdersUpdateExpenseAsync (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model);

        /// <summary>
        /// Updates an expense.
        /// </summary>
        /// <remarks>
        /// The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpensesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpensesResponse>> ServiceOrdersUpdateExpenseAsyncWithHttpInfo (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersUpdateManagedServiceOrderAsync (TsiWebUpdateManagedServiceOrderModel model);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersUpdateManagedServiceOrderAsyncWithHttpInfo (TsiWebUpdateManagedServiceOrderModel model);
        /// <summary>
        /// Updates the service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersUpdateServiceOrderAsync (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model);

        /// <summary>
        /// Updates the service order.
        /// </summary>
        /// <remarks>
        /// DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersUpdateServiceOrderAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model);
        /// <summary>
        /// Updates the item serviced
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderItemServicedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderItemServicedResponse> ServiceOrdersUpdateServiceOrderItemServicedAsync (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model);

        /// <summary>
        /// Updates the item serviced
        /// </summary>
        /// <remarks>
        /// The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemServicedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemServicedResponse>> ServiceOrdersUpdateServiceOrderItemServicedAsyncWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model);
        /// <summary>
        /// Updates a non-stock part.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersUpdateServiceOrderNonStockPartsUsedAsync (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model);

        /// <summary>
        /// Updates a non-stock part.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersUpdateServiceOrderNonStockPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model);
        /// <summary>
        /// Updates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderNoteResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderNoteResponse> ServiceOrdersUpdateServiceOrderNoteAsync (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model);

        /// <summary>
        /// Updates a service order note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderNoteResponse>> ServiceOrdersUpdateServiceOrderNoteAsyncWithHttpInfo (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model);
        /// <summary>
        /// Updates a part on a service order.
        /// </summary>
        /// <remarks>
        /// The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedAsync (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model);

        /// <summary>
        /// Updates a part on a service order.
        /// </summary>
        /// <remarks>
        /// The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersUpdateServiceOrderPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model);
        /// <summary>
        /// Updates the assembly detail for a service order part
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailAsync (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model);

        /// <summary>
        /// Updates the assembly detail for a service order part
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartUsedResponse>> ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailAsyncWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model);
        /// <summary>
        /// Updates a line item comment for the service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartUsedResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderPartUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedCommentAsync (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model);

        /// <summary>
        /// Updates a line item comment for the service order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartUsedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartUsedResponse>> ServiceOrdersUpdateServiceOrderPartsUsedCommentAsyncWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model);
        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of TsiWebServiceOrderResolutionResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderResolutionResponse> ServiceOrdersUpdateServiceOrderResolutionAsync (int? serviceOrderNumber, int? resolutionIndex, string resolution);

        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResolutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResolutionResponse>> ServiceOrdersUpdateServiceOrderResolutionAsyncWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex, string resolution);
        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of TsiWebServiceOrderSymptomResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderSymptomResponse> ServiceOrdersUpdateServiceOrderSymptomAsync (int? serviceOrderNumber, int? symptomIndex, string symptom);

        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSymptomResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSymptomResponse>> ServiceOrdersUpdateServiceOrderSymptomAsyncWithHttpInfo (int? serviceOrderNumber, int? symptomIndex, string symptom);
        /// <summary>
        /// Updates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogResponse</returns>
        System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogResponse> ServiceOrdersUpdateServiceOrderTimeLogAsync (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model);

        /// <summary>
        /// Updates a service order time log.
        /// </summary>
        /// <remarks>
        /// Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogResponse>> ServiceOrdersUpdateServiceOrderTimeLogAsyncWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceOrdersApi : IServiceOrdersApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceOrdersApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceOrdersApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for service orders. When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for service orders. When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ServiceOrdersApi->ServiceOrdersAdvancedSearch");

            var localVarPath = "/api/serviceorders/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Advanced search for service orders. When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for service orders. When searching by External Ticket only one External Product may be specified and you must use the entire product name in the Criteria.  &lt;p&gt;Valid SearchType &#x3D; ServiceOrderNumber, Reference, InvoiceNumber, ItemID, AgreementNumber, CustomerPurchaseOrder, ExternalProduct, ExternalTicket, AccountNumber, Status, Type, Profile,Resolution,Symptom, or CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;&lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ServiceOrdersApi->ServiceOrdersAdvancedSearch");

            var localVarPath = "/api/serviceorders/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Converts selected time logs to a new labor item on the service order. Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ServiceOrdersConvertTimeLogsToLaborItem (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ServiceOrdersConvertTimeLogsToLaborItemWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts selected time logs to a new labor item on the service order. Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ServiceOrdersConvertTimeLogsToLaborItemWithHttpInfo (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersConvertTimeLogsToLaborItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersConvertTimeLogsToLaborItem");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs/laboritem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersConvertTimeLogsToLaborItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Converts selected time logs to a new labor item on the service order. Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ServiceOrdersConvertTimeLogsToLaborItemAsync (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ServiceOrdersConvertTimeLogsToLaborItemAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts selected time logs to a new labor item on the service order. Valid labor item types are - \&quot;Default\&quot;, \&quot;Selected\&quot;  &lt;p&gt;Supply an array of time logs ids to convert to a labor item on the service order. [1,2,3]&lt;/p&gt;&lt;p&gt;CanConvertNonBillableTimeLogs - allows non billable time logs to be converted with the billable time logs&lt;/p&gt;&lt;p&gt;CanCombineLogsWithDifferentLaborRatesOrRateBasis - allows time logs with a different labor rate or basis to be combined using the default labor rate for the account.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The convert time logs to labor item model.</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ServiceOrdersConvertTimeLogsToLaborItemAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebConvertTimeLogsToLaborItemModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersConvertTimeLogsToLaborItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersConvertTimeLogsToLaborItem");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs/laboritem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersConvertTimeLogsToLaborItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Creates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderExpensesResponse</returns>
        public TsiWebServiceOrderExpensesResponse ServiceOrdersCreateExpense (int? serviceOrderNumber, TsiWebExpenseModel model)
        {
             ApiResponse<TsiWebServiceOrderExpensesResponse> localVarResponse = ServiceOrdersCreateExpenseWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpensesResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpensesResponse > ServiceOrdersCreateExpenseWithHttpInfo (int? serviceOrderNumber, TsiWebExpenseModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateExpense");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateExpense");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpensesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpensesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpensesResponse)));
        }

        /// <summary>
        /// Creates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderExpensesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpensesResponse> ServiceOrdersCreateExpenseAsync (int? serviceOrderNumber, TsiWebExpenseModel model)
        {
             ApiResponse<TsiWebServiceOrderExpensesResponse> localVarResponse = await ServiceOrdersCreateExpenseAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpensesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpensesResponse>> ServiceOrdersCreateExpenseAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebExpenseModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateExpense");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateExpense");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpensesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpensesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpensesResponse)));
        }

        /// <summary>
        /// Creates a managed print service order based on a device id. Used by managed print providers to create a service order for a metered device
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        public TsiWebServiceOrderResponse ServiceOrdersCreateManagedPrintServiceOrder (TsiWebCreateManagedPrintServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = ServiceOrdersCreateManagedPrintServiceOrderWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a managed print service order based on a device id. Used by managed print providers to create a service order for a metered device
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        public ApiResponse< TsiWebServiceOrderResponse > ServiceOrdersCreateManagedPrintServiceOrderWithHttpInfo (TsiWebCreateManagedPrintServiceOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateManagedPrintServiceOrder");

            var localVarPath = "/api/serviceorders/managed/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateManagedPrintServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Creates a managed print service order based on a device id. Used by managed print providers to create a service order for a metered device
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersCreateManagedPrintServiceOrderAsync (TsiWebCreateManagedPrintServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = await ServiceOrdersCreateManagedPrintServiceOrderAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a managed print service order based on a device id. Used by managed print providers to create a service order for a metered device
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersCreateManagedPrintServiceOrderAsyncWithHttpInfo (TsiWebCreateManagedPrintServiceOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateManagedPrintServiceOrder");

            var localVarPath = "/api/serviceorders/managed/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateManagedPrintServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Creates recurring service orders schedules. The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebCreateRecurringServiceOrderScheduleResponse</returns>
        public TsiWebCreateRecurringServiceOrderScheduleResponse ServiceOrdersCreateRecurringServiceOrderSchedule (TsiWebCreateRecurringServiceOrderScheduleModel model)
        {
             ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse> localVarResponse = ServiceOrdersCreateRecurringServiceOrderScheduleWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates recurring service orders schedules. The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebCreateRecurringServiceOrderScheduleResponse</returns>
        public ApiResponse< TsiWebCreateRecurringServiceOrderScheduleResponse > ServiceOrdersCreateRecurringServiceOrderScheduleWithHttpInfo (TsiWebCreateRecurringServiceOrderScheduleModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateRecurringServiceOrderSchedule");

            var localVarPath = "/api/serviceorders/recurringSchedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateRecurringServiceOrderSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCreateRecurringServiceOrderScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCreateRecurringServiceOrderScheduleResponse)));
        }

        /// <summary>
        /// Creates recurring service orders schedules. The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebCreateRecurringServiceOrderScheduleResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCreateRecurringServiceOrderScheduleResponse> ServiceOrdersCreateRecurringServiceOrderScheduleAsync (TsiWebCreateRecurringServiceOrderScheduleModel model)
        {
             ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse> localVarResponse = await ServiceOrdersCreateRecurringServiceOrderScheduleAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates recurring service orders schedules. The Frequency value must be one of: \&quot;Daily\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;, \&quot;Yearly\&quot;.If no Frequency is submitted the default value is \&quot;Daily\&quot;.  &lt;p&gt;The EndType value must be one of: \&quot;None\&quot;, \&quot;EndByDate\&quot;, \&quot;NumberOfOccurences\&quot;. If no EndType is submitted, the default value is \&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfMonthType must be one of: \&quot;SpecifiedDay\&quot;, \&quot;LastDayOfTheMonth\&quot;, \&quot;FloatingDate\&quot;.&lt;/p&gt;&lt;p&gt;The DayOfTheWeek must be one of: \&quot;Monday\&quot;,\&quot;Tuesday\&quot;,\&quot;Wednesday\&quot;,\&quot;Thursday\&quot;,\&quot;Friday\&quot;,\&quot;Saturday\&quot;,\&quot;Sunday\&quot;,\&quot;None\&quot;.&lt;/p&gt;&lt;p&gt;The WeekOfTheMonth value must be one of: \&quot;First\&quot;,\&quot;Second\&quot;,\&quot;Third\&quot;,\&quot;Fourth\&quot;,\&quot;Last\&quot;.&lt;/p&gt;&lt;p&gt;The TakenByRepType value must be one of: \&quot;SpecifiedRep\&quot;, \&quot;CurrentUser\&quot;,\&quot;AccountDefaultTech\&quot;, \&quot;AccountPrimaryRep\&quot;.&lt;/p&gt;&lt;p&gt;For XML requests, the ServiceOrderRecievedTime accepts values in form  HH/MM/SS.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebCreateRecurringServiceOrderScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse>> ServiceOrdersCreateRecurringServiceOrderScheduleAsyncWithHttpInfo (TsiWebCreateRecurringServiceOrderScheduleModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateRecurringServiceOrderSchedule");

            var localVarPath = "/api/serviceorders/recurringSchedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateRecurringServiceOrderSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCreateRecurringServiceOrderScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCreateRecurringServiceOrderScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCreateRecurringServiceOrderScheduleResponse)));
        }

        /// <summary>
        /// Creates a service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        public TsiWebServiceOrderResponse ServiceOrdersCreateServiceOrder (TsiWebCreateServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = ServiceOrdersCreateServiceOrderWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        public ApiResponse<TsiWebServiceOrderResponse> ServiceOrdersCreateServiceOrderWithHttpInfo (TsiWebCreateServiceOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrder");

            var localVarPath = "/api/ServiceOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = 
                (IRestResponse) this.Configuration.ApiClient.CallApi(
                path: localVarPath,
                method: Method.POST,
                queryParams: localVarQueryParams,
                postBody: localVarPostBody,
                headerParams: localVarHeaderParams,
                formParams: localVarFormParams,
                fileParams: localVarFileParams,
                pathParams: localVarPathParams,
                contentType: localVarHttpContentType
                );

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Creates a service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersCreateServiceOrderAsync (TsiWebCreateServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = await ServiceOrdersCreateServiceOrderAsyncWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The create service order model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersCreateServiceOrderAsyncWithHttpInfo (TsiWebCreateServiceOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrder");

            var localVarPath = "/api/ServiceOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Creates an item serviced. The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderItemServicedResponse</returns>
        public TsiWebServiceOrderItemServicedResponse ServiceOrdersCreateServiceOrderItemServiced (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model)
        {
             ApiResponse<TsiWebServiceOrderItemServicedResponse> localVarResponse = ServiceOrdersCreateServiceOrderItemServicedWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an item serviced. The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemServicedResponse</returns>
        public ApiResponse< TsiWebServiceOrderItemServicedResponse > ServiceOrdersCreateServiceOrderItemServicedWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderItemServiced");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderItemServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/itemsserviced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemServicedResponse)));
        }

        /// <summary>
        /// Creates an item serviced. The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderItemServicedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderItemServicedResponse> ServiceOrdersCreateServiceOrderItemServicedAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model)
        {
             ApiResponse<TsiWebServiceOrderItemServicedResponse> localVarResponse = await ServiceOrdersCreateServiceOrderItemServicedAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an item serviced. The UpdateContractMetersType must be one of: \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.&lt;br /&gt;&lt;p&gt;The CreateServiceOrderItemServicedType must be one of: \&quot;NewItem\&quot;, \&quot;FromPriceBookItem\&quot;, \&quot;FromCustomerInventoryItem\&quot;, \&quot;FromMSPAsset\&quot;, or \&quot;FromContractItem\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemServicedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemServicedResponse>> ServiceOrdersCreateServiceOrderItemServicedAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderItemServicedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderItemServiced");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderItemServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/itemsserviced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemServicedResponse)));
        }

        /// <summary>
        /// Creates a non stock item for a service order. The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        public TsiWebServiceOrderPartsUsedResponse ServiceOrdersCreateServiceOrderNonStockPartsUsed (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = ServiceOrdersCreateServiceOrderNonStockPartsUsedWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a non stock item for a service order. The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartsUsedResponse > ServiceOrdersCreateServiceOrderNonStockPartsUsedWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNonStockPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNonStockPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/nonstock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderNonStockPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Creates a non stock item for a service order. The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersCreateServiceOrderNonStockPartsUsedAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = await ServiceOrdersCreateServiceOrderNonStockPartsUsedAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a non stock item for a service order. The Type field accepts values \&quot;Labor\&quot;, \&quot;Material\&quot;, or \&quot;Special\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersCreateServiceOrderNonStockPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderNonStockModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNonStockPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNonStockPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/nonstock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderNonStockPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Creates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderNoteResponse</returns>
        public TsiWebServiceOrderNoteResponse ServiceOrdersCreateServiceOrderNote (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model)
        {
             ApiResponse<TsiWebServiceOrderNoteResponse> localVarResponse = ServiceOrdersCreateServiceOrderNoteWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderNoteResponse</returns>
        public ApiResponse< TsiWebServiceOrderNoteResponse > ServiceOrdersCreateServiceOrderNoteWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNote");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNote");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderNoteResponse)));
        }

        /// <summary>
        /// Creates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderNoteResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderNoteResponse> ServiceOrdersCreateServiceOrderNoteAsync (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model)
        {
             ApiResponse<TsiWebServiceOrderNoteResponse> localVarResponse = await ServiceOrdersCreateServiceOrderNoteAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderNoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderNoteResponse>> ServiceOrdersCreateServiceOrderNoteAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderNoteModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNote");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderNote");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderNoteResponse)));
        }

        /// <summary>
        /// Creates the service order parts used item. The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        public TsiWebServiceOrderPartsUsedResponse ServiceOrdersCreateServiceOrderPartsUsed (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = ServiceOrdersCreateServiceOrderPartsUsedWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the service order parts used item. The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartsUsedResponse > ServiceOrdersCreateServiceOrderPartsUsedWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Creates the service order parts used item. The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersCreateServiceOrderPartsUsedAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = await ServiceOrdersCreateServiceOrderPartsUsedAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the service order parts used item. The Price Book Item is selected by either the PriceBookItemNumber or the ItemId. If both are given PriceBookItemNumber will be used. &lt;br /&gt;&lt;p&gt;The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersCreateServiceOrderPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Creates a line item comment for the service order, 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartUsedResponse</returns>
        public TsiWebServiceOrderPartUsedResponse ServiceOrdersCreateServiceOrderPartsUsedComment (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
             ApiResponse<TsiWebServiceOrderPartUsedResponse> localVarResponse = ServiceOrdersCreateServiceOrderPartsUsedCommentWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a line item comment for the service order, 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartUsedResponse > ServiceOrdersCreateServiceOrderPartsUsedCommentWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsedComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsedComment");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderPartsUsedComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartUsedResponse)));
        }

        /// <summary>
        /// Creates a line item comment for the service order, 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartUsedResponse> ServiceOrdersCreateServiceOrderPartsUsedCommentAsync (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
             ApiResponse<TsiWebServiceOrderPartUsedResponse> localVarResponse = await ServiceOrdersCreateServiceOrderPartsUsedCommentAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a line item comment for the service order, 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartUsedResponse>> ServiceOrdersCreateServiceOrderPartsUsedCommentAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsedComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderPartsUsedComment");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderPartsUsedComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartUsedResponse)));
        }

        /// <summary>
        /// Creates a resolution on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>TsiWebServiceOrderResolutionResponse</returns>
        public TsiWebServiceOrderResolutionResponse ServiceOrdersCreateServiceOrderResolution (int? serviceOrderNumber, string resolution)
        {
             ApiResponse<TsiWebServiceOrderResolutionResponse> localVarResponse = ServiceOrdersCreateServiceOrderResolutionWithHttpInfo(serviceOrderNumber, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a resolution on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResolutionResponse</returns>
        public ApiResponse< TsiWebServiceOrderResolutionResponse > ServiceOrdersCreateServiceOrderResolutionWithHttpInfo (int? serviceOrderNumber, string resolution)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderResolution");
            // verify the required parameter 'resolution' is set
            if (resolution == null)
                throw new ApiException(400, "Missing required parameter 'resolution' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderResolution");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (resolution != null && resolution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resolution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resolution; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResolutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResolutionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResolutionResponse)));
        }

        /// <summary>
        /// Creates a resolution on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of TsiWebServiceOrderResolutionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResolutionResponse> ServiceOrdersCreateServiceOrderResolutionAsync (int? serviceOrderNumber, string resolution)
        {
             ApiResponse<TsiWebServiceOrderResolutionResponse> localVarResponse = await ServiceOrdersCreateServiceOrderResolutionAsyncWithHttpInfo(serviceOrderNumber, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a resolution on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResolutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResolutionResponse>> ServiceOrdersCreateServiceOrderResolutionAsyncWithHttpInfo (int? serviceOrderNumber, string resolution)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderResolution");
            // verify the required parameter 'resolution' is set
            if (resolution == null)
                throw new ApiException(400, "Missing required parameter 'resolution' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderResolution");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/resolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (resolution != null && resolution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resolution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resolution; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResolutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResolutionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResolutionResponse)));
        }

        /// <summary>
        /// Creates a symptom on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>TsiWebServiceOrderSymptomResponse</returns>
        public TsiWebServiceOrderSymptomResponse ServiceOrdersCreateServiceOrderSymptom (int? serviceOrderNumber, string symptom)
        {
             ApiResponse<TsiWebServiceOrderSymptomResponse> localVarResponse = ServiceOrdersCreateServiceOrderSymptomWithHttpInfo(serviceOrderNumber, symptom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a symptom on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderSymptomResponse</returns>
        public ApiResponse< TsiWebServiceOrderSymptomResponse > ServiceOrdersCreateServiceOrderSymptomWithHttpInfo (int? serviceOrderNumber, string symptom)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderSymptom");
            // verify the required parameter 'symptom' is set
            if (symptom == null)
                throw new ApiException(400, "Missing required parameter 'symptom' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderSymptom");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (symptom != null && symptom.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symptom); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symptom; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSymptomResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSymptomResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSymptomResponse)));
        }

        /// <summary>
        /// Creates a symptom on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of TsiWebServiceOrderSymptomResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderSymptomResponse> ServiceOrdersCreateServiceOrderSymptomAsync (int? serviceOrderNumber, string symptom)
        {
             ApiResponse<TsiWebServiceOrderSymptomResponse> localVarResponse = await ServiceOrdersCreateServiceOrderSymptomAsyncWithHttpInfo(serviceOrderNumber, symptom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a symptom on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSymptomResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSymptomResponse>> ServiceOrdersCreateServiceOrderSymptomAsyncWithHttpInfo (int? serviceOrderNumber, string symptom)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderSymptom");
            // verify the required parameter 'symptom' is set
            if (symptom == null)
                throw new ApiException(400, "Missing required parameter 'symptom' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderSymptom");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/symptoms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (symptom != null && symptom.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symptom); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symptom; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSymptomResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSymptomResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSymptomResponse)));
        }

        /// <summary>
        /// Creates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>TsiWebServiceOrderTimeLogResponse</returns>
        public TsiWebServiceOrderTimeLogResponse ServiceOrdersCreateServiceOrderTimeLog (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model)
        {
             ApiResponse<TsiWebServiceOrderTimeLogResponse> localVarResponse = ServiceOrdersCreateServiceOrderTimeLogWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogResponse</returns>
        public ApiResponse< TsiWebServiceOrderTimeLogResponse > ServiceOrdersCreateServiceOrderTimeLogWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderTimeLog");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderTimeLog");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderTimeLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogResponse)));
        }

        /// <summary>
        /// Creates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogResponse> ServiceOrdersCreateServiceOrderTimeLogAsync (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model)
        {
             ApiResponse<TsiWebServiceOrderTimeLogResponse> localVarResponse = await ServiceOrdersCreateServiceOrderTimeLogAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.The default value will be regular.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimumUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimumActualTime\&quot;. The default value for this would be BillableHoursMinutes  &lt;/P&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">Service order number</param>
        /// <param name="model">The create service order time log model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogResponse>> ServiceOrdersCreateServiceOrderTimeLogAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebCreateServiceOrderTimeLogModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderTimeLog");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersCreateServiceOrderTimeLog");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersCreateServiceOrderTimeLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogResponse)));
        }

        /// <summary>
        /// Deletes a part used on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        public TsiWebServiceOrderPartsUsedResponse ServiceOrdersDeleteServiceOrderPartsUsed (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = ServiceOrdersDeleteServiceOrderPartsUsedWithHttpInfo(serviceOrderNumber, partsUsedNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a part used on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartsUsedResponse > ServiceOrdersDeleteServiceOrderPartsUsedWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderPartsUsed");
            // verify the required parameter 'partsUsedNumber' is set
            if (partsUsedNumber == null)
                throw new ApiException(400, "Missing required parameter 'partsUsedNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/{partsUsedNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partsUsedNumber != null) localVarPathParams.Add("partsUsedNumber", this.Configuration.ApiClient.ParameterToString(partsUsedNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Deletes a part used on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersDeleteServiceOrderPartsUsedAsync (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = await ServiceOrdersDeleteServiceOrderPartsUsedAsyncWithHttpInfo(serviceOrderNumber, partsUsedNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a part used on a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersDeleteServiceOrderPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, TsiWebDeleteServiceOrderPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderPartsUsed");
            // verify the required parameter 'partsUsedNumber' is set
            if (partsUsedNumber == null)
                throw new ApiException(400, "Missing required parameter 'partsUsedNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/{partsUsedNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partsUsedNumber != null) localVarPathParams.Add("partsUsedNumber", this.Configuration.ApiClient.ParameterToString(partsUsedNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Deletes a profile from the service order. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>TsiWebResponse</returns>
        public TsiWebResponse ServiceOrdersDeleteServiceOrderProfile (int? serviceOrderNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = ServiceOrdersDeleteServiceOrderProfileWithHttpInfo(serviceOrderNumber, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a profile from the service order. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>ApiResponse of TsiWebResponse</returns>
        public ApiResponse< TsiWebResponse > ServiceOrdersDeleteServiceOrderProfileWithHttpInfo (int? serviceOrderNumber, string id)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderProfile");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a profile from the service order. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of TsiWebResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebResponse> ServiceOrdersDeleteServiceOrderProfileAsync (int? serviceOrderNumber, string id)
        {
             ApiResponse<TsiWebResponse> localVarResponse = await ServiceOrdersDeleteServiceOrderProfileAsyncWithHttpInfo(serviceOrderNumber, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a profile from the service order. The profile must be url encoded
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="id">The profile to remove. (Must be url encoded)</param>
        /// <returns>Task of ApiResponse (TsiWebResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebResponse>> ServiceOrdersDeleteServiceOrderProfileAsyncWithHttpInfo (int? serviceOrderNumber, string id)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderProfile");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebResponse)));
        }

        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>TsiWebServiceOrderResolutionResponse</returns>
        public TsiWebServiceOrderResolutionResponse ServiceOrdersDeleteServiceOrderResolution (int? serviceOrderNumber, int? resolutionIndex)
        {
             ApiResponse<TsiWebServiceOrderResolutionResponse> localVarResponse = ServiceOrdersDeleteServiceOrderResolutionWithHttpInfo(serviceOrderNumber, resolutionIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResolutionResponse</returns>
        public ApiResponse< TsiWebServiceOrderResolutionResponse > ServiceOrdersDeleteServiceOrderResolutionWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderResolution");
            // verify the required parameter 'resolutionIndex' is set
            if (resolutionIndex == null)
                throw new ApiException(400, "Missing required parameter 'resolutionIndex' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderResolution");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/resolutions/{resolutionIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (resolutionIndex != null) localVarPathParams.Add("resolutionIndex", this.Configuration.ApiClient.ParameterToString(resolutionIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResolutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResolutionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResolutionResponse)));
        }

        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>Task of TsiWebServiceOrderResolutionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResolutionResponse> ServiceOrdersDeleteServiceOrderResolutionAsync (int? serviceOrderNumber, int? resolutionIndex)
        {
             ApiResponse<TsiWebServiceOrderResolutionResponse> localVarResponse = await ServiceOrdersDeleteServiceOrderResolutionAsyncWithHttpInfo(serviceOrderNumber, resolutionIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a resolution on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResolutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResolutionResponse>> ServiceOrdersDeleteServiceOrderResolutionAsyncWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderResolution");
            // verify the required parameter 'resolutionIndex' is set
            if (resolutionIndex == null)
                throw new ApiException(400, "Missing required parameter 'resolutionIndex' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderResolution");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/resolutions/{resolutionIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (resolutionIndex != null) localVarPathParams.Add("resolutionIndex", this.Configuration.ApiClient.ParameterToString(resolutionIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResolutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResolutionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResolutionResponse)));
        }

        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>TsiWebServiceOrderSymptomResponse</returns>
        public TsiWebServiceOrderSymptomResponse ServiceOrdersDeleteServiceOrderSymptom (int? serviceOrderNumber, int? symptomIndex)
        {
             ApiResponse<TsiWebServiceOrderSymptomResponse> localVarResponse = ServiceOrdersDeleteServiceOrderSymptomWithHttpInfo(serviceOrderNumber, symptomIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderSymptomResponse</returns>
        public ApiResponse< TsiWebServiceOrderSymptomResponse > ServiceOrdersDeleteServiceOrderSymptomWithHttpInfo (int? serviceOrderNumber, int? symptomIndex)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderSymptom");
            // verify the required parameter 'symptomIndex' is set
            if (symptomIndex == null)
                throw new ApiException(400, "Missing required parameter 'symptomIndex' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderSymptom");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/symptoms/{symptomIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (symptomIndex != null) localVarPathParams.Add("symptomIndex", this.Configuration.ApiClient.ParameterToString(symptomIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSymptomResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSymptomResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSymptomResponse)));
        }

        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>Task of TsiWebServiceOrderSymptomResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderSymptomResponse> ServiceOrdersDeleteServiceOrderSymptomAsync (int? serviceOrderNumber, int? symptomIndex)
        {
             ApiResponse<TsiWebServiceOrderSymptomResponse> localVarResponse = await ServiceOrdersDeleteServiceOrderSymptomAsyncWithHttpInfo(serviceOrderNumber, symptomIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a symptom on a service order, acceptable index values are 1-5. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSymptomResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSymptomResponse>> ServiceOrdersDeleteServiceOrderSymptomAsyncWithHttpInfo (int? serviceOrderNumber, int? symptomIndex)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderSymptom");
            // verify the required parameter 'symptomIndex' is set
            if (symptomIndex == null)
                throw new ApiException(400, "Missing required parameter 'symptomIndex' when calling ServiceOrdersApi->ServiceOrdersDeleteServiceOrderSymptom");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/symptoms/{symptomIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (symptomIndex != null) localVarPathParams.Add("symptomIndex", this.Configuration.ApiClient.ParameterToString(symptomIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersDeleteServiceOrderSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSymptomResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSymptomResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSymptomResponse)));
        }

        /// <summary>
        /// Advanced search for service orders. Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        public TsiWebServiceOrderExpenseSearchResponse ServiceOrdersExpenseAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = ServiceOrdersExpenseAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for service orders. Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpenseSearchResponse > ServiceOrdersExpenseAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ServiceOrdersApi->ServiceOrdersExpenseAdvancedSearch");

            var localVarPath = "/api/serviceorders/expenses/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersExpenseAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Advanced search for service orders. Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersExpenseAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = await ServiceOrdersExpenseAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for service orders. Valid SearchType &#x3D; Technician, ExpenseType, ExpensePaymentType, Reimbursable, FromExpenseDate, ToExpenseDate, AcceptanceStatus.  &lt;p&gt;Valid MatchTypes for ExpenseType, ExpensePaymentType, Reimbursable, and AcceptanceStatus &#x3D; Equal. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for FromExpenseDate, ToExpenseDate &#x3D; GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;&lt;p&gt;Valid MatchTypes for Technician is StartsWith, EndsWith, Contains,&lt;/p&gt;&lt;p&gt;Valid Criteria for AcceptanceStatus &#x3D; Open, Accepted, Questioned, Resubmitted.&lt;/p&gt;&lt;p&gt;Valid Criteria for Reimbursable &#x3D; true or false.&lt;/p&gt;&lt;p&gt;Will return expenses only on service orders the rep has access to.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersExpenseAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ServiceOrdersApi->ServiceOrdersExpenseAdvancedSearch");

            var localVarPath = "/api/serviceorders/expenses/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersExpenseAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Gets the recurring service order schedules for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebRecurringServiceOrderSchedulesResponse</returns>
        public TsiWebRecurringServiceOrderSchedulesResponse ServiceOrdersGetAccountRecurringServiceOrderSchedules (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse> localVarResponse = ServiceOrdersGetAccountRecurringServiceOrderSchedulesWithHttpInfo(accountNumber, excludeCompleted, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the recurring service order schedules for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebRecurringServiceOrderSchedulesResponse</returns>
        public ApiResponse< TsiWebRecurringServiceOrderSchedulesResponse > ServiceOrdersGetAccountRecurringServiceOrderSchedulesWithHttpInfo (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ServiceOrdersApi->ServiceOrdersGetAccountRecurringServiceOrderSchedules");
            // verify the required parameter 'excludeCompleted' is set
            if (excludeCompleted == null)
                throw new ApiException(400, "Missing required parameter 'excludeCompleted' when calling ServiceOrdersApi->ServiceOrdersGetAccountRecurringServiceOrderSchedules");

            var localVarPath = "/api/serviceorders/recurringSchedule/account/{accountNumber}/{excludeCompleted}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeCompleted != null) localVarPathParams.Add("excludeCompleted", this.Configuration.ApiClient.ParameterToString(excludeCompleted)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetAccountRecurringServiceOrderSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRecurringServiceOrderSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRecurringServiceOrderSchedulesResponse)));
        }

        /// <summary>
        /// Gets the recurring service order schedules for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebRecurringServiceOrderSchedulesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebRecurringServiceOrderSchedulesResponse> ServiceOrdersGetAccountRecurringServiceOrderSchedulesAsync (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse> localVarResponse = await ServiceOrdersGetAccountRecurringServiceOrderSchedulesAsyncWithHttpInfo(accountNumber, excludeCompleted, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the recurring service order schedules for an account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeCompleted">Optional, return completed recurring service orders schedules.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebRecurringServiceOrderSchedulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse>> ServiceOrdersGetAccountRecurringServiceOrderSchedulesAsyncWithHttpInfo (int? accountNumber, bool? excludeCompleted, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ServiceOrdersApi->ServiceOrdersGetAccountRecurringServiceOrderSchedules");
            // verify the required parameter 'excludeCompleted' is set
            if (excludeCompleted == null)
                throw new ApiException(400, "Missing required parameter 'excludeCompleted' when calling ServiceOrdersApi->ServiceOrdersGetAccountRecurringServiceOrderSchedules");

            var localVarPath = "/api/serviceorders/recurringSchedule/account/{accountNumber}/{excludeCompleted}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeCompleted != null) localVarPathParams.Add("excludeCompleted", this.Configuration.ApiClient.ParameterToString(excludeCompleted)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetAccountRecurringServiceOrderSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRecurringServiceOrderSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRecurringServiceOrderSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRecurringServiceOrderSchedulesResponse)));
        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersGetAccountServiceOrders (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersGetAccountServiceOrdersWithHttpInfo(accountNumber, excludeVoided, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersGetAccountServiceOrdersWithHttpInfo (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ServiceOrdersApi->ServiceOrdersGetAccountServiceOrders");

            var localVarPath = "/api/serviceorders/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeVoided != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeVoided", excludeVoided)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetAccountServiceOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersGetAccountServiceOrdersAsync (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersGetAccountServiceOrdersAsyncWithHttpInfo(accountNumber, excludeVoided, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders (optional)</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersGetAccountServiceOrdersAsyncWithHttpInfo (int? accountNumber, bool? excludeVoided = null, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ServiceOrdersApi->ServiceOrdersGetAccountServiceOrders");

            var localVarPath = "/api/serviceorders/account/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeVoided != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeVoided", excludeVoided)); // query parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetAccountServiceOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersGetAccountServiceOrders_0 (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersGetAccountServiceOrders_0WithHttpInfo(accountNumber, excludeVoided, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersGetAccountServiceOrders_0WithHttpInfo (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ServiceOrdersApi->ServiceOrdersGetAccountServiceOrders_0");
            // verify the required parameter 'excludeVoided' is set
            if (excludeVoided == null)
                throw new ApiException(400, "Missing required parameter 'excludeVoided' when calling ServiceOrdersApi->ServiceOrdersGetAccountServiceOrders_0");

            var localVarPath = "/api/serviceorders/account/{accountNumber}/{excludeVoided}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeVoided != null) localVarPathParams.Add("excludeVoided", this.Configuration.ApiClient.ParameterToString(excludeVoided)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetAccountServiceOrders_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersGetAccountServiceOrders_0Async (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersGetAccountServiceOrders_0AsyncWithHttpInfo(accountNumber, excludeVoided, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the account service orders. Voided Service Orders are excluded by default.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="excludeVoided">Optional, return voided service orders</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersGetAccountServiceOrders_0AsyncWithHttpInfo (int? accountNumber, bool? excludeVoided, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ServiceOrdersApi->ServiceOrdersGetAccountServiceOrders_0");
            // verify the required parameter 'excludeVoided' is set
            if (excludeVoided == null)
                throw new ApiException(400, "Missing required parameter 'excludeVoided' when calling ServiceOrdersApi->ServiceOrdersGetAccountServiceOrders_0");

            var localVarPath = "/api/serviceorders/account/{accountNumber}/{excludeVoided}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", this.Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (excludeVoided != null) localVarPathParams.Add("excludeVoided", this.Configuration.ApiClient.ParameterToString(excludeVoided)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetAccountServiceOrders_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> ServiceOrdersGetCustomFields (int? serviceOrderNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = ServiceOrdersGetCustomFieldsWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > ServiceOrdersGetCustomFieldsWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetCustomFields");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> ServiceOrdersGetCustomFieldsAsync (int? serviceOrderNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await ServiceOrdersGetCustomFieldsAsyncWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for the account. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> ServiceOrdersGetCustomFieldsAsyncWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetCustomFields");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets a single recurring service order schedule. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>TsiWebRecurringServiceOrderSchedule</returns>
        public TsiWebRecurringServiceOrderSchedule ServiceOrdersGetRecurringServiceOrderSchedule (int? recurringServiceOrderScheduleId)
        {
             ApiResponse<TsiWebRecurringServiceOrderSchedule> localVarResponse = ServiceOrdersGetRecurringServiceOrderScheduleWithHttpInfo(recurringServiceOrderScheduleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single recurring service order schedule. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>ApiResponse of TsiWebRecurringServiceOrderSchedule</returns>
        public ApiResponse< TsiWebRecurringServiceOrderSchedule > ServiceOrdersGetRecurringServiceOrderScheduleWithHttpInfo (int? recurringServiceOrderScheduleId)
        {
            // verify the required parameter 'recurringServiceOrderScheduleId' is set
            if (recurringServiceOrderScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'recurringServiceOrderScheduleId' when calling ServiceOrdersApi->ServiceOrdersGetRecurringServiceOrderSchedule");

            var localVarPath = "/api/serviceorders/recurringSchedule/{recurringServiceOrderScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recurringServiceOrderScheduleId != null) localVarPathParams.Add("recurringServiceOrderScheduleId", this.Configuration.ApiClient.ParameterToString(recurringServiceOrderScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetRecurringServiceOrderSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRecurringServiceOrderSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRecurringServiceOrderSchedule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRecurringServiceOrderSchedule)));
        }

        /// <summary>
        /// Gets a single recurring service order schedule. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>Task of TsiWebRecurringServiceOrderSchedule</returns>
        public async System.Threading.Tasks.Task<TsiWebRecurringServiceOrderSchedule> ServiceOrdersGetRecurringServiceOrderScheduleAsync (int? recurringServiceOrderScheduleId)
        {
             ApiResponse<TsiWebRecurringServiceOrderSchedule> localVarResponse = await ServiceOrdersGetRecurringServiceOrderScheduleAsyncWithHttpInfo(recurringServiceOrderScheduleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single recurring service order schedule. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringServiceOrderScheduleId"></param>
        /// <returns>Task of ApiResponse (TsiWebRecurringServiceOrderSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebRecurringServiceOrderSchedule>> ServiceOrdersGetRecurringServiceOrderScheduleAsyncWithHttpInfo (int? recurringServiceOrderScheduleId)
        {
            // verify the required parameter 'recurringServiceOrderScheduleId' is set
            if (recurringServiceOrderScheduleId == null)
                throw new ApiException(400, "Missing required parameter 'recurringServiceOrderScheduleId' when calling ServiceOrdersApi->ServiceOrdersGetRecurringServiceOrderSchedule");

            var localVarPath = "/api/serviceorders/recurringSchedule/{recurringServiceOrderScheduleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recurringServiceOrderScheduleId != null) localVarPathParams.Add("recurringServiceOrderScheduleId", this.Configuration.ApiClient.ParameterToString(recurringServiceOrderScheduleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetRecurringServiceOrderSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebRecurringServiceOrderSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebRecurringServiceOrderSchedule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebRecurringServiceOrderSchedule)));
        }

        /// <summary>
        /// Gets the service order assigned technicians. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>List&lt;TsiWebServiceOrderAssignedTech&gt;</returns>
        public List<TsiWebServiceOrderAssignedTech> ServiceOrdersGetServiceOrderAssignedTechs (int? serviceOrderNumber)
        {
             ApiResponse<List<TsiWebServiceOrderAssignedTech>> localVarResponse = ServiceOrdersGetServiceOrderAssignedTechsWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order assigned technicians. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderAssignedTech&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderAssignedTech> > ServiceOrdersGetServiceOrderAssignedTechsWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderAssignedTechs");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/assignedtechs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderAssignedTechs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderAssignedTech>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderAssignedTech>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderAssignedTech>)));
        }

        /// <summary>
        /// Gets the service order assigned technicians. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderAssignedTech&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderAssignedTech>> ServiceOrdersGetServiceOrderAssignedTechsAsync (int? serviceOrderNumber)
        {
             ApiResponse<List<TsiWebServiceOrderAssignedTech>> localVarResponse = await ServiceOrdersGetServiceOrderAssignedTechsAsyncWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order assigned technicians. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderAssignedTech&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderAssignedTech>>> ServiceOrdersGetServiceOrderAssignedTechsAsyncWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderAssignedTechs");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/assignedtechs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderAssignedTechs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderAssignedTech>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderAssignedTech>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderAssignedTech>)));
        }

        /// <summary>
        /// Gets the service order details by external ticket identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>TsiWebServiceOrderDetail</returns>
        public TsiWebServiceOrderDetail ServiceOrdersGetServiceOrderByExternalTicket (string externalTicketId)
        {
             ApiResponse<TsiWebServiceOrderDetail> localVarResponse = ServiceOrdersGetServiceOrderByExternalTicketWithHttpInfo(externalTicketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order details by external ticket identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderDetail</returns>
        public ApiResponse< TsiWebServiceOrderDetail > ServiceOrdersGetServiceOrderByExternalTicketWithHttpInfo (string externalTicketId)
        {
            // verify the required parameter 'externalTicketId' is set
            if (externalTicketId == null)
                throw new ApiException(400, "Missing required parameter 'externalTicketId' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderByExternalTicket");

            var localVarPath = "/api/serviceorders/externalticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTicketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTicketId", externalTicketId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderByExternalTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderDetail)));
        }

        /// <summary>
        /// Gets the service order details by external ticket identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>Task of TsiWebServiceOrderDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderDetail> ServiceOrdersGetServiceOrderByExternalTicketAsync (string externalTicketId)
        {
             ApiResponse<TsiWebServiceOrderDetail> localVarResponse = await ServiceOrdersGetServiceOrderByExternalTicketAsyncWithHttpInfo(externalTicketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order details by external ticket identifier. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalTicketId">The external ticket identifier.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderDetail>> ServiceOrdersGetServiceOrderByExternalTicketAsyncWithHttpInfo (string externalTicketId)
        {
            // verify the required parameter 'externalTicketId' is set
            if (externalTicketId == null)
                throw new ApiException(400, "Missing required parameter 'externalTicketId' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderByExternalTicket");

            var localVarPath = "/api/serviceorders/externalticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalTicketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalTicketId", externalTicketId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderByExternalTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderDetail)));
        }

        /// <summary>
        /// Gets the service order completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ServiceOrdersGetServiceOrderCompletedTasks (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ServiceOrdersGetServiceOrderCompletedTasksWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ServiceOrdersGetServiceOrderCompletedTasksWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderCompletedTasks");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the service order completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ServiceOrdersGetServiceOrderCompletedTasksAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ServiceOrdersGetServiceOrderCompletedTasksAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order completed tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ServiceOrdersGetServiceOrderCompletedTasksAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderCompletedTasks");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/tasks/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderCompletedTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the service order details. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>TsiWebServiceOrderDetail</returns>
        public TsiWebServiceOrderDetail ServiceOrdersGetServiceOrderDetail (int? serviceOrderNumber)
        {
             ApiResponse<TsiWebServiceOrderDetail> localVarResponse = ServiceOrdersGetServiceOrderDetailWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order details. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderDetail</returns>
        public ApiResponse< TsiWebServiceOrderDetail > ServiceOrdersGetServiceOrderDetailWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderDetail");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderDetail)));
        }

        /// <summary>
        /// Gets the service order details. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of TsiWebServiceOrderDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderDetail> ServiceOrdersGetServiceOrderDetailAsync (int? serviceOrderNumber)
        {
             ApiResponse<TsiWebServiceOrderDetail> localVarResponse = await ServiceOrdersGetServiceOrderDetailAsyncWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order details. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderDetail>> ServiceOrdersGetServiceOrderDetailAsyncWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderDetail");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderDetail)));
        }

        /// <summary>
        /// Gets a single service orde expense 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>TsiWebServiceOrderExpense</returns>
        public TsiWebServiceOrderExpense ServiceOrdersGetServiceOrderExpense (int? serviceOrderNumber, int? serviceOrderExpenseNumber)
        {
             ApiResponse<TsiWebServiceOrderExpense> localVarResponse = ServiceOrdersGetServiceOrderExpenseWithHttpInfo(serviceOrderNumber, serviceOrderExpenseNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single service orde expense 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpense</returns>
        public ApiResponse< TsiWebServiceOrderExpense > ServiceOrdersGetServiceOrderExpenseWithHttpInfo (int? serviceOrderNumber, int? serviceOrderExpenseNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderExpense");
            // verify the required parameter 'serviceOrderExpenseNumber' is set
            if (serviceOrderExpenseNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderExpenseNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderExpense");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses/{serviceOrderExpenseNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (serviceOrderExpenseNumber != null) localVarPathParams.Add("serviceOrderExpenseNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderExpenseNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpense>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpense) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpense)));
        }

        /// <summary>
        /// Gets a single service orde expense 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>Task of TsiWebServiceOrderExpense</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpense> ServiceOrdersGetServiceOrderExpenseAsync (int? serviceOrderNumber, int? serviceOrderExpenseNumber)
        {
             ApiResponse<TsiWebServiceOrderExpense> localVarResponse = await ServiceOrdersGetServiceOrderExpenseAsyncWithHttpInfo(serviceOrderNumber, serviceOrderExpenseNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single service orde expense 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderExpenseNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpense)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpense>> ServiceOrdersGetServiceOrderExpenseAsyncWithHttpInfo (int? serviceOrderNumber, int? serviceOrderExpenseNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderExpense");
            // verify the required parameter 'serviceOrderExpenseNumber' is set
            if (serviceOrderExpenseNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderExpenseNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderExpense");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses/{serviceOrderExpenseNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (serviceOrderExpenseNumber != null) localVarPathParams.Add("serviceOrderExpenseNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderExpenseNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpense>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpense) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpense)));
        }

        /// <summary>
        /// Gets the service order expenses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>List&lt;TsiWebServiceOrderExpense&gt;</returns>
        public List<TsiWebServiceOrderExpense> ServiceOrdersGetServiceOrderExpenses (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<List<TsiWebServiceOrderExpense>> localVarResponse = ServiceOrdersGetServiceOrderExpensesWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order expenses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderExpense&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderExpense> > ServiceOrdersGetServiceOrderExpensesWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderExpenses");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderExpenses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderExpense>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderExpense>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderExpense>)));
        }

        /// <summary>
        /// Gets the service order expenses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderExpense&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderExpense>> ServiceOrdersGetServiceOrderExpensesAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<List<TsiWebServiceOrderExpense>> localVarResponse = await ServiceOrdersGetServiceOrderExpensesAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order expenses. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderExpense&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderExpense>>> ServiceOrdersGetServiceOrderExpensesAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderExpenses");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderExpenses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderExpense>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderExpense>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderExpense>)));
        }

        /// <summary>
        /// Gets the service order incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ServiceOrdersGetServiceOrderIncompleteTasks (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ServiceOrdersGetServiceOrderIncompleteTasksWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ServiceOrdersGetServiceOrderIncompleteTasksWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderIncompleteTasks");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the service order incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ServiceOrdersGetServiceOrderIncompleteTasksAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ServiceOrdersGetServiceOrderIncompleteTasksAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ServiceOrdersGetServiceOrderIncompleteTasksAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderIncompleteTasks");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderIncompleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>TsiWebServiceOrderItemServicedResponse</returns>
        public TsiWebServiceOrderItemServicedResponse ServiceOrdersGetServiceOrderItemServiced (int? serviceOrderNumber, int? itemServicedNumber)
        {
             ApiResponse<TsiWebServiceOrderItemServicedResponse> localVarResponse = ServiceOrdersGetServiceOrderItemServicedWithHttpInfo(serviceOrderNumber, itemServicedNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemServicedResponse</returns>
        public ApiResponse< TsiWebServiceOrderItemServicedResponse > ServiceOrdersGetServiceOrderItemServicedWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderItemServiced");
            // verify the required parameter 'itemServicedNumber' is set
            if (itemServicedNumber == null)
                throw new ApiException(400, "Missing required parameter 'itemServicedNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderItemServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/itemsserviced/{itemServicedNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (itemServicedNumber != null) localVarPathParams.Add("itemServicedNumber", this.Configuration.ApiClient.ParameterToString(itemServicedNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemServicedResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>Task of TsiWebServiceOrderItemServicedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderItemServicedResponse> ServiceOrdersGetServiceOrderItemServicedAsync (int? serviceOrderNumber, int? itemServicedNumber)
        {
             ApiResponse<TsiWebServiceOrderItemServicedResponse> localVarResponse = await ServiceOrdersGetServiceOrderItemServicedAsyncWithHttpInfo(serviceOrderNumber, itemServicedNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemServicedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemServicedResponse>> ServiceOrdersGetServiceOrderItemServicedAsyncWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderItemServiced");
            // verify the required parameter 'itemServicedNumber' is set
            if (itemServicedNumber == null)
                throw new ApiException(400, "Missing required parameter 'itemServicedNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderItemServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/itemsserviced/{itemServicedNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (itemServicedNumber != null) localVarPathParams.Add("itemServicedNumber", this.Configuration.ApiClient.ParameterToString(itemServicedNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemServicedResponse)));
        }

        /// <summary>
        /// Gets the service order items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderItemsServicedResponse</returns>
        public TsiWebServiceOrderItemsServicedResponse ServiceOrdersGetServiceOrderItemsServiced (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderItemsServicedResponse> localVarResponse = ServiceOrdersGetServiceOrderItemsServicedWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemsServicedResponse</returns>
        public ApiResponse< TsiWebServiceOrderItemsServicedResponse > ServiceOrdersGetServiceOrderItemsServicedWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderItemsServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/itemsserviced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderItemsServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemsServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemsServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemsServicedResponse)));
        }

        /// <summary>
        /// Gets the service order items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderItemsServicedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderItemsServicedResponse> ServiceOrdersGetServiceOrderItemsServicedAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderItemsServicedResponse> localVarResponse = await ServiceOrdersGetServiceOrderItemsServicedAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemsServicedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemsServicedResponse>> ServiceOrdersGetServiceOrderItemsServicedAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderItemsServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/itemsserviced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderItemsServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemsServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemsServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemsServicedResponse)));
        }

        /// <summary>
        /// Gets the service order notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderNotesResponse</returns>
        public TsiWebServiceOrderNotesResponse ServiceOrdersGetServiceOrderNotes (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderNotesResponse> localVarResponse = ServiceOrdersGetServiceOrderNotesWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderNotesResponse</returns>
        public ApiResponse< TsiWebServiceOrderNotesResponse > ServiceOrdersGetServiceOrderNotesWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderNotes");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderNotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderNotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderNotesResponse)));
        }

        /// <summary>
        /// Gets the service order notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderNotesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderNotesResponse> ServiceOrdersGetServiceOrderNotesAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderNotesResponse> localVarResponse = await ServiceOrdersGetServiceOrderNotesAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order notes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderNotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderNotesResponse>> ServiceOrdersGetServiceOrderNotesAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderNotes");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderNotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderNotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderNotesResponse)));
        }

        /// <summary>
        /// Gets the service order parts used. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        public TsiWebServiceOrderPartsUsedResponse ServiceOrdersGetServiceOrderParts (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = ServiceOrdersGetServiceOrderPartsWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order parts used. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartsUsedResponse > ServiceOrdersGetServiceOrderPartsWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderParts");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderParts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Gets the service order parts used. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersGetServiceOrderPartsAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = await ServiceOrdersGetServiceOrderPartsAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order parts used. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersGetServiceOrderPartsAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderParts");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderParts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Gets the Service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        public TsiWebAssignedMarketingProfilesResponse ServiceOrdersGetServiceOrderProfiles (int? serviceOrderNumber)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = ServiceOrdersGetServiceOrderProfilesWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        public ApiResponse< TsiWebAssignedMarketingProfilesResponse > ServiceOrdersGetServiceOrderProfilesWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderProfiles");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Gets the Service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> ServiceOrdersGetServiceOrderProfilesAsync (int? serviceOrderNumber)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = await ServiceOrdersGetServiceOrderProfilesAsyncWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Service order profiles. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> ServiceOrdersGetServiceOrderProfilesAsyncWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderProfiles");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Gets the service order quotes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>List&lt;TsiWebServiceOrderQuote&gt;</returns>
        public List<TsiWebServiceOrderQuote> ServiceOrdersGetServiceOrderQuotes (int? serviceOrderNumber)
        {
             ApiResponse<List<TsiWebServiceOrderQuote>> localVarResponse = ServiceOrdersGetServiceOrderQuotesWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order quotes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebServiceOrderQuote&gt;</returns>
        public ApiResponse< List<TsiWebServiceOrderQuote> > ServiceOrdersGetServiceOrderQuotesWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderQuotes");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/quotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderQuote>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderQuote>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderQuote>)));
        }

        /// <summary>
        /// Gets the service order quotes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of List&lt;TsiWebServiceOrderQuote&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebServiceOrderQuote>> ServiceOrdersGetServiceOrderQuotesAsync (int? serviceOrderNumber)
        {
             ApiResponse<List<TsiWebServiceOrderQuote>> localVarResponse = await ServiceOrdersGetServiceOrderQuotesAsyncWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order quotes. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebServiceOrderQuote&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebServiceOrderQuote>>> ServiceOrdersGetServiceOrderQuotesAsyncWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderQuotes");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/quotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebServiceOrderQuote>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebServiceOrderQuote>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebServiceOrderQuote>)));
        }

        /// <summary>
        /// Gets the service order subcontractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderSubContractorsResponse</returns>
        public TsiWebServiceOrderSubContractorsResponse ServiceOrdersGetServiceOrderSubContractors (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderSubContractorsResponse> localVarResponse = ServiceOrdersGetServiceOrderSubContractorsWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order subcontractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderSubContractorsResponse</returns>
        public ApiResponse< TsiWebServiceOrderSubContractorsResponse > ServiceOrdersGetServiceOrderSubContractorsWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderSubContractors");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/subContractors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderSubContractors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSubContractorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSubContractorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSubContractorsResponse)));
        }

        /// <summary>
        /// Gets the service order subcontractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderSubContractorsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderSubContractorsResponse> ServiceOrdersGetServiceOrderSubContractorsAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderSubContractorsResponse> localVarResponse = await ServiceOrdersGetServiceOrderSubContractorsAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order subcontractors. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSubContractorsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSubContractorsResponse>> ServiceOrdersGetServiceOrderSubContractorsAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderSubContractors");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/subContractors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderSubContractors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSubContractorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSubContractorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSubContractorsResponse)));
        }

        /// <summary>
        /// Gets the service order summary. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>TsiWebServiceOrderSummary</returns>
        public TsiWebServiceOrderSummary ServiceOrdersGetServiceOrderSummary (int? serviceOrderNumber)
        {
             ApiResponse<TsiWebServiceOrderSummary> localVarResponse = ServiceOrdersGetServiceOrderSummaryWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order summary. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderSummary</returns>
        public ApiResponse< TsiWebServiceOrderSummary > ServiceOrdersGetServiceOrderSummaryWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderSummary");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSummary)));
        }

        /// <summary>
        /// Gets the service order summary. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of TsiWebServiceOrderSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderSummary> ServiceOrdersGetServiceOrderSummaryAsync (int? serviceOrderNumber)
        {
             ApiResponse<TsiWebServiceOrderSummary> localVarResponse = await ServiceOrdersGetServiceOrderSummaryAsyncWithHttpInfo(serviceOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order summary. DateTimeRequested has been deprecated please use DateRequested and TimeRequested instead.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSummary>> ServiceOrdersGetServiceOrderSummaryAsyncWithHttpInfo (int? serviceOrderNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderSummary");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSummary)));
        }

        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse ServiceOrdersGetServiceOrderTasks (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = ServiceOrdersGetServiceOrderTasksWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > ServiceOrdersGetServiceOrderTasksWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTasks");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> ServiceOrdersGetServiceOrderTasksAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await ServiceOrdersGetServiceOrderTasksAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order tasks. Includes both completed and incomplete tasks. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> ServiceOrdersGetServiceOrderTasksAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTasks");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/tasks/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Gets the service order time logs. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderTimeLogsResponse</returns>
        public TsiWebServiceOrderTimeLogsResponse ServiceOrdersGetServiceOrderTimeLogs (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderTimeLogsResponse> localVarResponse = ServiceOrdersGetServiceOrderTimeLogsWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order time logs. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogsResponse</returns>
        public ApiResponse< TsiWebServiceOrderTimeLogsResponse > ServiceOrdersGetServiceOrderTimeLogsWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTimeLogs");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderTimeLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogsResponse)));
        }

        /// <summary>
        /// Gets the service order time logs. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogsResponse> ServiceOrdersGetServiceOrderTimeLogsAsync (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderTimeLogsResponse> localVarResponse = await ServiceOrdersGetServiceOrderTimeLogsAsyncWithHttpInfo(serviceOrderNumber, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order time logs. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogsResponse>> ServiceOrdersGetServiceOrderTimeLogsAsyncWithHttpInfo (int? serviceOrderNumber, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTimeLogs");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderTimeLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogsResponse)));
        }

        /// <summary>
        /// Gets the service order time logs based on the log ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>TsiWebServiceOrderTimeLogsResponse</returns>
        public TsiWebServiceOrderTimeLogsResponse ServiceOrdersGetServiceOrderTimeLogsByLogNumber (int? serviceOrderNumber, int? timeLogNumber)
        {
             ApiResponse<TsiWebServiceOrderTimeLogsResponse> localVarResponse = ServiceOrdersGetServiceOrderTimeLogsByLogNumberWithHttpInfo(serviceOrderNumber, timeLogNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the service order time logs based on the log ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogsResponse</returns>
        public ApiResponse< TsiWebServiceOrderTimeLogsResponse > ServiceOrdersGetServiceOrderTimeLogsByLogNumberWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTimeLogsByLogNumber");
            // verify the required parameter 'timeLogNumber' is set
            if (timeLogNumber == null)
                throw new ApiException(400, "Missing required parameter 'timeLogNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTimeLogsByLogNumber");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs/{timeLogNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (timeLogNumber != null) localVarPathParams.Add("timeLogNumber", this.Configuration.ApiClient.ParameterToString(timeLogNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderTimeLogsByLogNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogsResponse)));
        }

        /// <summary>
        /// Gets the service order time logs based on the log ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogsResponse> ServiceOrdersGetServiceOrderTimeLogsByLogNumberAsync (int? serviceOrderNumber, int? timeLogNumber)
        {
             ApiResponse<TsiWebServiceOrderTimeLogsResponse> localVarResponse = await ServiceOrdersGetServiceOrderTimeLogsByLogNumberAsyncWithHttpInfo(serviceOrderNumber, timeLogNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the service order time logs based on the log ID. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="timeLogNumber">service order time log ID</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogsResponse>> ServiceOrdersGetServiceOrderTimeLogsByLogNumberAsyncWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTimeLogsByLogNumber");
            // verify the required parameter 'timeLogNumber' is set
            if (timeLogNumber == null)
                throw new ApiException(400, "Missing required parameter 'timeLogNumber' when calling ServiceOrdersApi->ServiceOrdersGetServiceOrderTimeLogsByLogNumber");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs/{timeLogNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (timeLogNumber != null) localVarPathParams.Add("timeLogNumber", this.Configuration.ApiClient.ParameterToString(timeLogNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersGetServiceOrderTimeLogsByLogNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogsResponse)));
        }

        /// <summary>
        /// Search service orders using an agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByAgreementNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByAgreementNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using an agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByAgreementNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByAgreementNumber");

            var localVarPath = "/api/serviceorders/search/agreementnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByAgreementNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using an agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByAgreementNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByAgreementNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using an agreement number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByAgreementNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByAgreementNumber");

            var localVarPath = "/api/serviceorders/search/agreementnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByAgreementNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search Service Orders using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByCustomFieldWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Service Orders using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersSearchByCustomField");

            var localVarPath = "/api/serviceorders/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search Service Orders using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByCustomFieldAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Service Orders using a custom category and field label. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersSearchByCustomField");

            var localVarPath = "/api/serviceorders/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByCustomerPurchaseOrder (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByCustomerPurchaseOrderWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByCustomerPurchaseOrderWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByCustomerPurchaseOrder");

            var localVarPath = "/api/serviceorders/search/customerpurchaseorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByCustomerPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByCustomerPurchaseOrderAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByCustomerPurchaseOrderAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using customer purchase order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByCustomerPurchaseOrderAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByCustomerPurchaseOrder");

            var localVarPath = "/api/serviceorders/search/customerpurchaseorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByCustomerPurchaseOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using an external product name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByExternalProduct (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByExternalProductWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using an external product name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByExternalProductWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByExternalProduct");

            var localVarPath = "/api/serviceorders/search/externalproduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using an external product name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByExternalProductAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByExternalProductAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using an external product name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">An external product name, full name required.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByExternalProductAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByExternalProduct");

            var localVarPath = "/api/serviceorders/search/externalproduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByExternalProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using invoice number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByInvoiceNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByInvoiceNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using invoice number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByInvoiceNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByInvoiceNumber");

            var localVarPath = "/api/serviceorders/search/invoicenumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByInvoiceNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using invoice number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByInvoiceNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByInvoiceNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using invoice number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByInvoiceNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByInvoiceNumber");

            var localVarPath = "/api/serviceorders/search/invoicenumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByInvoiceNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByItemServiced (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByItemServicedWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByItemServicedWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByItemServiced");

            var localVarPath = "/api/serviceorders/search/itemid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByItemServicedAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByItemServicedAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using items serviced. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByItemServicedAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByItemServiced");

            var localVarPath = "/api/serviceorders/search/itemid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using reference value. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByReference (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByReferenceWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using reference value. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByReferenceWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByReference");

            var localVarPath = "/api/serviceorders/search/reference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using reference value. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByReferenceAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByReferenceAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using reference value. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByReferenceAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByReference");

            var localVarPath = "/api/serviceorders/search/reference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using service order number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchServiceOrderResponse</returns>
        public TsiWebSearchServiceOrderResponse ServiceOrdersSearchByServiceOrderNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = ServiceOrdersSearchByServiceOrderNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search service orders using service order number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchServiceOrderResponse</returns>
        public ApiResponse< TsiWebSearchServiceOrderResponse > ServiceOrdersSearchByServiceOrderNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByServiceOrderNumber");

            var localVarPath = "/api/serviceorders/search/serviceordernumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByServiceOrderNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search service orders using service order number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchServiceOrderResponse> ServiceOrdersSearchByServiceOrderNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchServiceOrderResponse> localVarResponse = await ServiceOrdersSearchByServiceOrderNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search service orders using service order number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchServiceOrderResponse>> ServiceOrdersSearchByServiceOrderNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchByServiceOrderNumber");

            var localVarPath = "/api/serviceorders/search/serviceordernumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchByServiceOrderNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchServiceOrderResponse)));
        }

        /// <summary>
        /// Search expenses using an acceptanc estatus. Valid criteria is an integer to specify the rep requested.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        public TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByAcceptanceStatus (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = ServiceOrdersSearchExpenseByAcceptanceStatusWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search expenses using an acceptanc estatus. Valid criteria is an integer to specify the rep requested.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpenseSearchResponse > ServiceOrdersSearchExpenseByAcceptanceStatusWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByAcceptanceStatus");

            var localVarPath = "/api/serviceorders/expenses/search/acceptancestatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByAcceptanceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using an acceptanc estatus. Valid criteria is an integer to specify the rep requested.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByAcceptanceStatusAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = await ServiceOrdersSearchExpenseByAcceptanceStatusAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search expenses using an acceptanc estatus. Valid criteria is an integer to specify the rep requested.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByAcceptanceStatusAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByAcceptanceStatus");

            var localVarPath = "/api/serviceorders/expenses/search/acceptancestatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByAcceptanceStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using an expense date. Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        public TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByExpenseDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = ServiceOrdersSearchExpenseByExpenseDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search expenses using an expense date. Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpenseSearchResponse > ServiceOrdersSearchExpenseByExpenseDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByExpenseDate");

            var localVarPath = "/api/serviceorders/expenses/search/expensedate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByExpenseDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using an expense date. Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByExpenseDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = await ServiceOrdersSearchExpenseByExpenseDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search expenses using an expense date. Valid criteria is a date.  &lt;p&gt;Valid MatchTypes are GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual. &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByExpenseDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByExpenseDate");

            var localVarPath = "/api/serviceorders/expenses/search/expensedate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByExpenseDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using an expense type. Valid criteria is a string with the expense type description or an integer expense type number.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        public TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByExpenseType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = ServiceOrdersSearchExpenseByExpenseTypeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search expenses using an expense type. Valid criteria is a string with the expense type description or an integer expense type number.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpenseSearchResponse > ServiceOrdersSearchExpenseByExpenseTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByExpenseType");

            var localVarPath = "/api/serviceorders/expenses/search/expensetype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByExpenseType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using an expense type. Valid criteria is a string with the expense type description or an integer expense type number.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByExpenseTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = await ServiceOrdersSearchExpenseByExpenseTypeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search expenses using an expense type. Valid criteria is a string with the expense type description or an integer expense type number.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByExpenseTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByExpenseType");

            var localVarPath = "/api/serviceorders/expenses/search/expensetype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByExpenseType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using a technician name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebServiceOrderExpenseSearchResponse</returns>
        public TsiWebServiceOrderExpenseSearchResponse ServiceOrdersSearchExpenseByTechnician (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = ServiceOrdersSearchExpenseByTechnicianWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search expenses using a technician name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpenseSearchResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpenseSearchResponse > ServiceOrdersSearchExpenseByTechnicianWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByTechnician");

            var localVarPath = "/api/serviceorders/expenses/search/technician";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByTechnician", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Search expenses using a technician name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebServiceOrderExpenseSearchResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpenseSearchResponse> ServiceOrdersSearchExpenseByTechnicianAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebServiceOrderExpenseSearchResponse> localVarResponse = await ServiceOrdersSearchExpenseByTechnicianAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search expenses using a technician name. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpenseSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpenseSearchResponse>> ServiceOrdersSearchExpenseByTechnicianAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling ServiceOrdersApi->ServiceOrdersSearchExpenseByTechnician");

            var localVarPath = "/api/serviceorders/expenses/search/technician";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSearchExpenseByTechnician", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpenseSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpenseSearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpenseSearchResponse)));
        }

        /// <summary>
        /// Assigns a profile to a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>TsiWebAssignedMarketingProfilesResponse</returns>
        public TsiWebAssignedMarketingProfilesResponse ServiceOrdersSetServiceOrderProfile (int? serviceOrderNumber, string profile)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = ServiceOrdersSetServiceOrderProfileWithHttpInfo(serviceOrderNumber, profile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a profile to a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>ApiResponse of TsiWebAssignedMarketingProfilesResponse</returns>
        public ApiResponse< TsiWebAssignedMarketingProfilesResponse > ServiceOrdersSetServiceOrderProfileWithHttpInfo (int? serviceOrderNumber, string profile)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersSetServiceOrderProfile");
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ServiceOrdersApi->ServiceOrdersSetServiceOrderProfile");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSetServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Assigns a profile to a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of TsiWebAssignedMarketingProfilesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebAssignedMarketingProfilesResponse> ServiceOrdersSetServiceOrderProfileAsync (int? serviceOrderNumber, string profile)
        {
             ApiResponse<TsiWebAssignedMarketingProfilesResponse> localVarResponse = await ServiceOrdersSetServiceOrderProfileAsyncWithHttpInfo(serviceOrderNumber, profile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns a profile to a service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="profile">The profile to assign.</param>
        /// <returns>Task of ApiResponse (TsiWebAssignedMarketingProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebAssignedMarketingProfilesResponse>> ServiceOrdersSetServiceOrderProfileAsyncWithHttpInfo (int? serviceOrderNumber, string profile)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersSetServiceOrderProfile");
            // verify the required parameter 'profile' is set
            if (profile == null)
                throw new ApiException(400, "Missing required parameter 'profile' when calling ServiceOrdersApi->ServiceOrdersSetServiceOrderProfile");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (profile != null && profile.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(profile); // http body (model) parameter
            }
            else
            {
                localVarPostBody = profile; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersSetServiceOrderProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebAssignedMarketingProfilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebAssignedMarketingProfilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebAssignedMarketingProfilesResponse)));
        }

        /// <summary>
        /// Advanced search for service orders time logs. Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchTimeLogResponse</returns>
        public TsiWebSearchTimeLogResponse ServiceOrdersTimeLogAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchTimeLogResponse> localVarResponse = ServiceOrdersTimeLogAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for service orders time logs. Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchTimeLogResponse</returns>
        public ApiResponse< TsiWebSearchTimeLogResponse > ServiceOrdersTimeLogAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ServiceOrdersApi->ServiceOrdersTimeLogAdvancedSearch");

            var localVarPath = "/api/serviceorders/timelogs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersTimeLogAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTimeLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTimeLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTimeLogResponse)));
        }

        /// <summary>
        /// Advanced search for service orders time logs. Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchTimeLogResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTimeLogResponse> ServiceOrdersTimeLogAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchTimeLogResponse> localVarResponse = await ServiceOrdersTimeLogAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for service orders time logs. Valid SearchType &#x3D; TimeLogNumber,TechAssigned, LogReason,StartDate,EndDate.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTimeLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTimeLogResponse>> ServiceOrdersTimeLogAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ServiceOrdersApi->ServiceOrdersTimeLogAdvancedSearch");

            var localVarPath = "/api/serviceorders/timelogs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersTimeLogAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTimeLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTimeLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTimeLogResponse)));
        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>TsiWebCustomFieldsResponse</returns>
        public TsiWebCustomFieldsResponse ServiceOrdersUpdateCustomFields (int? serviceOrderNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = ServiceOrdersUpdateCustomFieldsWithHttpInfo(serviceOrderNumber, customFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>ApiResponse of TsiWebCustomFieldsResponse</returns>
        public ApiResponse< TsiWebCustomFieldsResponse > ServiceOrdersUpdateCustomFieldsWithHttpInfo (int? serviceOrderNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling ServiceOrdersApi->ServiceOrdersUpdateCustomFields");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of TsiWebCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebCustomFieldsResponse> ServiceOrdersUpdateCustomFieldsAsync (int? serviceOrderNumber, List<TsiWebCustomField> customFields)
        {
             ApiResponse<TsiWebCustomFieldsResponse> localVarResponse = await ServiceOrdersUpdateCustomFieldsAsyncWithHttpInfo(serviceOrderNumber, customFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates account custom fields. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The account number.</param>
        /// <param name="customFields">The custom fields.</param>
        /// <returns>Task of ApiResponse (TsiWebCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebCustomFieldsResponse>> ServiceOrdersUpdateCustomFieldsAsyncWithHttpInfo (int? serviceOrderNumber, List<TsiWebCustomField> customFields)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateCustomFields");
            // verify the required parameter 'customFields' is set
            if (customFields == null)
                throw new ApiException(400, "Missing required parameter 'customFields' when calling ServiceOrdersApi->ServiceOrdersUpdateCustomFields");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (customFields != null && customFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebCustomFieldsResponse)));
        }

        /// <summary>
        /// Updates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderExpensesResponse</returns>
        public TsiWebServiceOrderExpensesResponse ServiceOrdersUpdateExpense (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model)
        {
             ApiResponse<TsiWebServiceOrderExpensesResponse> localVarResponse = ServiceOrdersUpdateExpenseWithHttpInfo(serviceOrderNumber, expenseNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderExpensesResponse</returns>
        public ApiResponse< TsiWebServiceOrderExpensesResponse > ServiceOrdersUpdateExpenseWithHttpInfo (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateExpense");
            // verify the required parameter 'expenseNumber' is set
            if (expenseNumber == null)
                throw new ApiException(400, "Missing required parameter 'expenseNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateExpense");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateExpense");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses/{expenseNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (expenseNumber != null) localVarPathParams.Add("expenseNumber", this.Configuration.ApiClient.ParameterToString(expenseNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpensesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpensesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpensesResponse)));
        }

        /// <summary>
        /// Updates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderExpensesResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderExpensesResponse> ServiceOrdersUpdateExpenseAsync (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model)
        {
             ApiResponse<TsiWebServiceOrderExpensesResponse> localVarResponse = await ServiceOrdersUpdateExpenseAsyncWithHttpInfo(serviceOrderNumber, expenseNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an expense. The DistanceType field accepts values \&quot;DoNotChangeDistance\&quot;, \&quot;SetByEndOdometer\&quot;, or \&quot;SetByDistance\&quot;.      &lt;p&gt;The AcceptanceStatus field accepts values \&quot;Open\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, or \&quot;Resubmitted\&quot;.&lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="expenseNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderExpensesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderExpensesResponse>> ServiceOrdersUpdateExpenseAsyncWithHttpInfo (int? serviceOrderNumber, int? expenseNumber, TsiWebUpdateExpenseModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateExpense");
            // verify the required parameter 'expenseNumber' is set
            if (expenseNumber == null)
                throw new ApiException(400, "Missing required parameter 'expenseNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateExpense");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateExpense");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/expenses/{expenseNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (expenseNumber != null) localVarPathParams.Add("expenseNumber", this.Configuration.ApiClient.ParameterToString(expenseNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateExpense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderExpensesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderExpensesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderExpensesResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        public TsiWebServiceOrderResponse ServiceOrdersUpdateManagedServiceOrder (TsiWebUpdateManagedServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = ServiceOrdersUpdateManagedServiceOrderWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        public ApiResponse< TsiWebServiceOrderResponse > ServiceOrdersUpdateManagedServiceOrderWithHttpInfo (TsiWebUpdateManagedServiceOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateManagedServiceOrder");

            var localVarPath = "/api/serviceorders/managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateManagedServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersUpdateManagedServiceOrderAsync (TsiWebUpdateManagedServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = await ServiceOrdersUpdateManagedServiceOrderAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersUpdateManagedServiceOrderAsyncWithHttpInfo (TsiWebUpdateManagedServiceOrderModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateManagedServiceOrder");

            var localVarPath = "/api/serviceorders/managed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateManagedServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Updates the service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>TsiWebServiceOrderResponse</returns>
        public TsiWebServiceOrderResponse ServiceOrdersUpdateServiceOrder (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = ServiceOrdersUpdateServiceOrderWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>ApiResponse of TsiWebServiceOrderResponse</returns>
        public ApiResponse< TsiWebServiceOrderResponse > ServiceOrdersUpdateServiceOrderWithHttpInfo (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrder");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Updates the service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>Task of TsiWebServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResponse> ServiceOrdersUpdateServiceOrderAsync (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model)
        {
             ApiResponse<TsiWebServiceOrderResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderAsyncWithHttpInfo(serviceOrderNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the service order. DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="model">The update service order model</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResponse>> ServiceOrdersUpdateServiceOrderAsyncWithHttpInfo (int? serviceOrderNumber, TsiWebUpdateServiceOrderModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrder");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrder");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResponse)));
        }

        /// <summary>
        /// Updates the item serviced The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderItemServicedResponse</returns>
        public TsiWebServiceOrderItemServicedResponse ServiceOrdersUpdateServiceOrderItemServiced (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model)
        {
             ApiResponse<TsiWebServiceOrderItemServicedResponse> localVarResponse = ServiceOrdersUpdateServiceOrderItemServicedWithHttpInfo(serviceOrderNumber, itemServicedNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the item serviced The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderItemServicedResponse</returns>
        public ApiResponse< TsiWebServiceOrderItemServicedResponse > ServiceOrdersUpdateServiceOrderItemServicedWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderItemServiced");
            // verify the required parameter 'itemServicedNumber' is set
            if (itemServicedNumber == null)
                throw new ApiException(400, "Missing required parameter 'itemServicedNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderItemServiced");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderItemServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/ItemsServiced/{itemServicedNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (itemServicedNumber != null) localVarPathParams.Add("itemServicedNumber", this.Configuration.ApiClient.ParameterToString(itemServicedNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemServicedResponse)));
        }

        /// <summary>
        /// Updates the item serviced The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderItemServicedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderItemServicedResponse> ServiceOrdersUpdateServiceOrderItemServicedAsync (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model)
        {
             ApiResponse<TsiWebServiceOrderItemServicedResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderItemServicedAsyncWithHttpInfo(serviceOrderNumber, itemServicedNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the item serviced The UpdateContractMetersType accepts values \&quot;DoNotUpdate\&quot;, \&quot;UpdateByReading\&quot;, or \&quot;UpdateByClicksUsed\&quot;.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="itemServicedNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderItemServicedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderItemServicedResponse>> ServiceOrdersUpdateServiceOrderItemServicedAsyncWithHttpInfo (int? serviceOrderNumber, int? itemServicedNumber, TsiWebUpdateServiceOrderItemServicedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderItemServiced");
            // verify the required parameter 'itemServicedNumber' is set
            if (itemServicedNumber == null)
                throw new ApiException(400, "Missing required parameter 'itemServicedNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderItemServiced");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderItemServiced");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/ItemsServiced/{itemServicedNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (itemServicedNumber != null) localVarPathParams.Add("itemServicedNumber", this.Configuration.ApiClient.ParameterToString(itemServicedNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderItemServiced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderItemServicedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderItemServicedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderItemServicedResponse)));
        }

        /// <summary>
        /// Updates a non-stock part. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        public TsiWebServiceOrderPartsUsedResponse ServiceOrdersUpdateServiceOrderNonStockPartsUsed (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = ServiceOrdersUpdateServiceOrderNonStockPartsUsedWithHttpInfo(serviceOrderNumber, partNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a non-stock part. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartsUsedResponse > ServiceOrdersUpdateServiceOrderNonStockPartsUsedWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNonStockPartsUsed");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNonStockPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNonStockPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/nonstock/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderNonStockPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Updates a non-stock part. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersUpdateServiceOrderNonStockPartsUsedAsync (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderNonStockPartsUsedAsyncWithHttpInfo(serviceOrderNumber, partNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a non-stock part. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersUpdateServiceOrderNonStockPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderNonStockPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNonStockPartsUsed");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNonStockPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNonStockPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/nonstock/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderNonStockPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Updates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderNoteResponse</returns>
        public TsiWebServiceOrderNoteResponse ServiceOrdersUpdateServiceOrderNote (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model)
        {
             ApiResponse<TsiWebServiceOrderNoteResponse> localVarResponse = ServiceOrdersUpdateServiceOrderNoteWithHttpInfo(serviceOrderNumber, serviceOrderNoteNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderNoteResponse</returns>
        public ApiResponse< TsiWebServiceOrderNoteResponse > ServiceOrdersUpdateServiceOrderNoteWithHttpInfo (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNote");
            // verify the required parameter 'serviceOrderNoteNumber' is set
            if (serviceOrderNoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNoteNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNote");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNote");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/notes/{serviceOrderNoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (serviceOrderNoteNumber != null) localVarPathParams.Add("serviceOrderNoteNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderNoteResponse)));
        }

        /// <summary>
        /// Updates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderNoteResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderNoteResponse> ServiceOrdersUpdateServiceOrderNoteAsync (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model)
        {
             ApiResponse<TsiWebServiceOrderNoteResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderNoteAsyncWithHttpInfo(serviceOrderNumber, serviceOrderNoteNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a service order note. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="serviceOrderNoteNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderNoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderNoteResponse>> ServiceOrdersUpdateServiceOrderNoteAsyncWithHttpInfo (int? serviceOrderNumber, int? serviceOrderNoteNumber, TsiWebServiceOrderNoteModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNote");
            // verify the required parameter 'serviceOrderNoteNumber' is set
            if (serviceOrderNoteNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNoteNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNote");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderNote");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/notes/{serviceOrderNoteNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (serviceOrderNoteNumber != null) localVarPathParams.Add("serviceOrderNoteNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNoteNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderNoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderNoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderNoteResponse)));
        }

        /// <summary>
        /// Updates a part on a service order. The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartsUsedResponse</returns>
        public TsiWebServiceOrderPartsUsedResponse ServiceOrdersUpdateServiceOrderPartsUsed (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = ServiceOrdersUpdateServiceOrderPartsUsedWithHttpInfo(serviceOrderNumber, partNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a part on a service order. The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartsUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartsUsedResponse > ServiceOrdersUpdateServiceOrderPartsUsedWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsed");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Updates a part on a service order. The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartsUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartsUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedAsync (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model)
        {
             ApiResponse<TsiWebServiceOrderPartsUsedResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderPartsUsedAsyncWithHttpInfo(serviceOrderNumber, partNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a part on a service order. The UseBookPricesAndDiscounts field is required; if it is true then Price Levels will be used, if it is false then Sell Price will be used. To change the estimated cost UseBookPricesAndDiscounts must have a value.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number.</param>
        /// <param name="partNumber">The part number.</param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartsUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartsUsedResponse>> ServiceOrdersUpdateServiceOrderPartsUsedAsyncWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebUpdateServiceOrderPartsUsedModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsed");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsed");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsed");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderPartsUsed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartsUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartsUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartsUsedResponse)));
        }

        /// <summary>
        /// Updates the assembly detail for a service order part 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartUsedResponse</returns>
        public TsiWebServiceOrderPartUsedResponse ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model)
        {
             ApiResponse<TsiWebServiceOrderPartUsedResponse> localVarResponse = ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailWithHttpInfo(serviceOrderNumber, partsUsedNumber, partUsedAssemblyDetailNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the assembly detail for a service order part 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartUsedResponse > ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");
            // verify the required parameter 'partsUsedNumber' is set
            if (partsUsedNumber == null)
                throw new ApiException(400, "Missing required parameter 'partsUsedNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");
            // verify the required parameter 'partUsedAssemblyDetailNumber' is set
            if (partUsedAssemblyDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'partUsedAssemblyDetailNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/{partsUsedNumber}/assembly/{partUsedAssemblyDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partsUsedNumber != null) localVarPathParams.Add("partsUsedNumber", this.Configuration.ApiClient.ParameterToString(partsUsedNumber)); // path parameter
            if (partUsedAssemblyDetailNumber != null) localVarPathParams.Add("partUsedAssemblyDetailNumber", this.Configuration.ApiClient.ParameterToString(partUsedAssemblyDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartUsedResponse)));
        }

        /// <summary>
        /// Updates the assembly detail for a service order part 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailAsync (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model)
        {
             ApiResponse<TsiWebServiceOrderPartUsedResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailAsyncWithHttpInfo(serviceOrderNumber, partsUsedNumber, partUsedAssemblyDetailNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the assembly detail for a service order part 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partsUsedNumber"></param>
        /// <param name="partUsedAssemblyDetailNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartUsedResponse>> ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetailAsyncWithHttpInfo (int? serviceOrderNumber, int? partsUsedNumber, int? partUsedAssemblyDetailNumber, TsiWebUpdateServiceOrderPartsUsedAssemblyDetailModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");
            // verify the required parameter 'partsUsedNumber' is set
            if (partsUsedNumber == null)
                throw new ApiException(400, "Missing required parameter 'partsUsedNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");
            // verify the required parameter 'partUsedAssemblyDetailNumber' is set
            if (partUsedAssemblyDetailNumber == null)
                throw new ApiException(400, "Missing required parameter 'partUsedAssemblyDetailNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/{partsUsedNumber}/assembly/{partUsedAssemblyDetailNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partsUsedNumber != null) localVarPathParams.Add("partsUsedNumber", this.Configuration.ApiClient.ParameterToString(partsUsedNumber)); // path parameter
            if (partUsedAssemblyDetailNumber != null) localVarPathParams.Add("partUsedAssemblyDetailNumber", this.Configuration.ApiClient.ParameterToString(partUsedAssemblyDetailNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderPartsUsedAssemblyDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartUsedResponse)));
        }

        /// <summary>
        /// Updates a line item comment for the service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>TsiWebServiceOrderPartUsedResponse</returns>
        public TsiWebServiceOrderPartUsedResponse ServiceOrdersUpdateServiceOrderPartsUsedComment (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
             ApiResponse<TsiWebServiceOrderPartUsedResponse> localVarResponse = ServiceOrdersUpdateServiceOrderPartsUsedCommentWithHttpInfo(serviceOrderNumber, partNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a line item comment for the service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderPartUsedResponse</returns>
        public ApiResponse< TsiWebServiceOrderPartUsedResponse > ServiceOrdersUpdateServiceOrderPartsUsedCommentWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedComment");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedComment");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/comments/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderPartsUsedComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartUsedResponse)));
        }

        /// <summary>
        /// Updates a line item comment for the service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of TsiWebServiceOrderPartUsedResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderPartUsedResponse> ServiceOrdersUpdateServiceOrderPartsUsedCommentAsync (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
             ApiResponse<TsiWebServiceOrderPartUsedResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderPartsUsedCommentAsyncWithHttpInfo(serviceOrderNumber, partNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a line item comment for the service order. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="partNumber"></param>
        /// <param name="model"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderPartUsedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderPartUsedResponse>> ServiceOrdersUpdateServiceOrderPartsUsedCommentAsyncWithHttpInfo (int? serviceOrderNumber, int? partNumber, TsiWebServiceOrderPartsUsedCommentModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedComment");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedComment");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderPartsUsedComment");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/parts/comments/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderPartsUsedComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderPartUsedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderPartUsedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderPartUsedResponse)));
        }

        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>TsiWebServiceOrderResolutionResponse</returns>
        public TsiWebServiceOrderResolutionResponse ServiceOrdersUpdateServiceOrderResolution (int? serviceOrderNumber, int? resolutionIndex, string resolution)
        {
             ApiResponse<TsiWebServiceOrderResolutionResponse> localVarResponse = ServiceOrdersUpdateServiceOrderResolutionWithHttpInfo(serviceOrderNumber, resolutionIndex, resolution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderResolutionResponse</returns>
        public ApiResponse< TsiWebServiceOrderResolutionResponse > ServiceOrdersUpdateServiceOrderResolutionWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex, string resolution)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderResolution");
            // verify the required parameter 'resolutionIndex' is set
            if (resolutionIndex == null)
                throw new ApiException(400, "Missing required parameter 'resolutionIndex' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderResolution");
            // verify the required parameter 'resolution' is set
            if (resolution == null)
                throw new ApiException(400, "Missing required parameter 'resolution' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderResolution");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/resolutions/{resolutionIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (resolutionIndex != null) localVarPathParams.Add("resolutionIndex", this.Configuration.ApiClient.ParameterToString(resolutionIndex)); // path parameter
            if (resolution != null && resolution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resolution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resolution; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResolutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResolutionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResolutionResponse)));
        }

        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of TsiWebServiceOrderResolutionResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderResolutionResponse> ServiceOrdersUpdateServiceOrderResolutionAsync (int? serviceOrderNumber, int? resolutionIndex, string resolution)
        {
             ApiResponse<TsiWebServiceOrderResolutionResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderResolutionAsyncWithHttpInfo(serviceOrderNumber, resolutionIndex, resolution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a resolution on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="resolutionIndex"></param>
        /// <param name="resolution"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderResolutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderResolutionResponse>> ServiceOrdersUpdateServiceOrderResolutionAsyncWithHttpInfo (int? serviceOrderNumber, int? resolutionIndex, string resolution)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderResolution");
            // verify the required parameter 'resolutionIndex' is set
            if (resolutionIndex == null)
                throw new ApiException(400, "Missing required parameter 'resolutionIndex' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderResolution");
            // verify the required parameter 'resolution' is set
            if (resolution == null)
                throw new ApiException(400, "Missing required parameter 'resolution' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderResolution");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/resolutions/{resolutionIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (resolutionIndex != null) localVarPathParams.Add("resolutionIndex", this.Configuration.ApiClient.ParameterToString(resolutionIndex)); // path parameter
            if (resolution != null && resolution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resolution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resolution; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderResolutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderResolutionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderResolutionResponse)));
        }

        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>TsiWebServiceOrderSymptomResponse</returns>
        public TsiWebServiceOrderSymptomResponse ServiceOrdersUpdateServiceOrderSymptom (int? serviceOrderNumber, int? symptomIndex, string symptom)
        {
             ApiResponse<TsiWebServiceOrderSymptomResponse> localVarResponse = ServiceOrdersUpdateServiceOrderSymptomWithHttpInfo(serviceOrderNumber, symptomIndex, symptom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>ApiResponse of TsiWebServiceOrderSymptomResponse</returns>
        public ApiResponse< TsiWebServiceOrderSymptomResponse > ServiceOrdersUpdateServiceOrderSymptomWithHttpInfo (int? serviceOrderNumber, int? symptomIndex, string symptom)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderSymptom");
            // verify the required parameter 'symptomIndex' is set
            if (symptomIndex == null)
                throw new ApiException(400, "Missing required parameter 'symptomIndex' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderSymptom");
            // verify the required parameter 'symptom' is set
            if (symptom == null)
                throw new ApiException(400, "Missing required parameter 'symptom' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderSymptom");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/symptoms/{symptomIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (symptomIndex != null) localVarPathParams.Add("symptomIndex", this.Configuration.ApiClient.ParameterToString(symptomIndex)); // path parameter
            if (symptom != null && symptom.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symptom); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symptom; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSymptomResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSymptomResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSymptomResponse)));
        }

        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of TsiWebServiceOrderSymptomResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderSymptomResponse> ServiceOrdersUpdateServiceOrderSymptomAsync (int? serviceOrderNumber, int? symptomIndex, string symptom)
        {
             ApiResponse<TsiWebServiceOrderSymptomResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderSymptomAsyncWithHttpInfo(serviceOrderNumber, symptomIndex, symptom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a symptom on a service order, acceptable values are 1-5 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber"></param>
        /// <param name="symptomIndex"></param>
        /// <param name="symptom"></param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderSymptomResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderSymptomResponse>> ServiceOrdersUpdateServiceOrderSymptomAsyncWithHttpInfo (int? serviceOrderNumber, int? symptomIndex, string symptom)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderSymptom");
            // verify the required parameter 'symptomIndex' is set
            if (symptomIndex == null)
                throw new ApiException(400, "Missing required parameter 'symptomIndex' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderSymptom");
            // verify the required parameter 'symptom' is set
            if (symptom == null)
                throw new ApiException(400, "Missing required parameter 'symptom' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderSymptom");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/symptoms/{symptomIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (symptomIndex != null) localVarPathParams.Add("symptomIndex", this.Configuration.ApiClient.ParameterToString(symptomIndex)); // path parameter
            if (symptom != null && symptom.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(symptom); // http body (model) parameter
            }
            else
            {
                localVarPostBody = symptom; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderSymptom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderSymptomResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderSymptomResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderSymptomResponse)));
        }

        /// <summary>
        /// Updates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>TsiWebServiceOrderTimeLogResponse</returns>
        public TsiWebServiceOrderTimeLogResponse ServiceOrdersUpdateServiceOrderTimeLog (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model)
        {
             ApiResponse<TsiWebServiceOrderTimeLogResponse> localVarResponse = ServiceOrdersUpdateServiceOrderTimeLogWithHttpInfo(serviceOrderNumber, timeLogNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>ApiResponse of TsiWebServiceOrderTimeLogResponse</returns>
        public ApiResponse< TsiWebServiceOrderTimeLogResponse > ServiceOrdersUpdateServiceOrderTimeLogWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderTimeLog");
            // verify the required parameter 'timeLogNumber' is set
            if (timeLogNumber == null)
                throw new ApiException(400, "Missing required parameter 'timeLogNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderTimeLog");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderTimeLog");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs/{timeLogNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (timeLogNumber != null) localVarPathParams.Add("timeLogNumber", this.Configuration.ApiClient.ParameterToString(timeLogNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderTimeLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogResponse)));
        }

        /// <summary>
        /// Updates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>Task of TsiWebServiceOrderTimeLogResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebServiceOrderTimeLogResponse> ServiceOrdersUpdateServiceOrderTimeLogAsync (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model)
        {
             ApiResponse<TsiWebServiceOrderTimeLogResponse> localVarResponse = await ServiceOrdersUpdateServiceOrderTimeLogAsyncWithHttpInfo(serviceOrderNumber, timeLogNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a service order time log. Valid billing option types are - \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,   &lt;P&gt;  Valid rate basis values are - \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot;, \&quot;Standard\&quot;, \&quot;AccountDefault\&quot;, \&quot;PriceBook\&quot;, \&quot;FlatFee\&quot;, \&quot;Manual\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid copy indicator type values are - \&quot;DoNotCopy,\&quot;CopyWhenSaving,\&quot;CopyWhenClosingLog\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid time to invoice type values are - \&quot;BillableHoursMinutes\&quot;, \&quot;UtilizedTime\&quot;, \&quot;RoundedMinimunUtilizedtime\&quot;, \&quot;ActualTime\&quot;, \&quot;RoundedMinimunActualTime\&quot;.  &lt;/P&gt;&lt;P&gt;  Valid acceptance status type values are - \&quot;None\&quot;, \&quot;Accepted\&quot;, \&quot;Questioned\&quot;, \&quot;Resubmitted\&quot;,.  &lt;/P&gt;&lt;P&gt;  If the user does have \&quot;CanAdjustUtilizationHours\&quot; permission, the deductible hours and minutes will not be updated.  &lt;/P&gt;&lt;p&gt;  If the user does have \&quot;CanOverrideLaborRateOnTimeLogs\&quot; permissions, then logreason labor rate, rate basis and rate type will not be updated.  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceOrderNumber">The service order number</param>
        /// <param name="timeLogNumber">The time log number</param>
        /// <param name="model">The update service order time log model.</param>
        /// <returns>Task of ApiResponse (TsiWebServiceOrderTimeLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebServiceOrderTimeLogResponse>> ServiceOrdersUpdateServiceOrderTimeLogAsyncWithHttpInfo (int? serviceOrderNumber, int? timeLogNumber, TsiWebUpdateServiceOrderTimeLogModel model)
        {
            // verify the required parameter 'serviceOrderNumber' is set
            if (serviceOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'serviceOrderNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderTimeLog");
            // verify the required parameter 'timeLogNumber' is set
            if (timeLogNumber == null)
                throw new ApiException(400, "Missing required parameter 'timeLogNumber' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderTimeLog");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ServiceOrdersApi->ServiceOrdersUpdateServiceOrderTimeLog");

            var localVarPath = "/api/serviceorders/{serviceOrderNumber}/timelogs/{timeLogNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceOrderNumber != null) localVarPathParams.Add("serviceOrderNumber", this.Configuration.ApiClient.ParameterToString(serviceOrderNumber)); // path parameter
            if (timeLogNumber != null) localVarPathParams.Add("timeLogNumber", this.Configuration.ApiClient.ParameterToString(timeLogNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceOrdersUpdateServiceOrderTimeLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebServiceOrderTimeLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebServiceOrderTimeLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebServiceOrderTimeLogResponse)));
        }

    }
}
