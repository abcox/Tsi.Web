/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tsi.Web.Client;
using Tsi.Web.Model;

namespace Tsi.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced search for Task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksAdvancedSearch (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTasksResponse</returns>
        TsiWebTasksResponse TasksCreateTask (TsiWebCreateTaskModel model);

        /// <summary>
        /// Creates a task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        ApiResponse<TsiWebTasksResponse> TasksCreateTaskWithHttpInfo (TsiWebCreateTaskModel model);
        /// <summary>
        /// Creates a task checklist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTaskCheckListResponse</returns>
        TsiWebTaskCheckListResponse TasksCreateTaskCheckListItem (int? taskNumber, TsiWebCreateTaskCheckListModel model);

        /// <summary>
        /// Creates a task checklist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTaskCheckListResponse</returns>
        ApiResponse<TsiWebTaskCheckListResponse> TasksCreateTaskCheckListItemWithHttpInfo (int? taskNumber, TsiWebCreateTaskCheckListModel model);
        /// <summary>
        /// Gets the custom fields for a task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        List<TsiWebCustomField> TasksGetCustomFields (int? taskNumber);

        /// <summary>
        /// Gets the custom fields for a task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        ApiResponse<List<TsiWebCustomField>> TasksGetCustomFieldsWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Gets the task check list by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>List&lt;TsiWebTaskChecklistItem&gt;</returns>
        List<TsiWebTaskChecklistItem> TasksGetTaskCheckList (int? taskNumber);

        /// <summary>
        /// Gets the task check list by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebTaskChecklistItem&gt;</returns>
        ApiResponse<List<TsiWebTaskChecklistItem>> TasksGetTaskCheckListWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Gets the task details by task number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>TsiWebTaskDetail</returns>
        TsiWebTaskDetail TasksGetTaskDetails (int? taskNumber);

        /// <summary>
        /// Gets the task details by task number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebTaskDetail</returns>
        ApiResponse<TsiWebTaskDetail> TasksGetTaskDetailsWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Gets the task summary by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>TsiWebTaskSummary</returns>
        TsiWebTaskSummary TasksGetTaskSummary (int? taskNumber);

        /// <summary>
        /// Gets the task summary by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebTaskSummary</returns>
        ApiResponse<TsiWebTaskSummary> TasksGetTaskSummaryWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Search task by account name.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByAccountName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by account name.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByAccountNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by Custom field .
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        TsiWebSearchContractResponse TasksSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by Custom field .
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        ApiResponse<TsiWebSearchContractResponse> TasksSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by Task End Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByEndDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by Task End Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByEndDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByScheduledByRep (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByScheduledByRepWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByScheduledForRep (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByScheduledForRepWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by Task Start Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByStartDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by Task Start Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByStartDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task action.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByTaskAction (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task action.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByTaskActionWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByTaskNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByTaskNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task type.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        TsiWebSearchTaskResponse TasksSearchByTaskType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task type.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        ApiResponse<TsiWebSearchTaskResponse> TasksSearchByTaskTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Updates the task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTaskResponse</returns>
        TsiWebTaskResponse TasksUpdateTask (int? taskNumber, TsiWebUpdateTaskModel model);

        /// <summary>
        /// Updates the task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTaskResponse</returns>
        ApiResponse<TsiWebTaskResponse> TasksUpdateTaskWithHttpInfo (int? taskNumber, TsiWebUpdateTaskModel model);
        /// <summary>
        /// Updates the task checklist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTaskCheckListResponse</returns>
        TsiWebTaskCheckListResponse TasksUpdateTaskCheckListItem (int? taskNumber, TsiWebUpdateTaskCheckListModel model);

        /// <summary>
        /// Updates the task checklist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTaskCheckListResponse</returns>
        ApiResponse<TsiWebTaskCheckListResponse> TasksUpdateTaskCheckListItemWithHttpInfo (int? taskNumber, TsiWebUpdateTaskCheckListModel model);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced search for Task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksAdvancedSearchAsync (TsiWebAdvancedSearchRequest request);

        /// <summary>
        /// Advanced search for Task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request);
        /// <summary>
        /// Creates a task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        System.Threading.Tasks.Task<TsiWebTasksResponse> TasksCreateTaskAsync (TsiWebCreateTaskModel model);

        /// <summary>
        /// Creates a task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> TasksCreateTaskAsyncWithHttpInfo (TsiWebCreateTaskModel model);
        /// <summary>
        /// Creates a task checklist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTaskCheckListResponse</returns>
        System.Threading.Tasks.Task<TsiWebTaskCheckListResponse> TasksCreateTaskCheckListItemAsync (int? taskNumber, TsiWebCreateTaskCheckListModel model);

        /// <summary>
        /// Creates a task checklist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskCheckListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTaskCheckListResponse>> TasksCreateTaskCheckListItemAsyncWithHttpInfo (int? taskNumber, TsiWebCreateTaskCheckListModel model);
        /// <summary>
        /// Gets the custom fields for a task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebCustomField>> TasksGetCustomFieldsAsync (int? taskNumber);

        /// <summary>
        /// Gets the custom fields for a task.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> TasksGetCustomFieldsAsyncWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Gets the task check list by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebTaskChecklistItem&gt;</returns>
        System.Threading.Tasks.Task<List<TsiWebTaskChecklistItem>> TasksGetTaskCheckListAsync (int? taskNumber);

        /// <summary>
        /// Gets the task check list by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskChecklistItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskChecklistItem>>> TasksGetTaskCheckListAsyncWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Gets the task details by task number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of TsiWebTaskDetail</returns>
        System.Threading.Tasks.Task<TsiWebTaskDetail> TasksGetTaskDetailsAsync (int? taskNumber);

        /// <summary>
        /// Gets the task details by task number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTaskDetail>> TasksGetTaskDetailsAsyncWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Gets the task summary by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of TsiWebTaskSummary</returns>
        System.Threading.Tasks.Task<TsiWebTaskSummary> TasksGetTaskSummaryAsync (int? taskNumber);

        /// <summary>
        /// Gets the task summary by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTaskSummary>> TasksGetTaskSummaryAsyncWithHttpInfo (int? taskNumber);
        /// <summary>
        /// Search task by account name.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByAccountNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by account name.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByAccountNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by Custom field .
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchContractResponse> TasksSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by Custom field .
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> TasksSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by Task End Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByEndDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by Task End Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByEndDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByScheduledByRepAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByScheduledByRepAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByScheduledForRepAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task scheduled by rep.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByScheduledForRepAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by Task Start Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByStartDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by Task Start Date.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByStartDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task action.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByTaskActionAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task action.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByTaskActionAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByTaskNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task number.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByTaskNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Search task by task type.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByTaskTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);

        /// <summary>
        /// Search task by task type.
        /// </summary>
        /// <remarks>
        /// If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByTaskTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null);
        /// <summary>
        /// Updates the task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTaskResponse</returns>
        System.Threading.Tasks.Task<TsiWebTaskResponse> TasksUpdateTaskAsync (int? taskNumber, TsiWebUpdateTaskModel model);

        /// <summary>
        /// Updates the task.
        /// </summary>
        /// <remarks>
        /// The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTaskResponse>> TasksUpdateTaskAsyncWithHttpInfo (int? taskNumber, TsiWebUpdateTaskModel model);
        /// <summary>
        /// Updates the task checklist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTaskCheckListResponse</returns>
        System.Threading.Tasks.Task<TsiWebTaskCheckListResponse> TasksUpdateTaskCheckListItemAsync (int? taskNumber, TsiWebUpdateTaskCheckListModel model);

        /// <summary>
        /// Updates the task checklist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskCheckListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TsiWebTaskCheckListResponse>> TasksUpdateTaskCheckListItemAsyncWithHttpInfo (int? taskNumber, TsiWebUpdateTaskCheckListModel model);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Tsi.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new Tsi.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Tsi.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tsi.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tsi.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tsi.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tsi.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced search for Task. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksAdvancedSearch (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksAdvancedSearchWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced search for Task. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksAdvancedSearchWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TasksApi->TasksAdvancedSearch");

            var localVarPath = "/api/tasks/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Advanced search for Task. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksAdvancedSearchAsync (TsiWebAdvancedSearchRequest request)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksAdvancedSearchAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced search for Task. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">An AdvancedSearchRequest</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksAdvancedSearchAsyncWithHttpInfo (TsiWebAdvancedSearchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TasksApi->TasksAdvancedSearch");

            var localVarPath = "/api/tasks/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksAdvancedSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Creates a task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTasksResponse</returns>
        public TsiWebTasksResponse TasksCreateTask (TsiWebCreateTaskModel model)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = TasksCreateTaskWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTasksResponse</returns>
        public ApiResponse< TsiWebTasksResponse > TasksCreateTaskWithHttpInfo (TsiWebCreateTaskModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksCreateTask");

            var localVarPath = "/api/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksCreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Creates a task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTasksResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTasksResponse> TasksCreateTaskAsync (TsiWebCreateTaskModel model)
        {
             ApiResponse<TsiWebTasksResponse> localVarResponse = await TasksCreateTaskAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTasksResponse>> TasksCreateTaskAsyncWithHttpInfo (TsiWebCreateTaskModel model)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksCreateTask");

            var localVarPath = "/api/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksCreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTasksResponse)));
        }

        /// <summary>
        /// Creates a task checklist item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTaskCheckListResponse</returns>
        public TsiWebTaskCheckListResponse TasksCreateTaskCheckListItem (int? taskNumber, TsiWebCreateTaskCheckListModel model)
        {
             ApiResponse<TsiWebTaskCheckListResponse> localVarResponse = TasksCreateTaskCheckListItemWithHttpInfo(taskNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a task checklist item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTaskCheckListResponse</returns>
        public ApiResponse< TsiWebTaskCheckListResponse > TasksCreateTaskCheckListItemWithHttpInfo (int? taskNumber, TsiWebCreateTaskCheckListModel model)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksCreateTaskCheckListItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksCreateTaskCheckListItem");

            var localVarPath = "/api/tasks/{taskNumber}/checklist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksCreateTaskCheckListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskCheckListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskCheckListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskCheckListResponse)));
        }

        /// <summary>
        /// Creates a task checklist item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTaskCheckListResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTaskCheckListResponse> TasksCreateTaskCheckListItemAsync (int? taskNumber, TsiWebCreateTaskCheckListModel model)
        {
             ApiResponse<TsiWebTaskCheckListResponse> localVarResponse = await TasksCreateTaskCheckListItemAsyncWithHttpInfo(taskNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a task checklist item. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskCheckListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTaskCheckListResponse>> TasksCreateTaskCheckListItemAsyncWithHttpInfo (int? taskNumber, TsiWebCreateTaskCheckListModel model)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksCreateTaskCheckListItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksCreateTaskCheckListItem");

            var localVarPath = "/api/tasks/{taskNumber}/checklist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksCreateTaskCheckListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskCheckListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskCheckListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskCheckListResponse)));
        }

        /// <summary>
        /// Gets the custom fields for a task. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>List&lt;TsiWebCustomField&gt;</returns>
        public List<TsiWebCustomField> TasksGetCustomFields (int? taskNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = TasksGetCustomFieldsWithHttpInfo(taskNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom fields for a task. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebCustomField&gt;</returns>
        public ApiResponse< List<TsiWebCustomField> > TasksGetCustomFieldsWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetCustomFields");

            var localVarPath = "/api/tasks/{taskNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the custom fields for a task. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>Task of List&lt;TsiWebCustomField&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebCustomField>> TasksGetCustomFieldsAsync (int? taskNumber)
        {
             ApiResponse<List<TsiWebCustomField>> localVarResponse = await TasksGetCustomFieldsAsyncWithHttpInfo(taskNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom fields for a task. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebCustomField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebCustomField>>> TasksGetCustomFieldsAsyncWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetCustomFields");

            var localVarPath = "/api/tasks/{taskNumber}/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebCustomField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebCustomField>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebCustomField>)));
        }

        /// <summary>
        /// Gets the task check list by task number. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>List&lt;TsiWebTaskChecklistItem&gt;</returns>
        public List<TsiWebTaskChecklistItem> TasksGetTaskCheckList (int? taskNumber)
        {
             ApiResponse<List<TsiWebTaskChecklistItem>> localVarResponse = TasksGetTaskCheckListWithHttpInfo(taskNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the task check list by task number. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>ApiResponse of List&lt;TsiWebTaskChecklistItem&gt;</returns>
        public ApiResponse< List<TsiWebTaskChecklistItem> > TasksGetTaskCheckListWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetTaskCheckList");

            var localVarPath = "/api/tasks/{taskNumber}/tasklist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetTaskCheckList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskChecklistItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskChecklistItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskChecklistItem>)));
        }

        /// <summary>
        /// Gets the task check list by task number. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of List&lt;TsiWebTaskChecklistItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsiWebTaskChecklistItem>> TasksGetTaskCheckListAsync (int? taskNumber)
        {
             ApiResponse<List<TsiWebTaskChecklistItem>> localVarResponse = await TasksGetTaskCheckListAsyncWithHttpInfo(taskNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the task check list by task number. If you are retrieving a private task and if you are not the owner, an empty response is returned.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of ApiResponse (List&lt;TsiWebTaskChecklistItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TsiWebTaskChecklistItem>>> TasksGetTaskCheckListAsyncWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetTaskCheckList");

            var localVarPath = "/api/tasks/{taskNumber}/tasklist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetTaskCheckList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TsiWebTaskChecklistItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TsiWebTaskChecklistItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TsiWebTaskChecklistItem>)));
        }

        /// <summary>
        /// Gets the task details by task number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>TsiWebTaskDetail</returns>
        public TsiWebTaskDetail TasksGetTaskDetails (int? taskNumber)
        {
             ApiResponse<TsiWebTaskDetail> localVarResponse = TasksGetTaskDetailsWithHttpInfo(taskNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the task details by task number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebTaskDetail</returns>
        public ApiResponse< TsiWebTaskDetail > TasksGetTaskDetailsWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetTaskDetails");

            var localVarPath = "/api/tasks/{taskNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetTaskDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskDetail)));
        }

        /// <summary>
        /// Gets the task details by task number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of TsiWebTaskDetail</returns>
        public async System.Threading.Tasks.Task<TsiWebTaskDetail> TasksGetTaskDetailsAsync (int? taskNumber)
        {
             ApiResponse<TsiWebTaskDetail> localVarResponse = await TasksGetTaskDetailsAsyncWithHttpInfo(taskNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the task details by task number. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTaskDetail>> TasksGetTaskDetailsAsyncWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetTaskDetails");

            var localVarPath = "/api/tasks/{taskNumber}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetTaskDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskDetail)));
        }

        /// <summary>
        /// Gets the task summary by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>TsiWebTaskSummary</returns>
        public TsiWebTaskSummary TasksGetTaskSummary (int? taskNumber)
        {
             ApiResponse<TsiWebTaskSummary> localVarResponse = TasksGetTaskSummaryWithHttpInfo(taskNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the task summary by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>ApiResponse of TsiWebTaskSummary</returns>
        public ApiResponse< TsiWebTaskSummary > TasksGetTaskSummaryWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetTaskSummary");

            var localVarPath = "/api/tasks/{taskNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetTaskSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskSummary)));
        }

        /// <summary>
        /// Gets the task summary by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of TsiWebTaskSummary</returns>
        public async System.Threading.Tasks.Task<TsiWebTaskSummary> TasksGetTaskSummaryAsync (int? taskNumber)
        {
             ApiResponse<TsiWebTaskSummary> localVarResponse = await TasksGetTaskSummaryAsyncWithHttpInfo(taskNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the task summary by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The account number.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTaskSummary>> TasksGetTaskSummaryAsyncWithHttpInfo (int? taskNumber)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksGetTaskSummary");

            var localVarPath = "/api/tasks/{taskNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGetTaskSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskSummary)));
        }

        /// <summary>
        /// Search task by account name. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByAccountName (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByAccountNameWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by account name. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByAccountNameWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByAccountName");

            var localVarPath = "/api/tasks/search/accountname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByAccountName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by account name. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByAccountNameAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByAccountNameAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by account name. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByAccountNameAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByAccountName");

            var localVarPath = "/api/tasks/search/accountname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByAccountName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by Custom field . If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchContractResponse</returns>
        public TsiWebSearchContractResponse TasksSearchByCustomField (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = TasksSearchByCustomFieldWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by Custom field . If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchContractResponse</returns>
        public ApiResponse< TsiWebSearchContractResponse > TasksSearchByCustomFieldWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksSearchByCustomField");

            var localVarPath = "/api/tasks/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search task by Custom field . If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchContractResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchContractResponse> TasksSearchByCustomFieldAsync (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchContractResponse> localVarResponse = await TasksSearchByCustomFieldAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by Custom field . If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.CustomFieldSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchContractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchContractResponse>> TasksSearchByCustomFieldAsyncWithHttpInfo (TsiWebCustomFieldSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksSearchByCustomField");

            var localVarPath = "/api/tasks/search/customfield";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchContractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchContractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchContractResponse)));
        }

        /// <summary>
        /// Search task by Task End Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByEndDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByEndDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by Task End Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByEndDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksSearchByEndDate");

            var localVarPath = "/api/tasks/search/enddate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByEndDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by Task End Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByEndDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByEndDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by Task End Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByEndDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksSearchByEndDate");

            var localVarPath = "/api/tasks/search/enddate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByEndDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByScheduledByRep (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByScheduledByRepWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByScheduledByRepWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByScheduledByRep");

            var localVarPath = "/api/tasks/search/scheduledbyrep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByScheduledByRep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByScheduledByRepAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByScheduledByRepAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByScheduledByRepAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByScheduledByRep");

            var localVarPath = "/api/tasks/search/scheduledbyrep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByScheduledByRep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByScheduledForRep (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByScheduledForRepWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByScheduledForRepWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByScheduledForRep");

            var localVarPath = "/api/tasks/search/scheduledforrep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByScheduledForRep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByScheduledForRepAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByScheduledForRepAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by task scheduled by rep. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByScheduledForRepAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByScheduledForRep");

            var localVarPath = "/api/tasks/search/scheduledforrep";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByScheduledForRep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by Task Start Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByStartDate (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByStartDateWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by Task Start Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByStartDateWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksSearchByStartDate");

            var localVarPath = "/api/tasks/search/startdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByStartDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by Task Start Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByStartDateAsync (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByStartDateAsyncWithHttpInfo(model, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by Task Start Date. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">A {Tsi.Web.DateTimeSearchModel}</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByStartDateAsyncWithHttpInfo (TsiWebDateTimeSearchModel model, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksSearchByStartDate");

            var localVarPath = "/api/tasks/search/startdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByStartDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task action. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByTaskAction (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByTaskActionWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by task action. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByTaskActionWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByTaskAction");

            var localVarPath = "/api/tasks/search/taskaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByTaskAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task action. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByTaskActionAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByTaskActionAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by task action. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByTaskActionAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByTaskAction");

            var localVarPath = "/api/tasks/search/taskaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByTaskAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByTaskNumber (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByTaskNumberWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByTaskNumberWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByTaskNumber");

            var localVarPath = "/api/tasks/search/tasknumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByTaskNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByTaskNumberAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByTaskNumberAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by task number. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByTaskNumberAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByTaskNumber");

            var localVarPath = "/api/tasks/search/tasknumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByTaskNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task type. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>TsiWebSearchTaskResponse</returns>
        public TsiWebSearchTaskResponse TasksSearchByTaskType (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = TasksSearchByTaskTypeWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search task by task type. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>ApiResponse of TsiWebSearchTaskResponse</returns>
        public ApiResponse< TsiWebSearchTaskResponse > TasksSearchByTaskTypeWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByTaskType");

            var localVarPath = "/api/tasks/search/tasktype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByTaskType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Search task by task type. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of TsiWebSearchTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebSearchTaskResponse> TasksSearchByTaskTypeAsync (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
             ApiResponse<TsiWebSearchTaskResponse> localVarResponse = await TasksSearchByTaskTypeAsyncWithHttpInfo(criteria, pageRequestPageSize, pageRequestStartRow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search task by task type. If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="criteria">A JSON or XML string containing the criteria.</param>
        /// <param name="pageRequestPageSize"> (optional)</param>
        /// <param name="pageRequestStartRow"> (optional)</param>
        /// <returns>Task of ApiResponse (TsiWebSearchTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebSearchTaskResponse>> TasksSearchByTaskTypeAsyncWithHttpInfo (string criteria, int? pageRequestPageSize = null, int? pageRequestStartRow = null)
        {
            // verify the required parameter 'criteria' is set
            if (criteria == null)
                throw new ApiException(400, "Missing required parameter 'criteria' when calling TasksApi->TasksSearchByTaskType");

            var localVarPath = "/api/tasks/search/tasktype";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageRequestPageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.pageSize", pageRequestPageSize)); // query parameter
            if (pageRequestStartRow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageRequest.startRow", pageRequestStartRow)); // query parameter
            if (criteria != null && criteria.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(criteria); // http body (model) parameter
            }
            else
            {
                localVarPostBody = criteria; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksSearchByTaskType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebSearchTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebSearchTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebSearchTaskResponse)));
        }

        /// <summary>
        /// Updates the task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTaskResponse</returns>
        public TsiWebTaskResponse TasksUpdateTask (int? taskNumber, TsiWebUpdateTaskModel model)
        {
             ApiResponse<TsiWebTaskResponse> localVarResponse = TasksUpdateTaskWithHttpInfo(taskNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTaskResponse</returns>
        public ApiResponse< TsiWebTaskResponse > TasksUpdateTaskWithHttpInfo (int? taskNumber, TsiWebUpdateTaskModel model)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksUpdateTask");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksUpdateTask");

            var localVarPath = "/api/tasks/{taskNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksUpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskResponse)));
        }

        /// <summary>
        /// Updates the task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTaskResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTaskResponse> TasksUpdateTaskAsync (int? taskNumber, TsiWebUpdateTaskModel model)
        {
             ApiResponse<TsiWebTaskResponse> localVarResponse = await TasksUpdateTaskAsyncWithHttpInfo(taskNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the task. The Type field accepts values \&quot;Phone Call\&quot;, \&quot;Appointment\&quot;, or \&quot;To-do\&quot;. All the values are case sensitive.
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTaskResponse>> TasksUpdateTaskAsyncWithHttpInfo (int? taskNumber, TsiWebUpdateTaskModel model)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksUpdateTask");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksUpdateTask");

            var localVarPath = "/api/tasks/{taskNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksUpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskResponse)));
        }

        /// <summary>
        /// Updates the task checklist. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>TsiWebTaskCheckListResponse</returns>
        public TsiWebTaskCheckListResponse TasksUpdateTaskCheckListItem (int? taskNumber, TsiWebUpdateTaskCheckListModel model)
        {
             ApiResponse<TsiWebTaskCheckListResponse> localVarResponse = TasksUpdateTaskCheckListItemWithHttpInfo(taskNumber, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the task checklist. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>ApiResponse of TsiWebTaskCheckListResponse</returns>
        public ApiResponse< TsiWebTaskCheckListResponse > TasksUpdateTaskCheckListItemWithHttpInfo (int? taskNumber, TsiWebUpdateTaskCheckListModel model)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksUpdateTaskCheckListItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksUpdateTaskCheckListItem");

            var localVarPath = "/api/tasks/{taskNumber}/checklist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksUpdateTaskCheckListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskCheckListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskCheckListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskCheckListResponse)));
        }

        /// <summary>
        /// Updates the task checklist. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of TsiWebTaskCheckListResponse</returns>
        public async System.Threading.Tasks.Task<TsiWebTaskCheckListResponse> TasksUpdateTaskCheckListItemAsync (int? taskNumber, TsiWebUpdateTaskCheckListModel model)
        {
             ApiResponse<TsiWebTaskCheckListResponse> localVarResponse = await TasksUpdateTaskCheckListItemAsyncWithHttpInfo(taskNumber, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the task checklist. 
        /// </summary>
        /// <exception cref="Tsi.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskNumber">The task number.</param>
        /// <param name="model">The task.</param>
        /// <returns>Task of ApiResponse (TsiWebTaskCheckListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TsiWebTaskCheckListResponse>> TasksUpdateTaskCheckListItemAsyncWithHttpInfo (int? taskNumber, TsiWebUpdateTaskCheckListModel model)
        {
            // verify the required parameter 'taskNumber' is set
            if (taskNumber == null)
                throw new ApiException(400, "Missing required parameter 'taskNumber' when calling TasksApi->TasksUpdateTaskCheckListItem");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling TasksApi->TasksUpdateTaskCheckListItem");

            var localVarPath = "/api/tasks/{taskNumber}/checklist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskNumber != null) localVarPathParams.Add("taskNumber", this.Configuration.ApiClient.ParameterToString(taskNumber)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksUpdateTaskCheckListItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TsiWebTaskCheckListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TsiWebTaskCheckListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TsiWebTaskCheckListResponse)));
        }

    }
}
