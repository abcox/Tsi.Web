/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAccount
    /// </summary>
    [DataContract]
    public partial class TsiWebAccount :  IEquatable<TsiWebAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAccount" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name of the account. (required).</param>
        /// <param name="accountId">Gets or sets the account identifier..</param>
        /// <param name="address1">Gets or sets address line 1..</param>
        /// <param name="address2">Gets or sets address line 2..</param>
        /// <param name="city">Gets or sets the city..</param>
        /// <param name="state">Gets or sets the state..</param>
        /// <param name="postalCode">Gets or sets the postal code..</param>
        /// <param name="country">Gets or sets the country..</param>
        /// <param name="accountType">Gets or sets the type of the account. (required).</param>
        /// <param name="status">Gets or sets the account status. (required).</param>
        /// <param name="hotNote">Gets or sets the hot note..</param>
        /// <param name="directionsToLocation">Gets or sets the directions to location..</param>
        /// <param name="specialInstructions">Gets or sets the special instructions for the AccountDetails..</param>
        /// <param name="quoteSpecialInstructions">Gets or sets the special instructions for quotes..</param>
        /// <param name="statusLabelAction">Gets or sets the status label action..</param>
        /// <param name="uRL1">Gets or sets the url 1..</param>
        /// <param name="uRL1Description">Gets or sets the url1 description..</param>
        /// <param name="uRL2">Gets or sets the url2..</param>
        /// <param name="uRL2Description">Gets or sets the url2 description..</param>
        /// <param name="initialContact">Gets or sets the initial contact date..</param>
        /// <param name="statusLabelActionId">Gets or sets the status label action identifier..</param>
        /// <param name="repNumber">Gets or sets the rep number..</param>
        /// <param name="primaryContactNumber">Gets or sets the primary contact..</param>
        /// <param name="isVendor">Gets a value indicating whether this account is vendor..</param>
        /// <param name="isSubcontractor">Gets a value indicating whether this account is subcontractor..</param>
        /// <param name="doNotEmail">Gets a value indicating whether or not email should be used to contact the account..</param>
        /// <param name="isOwnedByPublicRep">isOwnedByPublicRep.</param>
        /// <param name="canReassignRepsAccount">canReassignRepsAccount.</param>
        public TsiWebAccount(string name = default(string), string accountId = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string), string accountType = default(string), string status = default(string), string hotNote = default(string), string directionsToLocation = default(string), string specialInstructions = default(string), string quoteSpecialInstructions = default(string), string statusLabelAction = default(string), string uRL1 = default(string), string uRL1Description = default(string), string uRL2 = default(string), string uRL2Description = default(string), DateTime? initialContact = default(DateTime?), int? statusLabelActionId = default(int?), int? repNumber = default(int?), int? primaryContactNumber = default(int?), bool? isVendor = default(bool?), bool? isSubcontractor = default(bool?), bool? doNotEmail = default(bool?), bool? isOwnedByPublicRep = default(bool?), bool? canReassignRepsAccount = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TsiWebAccount and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new InvalidDataException("accountType is a required property for TsiWebAccount and cannot be null");
            }
            else
            {
                this.AccountType = accountType;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for TsiWebAccount and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.AccountId = accountId;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.Country = country;
            this.HotNote = hotNote;
            this.DirectionsToLocation = directionsToLocation;
            this.SpecialInstructions = specialInstructions;
            this.QuoteSpecialInstructions = quoteSpecialInstructions;
            this.StatusLabelAction = statusLabelAction;
            this.URL1 = uRL1;
            this.URL1Description = uRL1Description;
            this.URL2 = uRL2;
            this.URL2Description = uRL2Description;
            this.InitialContact = initialContact;
            this.StatusLabelActionId = statusLabelActionId;
            this.RepNumber = repNumber;
            this.PrimaryContactNumber = primaryContactNumber;
            this.IsVendor = isVendor;
            this.IsSubcontractor = isSubcontractor;
            this.DoNotEmail = doNotEmail;
            this.IsOwnedByPublicRep = isOwnedByPublicRep;
            this.CanReassignRepsAccount = canReassignRepsAccount;
        }
        
        /// <summary>
        /// Gets or sets the name of the account.
        /// </summary>
        /// <value>Gets or sets the name of the account.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the account identifier.
        /// </summary>
        /// <value>Gets or sets the account identifier.</value>
        [DataMember(Name="AccountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or sets address line 1.
        /// </summary>
        /// <value>Gets or sets address line 1.</value>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets address line 2.
        /// </summary>
        /// <value>Gets or sets address line 2.</value>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the city.
        /// </summary>
        /// <value>Gets or sets the city.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the state.
        /// </summary>
        /// <value>Gets or sets the state.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the postal code.
        /// </summary>
        /// <value>Gets or sets the postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the country.
        /// </summary>
        /// <value>Gets or sets the country.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets the type of the account.
        /// </summary>
        /// <value>Gets or sets the type of the account.</value>
        [DataMember(Name="AccountType", EmitDefaultValue=false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or sets the account status.
        /// </summary>
        /// <value>Gets or sets the account status.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the hot note.
        /// </summary>
        /// <value>Gets or sets the hot note.</value>
        [DataMember(Name="HotNote", EmitDefaultValue=false)]
        public string HotNote { get; set; }

        /// <summary>
        /// Gets or sets the directions to location.
        /// </summary>
        /// <value>Gets or sets the directions to location.</value>
        [DataMember(Name="DirectionsToLocation", EmitDefaultValue=false)]
        public string DirectionsToLocation { get; set; }

        /// <summary>
        /// Gets or sets the special instructions for the AccountDetails.
        /// </summary>
        /// <value>Gets or sets the special instructions for the AccountDetails.</value>
        [DataMember(Name="SpecialInstructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Gets or sets the special instructions for quotes.
        /// </summary>
        /// <value>Gets or sets the special instructions for quotes.</value>
        [DataMember(Name="QuoteSpecialInstructions", EmitDefaultValue=false)]
        public string QuoteSpecialInstructions { get; set; }

        /// <summary>
        /// Gets or sets the status label action.
        /// </summary>
        /// <value>Gets or sets the status label action.</value>
        [DataMember(Name="StatusLabelAction", EmitDefaultValue=false)]
        public string StatusLabelAction { get; set; }

        /// <summary>
        /// Gets or sets the url 1.
        /// </summary>
        /// <value>Gets or sets the url 1.</value>
        [DataMember(Name="URL1", EmitDefaultValue=false)]
        public string URL1 { get; set; }

        /// <summary>
        /// Gets or sets the url1 description.
        /// </summary>
        /// <value>Gets or sets the url1 description.</value>
        [DataMember(Name="URL1Description", EmitDefaultValue=false)]
        public string URL1Description { get; set; }

        /// <summary>
        /// Gets or sets the url2.
        /// </summary>
        /// <value>Gets or sets the url2.</value>
        [DataMember(Name="URL2", EmitDefaultValue=false)]
        public string URL2 { get; set; }

        /// <summary>
        /// Gets or sets the url2 description.
        /// </summary>
        /// <value>Gets or sets the url2 description.</value>
        [DataMember(Name="URL2Description", EmitDefaultValue=false)]
        public string URL2Description { get; set; }

        /// <summary>
        /// Gets or sets the initial contact date.
        /// </summary>
        /// <value>Gets or sets the initial contact date.</value>
        [DataMember(Name="InitialContact", EmitDefaultValue=false)]
        public DateTime? InitialContact { get; set; }

        /// <summary>
        /// Gets or sets the status label action identifier.
        /// </summary>
        /// <value>Gets or sets the status label action identifier.</value>
        [DataMember(Name="StatusLabelActionId", EmitDefaultValue=false)]
        public int? StatusLabelActionId { get; set; }

        /// <summary>
        /// Gets or sets the rep number.
        /// </summary>
        /// <value>Gets or sets the rep number.</value>
        [DataMember(Name="RepNumber", EmitDefaultValue=false)]
        public int? RepNumber { get; set; }

        /// <summary>
        /// Gets or sets the primary contact.
        /// </summary>
        /// <value>Gets or sets the primary contact.</value>
        [DataMember(Name="PrimaryContactNumber", EmitDefaultValue=false)]
        public int? PrimaryContactNumber { get; set; }

        /// <summary>
        /// Gets a value indicating whether this account is vendor.
        /// </summary>
        /// <value>Gets a value indicating whether this account is vendor.</value>
        [DataMember(Name="IsVendor", EmitDefaultValue=false)]
        public bool? IsVendor { get; set; }

        /// <summary>
        /// Gets a value indicating whether this account is subcontractor.
        /// </summary>
        /// <value>Gets a value indicating whether this account is subcontractor.</value>
        [DataMember(Name="IsSubcontractor", EmitDefaultValue=false)]
        public bool? IsSubcontractor { get; set; }

        /// <summary>
        /// Gets a value indicating whether or not email should be used to contact the account.
        /// </summary>
        /// <value>Gets a value indicating whether or not email should be used to contact the account.</value>
        [DataMember(Name="DoNotEmail", EmitDefaultValue=false)]
        public bool? DoNotEmail { get; set; }

        /// <summary>
        /// Gets or Sets IsOwnedByPublicRep
        /// </summary>
        [DataMember(Name="IsOwnedByPublicRep", EmitDefaultValue=false)]
        public bool? IsOwnedByPublicRep { get; set; }

        /// <summary>
        /// Gets or Sets CanReassignRepsAccount
        /// </summary>
        [DataMember(Name="CanReassignRepsAccount", EmitDefaultValue=false)]
        public bool? CanReassignRepsAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAccount {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HotNote: ").Append(HotNote).Append("\n");
            sb.Append("  DirectionsToLocation: ").Append(DirectionsToLocation).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("  QuoteSpecialInstructions: ").Append(QuoteSpecialInstructions).Append("\n");
            sb.Append("  StatusLabelAction: ").Append(StatusLabelAction).Append("\n");
            sb.Append("  URL1: ").Append(URL1).Append("\n");
            sb.Append("  URL1Description: ").Append(URL1Description).Append("\n");
            sb.Append("  URL2: ").Append(URL2).Append("\n");
            sb.Append("  URL2Description: ").Append(URL2Description).Append("\n");
            sb.Append("  InitialContact: ").Append(InitialContact).Append("\n");
            sb.Append("  StatusLabelActionId: ").Append(StatusLabelActionId).Append("\n");
            sb.Append("  RepNumber: ").Append(RepNumber).Append("\n");
            sb.Append("  PrimaryContactNumber: ").Append(PrimaryContactNumber).Append("\n");
            sb.Append("  IsVendor: ").Append(IsVendor).Append("\n");
            sb.Append("  IsSubcontractor: ").Append(IsSubcontractor).Append("\n");
            sb.Append("  DoNotEmail: ").Append(DoNotEmail).Append("\n");
            sb.Append("  IsOwnedByPublicRep: ").Append(IsOwnedByPublicRep).Append("\n");
            sb.Append("  CanReassignRepsAccount: ").Append(CanReassignRepsAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAccount);
        }

        /// <summary>
        /// Returns true if TsiWebAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HotNote == input.HotNote ||
                    (this.HotNote != null &&
                    this.HotNote.Equals(input.HotNote))
                ) && 
                (
                    this.DirectionsToLocation == input.DirectionsToLocation ||
                    (this.DirectionsToLocation != null &&
                    this.DirectionsToLocation.Equals(input.DirectionsToLocation))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                ) && 
                (
                    this.QuoteSpecialInstructions == input.QuoteSpecialInstructions ||
                    (this.QuoteSpecialInstructions != null &&
                    this.QuoteSpecialInstructions.Equals(input.QuoteSpecialInstructions))
                ) && 
                (
                    this.StatusLabelAction == input.StatusLabelAction ||
                    (this.StatusLabelAction != null &&
                    this.StatusLabelAction.Equals(input.StatusLabelAction))
                ) && 
                (
                    this.URL1 == input.URL1 ||
                    (this.URL1 != null &&
                    this.URL1.Equals(input.URL1))
                ) && 
                (
                    this.URL1Description == input.URL1Description ||
                    (this.URL1Description != null &&
                    this.URL1Description.Equals(input.URL1Description))
                ) && 
                (
                    this.URL2 == input.URL2 ||
                    (this.URL2 != null &&
                    this.URL2.Equals(input.URL2))
                ) && 
                (
                    this.URL2Description == input.URL2Description ||
                    (this.URL2Description != null &&
                    this.URL2Description.Equals(input.URL2Description))
                ) && 
                (
                    this.InitialContact == input.InitialContact ||
                    (this.InitialContact != null &&
                    this.InitialContact.Equals(input.InitialContact))
                ) && 
                (
                    this.StatusLabelActionId == input.StatusLabelActionId ||
                    (this.StatusLabelActionId != null &&
                    this.StatusLabelActionId.Equals(input.StatusLabelActionId))
                ) && 
                (
                    this.RepNumber == input.RepNumber ||
                    (this.RepNumber != null &&
                    this.RepNumber.Equals(input.RepNumber))
                ) && 
                (
                    this.PrimaryContactNumber == input.PrimaryContactNumber ||
                    (this.PrimaryContactNumber != null &&
                    this.PrimaryContactNumber.Equals(input.PrimaryContactNumber))
                ) && 
                (
                    this.IsVendor == input.IsVendor ||
                    (this.IsVendor != null &&
                    this.IsVendor.Equals(input.IsVendor))
                ) && 
                (
                    this.IsSubcontractor == input.IsSubcontractor ||
                    (this.IsSubcontractor != null &&
                    this.IsSubcontractor.Equals(input.IsSubcontractor))
                ) && 
                (
                    this.DoNotEmail == input.DoNotEmail ||
                    (this.DoNotEmail != null &&
                    this.DoNotEmail.Equals(input.DoNotEmail))
                ) && 
                (
                    this.IsOwnedByPublicRep == input.IsOwnedByPublicRep ||
                    (this.IsOwnedByPublicRep != null &&
                    this.IsOwnedByPublicRep.Equals(input.IsOwnedByPublicRep))
                ) && 
                (
                    this.CanReassignRepsAccount == input.CanReassignRepsAccount ||
                    (this.CanReassignRepsAccount != null &&
                    this.CanReassignRepsAccount.Equals(input.CanReassignRepsAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.HotNote != null)
                    hashCode = hashCode * 59 + this.HotNote.GetHashCode();
                if (this.DirectionsToLocation != null)
                    hashCode = hashCode * 59 + this.DirectionsToLocation.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                if (this.QuoteSpecialInstructions != null)
                    hashCode = hashCode * 59 + this.QuoteSpecialInstructions.GetHashCode();
                if (this.StatusLabelAction != null)
                    hashCode = hashCode * 59 + this.StatusLabelAction.GetHashCode();
                if (this.URL1 != null)
                    hashCode = hashCode * 59 + this.URL1.GetHashCode();
                if (this.URL1Description != null)
                    hashCode = hashCode * 59 + this.URL1Description.GetHashCode();
                if (this.URL2 != null)
                    hashCode = hashCode * 59 + this.URL2.GetHashCode();
                if (this.URL2Description != null)
                    hashCode = hashCode * 59 + this.URL2Description.GetHashCode();
                if (this.InitialContact != null)
                    hashCode = hashCode * 59 + this.InitialContact.GetHashCode();
                if (this.StatusLabelActionId != null)
                    hashCode = hashCode * 59 + this.StatusLabelActionId.GetHashCode();
                if (this.RepNumber != null)
                    hashCode = hashCode * 59 + this.RepNumber.GetHashCode();
                if (this.PrimaryContactNumber != null)
                    hashCode = hashCode * 59 + this.PrimaryContactNumber.GetHashCode();
                if (this.IsVendor != null)
                    hashCode = hashCode * 59 + this.IsVendor.GetHashCode();
                if (this.IsSubcontractor != null)
                    hashCode = hashCode * 59 + this.IsSubcontractor.GetHashCode();
                if (this.DoNotEmail != null)
                    hashCode = hashCode * 59 + this.DoNotEmail.GetHashCode();
                if (this.IsOwnedByPublicRep != null)
                    hashCode = hashCode * 59 + this.IsOwnedByPublicRep.GetHashCode();
                if (this.CanReassignRepsAccount != null)
                    hashCode = hashCode * 59 + this.CanReassignRepsAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
