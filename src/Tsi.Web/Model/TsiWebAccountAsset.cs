/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAccountAsset
    /// </summary>
    [DataContract]
    public partial class TsiWebAccountAsset :  IEquatable<TsiWebAccountAsset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAccountAsset" /> class.
        /// </summary>
        /// <param name="itemID">itemID.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="status">status.</param>
        /// <param name="statusComment">statusComment.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="vendorInvoiceNumber">vendorInvoiceNumber.</param>
        /// <param name="purchasedFromUs">purchasedFromUs.</param>
        /// <param name="datePurchased">datePurchased.</param>
        /// <param name="purchasePrice">purchasePrice.</param>
        /// <param name="warrantyExpiration">warrantyExpiration.</param>
        /// <param name="lastPMDate">lastPMDate.</param>
        /// <param name="currMeterReading">currMeterReading.</param>
        /// <param name="origMeterReading">origMeterReading.</param>
        /// <param name="nextPMDate">nextPMDate.</param>
        /// <param name="servicePriority">servicePriority.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="contractDetailNumber">contractDetailNumber.</param>
        /// <param name="location">location.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contactNumber">contactNumber.</param>
        /// <param name="contactPhone">contactPhone.</param>
        /// <param name="yearlyMaintPrice">yearlyMaintPrice.</param>
        /// <param name="datePurchasedFromVendor">datePurchasedFromVendor.</param>
        /// <param name="manufacturerWarrantyExpiration">manufacturerWarrantyExpiration.</param>
        /// <param name="reference">reference.</param>
        /// <param name="statusDate">statusDate.</param>
        /// <param name="transferTo">transferTo.</param>
        /// <param name="transferDate">transferDate.</param>
        /// <param name="allowExchange">allowExchange.</param>
        /// <param name="exchangeNumber">exchangeNumber.</param>
        /// <param name="itemExchangedFor">itemExchangedFor.</param>
        /// <param name="assemblyFlag">assemblyFlag.</param>
        /// <param name="comments">comments.</param>
        /// <param name="creditMemoNumber">creditMemoNumber.</param>
        /// <param name="creditMemoDetailNumber">creditMemoDetailNumber.</param>
        /// <param name="creditMemoAssemblyDetailNumber">creditMemoAssemblyDetailNumber.</param>
        /// <param name="creditMemoQuantity">creditMemoQuantity.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="invoiceDetailNumber">invoiceDetailNumber.</param>
        /// <param name="invoiceAssemblyDetailNumber">invoiceAssemblyDetailNumber.</param>
        /// <param name="manufacturerPartNumber">manufacturerPartNumber.</param>
        /// <param name="vendorAccountNumber">vendorAccountNumber.</param>
        /// <param name="bMFLastProcessed">bMFLastProcessed.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="nextActionDate">nextActionDate.</param>
        /// <param name="nextActionType">nextActionType.</param>
        /// <param name="nextActionTriggersWorkflow">nextActionTriggersWorkflow.</param>
        /// <param name="replacedByItemId">replacedByItemId.</param>
        /// <param name="warrantyExpirationTriggersWorkflow">warrantyExpirationTriggersWorkflow.</param>
        /// <param name="primaryRepNumber">primaryRepNumber.</param>
        /// <param name="printOnCustomerFacingReports">printOnCustomerFacingReports.</param>
        /// <param name="deviceId">deviceId.</param>
        public TsiWebAccountAsset(string itemID = default(string), string itemDescription = default(string), string serialNumber = default(string), string status = default(string), string statusComment = default(string), double? quantity = default(double?), string vendorInvoiceNumber = default(string), bool? purchasedFromUs = default(bool?), DateTime? datePurchased = default(DateTime?), double? purchasePrice = default(double?), DateTime? warrantyExpiration = default(DateTime?), DateTime? lastPMDate = default(DateTime?), int? currMeterReading = default(int?), int? origMeterReading = default(int?), DateTime? nextPMDate = default(DateTime?), int? servicePriority = default(int?), int? contractNumber = default(int?), int? contractDetailNumber = default(int?), string location = default(string), string contactName = default(string), int? contactNumber = default(int?), string contactPhone = default(string), double? yearlyMaintPrice = default(double?), DateTime? datePurchasedFromVendor = default(DateTime?), DateTime? manufacturerWarrantyExpiration = default(DateTime?), string reference = default(string), DateTime? statusDate = default(DateTime?), int? transferTo = default(int?), DateTime? transferDate = default(DateTime?), bool? allowExchange = default(bool?), int? exchangeNumber = default(int?), int? itemExchangedFor = default(int?), bool? assemblyFlag = default(bool?), string comments = default(string), int? creditMemoNumber = default(int?), int? creditMemoDetailNumber = default(int?), int? creditMemoAssemblyDetailNumber = default(int?), double? creditMemoQuantity = default(double?), int? invoiceNumber = default(int?), int? invoiceDetailNumber = default(int?), int? invoiceAssemblyDetailNumber = default(int?), string manufacturerPartNumber = default(string), int? vendorAccountNumber = default(int?), DateTime? bMFLastProcessed = default(DateTime?), string ipAddress = default(string), DateTime? nextActionDate = default(DateTime?), string nextActionType = default(string), bool? nextActionTriggersWorkflow = default(bool?), string replacedByItemId = default(string), bool? warrantyExpirationTriggersWorkflow = default(bool?), int? primaryRepNumber = default(int?), bool? printOnCustomerFacingReports = default(bool?), string deviceId = default(string))
        {
            this.ItemID = itemID;
            this.ItemDescription = itemDescription;
            this.SerialNumber = serialNumber;
            this.Status = status;
            this.StatusComment = statusComment;
            this.Quantity = quantity;
            this.VendorInvoiceNumber = vendorInvoiceNumber;
            this.PurchasedFromUs = purchasedFromUs;
            this.DatePurchased = datePurchased;
            this.PurchasePrice = purchasePrice;
            this.WarrantyExpiration = warrantyExpiration;
            this.LastPMDate = lastPMDate;
            this.CurrMeterReading = currMeterReading;
            this.OrigMeterReading = origMeterReading;
            this.NextPMDate = nextPMDate;
            this.ServicePriority = servicePriority;
            this.ContractNumber = contractNumber;
            this.ContractDetailNumber = contractDetailNumber;
            this.Location = location;
            this.ContactName = contactName;
            this.ContactNumber = contactNumber;
            this.ContactPhone = contactPhone;
            this.YearlyMaintPrice = yearlyMaintPrice;
            this.DatePurchasedFromVendor = datePurchasedFromVendor;
            this.ManufacturerWarrantyExpiration = manufacturerWarrantyExpiration;
            this.Reference = reference;
            this.StatusDate = statusDate;
            this.TransferTo = transferTo;
            this.TransferDate = transferDate;
            this.AllowExchange = allowExchange;
            this.ExchangeNumber = exchangeNumber;
            this.ItemExchangedFor = itemExchangedFor;
            this.AssemblyFlag = assemblyFlag;
            this.Comments = comments;
            this.CreditMemoNumber = creditMemoNumber;
            this.CreditMemoDetailNumber = creditMemoDetailNumber;
            this.CreditMemoAssemblyDetailNumber = creditMemoAssemblyDetailNumber;
            this.CreditMemoQuantity = creditMemoQuantity;
            this.InvoiceNumber = invoiceNumber;
            this.InvoiceDetailNumber = invoiceDetailNumber;
            this.InvoiceAssemblyDetailNumber = invoiceAssemblyDetailNumber;
            this.ManufacturerPartNumber = manufacturerPartNumber;
            this.VendorAccountNumber = vendorAccountNumber;
            this.BMFLastProcessed = bMFLastProcessed;
            this.IpAddress = ipAddress;
            this.NextActionDate = nextActionDate;
            this.NextActionType = nextActionType;
            this.NextActionTriggersWorkflow = nextActionTriggersWorkflow;
            this.ReplacedByItemId = replacedByItemId;
            this.WarrantyExpirationTriggersWorkflow = warrantyExpirationTriggersWorkflow;
            this.PrimaryRepNumber = primaryRepNumber;
            this.PrintOnCustomerFacingReports = printOnCustomerFacingReports;
            this.DeviceId = deviceId;
        }
        
        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="SerialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusComment
        /// </summary>
        [DataMember(Name="StatusComment", EmitDefaultValue=false)]
        public string StatusComment { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets VendorInvoiceNumber
        /// </summary>
        [DataMember(Name="VendorInvoiceNumber", EmitDefaultValue=false)]
        public string VendorInvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchasedFromUs
        /// </summary>
        [DataMember(Name="PurchasedFromUs", EmitDefaultValue=false)]
        public bool? PurchasedFromUs { get; set; }

        /// <summary>
        /// Gets or Sets DatePurchased
        /// </summary>
        [DataMember(Name="DatePurchased", EmitDefaultValue=false)]
        public DateTime? DatePurchased { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [DataMember(Name="PurchasePrice", EmitDefaultValue=false)]
        public double? PurchasePrice { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyExpiration
        /// </summary>
        [DataMember(Name="WarrantyExpiration", EmitDefaultValue=false)]
        public DateTime? WarrantyExpiration { get; set; }

        /// <summary>
        /// Gets or Sets LastPMDate
        /// </summary>
        [DataMember(Name="LastPMDate", EmitDefaultValue=false)]
        public DateTime? LastPMDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrMeterReading
        /// </summary>
        [DataMember(Name="CurrMeterReading", EmitDefaultValue=false)]
        public int? CurrMeterReading { get; set; }

        /// <summary>
        /// Gets or Sets OrigMeterReading
        /// </summary>
        [DataMember(Name="OrigMeterReading", EmitDefaultValue=false)]
        public int? OrigMeterReading { get; set; }

        /// <summary>
        /// Gets or Sets NextPMDate
        /// </summary>
        [DataMember(Name="NextPMDate", EmitDefaultValue=false)]
        public DateTime? NextPMDate { get; set; }

        /// <summary>
        /// Gets or Sets ServicePriority
        /// </summary>
        [DataMember(Name="ServicePriority", EmitDefaultValue=false)]
        public int? ServicePriority { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="ContractNumber", EmitDefaultValue=false)]
        public int? ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContractDetailNumber
        /// </summary>
        [DataMember(Name="ContractDetailNumber", EmitDefaultValue=false)]
        public int? ContractDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="ContactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContactNumber
        /// </summary>
        [DataMember(Name="ContactNumber", EmitDefaultValue=false)]
        public int? ContactNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhone
        /// </summary>
        [DataMember(Name="ContactPhone", EmitDefaultValue=false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Gets or Sets YearlyMaintPrice
        /// </summary>
        [DataMember(Name="YearlyMaintPrice", EmitDefaultValue=false)]
        public double? YearlyMaintPrice { get; set; }

        /// <summary>
        /// Gets or Sets DatePurchasedFromVendor
        /// </summary>
        [DataMember(Name="DatePurchasedFromVendor", EmitDefaultValue=false)]
        public DateTime? DatePurchasedFromVendor { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerWarrantyExpiration
        /// </summary>
        [DataMember(Name="ManufacturerWarrantyExpiration", EmitDefaultValue=false)]
        public DateTime? ManufacturerWarrantyExpiration { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="Reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets StatusDate
        /// </summary>
        [DataMember(Name="StatusDate", EmitDefaultValue=false)]
        public DateTime? StatusDate { get; set; }

        /// <summary>
        /// Gets or Sets TransferTo
        /// </summary>
        [DataMember(Name="TransferTo", EmitDefaultValue=false)]
        public int? TransferTo { get; set; }

        /// <summary>
        /// Gets or Sets TransferDate
        /// </summary>
        [DataMember(Name="TransferDate", EmitDefaultValue=false)]
        public DateTime? TransferDate { get; set; }

        /// <summary>
        /// Gets or Sets AllowExchange
        /// </summary>
        [DataMember(Name="AllowExchange", EmitDefaultValue=false)]
        public bool? AllowExchange { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeNumber
        /// </summary>
        [DataMember(Name="ExchangeNumber", EmitDefaultValue=false)]
        public int? ExchangeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemExchangedFor
        /// </summary>
        [DataMember(Name="ItemExchangedFor", EmitDefaultValue=false)]
        public int? ItemExchangedFor { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyFlag
        /// </summary>
        [DataMember(Name="AssemblyFlag", EmitDefaultValue=false)]
        public bool? AssemblyFlag { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets CreditMemoNumber
        /// </summary>
        [DataMember(Name="CreditMemoNumber", EmitDefaultValue=false)]
        public int? CreditMemoNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreditMemoDetailNumber
        /// </summary>
        [DataMember(Name="CreditMemoDetailNumber", EmitDefaultValue=false)]
        public int? CreditMemoDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreditMemoAssemblyDetailNumber
        /// </summary>
        [DataMember(Name="CreditMemoAssemblyDetailNumber", EmitDefaultValue=false)]
        public int? CreditMemoAssemblyDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreditMemoQuantity
        /// </summary>
        [DataMember(Name="CreditMemoQuantity", EmitDefaultValue=false)]
        public double? CreditMemoQuantity { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="InvoiceNumber", EmitDefaultValue=false)]
        public int? InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDetailNumber
        /// </summary>
        [DataMember(Name="InvoiceDetailNumber", EmitDefaultValue=false)]
        public int? InvoiceDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAssemblyDetailNumber
        /// </summary>
        [DataMember(Name="InvoiceAssemblyDetailNumber", EmitDefaultValue=false)]
        public int? InvoiceAssemblyDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerPartNumber
        /// </summary>
        [DataMember(Name="ManufacturerPartNumber", EmitDefaultValue=false)]
        public string ManufacturerPartNumber { get; set; }

        /// <summary>
        /// Gets or Sets VendorAccountNumber
        /// </summary>
        [DataMember(Name="VendorAccountNumber", EmitDefaultValue=false)]
        public int? VendorAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BMFLastProcessed
        /// </summary>
        [DataMember(Name="BMFLastProcessed", EmitDefaultValue=false)]
        public DateTime? BMFLastProcessed { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name="IpAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets NextActionDate
        /// </summary>
        [DataMember(Name="NextActionDate", EmitDefaultValue=false)]
        public DateTime? NextActionDate { get; set; }

        /// <summary>
        /// Gets or Sets NextActionType
        /// </summary>
        [DataMember(Name="NextActionType", EmitDefaultValue=false)]
        public string NextActionType { get; set; }

        /// <summary>
        /// Gets or Sets NextActionTriggersWorkflow
        /// </summary>
        [DataMember(Name="NextActionTriggersWorkflow", EmitDefaultValue=false)]
        public bool? NextActionTriggersWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets ReplacedByItemId
        /// </summary>
        [DataMember(Name="ReplacedByItemId", EmitDefaultValue=false)]
        public string ReplacedByItemId { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyExpirationTriggersWorkflow
        /// </summary>
        [DataMember(Name="WarrantyExpirationTriggersWorkflow", EmitDefaultValue=false)]
        public bool? WarrantyExpirationTriggersWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryRepNumber
        /// </summary>
        [DataMember(Name="PrimaryRepNumber", EmitDefaultValue=false)]
        public int? PrimaryRepNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnCustomerFacingReports
        /// </summary>
        [DataMember(Name="PrintOnCustomerFacingReports", EmitDefaultValue=false)]
        public bool? PrintOnCustomerFacingReports { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="DeviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAccountAsset {\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusComment: ").Append(StatusComment).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  VendorInvoiceNumber: ").Append(VendorInvoiceNumber).Append("\n");
            sb.Append("  PurchasedFromUs: ").Append(PurchasedFromUs).Append("\n");
            sb.Append("  DatePurchased: ").Append(DatePurchased).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  WarrantyExpiration: ").Append(WarrantyExpiration).Append("\n");
            sb.Append("  LastPMDate: ").Append(LastPMDate).Append("\n");
            sb.Append("  CurrMeterReading: ").Append(CurrMeterReading).Append("\n");
            sb.Append("  OrigMeterReading: ").Append(OrigMeterReading).Append("\n");
            sb.Append("  NextPMDate: ").Append(NextPMDate).Append("\n");
            sb.Append("  ServicePriority: ").Append(ServicePriority).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  ContractDetailNumber: ").Append(ContractDetailNumber).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  YearlyMaintPrice: ").Append(YearlyMaintPrice).Append("\n");
            sb.Append("  DatePurchasedFromVendor: ").Append(DatePurchasedFromVendor).Append("\n");
            sb.Append("  ManufacturerWarrantyExpiration: ").Append(ManufacturerWarrantyExpiration).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  TransferTo: ").Append(TransferTo).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  AllowExchange: ").Append(AllowExchange).Append("\n");
            sb.Append("  ExchangeNumber: ").Append(ExchangeNumber).Append("\n");
            sb.Append("  ItemExchangedFor: ").Append(ItemExchangedFor).Append("\n");
            sb.Append("  AssemblyFlag: ").Append(AssemblyFlag).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CreditMemoNumber: ").Append(CreditMemoNumber).Append("\n");
            sb.Append("  CreditMemoDetailNumber: ").Append(CreditMemoDetailNumber).Append("\n");
            sb.Append("  CreditMemoAssemblyDetailNumber: ").Append(CreditMemoAssemblyDetailNumber).Append("\n");
            sb.Append("  CreditMemoQuantity: ").Append(CreditMemoQuantity).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDetailNumber: ").Append(InvoiceDetailNumber).Append("\n");
            sb.Append("  InvoiceAssemblyDetailNumber: ").Append(InvoiceAssemblyDetailNumber).Append("\n");
            sb.Append("  ManufacturerPartNumber: ").Append(ManufacturerPartNumber).Append("\n");
            sb.Append("  VendorAccountNumber: ").Append(VendorAccountNumber).Append("\n");
            sb.Append("  BMFLastProcessed: ").Append(BMFLastProcessed).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  NextActionDate: ").Append(NextActionDate).Append("\n");
            sb.Append("  NextActionType: ").Append(NextActionType).Append("\n");
            sb.Append("  NextActionTriggersWorkflow: ").Append(NextActionTriggersWorkflow).Append("\n");
            sb.Append("  ReplacedByItemId: ").Append(ReplacedByItemId).Append("\n");
            sb.Append("  WarrantyExpirationTriggersWorkflow: ").Append(WarrantyExpirationTriggersWorkflow).Append("\n");
            sb.Append("  PrimaryRepNumber: ").Append(PrimaryRepNumber).Append("\n");
            sb.Append("  PrintOnCustomerFacingReports: ").Append(PrintOnCustomerFacingReports).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAccountAsset);
        }

        /// <summary>
        /// Returns true if TsiWebAccountAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAccountAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAccountAsset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusComment == input.StatusComment ||
                    (this.StatusComment != null &&
                    this.StatusComment.Equals(input.StatusComment))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.VendorInvoiceNumber == input.VendorInvoiceNumber ||
                    (this.VendorInvoiceNumber != null &&
                    this.VendorInvoiceNumber.Equals(input.VendorInvoiceNumber))
                ) && 
                (
                    this.PurchasedFromUs == input.PurchasedFromUs ||
                    (this.PurchasedFromUs != null &&
                    this.PurchasedFromUs.Equals(input.PurchasedFromUs))
                ) && 
                (
                    this.DatePurchased == input.DatePurchased ||
                    (this.DatePurchased != null &&
                    this.DatePurchased.Equals(input.DatePurchased))
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    (this.PurchasePrice != null &&
                    this.PurchasePrice.Equals(input.PurchasePrice))
                ) && 
                (
                    this.WarrantyExpiration == input.WarrantyExpiration ||
                    (this.WarrantyExpiration != null &&
                    this.WarrantyExpiration.Equals(input.WarrantyExpiration))
                ) && 
                (
                    this.LastPMDate == input.LastPMDate ||
                    (this.LastPMDate != null &&
                    this.LastPMDate.Equals(input.LastPMDate))
                ) && 
                (
                    this.CurrMeterReading == input.CurrMeterReading ||
                    (this.CurrMeterReading != null &&
                    this.CurrMeterReading.Equals(input.CurrMeterReading))
                ) && 
                (
                    this.OrigMeterReading == input.OrigMeterReading ||
                    (this.OrigMeterReading != null &&
                    this.OrigMeterReading.Equals(input.OrigMeterReading))
                ) && 
                (
                    this.NextPMDate == input.NextPMDate ||
                    (this.NextPMDate != null &&
                    this.NextPMDate.Equals(input.NextPMDate))
                ) && 
                (
                    this.ServicePriority == input.ServicePriority ||
                    (this.ServicePriority != null &&
                    this.ServicePriority.Equals(input.ServicePriority))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.ContractDetailNumber == input.ContractDetailNumber ||
                    (this.ContractDetailNumber != null &&
                    this.ContractDetailNumber.Equals(input.ContractDetailNumber))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.YearlyMaintPrice == input.YearlyMaintPrice ||
                    (this.YearlyMaintPrice != null &&
                    this.YearlyMaintPrice.Equals(input.YearlyMaintPrice))
                ) && 
                (
                    this.DatePurchasedFromVendor == input.DatePurchasedFromVendor ||
                    (this.DatePurchasedFromVendor != null &&
                    this.DatePurchasedFromVendor.Equals(input.DatePurchasedFromVendor))
                ) && 
                (
                    this.ManufacturerWarrantyExpiration == input.ManufacturerWarrantyExpiration ||
                    (this.ManufacturerWarrantyExpiration != null &&
                    this.ManufacturerWarrantyExpiration.Equals(input.ManufacturerWarrantyExpiration))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.TransferTo == input.TransferTo ||
                    (this.TransferTo != null &&
                    this.TransferTo.Equals(input.TransferTo))
                ) && 
                (
                    this.TransferDate == input.TransferDate ||
                    (this.TransferDate != null &&
                    this.TransferDate.Equals(input.TransferDate))
                ) && 
                (
                    this.AllowExchange == input.AllowExchange ||
                    (this.AllowExchange != null &&
                    this.AllowExchange.Equals(input.AllowExchange))
                ) && 
                (
                    this.ExchangeNumber == input.ExchangeNumber ||
                    (this.ExchangeNumber != null &&
                    this.ExchangeNumber.Equals(input.ExchangeNumber))
                ) && 
                (
                    this.ItemExchangedFor == input.ItemExchangedFor ||
                    (this.ItemExchangedFor != null &&
                    this.ItemExchangedFor.Equals(input.ItemExchangedFor))
                ) && 
                (
                    this.AssemblyFlag == input.AssemblyFlag ||
                    (this.AssemblyFlag != null &&
                    this.AssemblyFlag.Equals(input.AssemblyFlag))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CreditMemoNumber == input.CreditMemoNumber ||
                    (this.CreditMemoNumber != null &&
                    this.CreditMemoNumber.Equals(input.CreditMemoNumber))
                ) && 
                (
                    this.CreditMemoDetailNumber == input.CreditMemoDetailNumber ||
                    (this.CreditMemoDetailNumber != null &&
                    this.CreditMemoDetailNumber.Equals(input.CreditMemoDetailNumber))
                ) && 
                (
                    this.CreditMemoAssemblyDetailNumber == input.CreditMemoAssemblyDetailNumber ||
                    (this.CreditMemoAssemblyDetailNumber != null &&
                    this.CreditMemoAssemblyDetailNumber.Equals(input.CreditMemoAssemblyDetailNumber))
                ) && 
                (
                    this.CreditMemoQuantity == input.CreditMemoQuantity ||
                    (this.CreditMemoQuantity != null &&
                    this.CreditMemoQuantity.Equals(input.CreditMemoQuantity))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.InvoiceDetailNumber == input.InvoiceDetailNumber ||
                    (this.InvoiceDetailNumber != null &&
                    this.InvoiceDetailNumber.Equals(input.InvoiceDetailNumber))
                ) && 
                (
                    this.InvoiceAssemblyDetailNumber == input.InvoiceAssemblyDetailNumber ||
                    (this.InvoiceAssemblyDetailNumber != null &&
                    this.InvoiceAssemblyDetailNumber.Equals(input.InvoiceAssemblyDetailNumber))
                ) && 
                (
                    this.ManufacturerPartNumber == input.ManufacturerPartNumber ||
                    (this.ManufacturerPartNumber != null &&
                    this.ManufacturerPartNumber.Equals(input.ManufacturerPartNumber))
                ) && 
                (
                    this.VendorAccountNumber == input.VendorAccountNumber ||
                    (this.VendorAccountNumber != null &&
                    this.VendorAccountNumber.Equals(input.VendorAccountNumber))
                ) && 
                (
                    this.BMFLastProcessed == input.BMFLastProcessed ||
                    (this.BMFLastProcessed != null &&
                    this.BMFLastProcessed.Equals(input.BMFLastProcessed))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.NextActionDate == input.NextActionDate ||
                    (this.NextActionDate != null &&
                    this.NextActionDate.Equals(input.NextActionDate))
                ) && 
                (
                    this.NextActionType == input.NextActionType ||
                    (this.NextActionType != null &&
                    this.NextActionType.Equals(input.NextActionType))
                ) && 
                (
                    this.NextActionTriggersWorkflow == input.NextActionTriggersWorkflow ||
                    (this.NextActionTriggersWorkflow != null &&
                    this.NextActionTriggersWorkflow.Equals(input.NextActionTriggersWorkflow))
                ) && 
                (
                    this.ReplacedByItemId == input.ReplacedByItemId ||
                    (this.ReplacedByItemId != null &&
                    this.ReplacedByItemId.Equals(input.ReplacedByItemId))
                ) && 
                (
                    this.WarrantyExpirationTriggersWorkflow == input.WarrantyExpirationTriggersWorkflow ||
                    (this.WarrantyExpirationTriggersWorkflow != null &&
                    this.WarrantyExpirationTriggersWorkflow.Equals(input.WarrantyExpirationTriggersWorkflow))
                ) && 
                (
                    this.PrimaryRepNumber == input.PrimaryRepNumber ||
                    (this.PrimaryRepNumber != null &&
                    this.PrimaryRepNumber.Equals(input.PrimaryRepNumber))
                ) && 
                (
                    this.PrintOnCustomerFacingReports == input.PrintOnCustomerFacingReports ||
                    (this.PrintOnCustomerFacingReports != null &&
                    this.PrintOnCustomerFacingReports.Equals(input.PrintOnCustomerFacingReports))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusComment != null)
                    hashCode = hashCode * 59 + this.StatusComment.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.VendorInvoiceNumber != null)
                    hashCode = hashCode * 59 + this.VendorInvoiceNumber.GetHashCode();
                if (this.PurchasedFromUs != null)
                    hashCode = hashCode * 59 + this.PurchasedFromUs.GetHashCode();
                if (this.DatePurchased != null)
                    hashCode = hashCode * 59 + this.DatePurchased.GetHashCode();
                if (this.PurchasePrice != null)
                    hashCode = hashCode * 59 + this.PurchasePrice.GetHashCode();
                if (this.WarrantyExpiration != null)
                    hashCode = hashCode * 59 + this.WarrantyExpiration.GetHashCode();
                if (this.LastPMDate != null)
                    hashCode = hashCode * 59 + this.LastPMDate.GetHashCode();
                if (this.CurrMeterReading != null)
                    hashCode = hashCode * 59 + this.CurrMeterReading.GetHashCode();
                if (this.OrigMeterReading != null)
                    hashCode = hashCode * 59 + this.OrigMeterReading.GetHashCode();
                if (this.NextPMDate != null)
                    hashCode = hashCode * 59 + this.NextPMDate.GetHashCode();
                if (this.ServicePriority != null)
                    hashCode = hashCode * 59 + this.ServicePriority.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.ContractDetailNumber != null)
                    hashCode = hashCode * 59 + this.ContractDetailNumber.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactPhone != null)
                    hashCode = hashCode * 59 + this.ContactPhone.GetHashCode();
                if (this.YearlyMaintPrice != null)
                    hashCode = hashCode * 59 + this.YearlyMaintPrice.GetHashCode();
                if (this.DatePurchasedFromVendor != null)
                    hashCode = hashCode * 59 + this.DatePurchasedFromVendor.GetHashCode();
                if (this.ManufacturerWarrantyExpiration != null)
                    hashCode = hashCode * 59 + this.ManufacturerWarrantyExpiration.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.TransferTo != null)
                    hashCode = hashCode * 59 + this.TransferTo.GetHashCode();
                if (this.TransferDate != null)
                    hashCode = hashCode * 59 + this.TransferDate.GetHashCode();
                if (this.AllowExchange != null)
                    hashCode = hashCode * 59 + this.AllowExchange.GetHashCode();
                if (this.ExchangeNumber != null)
                    hashCode = hashCode * 59 + this.ExchangeNumber.GetHashCode();
                if (this.ItemExchangedFor != null)
                    hashCode = hashCode * 59 + this.ItemExchangedFor.GetHashCode();
                if (this.AssemblyFlag != null)
                    hashCode = hashCode * 59 + this.AssemblyFlag.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CreditMemoNumber != null)
                    hashCode = hashCode * 59 + this.CreditMemoNumber.GetHashCode();
                if (this.CreditMemoDetailNumber != null)
                    hashCode = hashCode * 59 + this.CreditMemoDetailNumber.GetHashCode();
                if (this.CreditMemoAssemblyDetailNumber != null)
                    hashCode = hashCode * 59 + this.CreditMemoAssemblyDetailNumber.GetHashCode();
                if (this.CreditMemoQuantity != null)
                    hashCode = hashCode * 59 + this.CreditMemoQuantity.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.InvoiceDetailNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceDetailNumber.GetHashCode();
                if (this.InvoiceAssemblyDetailNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceAssemblyDetailNumber.GetHashCode();
                if (this.ManufacturerPartNumber != null)
                    hashCode = hashCode * 59 + this.ManufacturerPartNumber.GetHashCode();
                if (this.VendorAccountNumber != null)
                    hashCode = hashCode * 59 + this.VendorAccountNumber.GetHashCode();
                if (this.BMFLastProcessed != null)
                    hashCode = hashCode * 59 + this.BMFLastProcessed.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.NextActionDate != null)
                    hashCode = hashCode * 59 + this.NextActionDate.GetHashCode();
                if (this.NextActionType != null)
                    hashCode = hashCode * 59 + this.NextActionType.GetHashCode();
                if (this.NextActionTriggersWorkflow != null)
                    hashCode = hashCode * 59 + this.NextActionTriggersWorkflow.GetHashCode();
                if (this.ReplacedByItemId != null)
                    hashCode = hashCode * 59 + this.ReplacedByItemId.GetHashCode();
                if (this.WarrantyExpirationTriggersWorkflow != null)
                    hashCode = hashCode * 59 + this.WarrantyExpirationTriggersWorkflow.GetHashCode();
                if (this.PrimaryRepNumber != null)
                    hashCode = hashCode * 59 + this.PrimaryRepNumber.GetHashCode();
                if (this.PrintOnCustomerFacingReports != null)
                    hashCode = hashCode * 59 + this.PrintOnCustomerFacingReports.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
