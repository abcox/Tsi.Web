/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAccountAssetSummary
    /// </summary>
    [DataContract]
    public partial class TsiWebAccountAssetSummary :  IEquatable<TsiWebAccountAssetSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAccountAssetSummary" /> class.
        /// </summary>
        /// <param name="accountAssetNumber">accountAssetNumber.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="asset">asset.</param>
        /// <param name="assembly">assembly.</param>
        /// <param name="warrantyCovered">warrantyCovered.</param>
        public TsiWebAccountAssetSummary(int? accountAssetNumber = default(int?), int? accountNumber = default(int?), TsiWebAccountAsset asset = default(TsiWebAccountAsset), List<TsiWebAccountAssetAssemblyDetail> assembly = default(List<TsiWebAccountAssetAssemblyDetail>), bool? warrantyCovered = default(bool?))
        {
            this.AccountAssetNumber = accountAssetNumber;
            this.AccountNumber = accountNumber;
            this.Asset = asset;
            this.Assembly = assembly;
            this.WarrantyCovered = warrantyCovered;
        }
        
        /// <summary>
        /// Gets or Sets AccountAssetNumber
        /// </summary>
        [DataMember(Name="AccountAssetNumber", EmitDefaultValue=false)]
        public int? AccountAssetNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="Asset", EmitDefaultValue=false)]
        public TsiWebAccountAsset Asset { get; set; }

        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="Assembly", EmitDefaultValue=false)]
        public List<TsiWebAccountAssetAssemblyDetail> Assembly { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyCovered
        /// </summary>
        [DataMember(Name="WarrantyCovered", EmitDefaultValue=false)]
        public bool? WarrantyCovered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAccountAssetSummary {\n");
            sb.Append("  AccountAssetNumber: ").Append(AccountAssetNumber).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("  WarrantyCovered: ").Append(WarrantyCovered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAccountAssetSummary);
        }

        /// <summary>
        /// Returns true if TsiWebAccountAssetSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAccountAssetSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAccountAssetSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountAssetNumber == input.AccountAssetNumber ||
                    (this.AccountAssetNumber != null &&
                    this.AccountAssetNumber.Equals(input.AccountAssetNumber))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                ) && 
                (
                    this.WarrantyCovered == input.WarrantyCovered ||
                    (this.WarrantyCovered != null &&
                    this.WarrantyCovered.Equals(input.WarrantyCovered))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountAssetNumber != null)
                    hashCode = hashCode * 59 + this.AccountAssetNumber.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                if (this.WarrantyCovered != null)
                    hashCode = hashCode * 59 + this.WarrantyCovered.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
