/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAccountServiceDetail
    /// </summary>
    [DataContract]
    public partial class TsiWebAccountServiceDetail :  IEquatable<TsiWebAccountServiceDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAccountServiceDetail" /> class.
        /// </summary>
        /// <param name="serviceZone">serviceZone.</param>
        /// <param name="defaultSystem">defaultSystem.</param>
        /// <param name="defaultDispatchBoardId">defaultDispatchBoardId.</param>
        /// <param name="defaultContractId">defaultContractId.</param>
        /// <param name="defaultSubContractorId">defaultSubContractorId.</param>
        /// <param name="defaultServiceTechId">defaultServiceTechId.</param>
        public TsiWebAccountServiceDetail(string serviceZone = default(string), string defaultSystem = default(string), int? defaultDispatchBoardId = default(int?), int? defaultContractId = default(int?), int? defaultSubContractorId = default(int?), int? defaultServiceTechId = default(int?))
        {
            this.ServiceZone = serviceZone;
            this.DefaultSystem = defaultSystem;
            this.DefaultDispatchBoardId = defaultDispatchBoardId;
            this.DefaultContractId = defaultContractId;
            this.DefaultSubContractorId = defaultSubContractorId;
            this.DefaultServiceTechId = defaultServiceTechId;
        }
        
        /// <summary>
        /// Gets or Sets ServiceZone
        /// </summary>
        [DataMember(Name="ServiceZone", EmitDefaultValue=false)]
        public string ServiceZone { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSystem
        /// </summary>
        [DataMember(Name="DefaultSystem", EmitDefaultValue=false)]
        public string DefaultSystem { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDispatchBoardId
        /// </summary>
        [DataMember(Name="DefaultDispatchBoardId", EmitDefaultValue=false)]
        public int? DefaultDispatchBoardId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultContractId
        /// </summary>
        [DataMember(Name="DefaultContractId", EmitDefaultValue=false)]
        public int? DefaultContractId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSubContractorId
        /// </summary>
        [DataMember(Name="DefaultSubContractorId", EmitDefaultValue=false)]
        public int? DefaultSubContractorId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultServiceTechId
        /// </summary>
        [DataMember(Name="DefaultServiceTechId", EmitDefaultValue=false)]
        public int? DefaultServiceTechId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAccountServiceDetail {\n");
            sb.Append("  ServiceZone: ").Append(ServiceZone).Append("\n");
            sb.Append("  DefaultSystem: ").Append(DefaultSystem).Append("\n");
            sb.Append("  DefaultDispatchBoardId: ").Append(DefaultDispatchBoardId).Append("\n");
            sb.Append("  DefaultContractId: ").Append(DefaultContractId).Append("\n");
            sb.Append("  DefaultSubContractorId: ").Append(DefaultSubContractorId).Append("\n");
            sb.Append("  DefaultServiceTechId: ").Append(DefaultServiceTechId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAccountServiceDetail);
        }

        /// <summary>
        /// Returns true if TsiWebAccountServiceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAccountServiceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAccountServiceDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceZone == input.ServiceZone ||
                    (this.ServiceZone != null &&
                    this.ServiceZone.Equals(input.ServiceZone))
                ) && 
                (
                    this.DefaultSystem == input.DefaultSystem ||
                    (this.DefaultSystem != null &&
                    this.DefaultSystem.Equals(input.DefaultSystem))
                ) && 
                (
                    this.DefaultDispatchBoardId == input.DefaultDispatchBoardId ||
                    (this.DefaultDispatchBoardId != null &&
                    this.DefaultDispatchBoardId.Equals(input.DefaultDispatchBoardId))
                ) && 
                (
                    this.DefaultContractId == input.DefaultContractId ||
                    (this.DefaultContractId != null &&
                    this.DefaultContractId.Equals(input.DefaultContractId))
                ) && 
                (
                    this.DefaultSubContractorId == input.DefaultSubContractorId ||
                    (this.DefaultSubContractorId != null &&
                    this.DefaultSubContractorId.Equals(input.DefaultSubContractorId))
                ) && 
                (
                    this.DefaultServiceTechId == input.DefaultServiceTechId ||
                    (this.DefaultServiceTechId != null &&
                    this.DefaultServiceTechId.Equals(input.DefaultServiceTechId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceZone != null)
                    hashCode = hashCode * 59 + this.ServiceZone.GetHashCode();
                if (this.DefaultSystem != null)
                    hashCode = hashCode * 59 + this.DefaultSystem.GetHashCode();
                if (this.DefaultDispatchBoardId != null)
                    hashCode = hashCode * 59 + this.DefaultDispatchBoardId.GetHashCode();
                if (this.DefaultContractId != null)
                    hashCode = hashCode * 59 + this.DefaultContractId.GetHashCode();
                if (this.DefaultSubContractorId != null)
                    hashCode = hashCode * 59 + this.DefaultSubContractorId.GetHashCode();
                if (this.DefaultServiceTechId != null)
                    hashCode = hashCode * 59 + this.DefaultServiceTechId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
