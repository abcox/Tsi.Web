/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAddQuoteToExistingServiceOrderModel
    /// </summary>
    [DataContract]
    public partial class TsiWebAddQuoteToExistingServiceOrderModel :  IEquatable<TsiWebAddQuoteToExistingServiceOrderModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAddQuoteToExistingServiceOrderModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebAddQuoteToExistingServiceOrderModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAddQuoteToExistingServiceOrderModel" /> class.
        /// </summary>
        /// <param name="quoteToSOType">quoteToSOType (required).</param>
        /// <param name="itemsToConvert">itemsToConvert.</param>
        /// <param name="projectPhaseNumber">projectPhaseNumber.</param>
        public TsiWebAddQuoteToExistingServiceOrderModel(string quoteToSOType = default(string), List<TsiWebConversionItem> itemsToConvert = default(List<TsiWebConversionItem>), int? projectPhaseNumber = default(int?))
        {
            // to ensure "quoteToSOType" is required (not null)
            if (quoteToSOType == null)
            {
                throw new InvalidDataException("quoteToSOType is a required property for TsiWebAddQuoteToExistingServiceOrderModel and cannot be null");
            }
            else
            {
                this.QuoteToSOType = quoteToSOType;
            }
            this.ItemsToConvert = itemsToConvert;
            this.ProjectPhaseNumber = projectPhaseNumber;
        }
        
        /// <summary>
        /// Gets or Sets QuoteToSOType
        /// </summary>
        [DataMember(Name="QuoteToSOType", EmitDefaultValue=false)]
        public string QuoteToSOType { get; set; }

        /// <summary>
        /// Gets or Sets ItemsToConvert
        /// </summary>
        [DataMember(Name="ItemsToConvert", EmitDefaultValue=false)]
        public List<TsiWebConversionItem> ItemsToConvert { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectPhaseNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAddQuoteToExistingServiceOrderModel {\n");
            sb.Append("  QuoteToSOType: ").Append(QuoteToSOType).Append("\n");
            sb.Append("  ItemsToConvert: ").Append(ItemsToConvert).Append("\n");
            sb.Append("  ProjectPhaseNumber: ").Append(ProjectPhaseNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAddQuoteToExistingServiceOrderModel);
        }

        /// <summary>
        /// Returns true if TsiWebAddQuoteToExistingServiceOrderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAddQuoteToExistingServiceOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAddQuoteToExistingServiceOrderModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteToSOType == input.QuoteToSOType ||
                    (this.QuoteToSOType != null &&
                    this.QuoteToSOType.Equals(input.QuoteToSOType))
                ) && 
                (
                    this.ItemsToConvert == input.ItemsToConvert ||
                    this.ItemsToConvert != null &&
                    this.ItemsToConvert.SequenceEqual(input.ItemsToConvert)
                ) && 
                (
                    this.ProjectPhaseNumber == input.ProjectPhaseNumber ||
                    (this.ProjectPhaseNumber != null &&
                    this.ProjectPhaseNumber.Equals(input.ProjectPhaseNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteToSOType != null)
                    hashCode = hashCode * 59 + this.QuoteToSOType.GetHashCode();
                if (this.ItemsToConvert != null)
                    hashCode = hashCode * 59 + this.ItemsToConvert.GetHashCode();
                if (this.ProjectPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectPhaseNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
