/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAddQuoteToNewServiceOrderModel
    /// </summary>
    [DataContract]
    public partial class TsiWebAddQuoteToNewServiceOrderModel :  IEquatable<TsiWebAddQuoteToNewServiceOrderModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAddQuoteToNewServiceOrderModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebAddQuoteToNewServiceOrderModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAddQuoteToNewServiceOrderModel" /> class.
        /// </summary>
        /// <param name="quoteToSOType">quoteToSOType (required).</param>
        /// <param name="projectNumber">projectNumber.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="briefDescription">briefDescription.</param>
        /// <param name="dateTimeRequested">dateTimeRequested.</param>
        /// <param name="newServiceOrderPhaseNumber">newServiceOrderPhaseNumber.</param>
        /// <param name="type">type.</param>
        /// <param name="status">status.</param>
        /// <param name="technicianAssigned">technicianAssigned.</param>
        /// <param name="itemsToConvert">itemsToConvert.</param>
        /// <param name="projectPhaseNumber">projectPhaseNumber.</param>
        /// <param name="allowInactiveContract">allowInactiveContract.</param>
        /// <param name="allowFutureContract">allowFutureContract.</param>
        /// <param name="allowContractNoRemaining">allowContractNoRemaining.</param>
        public TsiWebAddQuoteToNewServiceOrderModel(string quoteToSOType = default(string), int? projectNumber = default(int?), int? contractNumber = default(int?), string briefDescription = default(string), SystemNullableTsiWebSplitDateTime dateTimeRequested = default(SystemNullableTsiWebSplitDateTime), int? newServiceOrderPhaseNumber = default(int?), string type = default(string), string status = default(string), int? technicianAssigned = default(int?), List<TsiWebConversionItem> itemsToConvert = default(List<TsiWebConversionItem>), int? projectPhaseNumber = default(int?), bool? allowInactiveContract = default(bool?), bool? allowFutureContract = default(bool?), bool? allowContractNoRemaining = default(bool?))
        {
            // to ensure "quoteToSOType" is required (not null)
            if (quoteToSOType == null)
            {
                throw new InvalidDataException("quoteToSOType is a required property for TsiWebAddQuoteToNewServiceOrderModel and cannot be null");
            }
            else
            {
                this.QuoteToSOType = quoteToSOType;
            }
            this.ProjectNumber = projectNumber;
            this.ContractNumber = contractNumber;
            this.BriefDescription = briefDescription;
            this.DateTimeRequested = dateTimeRequested;
            this.NewServiceOrderPhaseNumber = newServiceOrderPhaseNumber;
            this.Type = type;
            this.Status = status;
            this.TechnicianAssigned = technicianAssigned;
            this.ItemsToConvert = itemsToConvert;
            this.ProjectPhaseNumber = projectPhaseNumber;
            this.AllowInactiveContract = allowInactiveContract;
            this.AllowFutureContract = allowFutureContract;
            this.AllowContractNoRemaining = allowContractNoRemaining;
        }
        
        /// <summary>
        /// Gets or Sets QuoteToSOType
        /// </summary>
        [DataMember(Name="QuoteToSOType", EmitDefaultValue=false)]
        public string QuoteToSOType { get; set; }

        /// <summary>
        /// Gets or Sets ProjectNumber
        /// </summary>
        [DataMember(Name="ProjectNumber", EmitDefaultValue=false)]
        public int? ProjectNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="ContractNumber", EmitDefaultValue=false)]
        public int? ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets BriefDescription
        /// </summary>
        [DataMember(Name="BriefDescription", EmitDefaultValue=false)]
        public string BriefDescription { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeRequested
        /// </summary>
        [DataMember(Name="DateTimeRequested", EmitDefaultValue=false)]
        public SystemNullableTsiWebSplitDateTime DateTimeRequested { get; set; }

        /// <summary>
        /// Gets or Sets NewServiceOrderPhaseNumber
        /// </summary>
        [DataMember(Name="NewServiceOrderPhaseNumber", EmitDefaultValue=false)]
        public int? NewServiceOrderPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TechnicianAssigned
        /// </summary>
        [DataMember(Name="TechnicianAssigned", EmitDefaultValue=false)]
        public int? TechnicianAssigned { get; set; }

        /// <summary>
        /// Gets or Sets ItemsToConvert
        /// </summary>
        [DataMember(Name="ItemsToConvert", EmitDefaultValue=false)]
        public List<TsiWebConversionItem> ItemsToConvert { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets AllowInactiveContract
        /// </summary>
        [DataMember(Name="AllowInactiveContract", EmitDefaultValue=false)]
        public bool? AllowInactiveContract { get; set; }

        /// <summary>
        /// Gets or Sets AllowFutureContract
        /// </summary>
        [DataMember(Name="AllowFutureContract", EmitDefaultValue=false)]
        public bool? AllowFutureContract { get; set; }

        /// <summary>
        /// Gets or Sets AllowContractNoRemaining
        /// </summary>
        [DataMember(Name="AllowContractNoRemaining", EmitDefaultValue=false)]
        public bool? AllowContractNoRemaining { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAddQuoteToNewServiceOrderModel {\n");
            sb.Append("  QuoteToSOType: ").Append(QuoteToSOType).Append("\n");
            sb.Append("  ProjectNumber: ").Append(ProjectNumber).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  BriefDescription: ").Append(BriefDescription).Append("\n");
            sb.Append("  DateTimeRequested: ").Append(DateTimeRequested).Append("\n");
            sb.Append("  NewServiceOrderPhaseNumber: ").Append(NewServiceOrderPhaseNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TechnicianAssigned: ").Append(TechnicianAssigned).Append("\n");
            sb.Append("  ItemsToConvert: ").Append(ItemsToConvert).Append("\n");
            sb.Append("  ProjectPhaseNumber: ").Append(ProjectPhaseNumber).Append("\n");
            sb.Append("  AllowInactiveContract: ").Append(AllowInactiveContract).Append("\n");
            sb.Append("  AllowFutureContract: ").Append(AllowFutureContract).Append("\n");
            sb.Append("  AllowContractNoRemaining: ").Append(AllowContractNoRemaining).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAddQuoteToNewServiceOrderModel);
        }

        /// <summary>
        /// Returns true if TsiWebAddQuoteToNewServiceOrderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAddQuoteToNewServiceOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAddQuoteToNewServiceOrderModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteToSOType == input.QuoteToSOType ||
                    (this.QuoteToSOType != null &&
                    this.QuoteToSOType.Equals(input.QuoteToSOType))
                ) && 
                (
                    this.ProjectNumber == input.ProjectNumber ||
                    (this.ProjectNumber != null &&
                    this.ProjectNumber.Equals(input.ProjectNumber))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.BriefDescription == input.BriefDescription ||
                    (this.BriefDescription != null &&
                    this.BriefDescription.Equals(input.BriefDescription))
                ) && 
                (
                    this.DateTimeRequested == input.DateTimeRequested ||
                    (this.DateTimeRequested != null &&
                    this.DateTimeRequested.Equals(input.DateTimeRequested))
                ) && 
                (
                    this.NewServiceOrderPhaseNumber == input.NewServiceOrderPhaseNumber ||
                    (this.NewServiceOrderPhaseNumber != null &&
                    this.NewServiceOrderPhaseNumber.Equals(input.NewServiceOrderPhaseNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TechnicianAssigned == input.TechnicianAssigned ||
                    (this.TechnicianAssigned != null &&
                    this.TechnicianAssigned.Equals(input.TechnicianAssigned))
                ) && 
                (
                    this.ItemsToConvert == input.ItemsToConvert ||
                    this.ItemsToConvert != null &&
                    this.ItemsToConvert.SequenceEqual(input.ItemsToConvert)
                ) && 
                (
                    this.ProjectPhaseNumber == input.ProjectPhaseNumber ||
                    (this.ProjectPhaseNumber != null &&
                    this.ProjectPhaseNumber.Equals(input.ProjectPhaseNumber))
                ) && 
                (
                    this.AllowInactiveContract == input.AllowInactiveContract ||
                    (this.AllowInactiveContract != null &&
                    this.AllowInactiveContract.Equals(input.AllowInactiveContract))
                ) && 
                (
                    this.AllowFutureContract == input.AllowFutureContract ||
                    (this.AllowFutureContract != null &&
                    this.AllowFutureContract.Equals(input.AllowFutureContract))
                ) && 
                (
                    this.AllowContractNoRemaining == input.AllowContractNoRemaining ||
                    (this.AllowContractNoRemaining != null &&
                    this.AllowContractNoRemaining.Equals(input.AllowContractNoRemaining))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteToSOType != null)
                    hashCode = hashCode * 59 + this.QuoteToSOType.GetHashCode();
                if (this.ProjectNumber != null)
                    hashCode = hashCode * 59 + this.ProjectNumber.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.BriefDescription != null)
                    hashCode = hashCode * 59 + this.BriefDescription.GetHashCode();
                if (this.DateTimeRequested != null)
                    hashCode = hashCode * 59 + this.DateTimeRequested.GetHashCode();
                if (this.NewServiceOrderPhaseNumber != null)
                    hashCode = hashCode * 59 + this.NewServiceOrderPhaseNumber.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TechnicianAssigned != null)
                    hashCode = hashCode * 59 + this.TechnicianAssigned.GetHashCode();
                if (this.ItemsToConvert != null)
                    hashCode = hashCode * 59 + this.ItemsToConvert.GetHashCode();
                if (this.ProjectPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectPhaseNumber.GetHashCode();
                if (this.AllowInactiveContract != null)
                    hashCode = hashCode * 59 + this.AllowInactiveContract.GetHashCode();
                if (this.AllowFutureContract != null)
                    hashCode = hashCode * 59 + this.AllowFutureContract.GetHashCode();
                if (this.AllowContractNoRemaining != null)
                    hashCode = hashCode * 59 + this.AllowContractNoRemaining.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
