/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebAssemblyDetail
    /// </summary>
    [DataContract]
    public partial class TsiWebAssemblyDetail :  IEquatable<TsiWebAssemblyDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebAssemblyDetail" /> class.
        /// </summary>
        /// <param name="assemblyDetailNumber">assemblyDetailNumber.</param>
        /// <param name="item">item.</param>
        /// <param name="type">type.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="priceBookNumber">priceBookNumber.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="printOnQuote">printOnQuote.</param>
        public TsiWebAssemblyDetail(int? assemblyDetailNumber = default(int?), TsiWebPriceBookItem item = default(TsiWebPriceBookItem), string type = default(string), int? lineNumber = default(int?), int? priceBookNumber = default(int?), string itemId = default(string), double? quantity = default(double?), bool? printOnQuote = default(bool?))
        {
            this.AssemblyDetailNumber = assemblyDetailNumber;
            this.Item = item;
            this.Type = type;
            this.LineNumber = lineNumber;
            this.PriceBookNumber = priceBookNumber;
            this.ItemId = itemId;
            this.Quantity = quantity;
            this.PrintOnQuote = printOnQuote;
        }
        
        /// <summary>
        /// Gets or Sets AssemblyDetailNumber
        /// </summary>
        [DataMember(Name="AssemblyDetailNumber", EmitDefaultValue=false)]
        public int? AssemblyDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="Item", EmitDefaultValue=false)]
        public TsiWebPriceBookItem Item { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="LineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceBookNumber
        /// </summary>
        [DataMember(Name="PriceBookNumber", EmitDefaultValue=false)]
        public int? PriceBookNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnQuote
        /// </summary>
        [DataMember(Name="PrintOnQuote", EmitDefaultValue=false)]
        public bool? PrintOnQuote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebAssemblyDetail {\n");
            sb.Append("  AssemblyDetailNumber: ").Append(AssemblyDetailNumber).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  PriceBookNumber: ").Append(PriceBookNumber).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PrintOnQuote: ").Append(PrintOnQuote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebAssemblyDetail);
        }

        /// <summary>
        /// Returns true if TsiWebAssemblyDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebAssemblyDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebAssemblyDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssemblyDetailNumber == input.AssemblyDetailNumber ||
                    (this.AssemblyDetailNumber != null &&
                    this.AssemblyDetailNumber.Equals(input.AssemblyDetailNumber))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.PriceBookNumber == input.PriceBookNumber ||
                    (this.PriceBookNumber != null &&
                    this.PriceBookNumber.Equals(input.PriceBookNumber))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.PrintOnQuote == input.PrintOnQuote ||
                    (this.PrintOnQuote != null &&
                    this.PrintOnQuote.Equals(input.PrintOnQuote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssemblyDetailNumber != null)
                    hashCode = hashCode * 59 + this.AssemblyDetailNumber.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.PriceBookNumber != null)
                    hashCode = hashCode * 59 + this.PriceBookNumber.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.PrintOnQuote != null)
                    hashCode = hashCode * 59 + this.PrintOnQuote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
