/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebBOTaxCode
    /// </summary>
    [DataContract]
    public partial class TsiWebBOTaxCode :  IEquatable<TsiWebBOTaxCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebBOTaxCode" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="city">city.</param>
        /// <param name="state">state.</param>
        /// <param name="retailGeneralLedgerCode">retailGeneralLedgerCode.</param>
        /// <param name="wholesaleGeneralLedgerCode">wholesaleGeneralLedgerCode.</param>
        /// <param name="retailRate">retailRate.</param>
        /// <param name="wholesaleRate">wholesaleRate.</param>
        public TsiWebBOTaxCode(string code = default(string), string city = default(string), string state = default(string), string retailGeneralLedgerCode = default(string), string wholesaleGeneralLedgerCode = default(string), double? retailRate = default(double?), double? wholesaleRate = default(double?))
        {
            this.Code = code;
            this.City = city;
            this.State = state;
            this.RetailGeneralLedgerCode = retailGeneralLedgerCode;
            this.WholesaleGeneralLedgerCode = wholesaleGeneralLedgerCode;
            this.RetailRate = retailRate;
            this.WholesaleRate = wholesaleRate;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets RetailGeneralLedgerCode
        /// </summary>
        [DataMember(Name="RetailGeneralLedgerCode", EmitDefaultValue=false)]
        public string RetailGeneralLedgerCode { get; set; }

        /// <summary>
        /// Gets or Sets WholesaleGeneralLedgerCode
        /// </summary>
        [DataMember(Name="WholesaleGeneralLedgerCode", EmitDefaultValue=false)]
        public string WholesaleGeneralLedgerCode { get; set; }

        /// <summary>
        /// Gets or Sets RetailRate
        /// </summary>
        [DataMember(Name="RetailRate", EmitDefaultValue=false)]
        public double? RetailRate { get; set; }

        /// <summary>
        /// Gets or Sets WholesaleRate
        /// </summary>
        [DataMember(Name="WholesaleRate", EmitDefaultValue=false)]
        public double? WholesaleRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebBOTaxCode {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RetailGeneralLedgerCode: ").Append(RetailGeneralLedgerCode).Append("\n");
            sb.Append("  WholesaleGeneralLedgerCode: ").Append(WholesaleGeneralLedgerCode).Append("\n");
            sb.Append("  RetailRate: ").Append(RetailRate).Append("\n");
            sb.Append("  WholesaleRate: ").Append(WholesaleRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebBOTaxCode);
        }

        /// <summary>
        /// Returns true if TsiWebBOTaxCode instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebBOTaxCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebBOTaxCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.RetailGeneralLedgerCode == input.RetailGeneralLedgerCode ||
                    (this.RetailGeneralLedgerCode != null &&
                    this.RetailGeneralLedgerCode.Equals(input.RetailGeneralLedgerCode))
                ) && 
                (
                    this.WholesaleGeneralLedgerCode == input.WholesaleGeneralLedgerCode ||
                    (this.WholesaleGeneralLedgerCode != null &&
                    this.WholesaleGeneralLedgerCode.Equals(input.WholesaleGeneralLedgerCode))
                ) && 
                (
                    this.RetailRate == input.RetailRate ||
                    (this.RetailRate != null &&
                    this.RetailRate.Equals(input.RetailRate))
                ) && 
                (
                    this.WholesaleRate == input.WholesaleRate ||
                    (this.WholesaleRate != null &&
                    this.WholesaleRate.Equals(input.WholesaleRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.RetailGeneralLedgerCode != null)
                    hashCode = hashCode * 59 + this.RetailGeneralLedgerCode.GetHashCode();
                if (this.WholesaleGeneralLedgerCode != null)
                    hashCode = hashCode * 59 + this.WholesaleGeneralLedgerCode.GetHashCode();
                if (this.RetailRate != null)
                    hashCode = hashCode * 59 + this.RetailRate.GetHashCode();
                if (this.WholesaleRate != null)
                    hashCode = hashCode * 59 + this.WholesaleRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
