/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebBasis
    /// </summary>
    [DataContract]
    public partial class TsiWebBasis :  IEquatable<TsiWebBasis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebBasis" /> class.
        /// </summary>
        /// <param name="contractHours">contractHours.</param>
        /// <param name="contractMinutes">contractMinutes.</param>
        /// <param name="ratePerHour">ratePerHour.</param>
        /// <param name="hoursRemaining">hoursRemaining.</param>
        /// <param name="minutesRemaining">minutesRemaining.</param>
        /// <param name="hoursUsed">hoursUsed.</param>
        /// <param name="minutesUsed">minutesUsed.</param>
        /// <param name="overUnderIndicator">overUnderIndicator.</param>
        /// <param name="maxMeter">maxMeter.</param>
        /// <param name="warningClicks">warningClicks.</param>
        /// <param name="overageChargePerClick">overageChargePerClick.</param>
        /// <param name="meterRemaining">meterRemaining.</param>
        /// <param name="startingMeter">startingMeter.</param>
        /// <param name="currentMeter">currentMeter.</param>
        /// <param name="prePaidAmount">prePaidAmount.</param>
        /// <param name="warningPercent">warningPercent.</param>
        /// <param name="amountRemaining">amountRemaining.</param>
        /// <param name="currentDollars">currentDollars.</param>
        /// <param name="maxUnits">maxUnits.</param>
        /// <param name="chargePerUnit">chargePerUnit.</param>
        /// <param name="unitsRemaining">unitsRemaining.</param>
        /// <param name="unitsUsed">unitsUsed.</param>
        /// <param name="periodBaseHours">periodBaseHours.</param>
        /// <param name="periodUsageCycle">periodUsageCycle.</param>
        /// <param name="roundingFactor">roundingFactor.</param>
        /// <param name="periodUsage">periodUsage.</param>
        /// <param name="periodOverageBilled">periodOverageBilled.</param>
        /// <param name="periodHours">periodHours.</param>
        /// <param name="toDateTotalHours">toDateTotalHours.</param>
        /// <param name="toDateTotalDollars">toDateTotalDollars.</param>
        /// <param name="periodBaseClicks">periodBaseClicks.</param>
        /// <param name="usagePeriodStart">usagePeriodStart.</param>
        /// <param name="usagePeriodEnd">usagePeriodEnd.</param>
        /// <param name="usageQuantity">usageQuantity.</param>
        /// <param name="periodStartingMeter">periodStartingMeter.</param>
        public TsiWebBasis(int? contractHours = default(int?), int? contractMinutes = default(int?), double? ratePerHour = default(double?), int? hoursRemaining = default(int?), int? minutesRemaining = default(int?), int? hoursUsed = default(int?), int? minutesUsed = default(int?), string overUnderIndicator = default(string), int? maxMeter = default(int?), int? warningClicks = default(int?), double? overageChargePerClick = default(double?), int? meterRemaining = default(int?), int? startingMeter = default(int?), int? currentMeter = default(int?), double? prePaidAmount = default(double?), double? warningPercent = default(double?), double? amountRemaining = default(double?), double? currentDollars = default(double?), double? maxUnits = default(double?), double? chargePerUnit = default(double?), double? unitsRemaining = default(double?), double? unitsUsed = default(double?), double? periodBaseHours = default(double?), string periodUsageCycle = default(string), string roundingFactor = default(string), double? periodUsage = default(double?), double? periodOverageBilled = default(double?), double? periodHours = default(double?), double? toDateTotalHours = default(double?), double? toDateTotalDollars = default(double?), double? periodBaseClicks = default(double?), DateTime? usagePeriodStart = default(DateTime?), DateTime? usagePeriodEnd = default(DateTime?), double? usageQuantity = default(double?), int? periodStartingMeter = default(int?))
        {
            this.ContractHours = contractHours;
            this.ContractMinutes = contractMinutes;
            this.RatePerHour = ratePerHour;
            this.HoursRemaining = hoursRemaining;
            this.MinutesRemaining = minutesRemaining;
            this.HoursUsed = hoursUsed;
            this.MinutesUsed = minutesUsed;
            this.OverUnderIndicator = overUnderIndicator;
            this.MaxMeter = maxMeter;
            this.WarningClicks = warningClicks;
            this.OverageChargePerClick = overageChargePerClick;
            this.MeterRemaining = meterRemaining;
            this.StartingMeter = startingMeter;
            this.CurrentMeter = currentMeter;
            this.PrePaidAmount = prePaidAmount;
            this.WarningPercent = warningPercent;
            this.AmountRemaining = amountRemaining;
            this.CurrentDollars = currentDollars;
            this.MaxUnits = maxUnits;
            this.ChargePerUnit = chargePerUnit;
            this.UnitsRemaining = unitsRemaining;
            this.UnitsUsed = unitsUsed;
            this.PeriodBaseHours = periodBaseHours;
            this.PeriodUsageCycle = periodUsageCycle;
            this.RoundingFactor = roundingFactor;
            this.PeriodUsage = periodUsage;
            this.PeriodOverageBilled = periodOverageBilled;
            this.PeriodHours = periodHours;
            this.ToDateTotalHours = toDateTotalHours;
            this.ToDateTotalDollars = toDateTotalDollars;
            this.PeriodBaseClicks = periodBaseClicks;
            this.UsagePeriodStart = usagePeriodStart;
            this.UsagePeriodEnd = usagePeriodEnd;
            this.UsageQuantity = usageQuantity;
            this.PeriodStartingMeter = periodStartingMeter;
        }
        
        /// <summary>
        /// Gets or Sets ContractHours
        /// </summary>
        [DataMember(Name="ContractHours", EmitDefaultValue=false)]
        public int? ContractHours { get; set; }

        /// <summary>
        /// Gets or Sets ContractMinutes
        /// </summary>
        [DataMember(Name="ContractMinutes", EmitDefaultValue=false)]
        public int? ContractMinutes { get; set; }

        /// <summary>
        /// Gets or Sets RatePerHour
        /// </summary>
        [DataMember(Name="RatePerHour", EmitDefaultValue=false)]
        public double? RatePerHour { get; set; }

        /// <summary>
        /// Gets or Sets HoursRemaining
        /// </summary>
        [DataMember(Name="HoursRemaining", EmitDefaultValue=false)]
        public int? HoursRemaining { get; set; }

        /// <summary>
        /// Gets or Sets MinutesRemaining
        /// </summary>
        [DataMember(Name="MinutesRemaining", EmitDefaultValue=false)]
        public int? MinutesRemaining { get; set; }

        /// <summary>
        /// Gets or Sets HoursUsed
        /// </summary>
        [DataMember(Name="HoursUsed", EmitDefaultValue=false)]
        public int? HoursUsed { get; set; }

        /// <summary>
        /// Gets or Sets MinutesUsed
        /// </summary>
        [DataMember(Name="MinutesUsed", EmitDefaultValue=false)]
        public int? MinutesUsed { get; set; }

        /// <summary>
        /// Gets or Sets OverUnderIndicator
        /// </summary>
        [DataMember(Name="OverUnderIndicator", EmitDefaultValue=false)]
        public string OverUnderIndicator { get; set; }

        /// <summary>
        /// Gets or Sets MaxMeter
        /// </summary>
        [DataMember(Name="MaxMeter", EmitDefaultValue=false)]
        public int? MaxMeter { get; set; }

        /// <summary>
        /// Gets or Sets WarningClicks
        /// </summary>
        [DataMember(Name="WarningClicks", EmitDefaultValue=false)]
        public int? WarningClicks { get; set; }

        /// <summary>
        /// Gets or Sets OverageChargePerClick
        /// </summary>
        [DataMember(Name="OverageChargePerClick", EmitDefaultValue=false)]
        public double? OverageChargePerClick { get; set; }

        /// <summary>
        /// Gets or Sets MeterRemaining
        /// </summary>
        [DataMember(Name="MeterRemaining", EmitDefaultValue=false)]
        public int? MeterRemaining { get; set; }

        /// <summary>
        /// Gets or Sets StartingMeter
        /// </summary>
        [DataMember(Name="StartingMeter", EmitDefaultValue=false)]
        public int? StartingMeter { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMeter
        /// </summary>
        [DataMember(Name="CurrentMeter", EmitDefaultValue=false)]
        public int? CurrentMeter { get; set; }

        /// <summary>
        /// Gets or Sets PrePaidAmount
        /// </summary>
        [DataMember(Name="PrePaidAmount", EmitDefaultValue=false)]
        public double? PrePaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets WarningPercent
        /// </summary>
        [DataMember(Name="WarningPercent", EmitDefaultValue=false)]
        public double? WarningPercent { get; set; }

        /// <summary>
        /// Gets or Sets AmountRemaining
        /// </summary>
        [DataMember(Name="AmountRemaining", EmitDefaultValue=false)]
        public double? AmountRemaining { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDollars
        /// </summary>
        [DataMember(Name="CurrentDollars", EmitDefaultValue=false)]
        public double? CurrentDollars { get; set; }

        /// <summary>
        /// Gets or Sets MaxUnits
        /// </summary>
        [DataMember(Name="MaxUnits", EmitDefaultValue=false)]
        public double? MaxUnits { get; set; }

        /// <summary>
        /// Gets or Sets ChargePerUnit
        /// </summary>
        [DataMember(Name="ChargePerUnit", EmitDefaultValue=false)]
        public double? ChargePerUnit { get; set; }

        /// <summary>
        /// Gets or Sets UnitsRemaining
        /// </summary>
        [DataMember(Name="UnitsRemaining", EmitDefaultValue=false)]
        public double? UnitsRemaining { get; set; }

        /// <summary>
        /// Gets or Sets UnitsUsed
        /// </summary>
        [DataMember(Name="UnitsUsed", EmitDefaultValue=false)]
        public double? UnitsUsed { get; set; }

        /// <summary>
        /// Gets or Sets PeriodBaseHours
        /// </summary>
        [DataMember(Name="PeriodBaseHours", EmitDefaultValue=false)]
        public double? PeriodBaseHours { get; set; }

        /// <summary>
        /// Gets or Sets PeriodUsageCycle
        /// </summary>
        [DataMember(Name="PeriodUsageCycle", EmitDefaultValue=false)]
        public string PeriodUsageCycle { get; set; }

        /// <summary>
        /// Gets or Sets RoundingFactor
        /// </summary>
        [DataMember(Name="RoundingFactor", EmitDefaultValue=false)]
        public string RoundingFactor { get; set; }

        /// <summary>
        /// Gets or Sets PeriodUsage
        /// </summary>
        [DataMember(Name="PeriodUsage", EmitDefaultValue=false)]
        public double? PeriodUsage { get; set; }

        /// <summary>
        /// Gets or Sets PeriodOverageBilled
        /// </summary>
        [DataMember(Name="PeriodOverageBilled", EmitDefaultValue=false)]
        public double? PeriodOverageBilled { get; set; }

        /// <summary>
        /// Gets or Sets PeriodHours
        /// </summary>
        [DataMember(Name="PeriodHours", EmitDefaultValue=false)]
        public double? PeriodHours { get; set; }

        /// <summary>
        /// Gets or Sets ToDateTotalHours
        /// </summary>
        [DataMember(Name="ToDateTotalHours", EmitDefaultValue=false)]
        public double? ToDateTotalHours { get; set; }

        /// <summary>
        /// Gets or Sets ToDateTotalDollars
        /// </summary>
        [DataMember(Name="ToDateTotalDollars", EmitDefaultValue=false)]
        public double? ToDateTotalDollars { get; set; }

        /// <summary>
        /// Gets or Sets PeriodBaseClicks
        /// </summary>
        [DataMember(Name="PeriodBaseClicks", EmitDefaultValue=false)]
        public double? PeriodBaseClicks { get; set; }

        /// <summary>
        /// Gets or Sets UsagePeriodStart
        /// </summary>
        [DataMember(Name="UsagePeriodStart", EmitDefaultValue=false)]
        public DateTime? UsagePeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets UsagePeriodEnd
        /// </summary>
        [DataMember(Name="UsagePeriodEnd", EmitDefaultValue=false)]
        public DateTime? UsagePeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets UsageQuantity
        /// </summary>
        [DataMember(Name="UsageQuantity", EmitDefaultValue=false)]
        public double? UsageQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PeriodStartingMeter
        /// </summary>
        [DataMember(Name="PeriodStartingMeter", EmitDefaultValue=false)]
        public int? PeriodStartingMeter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebBasis {\n");
            sb.Append("  ContractHours: ").Append(ContractHours).Append("\n");
            sb.Append("  ContractMinutes: ").Append(ContractMinutes).Append("\n");
            sb.Append("  RatePerHour: ").Append(RatePerHour).Append("\n");
            sb.Append("  HoursRemaining: ").Append(HoursRemaining).Append("\n");
            sb.Append("  MinutesRemaining: ").Append(MinutesRemaining).Append("\n");
            sb.Append("  HoursUsed: ").Append(HoursUsed).Append("\n");
            sb.Append("  MinutesUsed: ").Append(MinutesUsed).Append("\n");
            sb.Append("  OverUnderIndicator: ").Append(OverUnderIndicator).Append("\n");
            sb.Append("  MaxMeter: ").Append(MaxMeter).Append("\n");
            sb.Append("  WarningClicks: ").Append(WarningClicks).Append("\n");
            sb.Append("  OverageChargePerClick: ").Append(OverageChargePerClick).Append("\n");
            sb.Append("  MeterRemaining: ").Append(MeterRemaining).Append("\n");
            sb.Append("  StartingMeter: ").Append(StartingMeter).Append("\n");
            sb.Append("  CurrentMeter: ").Append(CurrentMeter).Append("\n");
            sb.Append("  PrePaidAmount: ").Append(PrePaidAmount).Append("\n");
            sb.Append("  WarningPercent: ").Append(WarningPercent).Append("\n");
            sb.Append("  AmountRemaining: ").Append(AmountRemaining).Append("\n");
            sb.Append("  CurrentDollars: ").Append(CurrentDollars).Append("\n");
            sb.Append("  MaxUnits: ").Append(MaxUnits).Append("\n");
            sb.Append("  ChargePerUnit: ").Append(ChargePerUnit).Append("\n");
            sb.Append("  UnitsRemaining: ").Append(UnitsRemaining).Append("\n");
            sb.Append("  UnitsUsed: ").Append(UnitsUsed).Append("\n");
            sb.Append("  PeriodBaseHours: ").Append(PeriodBaseHours).Append("\n");
            sb.Append("  PeriodUsageCycle: ").Append(PeriodUsageCycle).Append("\n");
            sb.Append("  RoundingFactor: ").Append(RoundingFactor).Append("\n");
            sb.Append("  PeriodUsage: ").Append(PeriodUsage).Append("\n");
            sb.Append("  PeriodOverageBilled: ").Append(PeriodOverageBilled).Append("\n");
            sb.Append("  PeriodHours: ").Append(PeriodHours).Append("\n");
            sb.Append("  ToDateTotalHours: ").Append(ToDateTotalHours).Append("\n");
            sb.Append("  ToDateTotalDollars: ").Append(ToDateTotalDollars).Append("\n");
            sb.Append("  PeriodBaseClicks: ").Append(PeriodBaseClicks).Append("\n");
            sb.Append("  UsagePeriodStart: ").Append(UsagePeriodStart).Append("\n");
            sb.Append("  UsagePeriodEnd: ").Append(UsagePeriodEnd).Append("\n");
            sb.Append("  UsageQuantity: ").Append(UsageQuantity).Append("\n");
            sb.Append("  PeriodStartingMeter: ").Append(PeriodStartingMeter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebBasis);
        }

        /// <summary>
        /// Returns true if TsiWebBasis instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebBasis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebBasis input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractHours == input.ContractHours ||
                    (this.ContractHours != null &&
                    this.ContractHours.Equals(input.ContractHours))
                ) && 
                (
                    this.ContractMinutes == input.ContractMinutes ||
                    (this.ContractMinutes != null &&
                    this.ContractMinutes.Equals(input.ContractMinutes))
                ) && 
                (
                    this.RatePerHour == input.RatePerHour ||
                    (this.RatePerHour != null &&
                    this.RatePerHour.Equals(input.RatePerHour))
                ) && 
                (
                    this.HoursRemaining == input.HoursRemaining ||
                    (this.HoursRemaining != null &&
                    this.HoursRemaining.Equals(input.HoursRemaining))
                ) && 
                (
                    this.MinutesRemaining == input.MinutesRemaining ||
                    (this.MinutesRemaining != null &&
                    this.MinutesRemaining.Equals(input.MinutesRemaining))
                ) && 
                (
                    this.HoursUsed == input.HoursUsed ||
                    (this.HoursUsed != null &&
                    this.HoursUsed.Equals(input.HoursUsed))
                ) && 
                (
                    this.MinutesUsed == input.MinutesUsed ||
                    (this.MinutesUsed != null &&
                    this.MinutesUsed.Equals(input.MinutesUsed))
                ) && 
                (
                    this.OverUnderIndicator == input.OverUnderIndicator ||
                    (this.OverUnderIndicator != null &&
                    this.OverUnderIndicator.Equals(input.OverUnderIndicator))
                ) && 
                (
                    this.MaxMeter == input.MaxMeter ||
                    (this.MaxMeter != null &&
                    this.MaxMeter.Equals(input.MaxMeter))
                ) && 
                (
                    this.WarningClicks == input.WarningClicks ||
                    (this.WarningClicks != null &&
                    this.WarningClicks.Equals(input.WarningClicks))
                ) && 
                (
                    this.OverageChargePerClick == input.OverageChargePerClick ||
                    (this.OverageChargePerClick != null &&
                    this.OverageChargePerClick.Equals(input.OverageChargePerClick))
                ) && 
                (
                    this.MeterRemaining == input.MeterRemaining ||
                    (this.MeterRemaining != null &&
                    this.MeterRemaining.Equals(input.MeterRemaining))
                ) && 
                (
                    this.StartingMeter == input.StartingMeter ||
                    (this.StartingMeter != null &&
                    this.StartingMeter.Equals(input.StartingMeter))
                ) && 
                (
                    this.CurrentMeter == input.CurrentMeter ||
                    (this.CurrentMeter != null &&
                    this.CurrentMeter.Equals(input.CurrentMeter))
                ) && 
                (
                    this.PrePaidAmount == input.PrePaidAmount ||
                    (this.PrePaidAmount != null &&
                    this.PrePaidAmount.Equals(input.PrePaidAmount))
                ) && 
                (
                    this.WarningPercent == input.WarningPercent ||
                    (this.WarningPercent != null &&
                    this.WarningPercent.Equals(input.WarningPercent))
                ) && 
                (
                    this.AmountRemaining == input.AmountRemaining ||
                    (this.AmountRemaining != null &&
                    this.AmountRemaining.Equals(input.AmountRemaining))
                ) && 
                (
                    this.CurrentDollars == input.CurrentDollars ||
                    (this.CurrentDollars != null &&
                    this.CurrentDollars.Equals(input.CurrentDollars))
                ) && 
                (
                    this.MaxUnits == input.MaxUnits ||
                    (this.MaxUnits != null &&
                    this.MaxUnits.Equals(input.MaxUnits))
                ) && 
                (
                    this.ChargePerUnit == input.ChargePerUnit ||
                    (this.ChargePerUnit != null &&
                    this.ChargePerUnit.Equals(input.ChargePerUnit))
                ) && 
                (
                    this.UnitsRemaining == input.UnitsRemaining ||
                    (this.UnitsRemaining != null &&
                    this.UnitsRemaining.Equals(input.UnitsRemaining))
                ) && 
                (
                    this.UnitsUsed == input.UnitsUsed ||
                    (this.UnitsUsed != null &&
                    this.UnitsUsed.Equals(input.UnitsUsed))
                ) && 
                (
                    this.PeriodBaseHours == input.PeriodBaseHours ||
                    (this.PeriodBaseHours != null &&
                    this.PeriodBaseHours.Equals(input.PeriodBaseHours))
                ) && 
                (
                    this.PeriodUsageCycle == input.PeriodUsageCycle ||
                    (this.PeriodUsageCycle != null &&
                    this.PeriodUsageCycle.Equals(input.PeriodUsageCycle))
                ) && 
                (
                    this.RoundingFactor == input.RoundingFactor ||
                    (this.RoundingFactor != null &&
                    this.RoundingFactor.Equals(input.RoundingFactor))
                ) && 
                (
                    this.PeriodUsage == input.PeriodUsage ||
                    (this.PeriodUsage != null &&
                    this.PeriodUsage.Equals(input.PeriodUsage))
                ) && 
                (
                    this.PeriodOverageBilled == input.PeriodOverageBilled ||
                    (this.PeriodOverageBilled != null &&
                    this.PeriodOverageBilled.Equals(input.PeriodOverageBilled))
                ) && 
                (
                    this.PeriodHours == input.PeriodHours ||
                    (this.PeriodHours != null &&
                    this.PeriodHours.Equals(input.PeriodHours))
                ) && 
                (
                    this.ToDateTotalHours == input.ToDateTotalHours ||
                    (this.ToDateTotalHours != null &&
                    this.ToDateTotalHours.Equals(input.ToDateTotalHours))
                ) && 
                (
                    this.ToDateTotalDollars == input.ToDateTotalDollars ||
                    (this.ToDateTotalDollars != null &&
                    this.ToDateTotalDollars.Equals(input.ToDateTotalDollars))
                ) && 
                (
                    this.PeriodBaseClicks == input.PeriodBaseClicks ||
                    (this.PeriodBaseClicks != null &&
                    this.PeriodBaseClicks.Equals(input.PeriodBaseClicks))
                ) && 
                (
                    this.UsagePeriodStart == input.UsagePeriodStart ||
                    (this.UsagePeriodStart != null &&
                    this.UsagePeriodStart.Equals(input.UsagePeriodStart))
                ) && 
                (
                    this.UsagePeriodEnd == input.UsagePeriodEnd ||
                    (this.UsagePeriodEnd != null &&
                    this.UsagePeriodEnd.Equals(input.UsagePeriodEnd))
                ) && 
                (
                    this.UsageQuantity == input.UsageQuantity ||
                    (this.UsageQuantity != null &&
                    this.UsageQuantity.Equals(input.UsageQuantity))
                ) && 
                (
                    this.PeriodStartingMeter == input.PeriodStartingMeter ||
                    (this.PeriodStartingMeter != null &&
                    this.PeriodStartingMeter.Equals(input.PeriodStartingMeter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractHours != null)
                    hashCode = hashCode * 59 + this.ContractHours.GetHashCode();
                if (this.ContractMinutes != null)
                    hashCode = hashCode * 59 + this.ContractMinutes.GetHashCode();
                if (this.RatePerHour != null)
                    hashCode = hashCode * 59 + this.RatePerHour.GetHashCode();
                if (this.HoursRemaining != null)
                    hashCode = hashCode * 59 + this.HoursRemaining.GetHashCode();
                if (this.MinutesRemaining != null)
                    hashCode = hashCode * 59 + this.MinutesRemaining.GetHashCode();
                if (this.HoursUsed != null)
                    hashCode = hashCode * 59 + this.HoursUsed.GetHashCode();
                if (this.MinutesUsed != null)
                    hashCode = hashCode * 59 + this.MinutesUsed.GetHashCode();
                if (this.OverUnderIndicator != null)
                    hashCode = hashCode * 59 + this.OverUnderIndicator.GetHashCode();
                if (this.MaxMeter != null)
                    hashCode = hashCode * 59 + this.MaxMeter.GetHashCode();
                if (this.WarningClicks != null)
                    hashCode = hashCode * 59 + this.WarningClicks.GetHashCode();
                if (this.OverageChargePerClick != null)
                    hashCode = hashCode * 59 + this.OverageChargePerClick.GetHashCode();
                if (this.MeterRemaining != null)
                    hashCode = hashCode * 59 + this.MeterRemaining.GetHashCode();
                if (this.StartingMeter != null)
                    hashCode = hashCode * 59 + this.StartingMeter.GetHashCode();
                if (this.CurrentMeter != null)
                    hashCode = hashCode * 59 + this.CurrentMeter.GetHashCode();
                if (this.PrePaidAmount != null)
                    hashCode = hashCode * 59 + this.PrePaidAmount.GetHashCode();
                if (this.WarningPercent != null)
                    hashCode = hashCode * 59 + this.WarningPercent.GetHashCode();
                if (this.AmountRemaining != null)
                    hashCode = hashCode * 59 + this.AmountRemaining.GetHashCode();
                if (this.CurrentDollars != null)
                    hashCode = hashCode * 59 + this.CurrentDollars.GetHashCode();
                if (this.MaxUnits != null)
                    hashCode = hashCode * 59 + this.MaxUnits.GetHashCode();
                if (this.ChargePerUnit != null)
                    hashCode = hashCode * 59 + this.ChargePerUnit.GetHashCode();
                if (this.UnitsRemaining != null)
                    hashCode = hashCode * 59 + this.UnitsRemaining.GetHashCode();
                if (this.UnitsUsed != null)
                    hashCode = hashCode * 59 + this.UnitsUsed.GetHashCode();
                if (this.PeriodBaseHours != null)
                    hashCode = hashCode * 59 + this.PeriodBaseHours.GetHashCode();
                if (this.PeriodUsageCycle != null)
                    hashCode = hashCode * 59 + this.PeriodUsageCycle.GetHashCode();
                if (this.RoundingFactor != null)
                    hashCode = hashCode * 59 + this.RoundingFactor.GetHashCode();
                if (this.PeriodUsage != null)
                    hashCode = hashCode * 59 + this.PeriodUsage.GetHashCode();
                if (this.PeriodOverageBilled != null)
                    hashCode = hashCode * 59 + this.PeriodOverageBilled.GetHashCode();
                if (this.PeriodHours != null)
                    hashCode = hashCode * 59 + this.PeriodHours.GetHashCode();
                if (this.ToDateTotalHours != null)
                    hashCode = hashCode * 59 + this.ToDateTotalHours.GetHashCode();
                if (this.ToDateTotalDollars != null)
                    hashCode = hashCode * 59 + this.ToDateTotalDollars.GetHashCode();
                if (this.PeriodBaseClicks != null)
                    hashCode = hashCode * 59 + this.PeriodBaseClicks.GetHashCode();
                if (this.UsagePeriodStart != null)
                    hashCode = hashCode * 59 + this.UsagePeriodStart.GetHashCode();
                if (this.UsagePeriodEnd != null)
                    hashCode = hashCode * 59 + this.UsagePeriodEnd.GetHashCode();
                if (this.UsageQuantity != null)
                    hashCode = hashCode * 59 + this.UsageQuantity.GetHashCode();
                if (this.PeriodStartingMeter != null)
                    hashCode = hashCode * 59 + this.PeriodStartingMeter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
