/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebContact
    /// </summary>
    [DataContract]
    public partial class TsiWebContact :  IEquatable<TsiWebContact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebContact" /> class.
        /// </summary>
        /// <param name="accountNumber">Gets or sets the Account the contact is associated with..</param>
        /// <param name="prefix">Gets or sets the prefix..</param>
        /// <param name="firstName">Gets or sets the first name. (required).</param>
        /// <param name="middleInitial">Gets or sets the middle initial..</param>
        /// <param name="lastName">Gets or sets the last name. (required).</param>
        /// <param name="name">Gets or sets the contcat full name..</param>
        /// <param name="title">Gets or sets the title..</param>
        /// <param name="department">Gets or sets the department..</param>
        /// <param name="address1">Gets or sets address line 1..</param>
        /// <param name="address2">Gets or sets address line 2..</param>
        /// <param name="city">Gets or sets the city..</param>
        /// <param name="state">Gets or sets the state..</param>
        /// <param name="postalCode">Gets or sets the postal code..</param>
        /// <param name="country">Gets or sets the country..</param>
        /// <param name="personalNotes">Gets or sets the personal notes..</param>
        /// <param name="assistant">Gets or sets the assistant..</param>
        /// <param name="linkId">Gets or sets the link identifier..</param>
        /// <param name="inactive">Gets or sets a value indicating whether this {Tsi.Web.Contact} is inactive..</param>
        public TsiWebContact(int? accountNumber = default(int?), string prefix = default(string), string firstName = default(string), string middleInitial = default(string), string lastName = default(string), string name = default(string), string title = default(string), string department = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string), string personalNotes = default(string), string assistant = default(string), int? linkId = default(int?), bool? inactive = default(bool?))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for TsiWebContact and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for TsiWebContact and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            this.AccountNumber = accountNumber;
            this.Prefix = prefix;
            this.MiddleInitial = middleInitial;
            this.Name = name;
            this.Title = title;
            this.Department = department;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.Country = country;
            this.PersonalNotes = personalNotes;
            this.Assistant = assistant;
            this.LinkId = linkId;
            this.Inactive = inactive;
        }
        
        /// <summary>
        /// Gets or sets the Account the contact is associated with.
        /// </summary>
        /// <value>Gets or sets the Account the contact is associated with.</value>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets the prefix.
        /// </summary>
        /// <value>Gets or sets the prefix.</value>
        [DataMember(Name="Prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or sets the first name.
        /// </summary>
        /// <value>Gets or sets the first name.</value>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the middle initial.
        /// </summary>
        /// <value>Gets or sets the middle initial.</value>
        [DataMember(Name="MiddleInitial", EmitDefaultValue=false)]
        public string MiddleInitial { get; set; }

        /// <summary>
        /// Gets or sets the last name.
        /// </summary>
        /// <value>Gets or sets the last name.</value>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the contcat full name.
        /// </summary>
        /// <value>Gets or sets the contcat full name.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        /// <value>Gets or sets the title.</value>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the department.
        /// </summary>
        /// <value>Gets or sets the department.</value>
        [DataMember(Name="Department", EmitDefaultValue=false)]
        public string Department { get; set; }

        /// <summary>
        /// Gets or sets address line 1.
        /// </summary>
        /// <value>Gets or sets address line 1.</value>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets address line 2.
        /// </summary>
        /// <value>Gets or sets address line 2.</value>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the city.
        /// </summary>
        /// <value>Gets or sets the city.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the state.
        /// </summary>
        /// <value>Gets or sets the state.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the postal code.
        /// </summary>
        /// <value>Gets or sets the postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the country.
        /// </summary>
        /// <value>Gets or sets the country.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets the personal notes.
        /// </summary>
        /// <value>Gets or sets the personal notes.</value>
        [DataMember(Name="PersonalNotes", EmitDefaultValue=false)]
        public string PersonalNotes { get; set; }

        /// <summary>
        /// Gets or sets the assistant.
        /// </summary>
        /// <value>Gets or sets the assistant.</value>
        [DataMember(Name="Assistant", EmitDefaultValue=false)]
        public string Assistant { get; set; }

        /// <summary>
        /// Gets or sets the link identifier.
        /// </summary>
        /// <value>Gets or sets the link identifier.</value>
        [DataMember(Name="LinkId", EmitDefaultValue=false)]
        public int? LinkId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this {Tsi.Web.Contact} is inactive.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this {Tsi.Web.Contact} is inactive.</value>
        [DataMember(Name="Inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebContact {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleInitial: ").Append(MiddleInitial).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PersonalNotes: ").Append(PersonalNotes).Append("\n");
            sb.Append("  Assistant: ").Append(Assistant).Append("\n");
            sb.Append("  LinkId: ").Append(LinkId).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebContact);
        }

        /// <summary>
        /// Returns true if TsiWebContact instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebContact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.MiddleInitial == input.MiddleInitial ||
                    (this.MiddleInitial != null &&
                    this.MiddleInitial.Equals(input.MiddleInitial))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PersonalNotes == input.PersonalNotes ||
                    (this.PersonalNotes != null &&
                    this.PersonalNotes.Equals(input.PersonalNotes))
                ) && 
                (
                    this.Assistant == input.Assistant ||
                    (this.Assistant != null &&
                    this.Assistant.Equals(input.Assistant))
                ) && 
                (
                    this.LinkId == input.LinkId ||
                    (this.LinkId != null &&
                    this.LinkId.Equals(input.LinkId))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.MiddleInitial != null)
                    hashCode = hashCode * 59 + this.MiddleInitial.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PersonalNotes != null)
                    hashCode = hashCode * 59 + this.PersonalNotes.GetHashCode();
                if (this.Assistant != null)
                    hashCode = hashCode * 59 + this.Assistant.GetHashCode();
                if (this.LinkId != null)
                    hashCode = hashCode * 59 + this.LinkId.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
