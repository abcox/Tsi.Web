/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebContactSummary
    /// </summary>
    [DataContract]
    public partial class TsiWebContactSummary :  IEquatable<TsiWebContactSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebContactSummary" /> class.
        /// </summary>
        /// <param name="contactNumber">contactNumber.</param>
        /// <param name="contact">contact.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="faxNumber">faxNumber.</param>
        /// <param name="searchName">searchName.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="isPrimaryContact">isPrimaryContact.</param>
        /// <param name="journalEntries">journalEntries.</param>
        /// <param name="openOpportunities">openOpportunities.</param>
        /// <param name="openServiceOrders">openServiceOrders.</param>
        /// <param name="pastDueTasks">pastDueTasks.</param>
        public TsiWebContactSummary(int? contactNumber = default(int?), TsiWebContact contact = default(TsiWebContact), string phoneNumber = default(string), string emailAddress = default(string), string faxNumber = default(string), string searchName = default(string), string accountName = default(string), bool? isPrimaryContact = default(bool?), int? journalEntries = default(int?), int? openOpportunities = default(int?), int? openServiceOrders = default(int?), int? pastDueTasks = default(int?))
        {
            this.ContactNumber = contactNumber;
            this.Contact = contact;
            this.PhoneNumber = phoneNumber;
            this.EmailAddress = emailAddress;
            this.FaxNumber = faxNumber;
            this.SearchName = searchName;
            this.AccountName = accountName;
            this.IsPrimaryContact = isPrimaryContact;
            this.JournalEntries = journalEntries;
            this.OpenOpportunities = openOpportunities;
            this.OpenServiceOrders = openServiceOrders;
            this.PastDueTasks = pastDueTasks;
        }
        
        /// <summary>
        /// Gets or Sets ContactNumber
        /// </summary>
        [DataMember(Name="ContactNumber", EmitDefaultValue=false)]
        public int? ContactNumber { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="Contact", EmitDefaultValue=false)]
        public TsiWebContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name="FaxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets SearchName
        /// </summary>
        [DataMember(Name="SearchName", EmitDefaultValue=false)]
        public string SearchName { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="AccountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimaryContact
        /// </summary>
        [DataMember(Name="IsPrimaryContact", EmitDefaultValue=false)]
        public bool? IsPrimaryContact { get; set; }

        /// <summary>
        /// Gets or Sets JournalEntries
        /// </summary>
        [DataMember(Name="JournalEntries", EmitDefaultValue=false)]
        public int? JournalEntries { get; set; }

        /// <summary>
        /// Gets or Sets OpenOpportunities
        /// </summary>
        [DataMember(Name="OpenOpportunities", EmitDefaultValue=false)]
        public int? OpenOpportunities { get; set; }

        /// <summary>
        /// Gets or Sets OpenServiceOrders
        /// </summary>
        [DataMember(Name="OpenServiceOrders", EmitDefaultValue=false)]
        public int? OpenServiceOrders { get; set; }

        /// <summary>
        /// Gets or Sets PastDueTasks
        /// </summary>
        [DataMember(Name="PastDueTasks", EmitDefaultValue=false)]
        public int? PastDueTasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebContactSummary {\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  SearchName: ").Append(SearchName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  IsPrimaryContact: ").Append(IsPrimaryContact).Append("\n");
            sb.Append("  JournalEntries: ").Append(JournalEntries).Append("\n");
            sb.Append("  OpenOpportunities: ").Append(OpenOpportunities).Append("\n");
            sb.Append("  OpenServiceOrders: ").Append(OpenServiceOrders).Append("\n");
            sb.Append("  PastDueTasks: ").Append(PastDueTasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebContactSummary);
        }

        /// <summary>
        /// Returns true if TsiWebContactSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebContactSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebContactSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.SearchName == input.SearchName ||
                    (this.SearchName != null &&
                    this.SearchName.Equals(input.SearchName))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.IsPrimaryContact == input.IsPrimaryContact ||
                    (this.IsPrimaryContact != null &&
                    this.IsPrimaryContact.Equals(input.IsPrimaryContact))
                ) && 
                (
                    this.JournalEntries == input.JournalEntries ||
                    (this.JournalEntries != null &&
                    this.JournalEntries.Equals(input.JournalEntries))
                ) && 
                (
                    this.OpenOpportunities == input.OpenOpportunities ||
                    (this.OpenOpportunities != null &&
                    this.OpenOpportunities.Equals(input.OpenOpportunities))
                ) && 
                (
                    this.OpenServiceOrders == input.OpenServiceOrders ||
                    (this.OpenServiceOrders != null &&
                    this.OpenServiceOrders.Equals(input.OpenServiceOrders))
                ) && 
                (
                    this.PastDueTasks == input.PastDueTasks ||
                    (this.PastDueTasks != null &&
                    this.PastDueTasks.Equals(input.PastDueTasks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.SearchName != null)
                    hashCode = hashCode * 59 + this.SearchName.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.IsPrimaryContact != null)
                    hashCode = hashCode * 59 + this.IsPrimaryContact.GetHashCode();
                if (this.JournalEntries != null)
                    hashCode = hashCode * 59 + this.JournalEntries.GetHashCode();
                if (this.OpenOpportunities != null)
                    hashCode = hashCode * 59 + this.OpenOpportunities.GetHashCode();
                if (this.OpenServiceOrders != null)
                    hashCode = hashCode * 59 + this.OpenServiceOrders.GetHashCode();
                if (this.PastDueTasks != null)
                    hashCode = hashCode * 59 + this.PastDueTasks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
