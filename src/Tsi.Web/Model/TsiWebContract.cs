/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebContract
    /// </summary>
    [DataContract]
    public partial class TsiWebContract :  IEquatable<TsiWebContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebContract" /> class.
        /// </summary>
        /// <param name="description">Gets or sets the contract description.</param>
        /// <param name="contractType">Gets or sets the contract type.</param>
        /// <param name="reference">Gets or sets the contract reference.</param>
        /// <param name="dateWritten">Gets or sets the contract DateWritten.</param>
        /// <param name="createdBy">Gets or sets the contract created by.</param>
        /// <param name="status">Gets or sets the contract status.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="contractRemaining">contractRemaining.</param>
        /// <param name="isFutureContract">isFutureContract.</param>
        /// <param name="hasContractRemaining">hasContractRemaining.</param>
        /// <param name="paymentType">Gets or sets the contract payment type.</param>
        /// <param name="customerPONumber">Gets or sets the contract CustomerPONumber.</param>
        /// <param name="contactName">Gets or sets the contract contact name.</param>
        /// <param name="defaultServiceOrderPriority">Gets or sets the contract DefaultSOPriority.</param>
        /// <param name="assignedTech">Gets or sets the contract AssignedTech.</param>
        /// <param name="startDate">Gets or sets the contract start date.</param>
        /// <param name="endDate">Gets or sets the contract EndDate.</param>
        /// <param name="daysLeft">Gets or sets the contract DaysLeft.</param>
        /// <param name="linkedAgreement">Gets or sets the contract LinkedAgreement.</param>
        /// <param name="limitServiceOrdersToItemsCovered">Gets or sets the contract LimitServiceOrdersToItemsCovered.</param>
        /// <param name="price">Gets or sets the contract Price.</param>
        /// <param name="pricingMethod">Gets or sets the PricingMethod.</param>
        /// <param name="billedToDateAmount">Gets or sets the BilledToDateAmount.</param>
        /// <param name="repToCredit">Gets or sets the RepToCredit.</param>
        /// <param name="renewContractNumber">Gets or sets the RenewContractNumber.</param>
        /// <param name="salesTaxCode">Gets or sets the SalesTaxCode.</param>
        /// <param name="billDayOfMonth">Gets or sets the BillDayOfMonth.</param>
        /// <param name="billStartMonth">Gets or sets the BillStartMonth.</param>
        /// <param name="autoInvoice">Gets or sets the AutoInvoice.</param>
        /// <param name="daysAheadToInvoice">Gets or sets the DaysAheadToInvoice.</param>
        /// <param name="emailInvoice">Gets or sets the EmailInvoice.</param>
        /// <param name="allowInvoiceConsolidation">Gets or sets the AllowInvoiceConsolidation.</param>
        /// <param name="printIncludesMemo">Gets or sets the PrintIncludesMemo.</param>
        /// <param name="printSpecialInstructions">Gets or sets the PrintSpecialInstructions.</param>
        /// <param name="invoiceTerms">Gets or sets the InvoiceTerms.</param>
        /// <param name="autoPay">Gets or sets the AutoPay.</param>
        /// <param name="dayOfMonthToPay">Gets or sets the DayOfMonthToPay.</param>
        /// <param name="payMethod">Gets or sets the PayMethod.</param>
        /// <param name="payMethodName">Gets or sets the PayMethodName.</param>
        /// <param name="billingCycle">Gets or sets the BillingCycle.</param>
        /// <param name="billingCycleDescription">Gets or sets the BillingCycle Description.</param>
        /// <param name="billingStyle">Gets or sets the BillingStyle.</param>
        /// <param name="gLIncomeCode">Gets or sets the GLIncomeCode.</param>
        /// <param name="priceBillingText">Gets or sets the PriceBillingText.</param>
        /// <param name="lastDayOfPeriod">Gets or sets the LastDayOfPeriod.</param>
        /// <param name="baseUsageItemID">Gets or sets the BaseUsageItemID.</param>
        /// <param name="baseUsageDescription">Gets or sets the BaseUsageDescription.</param>
        /// <param name="overageItemID">Gets or sets the OverageItemID.</param>
        /// <param name="overageDescription">Gets or sets the OverageDescription.</param>
        /// <param name="overageRate">overageRate.</param>
        /// <param name="overagePriceLevel">overagePriceLevel.</param>
        /// <param name="includes">Gets or sets the include comments.</param>
        /// <param name="specialInstructions">Gets or sets the SpecialInstructions.</param>
        /// <param name="renewalNotes">Gets or sets the RenewalNotes.</param>
        /// <param name="generalNotes">Gets or sets the GeneralNotes.</param>
        /// <param name="tripsIncluded">Gets or sets the Tripsincluded (MaxVisits).</param>
        /// <param name="tripsRemaining">Gets or sets the trips remaining (callsLeft).</param>
        /// <param name="additionalTripCharge">Gets or sets the additional trip charge (PerCallPrice).</param>
        /// <param name="responseHours">Gets or sets the response hours (ResponseTime).</param>
        /// <param name="basisType">Gets or sets the Basis.</param>
        /// <param name="basis">Gets or sets the Basis.</param>
        /// <param name="billTo">Gets or sets the Billto.</param>
        /// <param name="templateID">Gets or sets the contract TemplateID.</param>
        /// <param name="durationPeriod">Gets or sets the Duration period of a template.</param>
        /// <param name="durationQuantity">Gets or sets the Duration quantity of a template.</param>
        /// <param name="lastBillingDate">Gets or sets the LastBillingDate.</param>
        /// <param name="billedThruDate">billedThruDate.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="useBasePrice">useBasePrice.</param>
        /// <param name="vendorContract">vendorContract.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        /// <param name="utilizeOverride">utilizeOverride.</param>
        /// <param name="useLaborOverride">useLaborOverride.</param>
        /// <param name="billingOverride">billingOverride.</param>
        /// <param name="billable">billable.</param>
        /// <param name="chargeable">chargeable.</param>
        /// <param name="useDailyProration">useDailyProration.</param>
        /// <param name="timeLogRateDiscount">timeLogRateDiscount.</param>
        /// <param name="fixedHourlyRate">fixedHourlyRate.</param>
        /// <param name="laborBillingType">laborBillingType.</param>
        /// <param name="laborBillingTypeDescription">laborBillingTypeDescription.</param>
        /// <param name="basisTypeDescription">basisTypeDescription.</param>
        /// <param name="billingOption">billingOption.</param>
        /// <param name="defaultLogReason">defaultLogReason.</param>
        /// <param name="billToAccountNumber">billToAccountNumber.</param>
        /// <param name="billToAddressType">billToAddressType.</param>
        /// <param name="alternateBillToAddressID">alternateBillToAddressID.</param>
        public TsiWebContract(string description = default(string), string contractType = default(string), string reference = default(string), DateTime? dateWritten = default(DateTime?), int? createdBy = default(int?), string status = default(string), bool? isActive = default(bool?), string contractRemaining = default(string), bool? isFutureContract = default(bool?), bool? hasContractRemaining = default(bool?), string paymentType = default(string), string customerPONumber = default(string), string contactName = default(string), string defaultServiceOrderPriority = default(string), int? assignedTech = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? daysLeft = default(int?), int? linkedAgreement = default(int?), bool? limitServiceOrdersToItemsCovered = default(bool?), double? price = default(double?), string pricingMethod = default(string), double? billedToDateAmount = default(double?), int? repToCredit = default(int?), int? renewContractNumber = default(int?), string salesTaxCode = default(string), int? billDayOfMonth = default(int?), int? billStartMonth = default(int?), bool? autoInvoice = default(bool?), int? daysAheadToInvoice = default(int?), bool? emailInvoice = default(bool?), bool? allowInvoiceConsolidation = default(bool?), bool? printIncludesMemo = default(bool?), bool? printSpecialInstructions = default(bool?), string invoiceTerms = default(string), bool? autoPay = default(bool?), int? dayOfMonthToPay = default(int?), int? payMethod = default(int?), string payMethodName = default(string), string billingCycle = default(string), string billingCycleDescription = default(string), string billingStyle = default(string), string gLIncomeCode = default(string), string priceBillingText = default(string), int? lastDayOfPeriod = default(int?), string baseUsageItemID = default(string), string baseUsageDescription = default(string), string overageItemID = default(string), string overageDescription = default(string), double? overageRate = default(double?), int? overagePriceLevel = default(int?), string includes = default(string), string specialInstructions = default(string), string renewalNotes = default(string), string generalNotes = default(string), int? tripsIncluded = default(int?), int? tripsRemaining = default(int?), double? additionalTripCharge = default(double?), int? responseHours = default(int?), string basisType = default(string), TsiWebBasis basis = default(TsiWebBasis), TsiWebContractBillToAddress billTo = default(TsiWebContractBillToAddress), string templateID = default(string), string durationPeriod = default(string), int? durationQuantity = default(int?), DateTime? lastBillingDate = default(DateTime?), DateTime? billedThruDate = default(DateTime?), double? basePrice = default(double?), bool? useBasePrice = default(bool?), string vendorContract = default(string), bool? creditUtilizationTime = default(bool?), bool? utilizeOverride = default(bool?), bool? useLaborOverride = default(bool?), bool? billingOverride = default(bool?), bool? billable = default(bool?), bool? chargeable = default(bool?), bool? useDailyProration = default(bool?), double? timeLogRateDiscount = default(double?), double? fixedHourlyRate = default(double?), string laborBillingType = default(string), string laborBillingTypeDescription = default(string), string basisTypeDescription = default(string), string billingOption = default(string), string defaultLogReason = default(string), int? billToAccountNumber = default(int?), string billToAddressType = default(string), int? alternateBillToAddressID = default(int?))
        {
            this.Description = description;
            this.ContractType = contractType;
            this.Reference = reference;
            this.DateWritten = dateWritten;
            this.CreatedBy = createdBy;
            this.Status = status;
            this.IsActive = isActive;
            this.ContractRemaining = contractRemaining;
            this.IsFutureContract = isFutureContract;
            this.HasContractRemaining = hasContractRemaining;
            this.PaymentType = paymentType;
            this.CustomerPONumber = customerPONumber;
            this.ContactName = contactName;
            this.DefaultServiceOrderPriority = defaultServiceOrderPriority;
            this.AssignedTech = assignedTech;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.DaysLeft = daysLeft;
            this.LinkedAgreement = linkedAgreement;
            this.LimitServiceOrdersToItemsCovered = limitServiceOrdersToItemsCovered;
            this.Price = price;
            this.PricingMethod = pricingMethod;
            this.BilledToDateAmount = billedToDateAmount;
            this.RepToCredit = repToCredit;
            this.RenewContractNumber = renewContractNumber;
            this.SalesTaxCode = salesTaxCode;
            this.BillDayOfMonth = billDayOfMonth;
            this.BillStartMonth = billStartMonth;
            this.AutoInvoice = autoInvoice;
            this.DaysAheadToInvoice = daysAheadToInvoice;
            this.EmailInvoice = emailInvoice;
            this.AllowInvoiceConsolidation = allowInvoiceConsolidation;
            this.PrintIncludesMemo = printIncludesMemo;
            this.PrintSpecialInstructions = printSpecialInstructions;
            this.InvoiceTerms = invoiceTerms;
            this.AutoPay = autoPay;
            this.DayOfMonthToPay = dayOfMonthToPay;
            this.PayMethod = payMethod;
            this.PayMethodName = payMethodName;
            this.BillingCycle = billingCycle;
            this.BillingCycleDescription = billingCycleDescription;
            this.BillingStyle = billingStyle;
            this.GLIncomeCode = gLIncomeCode;
            this.PriceBillingText = priceBillingText;
            this.LastDayOfPeriod = lastDayOfPeriod;
            this.BaseUsageItemID = baseUsageItemID;
            this.BaseUsageDescription = baseUsageDescription;
            this.OverageItemID = overageItemID;
            this.OverageDescription = overageDescription;
            this.OverageRate = overageRate;
            this.OveragePriceLevel = overagePriceLevel;
            this.Includes = includes;
            this.SpecialInstructions = specialInstructions;
            this.RenewalNotes = renewalNotes;
            this.GeneralNotes = generalNotes;
            this.TripsIncluded = tripsIncluded;
            this.TripsRemaining = tripsRemaining;
            this.AdditionalTripCharge = additionalTripCharge;
            this.ResponseHours = responseHours;
            this.BasisType = basisType;
            this.Basis = basis;
            this.BillTo = billTo;
            this.TemplateID = templateID;
            this.DurationPeriod = durationPeriod;
            this.DurationQuantity = durationQuantity;
            this.LastBillingDate = lastBillingDate;
            this.BilledThruDate = billedThruDate;
            this.BasePrice = basePrice;
            this.UseBasePrice = useBasePrice;
            this.VendorContract = vendorContract;
            this.CreditUtilizationTime = creditUtilizationTime;
            this.UtilizeOverride = utilizeOverride;
            this.UseLaborOverride = useLaborOverride;
            this.BillingOverride = billingOverride;
            this.Billable = billable;
            this.Chargeable = chargeable;
            this.UseDailyProration = useDailyProration;
            this.TimeLogRateDiscount = timeLogRateDiscount;
            this.FixedHourlyRate = fixedHourlyRate;
            this.LaborBillingType = laborBillingType;
            this.LaborBillingTypeDescription = laborBillingTypeDescription;
            this.BasisTypeDescription = basisTypeDescription;
            this.BillingOption = billingOption;
            this.DefaultLogReason = defaultLogReason;
            this.BillToAccountNumber = billToAccountNumber;
            this.BillToAddressType = billToAddressType;
            this.AlternateBillToAddressID = alternateBillToAddressID;
        }
        
        /// <summary>
        /// Gets or sets the contract description
        /// </summary>
        /// <value>Gets or sets the contract description</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the contract type
        /// </summary>
        /// <value>Gets or sets the contract type</value>
        [DataMember(Name="ContractType", EmitDefaultValue=false)]
        public string ContractType { get; set; }

        /// <summary>
        /// Gets or sets the contract reference
        /// </summary>
        /// <value>Gets or sets the contract reference</value>
        [DataMember(Name="Reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or sets the contract DateWritten
        /// </summary>
        /// <value>Gets or sets the contract DateWritten</value>
        [DataMember(Name="DateWritten", EmitDefaultValue=false)]
        public DateTime? DateWritten { get; set; }

        /// <summary>
        /// Gets or sets the contract created by
        /// </summary>
        /// <value>Gets or sets the contract created by</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the contract status
        /// </summary>
        /// <value>Gets or sets the contract status</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets ContractRemaining
        /// </summary>
        [DataMember(Name="ContractRemaining", EmitDefaultValue=false)]
        public string ContractRemaining { get; set; }

        /// <summary>
        /// Gets or Sets IsFutureContract
        /// </summary>
        [DataMember(Name="IsFutureContract", EmitDefaultValue=false)]
        public bool? IsFutureContract { get; set; }

        /// <summary>
        /// Gets or Sets HasContractRemaining
        /// </summary>
        [DataMember(Name="HasContractRemaining", EmitDefaultValue=false)]
        public bool? HasContractRemaining { get; set; }

        /// <summary>
        /// Gets or sets the contract payment type
        /// </summary>
        /// <value>Gets or sets the contract payment type</value>
        [DataMember(Name="PaymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Gets or sets the contract CustomerPONumber
        /// </summary>
        /// <value>Gets or sets the contract CustomerPONumber</value>
        [DataMember(Name="CustomerPONumber", EmitDefaultValue=false)]
        public string CustomerPONumber { get; set; }

        /// <summary>
        /// Gets or sets the contract contact name
        /// </summary>
        /// <value>Gets or sets the contract contact name</value>
        [DataMember(Name="ContactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or sets the contract DefaultSOPriority
        /// </summary>
        /// <value>Gets or sets the contract DefaultSOPriority</value>
        [DataMember(Name="DefaultServiceOrderPriority", EmitDefaultValue=false)]
        public string DefaultServiceOrderPriority { get; set; }

        /// <summary>
        /// Gets or sets the contract AssignedTech
        /// </summary>
        /// <value>Gets or sets the contract AssignedTech</value>
        [DataMember(Name="AssignedTech", EmitDefaultValue=false)]
        public int? AssignedTech { get; set; }

        /// <summary>
        /// Gets or sets the contract start date
        /// </summary>
        /// <value>Gets or sets the contract start date</value>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the contract EndDate
        /// </summary>
        /// <value>Gets or sets the contract EndDate</value>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the contract DaysLeft
        /// </summary>
        /// <value>Gets or sets the contract DaysLeft</value>
        [DataMember(Name="DaysLeft", EmitDefaultValue=false)]
        public int? DaysLeft { get; set; }

        /// <summary>
        /// Gets or sets the contract LinkedAgreement
        /// </summary>
        /// <value>Gets or sets the contract LinkedAgreement</value>
        [DataMember(Name="LinkedAgreement", EmitDefaultValue=false)]
        public int? LinkedAgreement { get; set; }

        /// <summary>
        /// Gets or sets the contract LimitServiceOrdersToItemsCovered
        /// </summary>
        /// <value>Gets or sets the contract LimitServiceOrdersToItemsCovered</value>
        [DataMember(Name="LimitServiceOrdersToItemsCovered", EmitDefaultValue=false)]
        public bool? LimitServiceOrdersToItemsCovered { get; set; }

        /// <summary>
        /// Gets or sets the contract Price
        /// </summary>
        /// <value>Gets or sets the contract Price</value>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or sets the PricingMethod
        /// </summary>
        /// <value>Gets or sets the PricingMethod</value>
        [DataMember(Name="PricingMethod", EmitDefaultValue=false)]
        public string PricingMethod { get; set; }

        /// <summary>
        /// Gets or sets the BilledToDateAmount
        /// </summary>
        /// <value>Gets or sets the BilledToDateAmount</value>
        [DataMember(Name="BilledToDateAmount", EmitDefaultValue=false)]
        public double? BilledToDateAmount { get; set; }

        /// <summary>
        /// Gets or sets the RepToCredit
        /// </summary>
        /// <value>Gets or sets the RepToCredit</value>
        [DataMember(Name="RepToCredit", EmitDefaultValue=false)]
        public int? RepToCredit { get; set; }

        /// <summary>
        /// Gets or sets the RenewContractNumber
        /// </summary>
        /// <value>Gets or sets the RenewContractNumber</value>
        [DataMember(Name="RenewContractNumber", EmitDefaultValue=false)]
        public int? RenewContractNumber { get; set; }

        /// <summary>
        /// Gets or sets the SalesTaxCode
        /// </summary>
        /// <value>Gets or sets the SalesTaxCode</value>
        [DataMember(Name="SalesTaxCode", EmitDefaultValue=false)]
        public string SalesTaxCode { get; set; }

        /// <summary>
        /// Gets or sets the BillDayOfMonth
        /// </summary>
        /// <value>Gets or sets the BillDayOfMonth</value>
        [DataMember(Name="BillDayOfMonth", EmitDefaultValue=false)]
        public int? BillDayOfMonth { get; set; }

        /// <summary>
        /// Gets or sets the BillStartMonth
        /// </summary>
        /// <value>Gets or sets the BillStartMonth</value>
        [DataMember(Name="BillStartMonth", EmitDefaultValue=false)]
        public int? BillStartMonth { get; set; }

        /// <summary>
        /// Gets or sets the AutoInvoice
        /// </summary>
        /// <value>Gets or sets the AutoInvoice</value>
        [DataMember(Name="AutoInvoice", EmitDefaultValue=false)]
        public bool? AutoInvoice { get; set; }

        /// <summary>
        /// Gets or sets the DaysAheadToInvoice
        /// </summary>
        /// <value>Gets or sets the DaysAheadToInvoice</value>
        [DataMember(Name="DaysAheadToInvoice", EmitDefaultValue=false)]
        public int? DaysAheadToInvoice { get; set; }

        /// <summary>
        /// Gets or sets the EmailInvoice
        /// </summary>
        /// <value>Gets or sets the EmailInvoice</value>
        [DataMember(Name="EmailInvoice", EmitDefaultValue=false)]
        public bool? EmailInvoice { get; set; }

        /// <summary>
        /// Gets or sets the AllowInvoiceConsolidation
        /// </summary>
        /// <value>Gets or sets the AllowInvoiceConsolidation</value>
        [DataMember(Name="AllowInvoiceConsolidation", EmitDefaultValue=false)]
        public bool? AllowInvoiceConsolidation { get; set; }

        /// <summary>
        /// Gets or sets the PrintIncludesMemo
        /// </summary>
        /// <value>Gets or sets the PrintIncludesMemo</value>
        [DataMember(Name="PrintIncludesMemo", EmitDefaultValue=false)]
        public bool? PrintIncludesMemo { get; set; }

        /// <summary>
        /// Gets or sets the PrintSpecialInstructions
        /// </summary>
        /// <value>Gets or sets the PrintSpecialInstructions</value>
        [DataMember(Name="PrintSpecialInstructions", EmitDefaultValue=false)]
        public bool? PrintSpecialInstructions { get; set; }

        /// <summary>
        /// Gets or sets the InvoiceTerms
        /// </summary>
        /// <value>Gets or sets the InvoiceTerms</value>
        [DataMember(Name="InvoiceTerms", EmitDefaultValue=false)]
        public string InvoiceTerms { get; set; }

        /// <summary>
        /// Gets or sets the AutoPay
        /// </summary>
        /// <value>Gets or sets the AutoPay</value>
        [DataMember(Name="AutoPay", EmitDefaultValue=false)]
        public bool? AutoPay { get; set; }

        /// <summary>
        /// Gets or sets the DayOfMonthToPay
        /// </summary>
        /// <value>Gets or sets the DayOfMonthToPay</value>
        [DataMember(Name="DayOfMonthToPay", EmitDefaultValue=false)]
        public int? DayOfMonthToPay { get; set; }

        /// <summary>
        /// Gets or sets the PayMethod
        /// </summary>
        /// <value>Gets or sets the PayMethod</value>
        [DataMember(Name="PayMethod", EmitDefaultValue=false)]
        public int? PayMethod { get; set; }

        /// <summary>
        /// Gets or sets the PayMethodName
        /// </summary>
        /// <value>Gets or sets the PayMethodName</value>
        [DataMember(Name="PayMethodName", EmitDefaultValue=false)]
        public string PayMethodName { get; set; }

        /// <summary>
        /// Gets or sets the BillingCycle
        /// </summary>
        /// <value>Gets or sets the BillingCycle</value>
        [DataMember(Name="BillingCycle", EmitDefaultValue=false)]
        public string BillingCycle { get; set; }

        /// <summary>
        /// Gets or sets the BillingCycle Description
        /// </summary>
        /// <value>Gets or sets the BillingCycle Description</value>
        [DataMember(Name="BillingCycleDescription", EmitDefaultValue=false)]
        public string BillingCycleDescription { get; set; }

        /// <summary>
        /// Gets or sets the BillingStyle
        /// </summary>
        /// <value>Gets or sets the BillingStyle</value>
        [DataMember(Name="BillingStyle", EmitDefaultValue=false)]
        public string BillingStyle { get; set; }

        /// <summary>
        /// Gets or sets the GLIncomeCode
        /// </summary>
        /// <value>Gets or sets the GLIncomeCode</value>
        [DataMember(Name="GLIncomeCode", EmitDefaultValue=false)]
        public string GLIncomeCode { get; set; }

        /// <summary>
        /// Gets or sets the PriceBillingText
        /// </summary>
        /// <value>Gets or sets the PriceBillingText</value>
        [DataMember(Name="PriceBillingText", EmitDefaultValue=false)]
        public string PriceBillingText { get; set; }

        /// <summary>
        /// Gets or sets the LastDayOfPeriod
        /// </summary>
        /// <value>Gets or sets the LastDayOfPeriod</value>
        [DataMember(Name="LastDayOfPeriod", EmitDefaultValue=false)]
        public int? LastDayOfPeriod { get; set; }

        /// <summary>
        /// Gets or sets the BaseUsageItemID
        /// </summary>
        /// <value>Gets or sets the BaseUsageItemID</value>
        [DataMember(Name="BaseUsageItemID", EmitDefaultValue=false)]
        public string BaseUsageItemID { get; set; }

        /// <summary>
        /// Gets or sets the BaseUsageDescription
        /// </summary>
        /// <value>Gets or sets the BaseUsageDescription</value>
        [DataMember(Name="BaseUsageDescription", EmitDefaultValue=false)]
        public string BaseUsageDescription { get; set; }

        /// <summary>
        /// Gets or sets the OverageItemID
        /// </summary>
        /// <value>Gets or sets the OverageItemID</value>
        [DataMember(Name="OverageItemID", EmitDefaultValue=false)]
        public string OverageItemID { get; set; }

        /// <summary>
        /// Gets or sets the OverageDescription
        /// </summary>
        /// <value>Gets or sets the OverageDescription</value>
        [DataMember(Name="OverageDescription", EmitDefaultValue=false)]
        public string OverageDescription { get; set; }

        /// <summary>
        /// Gets or Sets OverageRate
        /// </summary>
        [DataMember(Name="OverageRate", EmitDefaultValue=false)]
        public double? OverageRate { get; set; }

        /// <summary>
        /// Gets or Sets OveragePriceLevel
        /// </summary>
        [DataMember(Name="OveragePriceLevel", EmitDefaultValue=false)]
        public int? OveragePriceLevel { get; set; }

        /// <summary>
        /// Gets or sets the include comments
        /// </summary>
        /// <value>Gets or sets the include comments</value>
        [DataMember(Name="Includes", EmitDefaultValue=false)]
        public string Includes { get; set; }

        /// <summary>
        /// Gets or sets the SpecialInstructions
        /// </summary>
        /// <value>Gets or sets the SpecialInstructions</value>
        [DataMember(Name="SpecialInstructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Gets or sets the RenewalNotes
        /// </summary>
        /// <value>Gets or sets the RenewalNotes</value>
        [DataMember(Name="RenewalNotes", EmitDefaultValue=false)]
        public string RenewalNotes { get; set; }

        /// <summary>
        /// Gets or sets the GeneralNotes
        /// </summary>
        /// <value>Gets or sets the GeneralNotes</value>
        [DataMember(Name="GeneralNotes", EmitDefaultValue=false)]
        public string GeneralNotes { get; set; }

        /// <summary>
        /// Gets or sets the Tripsincluded (MaxVisits)
        /// </summary>
        /// <value>Gets or sets the Tripsincluded (MaxVisits)</value>
        [DataMember(Name="TripsIncluded", EmitDefaultValue=false)]
        public int? TripsIncluded { get; set; }

        /// <summary>
        /// Gets or sets the trips remaining (callsLeft)
        /// </summary>
        /// <value>Gets or sets the trips remaining (callsLeft)</value>
        [DataMember(Name="TripsRemaining", EmitDefaultValue=false)]
        public int? TripsRemaining { get; set; }

        /// <summary>
        /// Gets or sets the additional trip charge (PerCallPrice)
        /// </summary>
        /// <value>Gets or sets the additional trip charge (PerCallPrice)</value>
        [DataMember(Name="AdditionalTripCharge", EmitDefaultValue=false)]
        public double? AdditionalTripCharge { get; set; }

        /// <summary>
        /// Gets or sets the response hours (ResponseTime)
        /// </summary>
        /// <value>Gets or sets the response hours (ResponseTime)</value>
        [DataMember(Name="ResponseHours", EmitDefaultValue=false)]
        public int? ResponseHours { get; set; }

        /// <summary>
        /// Gets or sets the Basis
        /// </summary>
        /// <value>Gets or sets the Basis</value>
        [DataMember(Name="BasisType", EmitDefaultValue=false)]
        public string BasisType { get; set; }

        /// <summary>
        /// Gets or sets the Basis
        /// </summary>
        /// <value>Gets or sets the Basis</value>
        [DataMember(Name="Basis", EmitDefaultValue=false)]
        public TsiWebBasis Basis { get; set; }

        /// <summary>
        /// Gets or sets the Billto
        /// </summary>
        /// <value>Gets or sets the Billto</value>
        [DataMember(Name="BillTo", EmitDefaultValue=false)]
        public TsiWebContractBillToAddress BillTo { get; set; }

        /// <summary>
        /// Gets or sets the contract TemplateID
        /// </summary>
        /// <value>Gets or sets the contract TemplateID</value>
        [DataMember(Name="TemplateID", EmitDefaultValue=false)]
        public string TemplateID { get; set; }

        /// <summary>
        /// Gets or sets the Duration period of a template
        /// </summary>
        /// <value>Gets or sets the Duration period of a template</value>
        [DataMember(Name="DurationPeriod", EmitDefaultValue=false)]
        public string DurationPeriod { get; set; }

        /// <summary>
        /// Gets or sets the Duration quantity of a template
        /// </summary>
        /// <value>Gets or sets the Duration quantity of a template</value>
        [DataMember(Name="DurationQuantity", EmitDefaultValue=false)]
        public int? DurationQuantity { get; set; }

        /// <summary>
        /// Gets or sets the LastBillingDate
        /// </summary>
        /// <value>Gets or sets the LastBillingDate</value>
        [DataMember(Name="LastBillingDate", EmitDefaultValue=false)]
        public DateTime? LastBillingDate { get; set; }

        /// <summary>
        /// Gets or Sets BilledThruDate
        /// </summary>
        [DataMember(Name="BilledThruDate", EmitDefaultValue=false)]
        public DateTime? BilledThruDate { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name="BasePrice", EmitDefaultValue=false)]
        public double? BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets UseBasePrice
        /// </summary>
        [DataMember(Name="UseBasePrice", EmitDefaultValue=false)]
        public bool? UseBasePrice { get; set; }

        /// <summary>
        /// Gets or Sets VendorContract
        /// </summary>
        [DataMember(Name="VendorContract", EmitDefaultValue=false)]
        public string VendorContract { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Gets or Sets UtilizeOverride
        /// </summary>
        [DataMember(Name="UtilizeOverride", EmitDefaultValue=false)]
        public bool? UtilizeOverride { get; set; }

        /// <summary>
        /// Gets or Sets UseLaborOverride
        /// </summary>
        [DataMember(Name="UseLaborOverride", EmitDefaultValue=false)]
        public bool? UseLaborOverride { get; set; }

        /// <summary>
        /// Gets or Sets BillingOverride
        /// </summary>
        [DataMember(Name="BillingOverride", EmitDefaultValue=false)]
        public bool? BillingOverride { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets Chargeable
        /// </summary>
        [DataMember(Name="Chargeable", EmitDefaultValue=false)]
        public bool? Chargeable { get; set; }

        /// <summary>
        /// Gets or Sets UseDailyProration
        /// </summary>
        [DataMember(Name="UseDailyProration", EmitDefaultValue=false)]
        public bool? UseDailyProration { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogRateDiscount
        /// </summary>
        [DataMember(Name="TimeLogRateDiscount", EmitDefaultValue=false)]
        public double? TimeLogRateDiscount { get; set; }

        /// <summary>
        /// Gets or Sets FixedHourlyRate
        /// </summary>
        [DataMember(Name="FixedHourlyRate", EmitDefaultValue=false)]
        public double? FixedHourlyRate { get; set; }

        /// <summary>
        /// Gets or Sets LaborBillingType
        /// </summary>
        [DataMember(Name="LaborBillingType", EmitDefaultValue=false)]
        public string LaborBillingType { get; set; }

        /// <summary>
        /// Gets or Sets LaborBillingTypeDescription
        /// </summary>
        [DataMember(Name="LaborBillingTypeDescription", EmitDefaultValue=false)]
        public string LaborBillingTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets BasisTypeDescription
        /// </summary>
        [DataMember(Name="BasisTypeDescription", EmitDefaultValue=false)]
        public string BasisTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets BillingOption
        /// </summary>
        [DataMember(Name="BillingOption", EmitDefaultValue=false)]
        public string BillingOption { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLogReason
        /// </summary>
        [DataMember(Name="DefaultLogReason", EmitDefaultValue=false)]
        public string DefaultLogReason { get; set; }

        /// <summary>
        /// Gets or Sets BillToAccountNumber
        /// </summary>
        [DataMember(Name="BillToAccountNumber", EmitDefaultValue=false)]
        public int? BillToAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddressType
        /// </summary>
        [DataMember(Name="BillToAddressType", EmitDefaultValue=false)]
        public string BillToAddressType { get; set; }

        /// <summary>
        /// Gets or Sets AlternateBillToAddressID
        /// </summary>
        [DataMember(Name="AlternateBillToAddressID", EmitDefaultValue=false)]
        public int? AlternateBillToAddressID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebContract {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  DateWritten: ").Append(DateWritten).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ContractRemaining: ").Append(ContractRemaining).Append("\n");
            sb.Append("  IsFutureContract: ").Append(IsFutureContract).Append("\n");
            sb.Append("  HasContractRemaining: ").Append(HasContractRemaining).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  CustomerPONumber: ").Append(CustomerPONumber).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  DefaultServiceOrderPriority: ").Append(DefaultServiceOrderPriority).Append("\n");
            sb.Append("  AssignedTech: ").Append(AssignedTech).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  DaysLeft: ").Append(DaysLeft).Append("\n");
            sb.Append("  LinkedAgreement: ").Append(LinkedAgreement).Append("\n");
            sb.Append("  LimitServiceOrdersToItemsCovered: ").Append(LimitServiceOrdersToItemsCovered).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PricingMethod: ").Append(PricingMethod).Append("\n");
            sb.Append("  BilledToDateAmount: ").Append(BilledToDateAmount).Append("\n");
            sb.Append("  RepToCredit: ").Append(RepToCredit).Append("\n");
            sb.Append("  RenewContractNumber: ").Append(RenewContractNumber).Append("\n");
            sb.Append("  SalesTaxCode: ").Append(SalesTaxCode).Append("\n");
            sb.Append("  BillDayOfMonth: ").Append(BillDayOfMonth).Append("\n");
            sb.Append("  BillStartMonth: ").Append(BillStartMonth).Append("\n");
            sb.Append("  AutoInvoice: ").Append(AutoInvoice).Append("\n");
            sb.Append("  DaysAheadToInvoice: ").Append(DaysAheadToInvoice).Append("\n");
            sb.Append("  EmailInvoice: ").Append(EmailInvoice).Append("\n");
            sb.Append("  AllowInvoiceConsolidation: ").Append(AllowInvoiceConsolidation).Append("\n");
            sb.Append("  PrintIncludesMemo: ").Append(PrintIncludesMemo).Append("\n");
            sb.Append("  PrintSpecialInstructions: ").Append(PrintSpecialInstructions).Append("\n");
            sb.Append("  InvoiceTerms: ").Append(InvoiceTerms).Append("\n");
            sb.Append("  AutoPay: ").Append(AutoPay).Append("\n");
            sb.Append("  DayOfMonthToPay: ").Append(DayOfMonthToPay).Append("\n");
            sb.Append("  PayMethod: ").Append(PayMethod).Append("\n");
            sb.Append("  PayMethodName: ").Append(PayMethodName).Append("\n");
            sb.Append("  BillingCycle: ").Append(BillingCycle).Append("\n");
            sb.Append("  BillingCycleDescription: ").Append(BillingCycleDescription).Append("\n");
            sb.Append("  BillingStyle: ").Append(BillingStyle).Append("\n");
            sb.Append("  GLIncomeCode: ").Append(GLIncomeCode).Append("\n");
            sb.Append("  PriceBillingText: ").Append(PriceBillingText).Append("\n");
            sb.Append("  LastDayOfPeriod: ").Append(LastDayOfPeriod).Append("\n");
            sb.Append("  BaseUsageItemID: ").Append(BaseUsageItemID).Append("\n");
            sb.Append("  BaseUsageDescription: ").Append(BaseUsageDescription).Append("\n");
            sb.Append("  OverageItemID: ").Append(OverageItemID).Append("\n");
            sb.Append("  OverageDescription: ").Append(OverageDescription).Append("\n");
            sb.Append("  OverageRate: ").Append(OverageRate).Append("\n");
            sb.Append("  OveragePriceLevel: ").Append(OveragePriceLevel).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("  RenewalNotes: ").Append(RenewalNotes).Append("\n");
            sb.Append("  GeneralNotes: ").Append(GeneralNotes).Append("\n");
            sb.Append("  TripsIncluded: ").Append(TripsIncluded).Append("\n");
            sb.Append("  TripsRemaining: ").Append(TripsRemaining).Append("\n");
            sb.Append("  AdditionalTripCharge: ").Append(AdditionalTripCharge).Append("\n");
            sb.Append("  ResponseHours: ").Append(ResponseHours).Append("\n");
            sb.Append("  BasisType: ").Append(BasisType).Append("\n");
            sb.Append("  Basis: ").Append(Basis).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  TemplateID: ").Append(TemplateID).Append("\n");
            sb.Append("  DurationPeriod: ").Append(DurationPeriod).Append("\n");
            sb.Append("  DurationQuantity: ").Append(DurationQuantity).Append("\n");
            sb.Append("  LastBillingDate: ").Append(LastBillingDate).Append("\n");
            sb.Append("  BilledThruDate: ").Append(BilledThruDate).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  UseBasePrice: ").Append(UseBasePrice).Append("\n");
            sb.Append("  VendorContract: ").Append(VendorContract).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("  UtilizeOverride: ").Append(UtilizeOverride).Append("\n");
            sb.Append("  UseLaborOverride: ").Append(UseLaborOverride).Append("\n");
            sb.Append("  BillingOverride: ").Append(BillingOverride).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Chargeable: ").Append(Chargeable).Append("\n");
            sb.Append("  UseDailyProration: ").Append(UseDailyProration).Append("\n");
            sb.Append("  TimeLogRateDiscount: ").Append(TimeLogRateDiscount).Append("\n");
            sb.Append("  FixedHourlyRate: ").Append(FixedHourlyRate).Append("\n");
            sb.Append("  LaborBillingType: ").Append(LaborBillingType).Append("\n");
            sb.Append("  LaborBillingTypeDescription: ").Append(LaborBillingTypeDescription).Append("\n");
            sb.Append("  BasisTypeDescription: ").Append(BasisTypeDescription).Append("\n");
            sb.Append("  BillingOption: ").Append(BillingOption).Append("\n");
            sb.Append("  DefaultLogReason: ").Append(DefaultLogReason).Append("\n");
            sb.Append("  BillToAccountNumber: ").Append(BillToAccountNumber).Append("\n");
            sb.Append("  BillToAddressType: ").Append(BillToAddressType).Append("\n");
            sb.Append("  AlternateBillToAddressID: ").Append(AlternateBillToAddressID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebContract);
        }

        /// <summary>
        /// Returns true if TsiWebContract instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.DateWritten == input.DateWritten ||
                    (this.DateWritten != null &&
                    this.DateWritten.Equals(input.DateWritten))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.ContractRemaining == input.ContractRemaining ||
                    (this.ContractRemaining != null &&
                    this.ContractRemaining.Equals(input.ContractRemaining))
                ) && 
                (
                    this.IsFutureContract == input.IsFutureContract ||
                    (this.IsFutureContract != null &&
                    this.IsFutureContract.Equals(input.IsFutureContract))
                ) && 
                (
                    this.HasContractRemaining == input.HasContractRemaining ||
                    (this.HasContractRemaining != null &&
                    this.HasContractRemaining.Equals(input.HasContractRemaining))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.CustomerPONumber == input.CustomerPONumber ||
                    (this.CustomerPONumber != null &&
                    this.CustomerPONumber.Equals(input.CustomerPONumber))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.DefaultServiceOrderPriority == input.DefaultServiceOrderPriority ||
                    (this.DefaultServiceOrderPriority != null &&
                    this.DefaultServiceOrderPriority.Equals(input.DefaultServiceOrderPriority))
                ) && 
                (
                    this.AssignedTech == input.AssignedTech ||
                    (this.AssignedTech != null &&
                    this.AssignedTech.Equals(input.AssignedTech))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.DaysLeft == input.DaysLeft ||
                    (this.DaysLeft != null &&
                    this.DaysLeft.Equals(input.DaysLeft))
                ) && 
                (
                    this.LinkedAgreement == input.LinkedAgreement ||
                    (this.LinkedAgreement != null &&
                    this.LinkedAgreement.Equals(input.LinkedAgreement))
                ) && 
                (
                    this.LimitServiceOrdersToItemsCovered == input.LimitServiceOrdersToItemsCovered ||
                    (this.LimitServiceOrdersToItemsCovered != null &&
                    this.LimitServiceOrdersToItemsCovered.Equals(input.LimitServiceOrdersToItemsCovered))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PricingMethod == input.PricingMethod ||
                    (this.PricingMethod != null &&
                    this.PricingMethod.Equals(input.PricingMethod))
                ) && 
                (
                    this.BilledToDateAmount == input.BilledToDateAmount ||
                    (this.BilledToDateAmount != null &&
                    this.BilledToDateAmount.Equals(input.BilledToDateAmount))
                ) && 
                (
                    this.RepToCredit == input.RepToCredit ||
                    (this.RepToCredit != null &&
                    this.RepToCredit.Equals(input.RepToCredit))
                ) && 
                (
                    this.RenewContractNumber == input.RenewContractNumber ||
                    (this.RenewContractNumber != null &&
                    this.RenewContractNumber.Equals(input.RenewContractNumber))
                ) && 
                (
                    this.SalesTaxCode == input.SalesTaxCode ||
                    (this.SalesTaxCode != null &&
                    this.SalesTaxCode.Equals(input.SalesTaxCode))
                ) && 
                (
                    this.BillDayOfMonth == input.BillDayOfMonth ||
                    (this.BillDayOfMonth != null &&
                    this.BillDayOfMonth.Equals(input.BillDayOfMonth))
                ) && 
                (
                    this.BillStartMonth == input.BillStartMonth ||
                    (this.BillStartMonth != null &&
                    this.BillStartMonth.Equals(input.BillStartMonth))
                ) && 
                (
                    this.AutoInvoice == input.AutoInvoice ||
                    (this.AutoInvoice != null &&
                    this.AutoInvoice.Equals(input.AutoInvoice))
                ) && 
                (
                    this.DaysAheadToInvoice == input.DaysAheadToInvoice ||
                    (this.DaysAheadToInvoice != null &&
                    this.DaysAheadToInvoice.Equals(input.DaysAheadToInvoice))
                ) && 
                (
                    this.EmailInvoice == input.EmailInvoice ||
                    (this.EmailInvoice != null &&
                    this.EmailInvoice.Equals(input.EmailInvoice))
                ) && 
                (
                    this.AllowInvoiceConsolidation == input.AllowInvoiceConsolidation ||
                    (this.AllowInvoiceConsolidation != null &&
                    this.AllowInvoiceConsolidation.Equals(input.AllowInvoiceConsolidation))
                ) && 
                (
                    this.PrintIncludesMemo == input.PrintIncludesMemo ||
                    (this.PrintIncludesMemo != null &&
                    this.PrintIncludesMemo.Equals(input.PrintIncludesMemo))
                ) && 
                (
                    this.PrintSpecialInstructions == input.PrintSpecialInstructions ||
                    (this.PrintSpecialInstructions != null &&
                    this.PrintSpecialInstructions.Equals(input.PrintSpecialInstructions))
                ) && 
                (
                    this.InvoiceTerms == input.InvoiceTerms ||
                    (this.InvoiceTerms != null &&
                    this.InvoiceTerms.Equals(input.InvoiceTerms))
                ) && 
                (
                    this.AutoPay == input.AutoPay ||
                    (this.AutoPay != null &&
                    this.AutoPay.Equals(input.AutoPay))
                ) && 
                (
                    this.DayOfMonthToPay == input.DayOfMonthToPay ||
                    (this.DayOfMonthToPay != null &&
                    this.DayOfMonthToPay.Equals(input.DayOfMonthToPay))
                ) && 
                (
                    this.PayMethod == input.PayMethod ||
                    (this.PayMethod != null &&
                    this.PayMethod.Equals(input.PayMethod))
                ) && 
                (
                    this.PayMethodName == input.PayMethodName ||
                    (this.PayMethodName != null &&
                    this.PayMethodName.Equals(input.PayMethodName))
                ) && 
                (
                    this.BillingCycle == input.BillingCycle ||
                    (this.BillingCycle != null &&
                    this.BillingCycle.Equals(input.BillingCycle))
                ) && 
                (
                    this.BillingCycleDescription == input.BillingCycleDescription ||
                    (this.BillingCycleDescription != null &&
                    this.BillingCycleDescription.Equals(input.BillingCycleDescription))
                ) && 
                (
                    this.BillingStyle == input.BillingStyle ||
                    (this.BillingStyle != null &&
                    this.BillingStyle.Equals(input.BillingStyle))
                ) && 
                (
                    this.GLIncomeCode == input.GLIncomeCode ||
                    (this.GLIncomeCode != null &&
                    this.GLIncomeCode.Equals(input.GLIncomeCode))
                ) && 
                (
                    this.PriceBillingText == input.PriceBillingText ||
                    (this.PriceBillingText != null &&
                    this.PriceBillingText.Equals(input.PriceBillingText))
                ) && 
                (
                    this.LastDayOfPeriod == input.LastDayOfPeriod ||
                    (this.LastDayOfPeriod != null &&
                    this.LastDayOfPeriod.Equals(input.LastDayOfPeriod))
                ) && 
                (
                    this.BaseUsageItemID == input.BaseUsageItemID ||
                    (this.BaseUsageItemID != null &&
                    this.BaseUsageItemID.Equals(input.BaseUsageItemID))
                ) && 
                (
                    this.BaseUsageDescription == input.BaseUsageDescription ||
                    (this.BaseUsageDescription != null &&
                    this.BaseUsageDescription.Equals(input.BaseUsageDescription))
                ) && 
                (
                    this.OverageItemID == input.OverageItemID ||
                    (this.OverageItemID != null &&
                    this.OverageItemID.Equals(input.OverageItemID))
                ) && 
                (
                    this.OverageDescription == input.OverageDescription ||
                    (this.OverageDescription != null &&
                    this.OverageDescription.Equals(input.OverageDescription))
                ) && 
                (
                    this.OverageRate == input.OverageRate ||
                    (this.OverageRate != null &&
                    this.OverageRate.Equals(input.OverageRate))
                ) && 
                (
                    this.OveragePriceLevel == input.OveragePriceLevel ||
                    (this.OveragePriceLevel != null &&
                    this.OveragePriceLevel.Equals(input.OveragePriceLevel))
                ) && 
                (
                    this.Includes == input.Includes ||
                    (this.Includes != null &&
                    this.Includes.Equals(input.Includes))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                ) && 
                (
                    this.RenewalNotes == input.RenewalNotes ||
                    (this.RenewalNotes != null &&
                    this.RenewalNotes.Equals(input.RenewalNotes))
                ) && 
                (
                    this.GeneralNotes == input.GeneralNotes ||
                    (this.GeneralNotes != null &&
                    this.GeneralNotes.Equals(input.GeneralNotes))
                ) && 
                (
                    this.TripsIncluded == input.TripsIncluded ||
                    (this.TripsIncluded != null &&
                    this.TripsIncluded.Equals(input.TripsIncluded))
                ) && 
                (
                    this.TripsRemaining == input.TripsRemaining ||
                    (this.TripsRemaining != null &&
                    this.TripsRemaining.Equals(input.TripsRemaining))
                ) && 
                (
                    this.AdditionalTripCharge == input.AdditionalTripCharge ||
                    (this.AdditionalTripCharge != null &&
                    this.AdditionalTripCharge.Equals(input.AdditionalTripCharge))
                ) && 
                (
                    this.ResponseHours == input.ResponseHours ||
                    (this.ResponseHours != null &&
                    this.ResponseHours.Equals(input.ResponseHours))
                ) && 
                (
                    this.BasisType == input.BasisType ||
                    (this.BasisType != null &&
                    this.BasisType.Equals(input.BasisType))
                ) && 
                (
                    this.Basis == input.Basis ||
                    (this.Basis != null &&
                    this.Basis.Equals(input.Basis))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.TemplateID == input.TemplateID ||
                    (this.TemplateID != null &&
                    this.TemplateID.Equals(input.TemplateID))
                ) && 
                (
                    this.DurationPeriod == input.DurationPeriod ||
                    (this.DurationPeriod != null &&
                    this.DurationPeriod.Equals(input.DurationPeriod))
                ) && 
                (
                    this.DurationQuantity == input.DurationQuantity ||
                    (this.DurationQuantity != null &&
                    this.DurationQuantity.Equals(input.DurationQuantity))
                ) && 
                (
                    this.LastBillingDate == input.LastBillingDate ||
                    (this.LastBillingDate != null &&
                    this.LastBillingDate.Equals(input.LastBillingDate))
                ) && 
                (
                    this.BilledThruDate == input.BilledThruDate ||
                    (this.BilledThruDate != null &&
                    this.BilledThruDate.Equals(input.BilledThruDate))
                ) && 
                (
                    this.BasePrice == input.BasePrice ||
                    (this.BasePrice != null &&
                    this.BasePrice.Equals(input.BasePrice))
                ) && 
                (
                    this.UseBasePrice == input.UseBasePrice ||
                    (this.UseBasePrice != null &&
                    this.UseBasePrice.Equals(input.UseBasePrice))
                ) && 
                (
                    this.VendorContract == input.VendorContract ||
                    (this.VendorContract != null &&
                    this.VendorContract.Equals(input.VendorContract))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                ) && 
                (
                    this.UtilizeOverride == input.UtilizeOverride ||
                    (this.UtilizeOverride != null &&
                    this.UtilizeOverride.Equals(input.UtilizeOverride))
                ) && 
                (
                    this.UseLaborOverride == input.UseLaborOverride ||
                    (this.UseLaborOverride != null &&
                    this.UseLaborOverride.Equals(input.UseLaborOverride))
                ) && 
                (
                    this.BillingOverride == input.BillingOverride ||
                    (this.BillingOverride != null &&
                    this.BillingOverride.Equals(input.BillingOverride))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Chargeable == input.Chargeable ||
                    (this.Chargeable != null &&
                    this.Chargeable.Equals(input.Chargeable))
                ) && 
                (
                    this.UseDailyProration == input.UseDailyProration ||
                    (this.UseDailyProration != null &&
                    this.UseDailyProration.Equals(input.UseDailyProration))
                ) && 
                (
                    this.TimeLogRateDiscount == input.TimeLogRateDiscount ||
                    (this.TimeLogRateDiscount != null &&
                    this.TimeLogRateDiscount.Equals(input.TimeLogRateDiscount))
                ) && 
                (
                    this.FixedHourlyRate == input.FixedHourlyRate ||
                    (this.FixedHourlyRate != null &&
                    this.FixedHourlyRate.Equals(input.FixedHourlyRate))
                ) && 
                (
                    this.LaborBillingType == input.LaborBillingType ||
                    (this.LaborBillingType != null &&
                    this.LaborBillingType.Equals(input.LaborBillingType))
                ) && 
                (
                    this.LaborBillingTypeDescription == input.LaborBillingTypeDescription ||
                    (this.LaborBillingTypeDescription != null &&
                    this.LaborBillingTypeDescription.Equals(input.LaborBillingTypeDescription))
                ) && 
                (
                    this.BasisTypeDescription == input.BasisTypeDescription ||
                    (this.BasisTypeDescription != null &&
                    this.BasisTypeDescription.Equals(input.BasisTypeDescription))
                ) && 
                (
                    this.BillingOption == input.BillingOption ||
                    (this.BillingOption != null &&
                    this.BillingOption.Equals(input.BillingOption))
                ) && 
                (
                    this.DefaultLogReason == input.DefaultLogReason ||
                    (this.DefaultLogReason != null &&
                    this.DefaultLogReason.Equals(input.DefaultLogReason))
                ) && 
                (
                    this.BillToAccountNumber == input.BillToAccountNumber ||
                    (this.BillToAccountNumber != null &&
                    this.BillToAccountNumber.Equals(input.BillToAccountNumber))
                ) && 
                (
                    this.BillToAddressType == input.BillToAddressType ||
                    (this.BillToAddressType != null &&
                    this.BillToAddressType.Equals(input.BillToAddressType))
                ) && 
                (
                    this.AlternateBillToAddressID == input.AlternateBillToAddressID ||
                    (this.AlternateBillToAddressID != null &&
                    this.AlternateBillToAddressID.Equals(input.AlternateBillToAddressID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ContractType != null)
                    hashCode = hashCode * 59 + this.ContractType.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.DateWritten != null)
                    hashCode = hashCode * 59 + this.DateWritten.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.ContractRemaining != null)
                    hashCode = hashCode * 59 + this.ContractRemaining.GetHashCode();
                if (this.IsFutureContract != null)
                    hashCode = hashCode * 59 + this.IsFutureContract.GetHashCode();
                if (this.HasContractRemaining != null)
                    hashCode = hashCode * 59 + this.HasContractRemaining.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.CustomerPONumber != null)
                    hashCode = hashCode * 59 + this.CustomerPONumber.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.DefaultServiceOrderPriority != null)
                    hashCode = hashCode * 59 + this.DefaultServiceOrderPriority.GetHashCode();
                if (this.AssignedTech != null)
                    hashCode = hashCode * 59 + this.AssignedTech.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.DaysLeft != null)
                    hashCode = hashCode * 59 + this.DaysLeft.GetHashCode();
                if (this.LinkedAgreement != null)
                    hashCode = hashCode * 59 + this.LinkedAgreement.GetHashCode();
                if (this.LimitServiceOrdersToItemsCovered != null)
                    hashCode = hashCode * 59 + this.LimitServiceOrdersToItemsCovered.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PricingMethod != null)
                    hashCode = hashCode * 59 + this.PricingMethod.GetHashCode();
                if (this.BilledToDateAmount != null)
                    hashCode = hashCode * 59 + this.BilledToDateAmount.GetHashCode();
                if (this.RepToCredit != null)
                    hashCode = hashCode * 59 + this.RepToCredit.GetHashCode();
                if (this.RenewContractNumber != null)
                    hashCode = hashCode * 59 + this.RenewContractNumber.GetHashCode();
                if (this.SalesTaxCode != null)
                    hashCode = hashCode * 59 + this.SalesTaxCode.GetHashCode();
                if (this.BillDayOfMonth != null)
                    hashCode = hashCode * 59 + this.BillDayOfMonth.GetHashCode();
                if (this.BillStartMonth != null)
                    hashCode = hashCode * 59 + this.BillStartMonth.GetHashCode();
                if (this.AutoInvoice != null)
                    hashCode = hashCode * 59 + this.AutoInvoice.GetHashCode();
                if (this.DaysAheadToInvoice != null)
                    hashCode = hashCode * 59 + this.DaysAheadToInvoice.GetHashCode();
                if (this.EmailInvoice != null)
                    hashCode = hashCode * 59 + this.EmailInvoice.GetHashCode();
                if (this.AllowInvoiceConsolidation != null)
                    hashCode = hashCode * 59 + this.AllowInvoiceConsolidation.GetHashCode();
                if (this.PrintIncludesMemo != null)
                    hashCode = hashCode * 59 + this.PrintIncludesMemo.GetHashCode();
                if (this.PrintSpecialInstructions != null)
                    hashCode = hashCode * 59 + this.PrintSpecialInstructions.GetHashCode();
                if (this.InvoiceTerms != null)
                    hashCode = hashCode * 59 + this.InvoiceTerms.GetHashCode();
                if (this.AutoPay != null)
                    hashCode = hashCode * 59 + this.AutoPay.GetHashCode();
                if (this.DayOfMonthToPay != null)
                    hashCode = hashCode * 59 + this.DayOfMonthToPay.GetHashCode();
                if (this.PayMethod != null)
                    hashCode = hashCode * 59 + this.PayMethod.GetHashCode();
                if (this.PayMethodName != null)
                    hashCode = hashCode * 59 + this.PayMethodName.GetHashCode();
                if (this.BillingCycle != null)
                    hashCode = hashCode * 59 + this.BillingCycle.GetHashCode();
                if (this.BillingCycleDescription != null)
                    hashCode = hashCode * 59 + this.BillingCycleDescription.GetHashCode();
                if (this.BillingStyle != null)
                    hashCode = hashCode * 59 + this.BillingStyle.GetHashCode();
                if (this.GLIncomeCode != null)
                    hashCode = hashCode * 59 + this.GLIncomeCode.GetHashCode();
                if (this.PriceBillingText != null)
                    hashCode = hashCode * 59 + this.PriceBillingText.GetHashCode();
                if (this.LastDayOfPeriod != null)
                    hashCode = hashCode * 59 + this.LastDayOfPeriod.GetHashCode();
                if (this.BaseUsageItemID != null)
                    hashCode = hashCode * 59 + this.BaseUsageItemID.GetHashCode();
                if (this.BaseUsageDescription != null)
                    hashCode = hashCode * 59 + this.BaseUsageDescription.GetHashCode();
                if (this.OverageItemID != null)
                    hashCode = hashCode * 59 + this.OverageItemID.GetHashCode();
                if (this.OverageDescription != null)
                    hashCode = hashCode * 59 + this.OverageDescription.GetHashCode();
                if (this.OverageRate != null)
                    hashCode = hashCode * 59 + this.OverageRate.GetHashCode();
                if (this.OveragePriceLevel != null)
                    hashCode = hashCode * 59 + this.OveragePriceLevel.GetHashCode();
                if (this.Includes != null)
                    hashCode = hashCode * 59 + this.Includes.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                if (this.RenewalNotes != null)
                    hashCode = hashCode * 59 + this.RenewalNotes.GetHashCode();
                if (this.GeneralNotes != null)
                    hashCode = hashCode * 59 + this.GeneralNotes.GetHashCode();
                if (this.TripsIncluded != null)
                    hashCode = hashCode * 59 + this.TripsIncluded.GetHashCode();
                if (this.TripsRemaining != null)
                    hashCode = hashCode * 59 + this.TripsRemaining.GetHashCode();
                if (this.AdditionalTripCharge != null)
                    hashCode = hashCode * 59 + this.AdditionalTripCharge.GetHashCode();
                if (this.ResponseHours != null)
                    hashCode = hashCode * 59 + this.ResponseHours.GetHashCode();
                if (this.BasisType != null)
                    hashCode = hashCode * 59 + this.BasisType.GetHashCode();
                if (this.Basis != null)
                    hashCode = hashCode * 59 + this.Basis.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.TemplateID != null)
                    hashCode = hashCode * 59 + this.TemplateID.GetHashCode();
                if (this.DurationPeriod != null)
                    hashCode = hashCode * 59 + this.DurationPeriod.GetHashCode();
                if (this.DurationQuantity != null)
                    hashCode = hashCode * 59 + this.DurationQuantity.GetHashCode();
                if (this.LastBillingDate != null)
                    hashCode = hashCode * 59 + this.LastBillingDate.GetHashCode();
                if (this.BilledThruDate != null)
                    hashCode = hashCode * 59 + this.BilledThruDate.GetHashCode();
                if (this.BasePrice != null)
                    hashCode = hashCode * 59 + this.BasePrice.GetHashCode();
                if (this.UseBasePrice != null)
                    hashCode = hashCode * 59 + this.UseBasePrice.GetHashCode();
                if (this.VendorContract != null)
                    hashCode = hashCode * 59 + this.VendorContract.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                if (this.UtilizeOverride != null)
                    hashCode = hashCode * 59 + this.UtilizeOverride.GetHashCode();
                if (this.UseLaborOverride != null)
                    hashCode = hashCode * 59 + this.UseLaborOverride.GetHashCode();
                if (this.BillingOverride != null)
                    hashCode = hashCode * 59 + this.BillingOverride.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Chargeable != null)
                    hashCode = hashCode * 59 + this.Chargeable.GetHashCode();
                if (this.UseDailyProration != null)
                    hashCode = hashCode * 59 + this.UseDailyProration.GetHashCode();
                if (this.TimeLogRateDiscount != null)
                    hashCode = hashCode * 59 + this.TimeLogRateDiscount.GetHashCode();
                if (this.FixedHourlyRate != null)
                    hashCode = hashCode * 59 + this.FixedHourlyRate.GetHashCode();
                if (this.LaborBillingType != null)
                    hashCode = hashCode * 59 + this.LaborBillingType.GetHashCode();
                if (this.LaborBillingTypeDescription != null)
                    hashCode = hashCode * 59 + this.LaborBillingTypeDescription.GetHashCode();
                if (this.BasisTypeDescription != null)
                    hashCode = hashCode * 59 + this.BasisTypeDescription.GetHashCode();
                if (this.BillingOption != null)
                    hashCode = hashCode * 59 + this.BillingOption.GetHashCode();
                if (this.DefaultLogReason != null)
                    hashCode = hashCode * 59 + this.DefaultLogReason.GetHashCode();
                if (this.BillToAccountNumber != null)
                    hashCode = hashCode * 59 + this.BillToAccountNumber.GetHashCode();
                if (this.BillToAddressType != null)
                    hashCode = hashCode * 59 + this.BillToAddressType.GetHashCode();
                if (this.AlternateBillToAddressID != null)
                    hashCode = hashCode * 59 + this.AlternateBillToAddressID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
