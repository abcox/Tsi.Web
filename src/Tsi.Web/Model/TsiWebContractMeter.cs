/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebContractMeter
    /// </summary>
    [DataContract]
    public partial class TsiWebContractMeter :  IEquatable<TsiWebContractMeter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebContractMeter" /> class.
        /// </summary>
        /// <param name="contractMultipleMeterUsageKeyNumber">Gets or sets the contract multiple meter usage key number.</param>
        /// <param name="contractDetailKeyNumber">Gets or sets the Contract detail key number.</param>
        /// <param name="contractMeterKeyNumber">Gets or sets the contract Meter key number.</param>
        /// <param name="contractMeterName">Gets or sets the contract meter name.</param>
        /// <param name="contractMeterGroupKeyNumber">Gets or sets the contract meter group.</param>
        /// <param name="contractMeterGroupName">Gets or sets the contract meter group name.</param>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="startingMeterReading">Gets or sets the StartingMeterReading.</param>
        /// <param name="currentMeterReading">Gets or sets the CurrentMeterReading.</param>
        /// <param name="currentMeterUsage">Gets or sets the CurrentMeterUsage.</param>
        /// <param name="dateRead">Gets or sets the DateRead.</param>
        /// <param name="lastReading">Gets or sets the LastReading.</param>
        /// <param name="lastUsage">Gets or sets the LastUsage.</param>
        /// <param name="lastDateRead">Gets or sets the LastDateRead.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastBilledDate">Gets or sets the LastBilledDate.</param>
        /// <param name="totalUsage">Gets or sets the TotalUsage.</param>
        /// <param name="inactive">Gets or sets the TotalUsage.</param>
        public TsiWebContractMeter(int? contractMultipleMeterUsageKeyNumber = default(int?), int? contractDetailKeyNumber = default(int?), int? contractMeterKeyNumber = default(int?), string contractMeterName = default(string), int? contractMeterGroupKeyNumber = default(int?), string contractMeterGroupName = default(string), DateTime? startDate = default(DateTime?), int? startingMeterReading = default(int?), int? currentMeterReading = default(int?), int? currentMeterUsage = default(int?), DateTime? dateRead = default(DateTime?), int? lastReading = default(int?), int? lastUsage = default(int?), DateTime? lastDateRead = default(DateTime?), DateTime? endDate = default(DateTime?), DateTime? lastBilledDate = default(DateTime?), int? totalUsage = default(int?), bool? inactive = default(bool?))
        {
            this.ContractMultipleMeterUsageKeyNumber = contractMultipleMeterUsageKeyNumber;
            this.ContractDetailKeyNumber = contractDetailKeyNumber;
            this.ContractMeterKeyNumber = contractMeterKeyNumber;
            this.ContractMeterName = contractMeterName;
            this.ContractMeterGroupKeyNumber = contractMeterGroupKeyNumber;
            this.ContractMeterGroupName = contractMeterGroupName;
            this.StartDate = startDate;
            this.StartingMeterReading = startingMeterReading;
            this.CurrentMeterReading = currentMeterReading;
            this.CurrentMeterUsage = currentMeterUsage;
            this.DateRead = dateRead;
            this.LastReading = lastReading;
            this.LastUsage = lastUsage;
            this.LastDateRead = lastDateRead;
            this.EndDate = endDate;
            this.LastBilledDate = lastBilledDate;
            this.TotalUsage = totalUsage;
            this.Inactive = inactive;
        }
        
        /// <summary>
        /// Gets or sets the contract multiple meter usage key number
        /// </summary>
        /// <value>Gets or sets the contract multiple meter usage key number</value>
        [DataMember(Name="ContractMultipleMeterUsageKeyNumber", EmitDefaultValue=false)]
        public int? ContractMultipleMeterUsageKeyNumber { get; set; }

        /// <summary>
        /// Gets or sets the Contract detail key number
        /// </summary>
        /// <value>Gets or sets the Contract detail key number</value>
        [DataMember(Name="ContractDetailKeyNumber", EmitDefaultValue=false)]
        public int? ContractDetailKeyNumber { get; set; }

        /// <summary>
        /// Gets or sets the contract Meter key number
        /// </summary>
        /// <value>Gets or sets the contract Meter key number</value>
        [DataMember(Name="ContractMeterKeyNumber", EmitDefaultValue=false)]
        public int? ContractMeterKeyNumber { get; set; }

        /// <summary>
        /// Gets or sets the contract meter name
        /// </summary>
        /// <value>Gets or sets the contract meter name</value>
        [DataMember(Name="ContractMeterName", EmitDefaultValue=false)]
        public string ContractMeterName { get; set; }

        /// <summary>
        /// Gets or sets the contract meter group
        /// </summary>
        /// <value>Gets or sets the contract meter group</value>
        [DataMember(Name="ContractMeterGroupKeyNumber", EmitDefaultValue=false)]
        public int? ContractMeterGroupKeyNumber { get; set; }

        /// <summary>
        /// Gets or sets the contract meter group name
        /// </summary>
        /// <value>Gets or sets the contract meter group name</value>
        [DataMember(Name="ContractMeterGroupName", EmitDefaultValue=false)]
        public string ContractMeterGroupName { get; set; }

        /// <summary>
        /// Gets or sets the StartDate
        /// </summary>
        /// <value>Gets or sets the StartDate</value>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the StartingMeterReading
        /// </summary>
        /// <value>Gets or sets the StartingMeterReading</value>
        [DataMember(Name="StartingMeterReading", EmitDefaultValue=false)]
        public int? StartingMeterReading { get; set; }

        /// <summary>
        /// Gets or sets the CurrentMeterReading
        /// </summary>
        /// <value>Gets or sets the CurrentMeterReading</value>
        [DataMember(Name="CurrentMeterReading", EmitDefaultValue=false)]
        public int? CurrentMeterReading { get; set; }

        /// <summary>
        /// Gets or sets the CurrentMeterUsage
        /// </summary>
        /// <value>Gets or sets the CurrentMeterUsage</value>
        [DataMember(Name="CurrentMeterUsage", EmitDefaultValue=false)]
        public int? CurrentMeterUsage { get; set; }

        /// <summary>
        /// Gets or sets the DateRead
        /// </summary>
        /// <value>Gets or sets the DateRead</value>
        [DataMember(Name="DateRead", EmitDefaultValue=false)]
        public DateTime? DateRead { get; set; }

        /// <summary>
        /// Gets or sets the LastReading
        /// </summary>
        /// <value>Gets or sets the LastReading</value>
        [DataMember(Name="LastReading", EmitDefaultValue=false)]
        public int? LastReading { get; set; }

        /// <summary>
        /// Gets or sets the LastUsage
        /// </summary>
        /// <value>Gets or sets the LastUsage</value>
        [DataMember(Name="LastUsage", EmitDefaultValue=false)]
        public int? LastUsage { get; set; }

        /// <summary>
        /// Gets or sets the LastDateRead
        /// </summary>
        /// <value>Gets or sets the LastDateRead</value>
        [DataMember(Name="LastDateRead", EmitDefaultValue=false)]
        public DateTime? LastDateRead { get; set; }

        /// <summary>
        /// Gets or sets the EndDate
        /// </summary>
        /// <value>Gets or sets the EndDate</value>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the LastBilledDate
        /// </summary>
        /// <value>Gets or sets the LastBilledDate</value>
        [DataMember(Name="LastBilledDate", EmitDefaultValue=false)]
        public DateTime? LastBilledDate { get; set; }

        /// <summary>
        /// Gets or sets the TotalUsage
        /// </summary>
        /// <value>Gets or sets the TotalUsage</value>
        [DataMember(Name="TotalUsage", EmitDefaultValue=false)]
        public int? TotalUsage { get; set; }

        /// <summary>
        /// Gets or sets the TotalUsage
        /// </summary>
        /// <value>Gets or sets the TotalUsage</value>
        [DataMember(Name="Inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebContractMeter {\n");
            sb.Append("  ContractMultipleMeterUsageKeyNumber: ").Append(ContractMultipleMeterUsageKeyNumber).Append("\n");
            sb.Append("  ContractDetailKeyNumber: ").Append(ContractDetailKeyNumber).Append("\n");
            sb.Append("  ContractMeterKeyNumber: ").Append(ContractMeterKeyNumber).Append("\n");
            sb.Append("  ContractMeterName: ").Append(ContractMeterName).Append("\n");
            sb.Append("  ContractMeterGroupKeyNumber: ").Append(ContractMeterGroupKeyNumber).Append("\n");
            sb.Append("  ContractMeterGroupName: ").Append(ContractMeterGroupName).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartingMeterReading: ").Append(StartingMeterReading).Append("\n");
            sb.Append("  CurrentMeterReading: ").Append(CurrentMeterReading).Append("\n");
            sb.Append("  CurrentMeterUsage: ").Append(CurrentMeterUsage).Append("\n");
            sb.Append("  DateRead: ").Append(DateRead).Append("\n");
            sb.Append("  LastReading: ").Append(LastReading).Append("\n");
            sb.Append("  LastUsage: ").Append(LastUsage).Append("\n");
            sb.Append("  LastDateRead: ").Append(LastDateRead).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LastBilledDate: ").Append(LastBilledDate).Append("\n");
            sb.Append("  TotalUsage: ").Append(TotalUsage).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebContractMeter);
        }

        /// <summary>
        /// Returns true if TsiWebContractMeter instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebContractMeter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebContractMeter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractMultipleMeterUsageKeyNumber == input.ContractMultipleMeterUsageKeyNumber ||
                    (this.ContractMultipleMeterUsageKeyNumber != null &&
                    this.ContractMultipleMeterUsageKeyNumber.Equals(input.ContractMultipleMeterUsageKeyNumber))
                ) && 
                (
                    this.ContractDetailKeyNumber == input.ContractDetailKeyNumber ||
                    (this.ContractDetailKeyNumber != null &&
                    this.ContractDetailKeyNumber.Equals(input.ContractDetailKeyNumber))
                ) && 
                (
                    this.ContractMeterKeyNumber == input.ContractMeterKeyNumber ||
                    (this.ContractMeterKeyNumber != null &&
                    this.ContractMeterKeyNumber.Equals(input.ContractMeterKeyNumber))
                ) && 
                (
                    this.ContractMeterName == input.ContractMeterName ||
                    (this.ContractMeterName != null &&
                    this.ContractMeterName.Equals(input.ContractMeterName))
                ) && 
                (
                    this.ContractMeterGroupKeyNumber == input.ContractMeterGroupKeyNumber ||
                    (this.ContractMeterGroupKeyNumber != null &&
                    this.ContractMeterGroupKeyNumber.Equals(input.ContractMeterGroupKeyNumber))
                ) && 
                (
                    this.ContractMeterGroupName == input.ContractMeterGroupName ||
                    (this.ContractMeterGroupName != null &&
                    this.ContractMeterGroupName.Equals(input.ContractMeterGroupName))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartingMeterReading == input.StartingMeterReading ||
                    (this.StartingMeterReading != null &&
                    this.StartingMeterReading.Equals(input.StartingMeterReading))
                ) && 
                (
                    this.CurrentMeterReading == input.CurrentMeterReading ||
                    (this.CurrentMeterReading != null &&
                    this.CurrentMeterReading.Equals(input.CurrentMeterReading))
                ) && 
                (
                    this.CurrentMeterUsage == input.CurrentMeterUsage ||
                    (this.CurrentMeterUsage != null &&
                    this.CurrentMeterUsage.Equals(input.CurrentMeterUsage))
                ) && 
                (
                    this.DateRead == input.DateRead ||
                    (this.DateRead != null &&
                    this.DateRead.Equals(input.DateRead))
                ) && 
                (
                    this.LastReading == input.LastReading ||
                    (this.LastReading != null &&
                    this.LastReading.Equals(input.LastReading))
                ) && 
                (
                    this.LastUsage == input.LastUsage ||
                    (this.LastUsage != null &&
                    this.LastUsage.Equals(input.LastUsage))
                ) && 
                (
                    this.LastDateRead == input.LastDateRead ||
                    (this.LastDateRead != null &&
                    this.LastDateRead.Equals(input.LastDateRead))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.LastBilledDate == input.LastBilledDate ||
                    (this.LastBilledDate != null &&
                    this.LastBilledDate.Equals(input.LastBilledDate))
                ) && 
                (
                    this.TotalUsage == input.TotalUsage ||
                    (this.TotalUsage != null &&
                    this.TotalUsage.Equals(input.TotalUsage))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractMultipleMeterUsageKeyNumber != null)
                    hashCode = hashCode * 59 + this.ContractMultipleMeterUsageKeyNumber.GetHashCode();
                if (this.ContractDetailKeyNumber != null)
                    hashCode = hashCode * 59 + this.ContractDetailKeyNumber.GetHashCode();
                if (this.ContractMeterKeyNumber != null)
                    hashCode = hashCode * 59 + this.ContractMeterKeyNumber.GetHashCode();
                if (this.ContractMeterName != null)
                    hashCode = hashCode * 59 + this.ContractMeterName.GetHashCode();
                if (this.ContractMeterGroupKeyNumber != null)
                    hashCode = hashCode * 59 + this.ContractMeterGroupKeyNumber.GetHashCode();
                if (this.ContractMeterGroupName != null)
                    hashCode = hashCode * 59 + this.ContractMeterGroupName.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartingMeterReading != null)
                    hashCode = hashCode * 59 + this.StartingMeterReading.GetHashCode();
                if (this.CurrentMeterReading != null)
                    hashCode = hashCode * 59 + this.CurrentMeterReading.GetHashCode();
                if (this.CurrentMeterUsage != null)
                    hashCode = hashCode * 59 + this.CurrentMeterUsage.GetHashCode();
                if (this.DateRead != null)
                    hashCode = hashCode * 59 + this.DateRead.GetHashCode();
                if (this.LastReading != null)
                    hashCode = hashCode * 59 + this.LastReading.GetHashCode();
                if (this.LastUsage != null)
                    hashCode = hashCode * 59 + this.LastUsage.GetHashCode();
                if (this.LastDateRead != null)
                    hashCode = hashCode * 59 + this.LastDateRead.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.LastBilledDate != null)
                    hashCode = hashCode * 59 + this.LastBilledDate.GetHashCode();
                if (this.TotalUsage != null)
                    hashCode = hashCode * 59 + this.TotalUsage.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
