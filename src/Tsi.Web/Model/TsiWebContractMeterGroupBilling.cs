/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebContractMeterGroupBilling
    /// </summary>
    [DataContract]
    public partial class TsiWebContractMeterGroupBilling :  IEquatable<TsiWebContractMeterGroupBilling>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebContractMeterGroupBilling" /> class.
        /// </summary>
        /// <param name="contractMultipleMeterGroupPricingRangeKeyNumber">Gets or sets the contract multiple meter group pricing key number.</param>
        /// <param name="contractMultipleMeterGroupPricingKeyNumber">Gets or sets the contract meter group.</param>
        /// <param name="usageFrom">Gets or sets the UsageFrom.</param>
        /// <param name="usageThrough">Gets or sets the UsageThrough.</param>
        /// <param name="billingRate">Gets or sets the BillingRate.</param>
        public TsiWebContractMeterGroupBilling(int? contractMultipleMeterGroupPricingRangeKeyNumber = default(int?), int? contractMultipleMeterGroupPricingKeyNumber = default(int?), int? usageFrom = default(int?), int? usageThrough = default(int?), double? billingRate = default(double?))
        {
            this.ContractMultipleMeterGroupPricingRangeKeyNumber = contractMultipleMeterGroupPricingRangeKeyNumber;
            this.ContractMultipleMeterGroupPricingKeyNumber = contractMultipleMeterGroupPricingKeyNumber;
            this.UsageFrom = usageFrom;
            this.UsageThrough = usageThrough;
            this.BillingRate = billingRate;
        }
        
        /// <summary>
        /// Gets or sets the contract multiple meter group pricing key number
        /// </summary>
        /// <value>Gets or sets the contract multiple meter group pricing key number</value>
        [DataMember(Name="ContractMultipleMeterGroupPricingRangeKeyNumber", EmitDefaultValue=false)]
        public int? ContractMultipleMeterGroupPricingRangeKeyNumber { get; set; }

        /// <summary>
        /// Gets or sets the contract meter group
        /// </summary>
        /// <value>Gets or sets the contract meter group</value>
        [DataMember(Name="ContractMultipleMeterGroupPricingKeyNumber", EmitDefaultValue=false)]
        public int? ContractMultipleMeterGroupPricingKeyNumber { get; set; }

        /// <summary>
        /// Gets or sets the UsageFrom
        /// </summary>
        /// <value>Gets or sets the UsageFrom</value>
        [DataMember(Name="UsageFrom", EmitDefaultValue=false)]
        public int? UsageFrom { get; set; }

        /// <summary>
        /// Gets or sets the UsageThrough
        /// </summary>
        /// <value>Gets or sets the UsageThrough</value>
        [DataMember(Name="UsageThrough", EmitDefaultValue=false)]
        public int? UsageThrough { get; set; }

        /// <summary>
        /// Gets or sets the BillingRate
        /// </summary>
        /// <value>Gets or sets the BillingRate</value>
        [DataMember(Name="BillingRate", EmitDefaultValue=false)]
        public double? BillingRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebContractMeterGroupBilling {\n");
            sb.Append("  ContractMultipleMeterGroupPricingRangeKeyNumber: ").Append(ContractMultipleMeterGroupPricingRangeKeyNumber).Append("\n");
            sb.Append("  ContractMultipleMeterGroupPricingKeyNumber: ").Append(ContractMultipleMeterGroupPricingKeyNumber).Append("\n");
            sb.Append("  UsageFrom: ").Append(UsageFrom).Append("\n");
            sb.Append("  UsageThrough: ").Append(UsageThrough).Append("\n");
            sb.Append("  BillingRate: ").Append(BillingRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebContractMeterGroupBilling);
        }

        /// <summary>
        /// Returns true if TsiWebContractMeterGroupBilling instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebContractMeterGroupBilling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebContractMeterGroupBilling input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractMultipleMeterGroupPricingRangeKeyNumber == input.ContractMultipleMeterGroupPricingRangeKeyNumber ||
                    (this.ContractMultipleMeterGroupPricingRangeKeyNumber != null &&
                    this.ContractMultipleMeterGroupPricingRangeKeyNumber.Equals(input.ContractMultipleMeterGroupPricingRangeKeyNumber))
                ) && 
                (
                    this.ContractMultipleMeterGroupPricingKeyNumber == input.ContractMultipleMeterGroupPricingKeyNumber ||
                    (this.ContractMultipleMeterGroupPricingKeyNumber != null &&
                    this.ContractMultipleMeterGroupPricingKeyNumber.Equals(input.ContractMultipleMeterGroupPricingKeyNumber))
                ) && 
                (
                    this.UsageFrom == input.UsageFrom ||
                    (this.UsageFrom != null &&
                    this.UsageFrom.Equals(input.UsageFrom))
                ) && 
                (
                    this.UsageThrough == input.UsageThrough ||
                    (this.UsageThrough != null &&
                    this.UsageThrough.Equals(input.UsageThrough))
                ) && 
                (
                    this.BillingRate == input.BillingRate ||
                    (this.BillingRate != null &&
                    this.BillingRate.Equals(input.BillingRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractMultipleMeterGroupPricingRangeKeyNumber != null)
                    hashCode = hashCode * 59 + this.ContractMultipleMeterGroupPricingRangeKeyNumber.GetHashCode();
                if (this.ContractMultipleMeterGroupPricingKeyNumber != null)
                    hashCode = hashCode * 59 + this.ContractMultipleMeterGroupPricingKeyNumber.GetHashCode();
                if (this.UsageFrom != null)
                    hashCode = hashCode * 59 + this.UsageFrom.GetHashCode();
                if (this.UsageThrough != null)
                    hashCode = hashCode * 59 + this.UsageThrough.GetHashCode();
                if (this.BillingRate != null)
                    hashCode = hashCode * 59 + this.BillingRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
