/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebCreateContractModel
    /// </summary>
    [DataContract]
    public partial class TsiWebCreateContractModel :  IEquatable<TsiWebCreateContractModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebCreateContractModel" /> class.
        /// </summary>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="basisType">basisType.</param>
        /// <param name="description">description.</param>
        /// <param name="allowContractWithNoPrice">allowContractWithNoPrice.</param>
        /// <param name="useAsDefaultAccountContract">useAsDefaultAccountContract.</param>
        /// <param name="customersOnContract">customersOnContract.</param>
        /// <param name="billToAddressType">billToAddressType.</param>
        /// <param name="alternateBillToAddressID">alternateBillToAddressID.</param>
        /// <param name="billTo">billTo.</param>
        /// <param name="contractType">contractType.</param>
        /// <param name="reference">reference.</param>
        /// <param name="status">status.</param>
        /// <param name="vendorContract">vendorContract.</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="customerPONumber">customerPONumber.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="defaultServiceOrderPriority">defaultServiceOrderPriority.</param>
        /// <param name="assignedTech">assignedTech.</param>
        /// <param name="repToCredit">repToCredit.</param>
        /// <param name="modifiedByRepNumber">modifiedByRepNumber.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="dateWritten">dateWritten.</param>
        /// <param name="price">price.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="useBasePrice">useBasePrice.</param>
        /// <param name="useInvoiceDateForAutoPayment">useInvoiceDateForAutoPayment.</param>
        /// <param name="useLastDayOfMonthForPeriodClosing">useLastDayOfMonthForPeriodClosing.</param>
        /// <param name="billOverageOnContract">billOverageOnContract.</param>
        /// <param name="useBaseUsagePriceLevel">useBaseUsagePriceLevel.</param>
        /// <param name="useLastDayOfBillingMonth">useLastDayOfBillingMonth.</param>
        /// <param name="useLastDayOfMonthForAutoPayment">useLastDayOfMonthForAutoPayment.</param>
        /// <param name="billingCycle">billingCycle.</param>
        /// <param name="billingStyle">billingStyle.</param>
        /// <param name="salesTaxCode">salesTaxCode.</param>
        /// <param name="invoiceTerms">invoiceTerms.</param>
        /// <param name="gLIncomeCode">gLIncomeCode.</param>
        /// <param name="priceBillingText">priceBillingText.</param>
        /// <param name="payMethodName">payMethodName.</param>
        /// <param name="baseUsageItemID">baseUsageItemID.</param>
        /// <param name="overageItemID">overageItemID.</param>
        /// <param name="billDayOfMonth">billDayOfMonth.</param>
        /// <param name="billStartMonth">billStartMonth.</param>
        /// <param name="daysAheadToInvoice">daysAheadToInvoice.</param>
        /// <param name="dayOfMonthToPay">dayOfMonthToPay.</param>
        /// <param name="payMethod">payMethod.</param>
        /// <param name="lastDayOfPeriod">lastDayOfPeriod.</param>
        /// <param name="overagePriceLevel">overagePriceLevel.</param>
        /// <param name="overageRate">overageRate.</param>
        /// <param name="autoInvoice">autoInvoice.</param>
        /// <param name="emailInvoice">emailInvoice.</param>
        /// <param name="allowInvoiceConsolidation">allowInvoiceConsolidation.</param>
        /// <param name="printIncludesMemo">printIncludesMemo.</param>
        /// <param name="printSpecialInstructions">printSpecialInstructions.</param>
        /// <param name="autoPay">autoPay.</param>
        /// <param name="includes">includes.</param>
        /// <param name="specialInstructions">specialInstructions.</param>
        /// <param name="generalNotes">generalNotes.</param>
        /// <param name="tripsIncluded">tripsIncluded.</param>
        /// <param name="tripsRemaining">tripsRemaining.</param>
        /// <param name="responseHours">responseHours.</param>
        /// <param name="additionalTripCharge">additionalTripCharge.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        /// <param name="utilizeOverride">utilizeOverride.</param>
        /// <param name="useLaborOverride">useLaborOverride.</param>
        /// <param name="billingOverride">billingOverride.</param>
        /// <param name="timeLogRateDiscount">timeLogRateDiscount.</param>
        /// <param name="fixedHourlyRate">fixedHourlyRate.</param>
        /// <param name="laborBillingType">laborBillingType.</param>
        /// <param name="billingOption">billingOption.</param>
        /// <param name="defaultLogReason">defaultLogReason.</param>
        /// <param name="contractHours">contractHours.</param>
        /// <param name="contractMinutes">contractMinutes.</param>
        /// <param name="ratePerHour">ratePerHour.</param>
        /// <param name="warningPercent">warningPercent.</param>
        /// <param name="startingMeter">startingMeter.</param>
        /// <param name="maxMeter">maxMeter.</param>
        /// <param name="warningClicks">warningClicks.</param>
        /// <param name="overageChargePerClick">overageChargePerClick.</param>
        /// <param name="currentMeter">currentMeter.</param>
        /// <param name="prePaidAmount">prePaidAmount.</param>
        /// <param name="maxUnits">maxUnits.</param>
        /// <param name="chargePerUnit">chargePerUnit.</param>
        /// <param name="periodBaseHours">periodBaseHours.</param>
        /// <param name="periodUsageCycle">periodUsageCycle.</param>
        /// <param name="roundingFactor">roundingFactor.</param>
        /// <param name="allowContractWithNoHours">allowContractWithNoHours.</param>
        /// <param name="periodBaseClicks">periodBaseClicks.</param>
        public TsiWebCreateContractModel(int? accountNumber = default(int?), string basisType = default(string), string description = default(string), bool? allowContractWithNoPrice = default(bool?), bool? useAsDefaultAccountContract = default(bool?), List<int?> customersOnContract = default(List<int?>), string billToAddressType = default(string), int? alternateBillToAddressID = default(int?), TsiWebContractBillToAddress billTo = default(TsiWebContractBillToAddress), string contractType = default(string), string reference = default(string), string status = default(string), string vendorContract = default(string), string paymentType = default(string), string customerPONumber = default(string), string contactName = default(string), string defaultServiceOrderPriority = default(string), int? assignedTech = default(int?), int? repToCredit = default(int?), int? modifiedByRepNumber = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), DateTime? dateWritten = default(DateTime?), double? price = default(double?), double? basePrice = default(double?), bool? useBasePrice = default(bool?), bool? useInvoiceDateForAutoPayment = default(bool?), bool? useLastDayOfMonthForPeriodClosing = default(bool?), bool? billOverageOnContract = default(bool?), bool? useBaseUsagePriceLevel = default(bool?), bool? useLastDayOfBillingMonth = default(bool?), bool? useLastDayOfMonthForAutoPayment = default(bool?), string billingCycle = default(string), string billingStyle = default(string), string salesTaxCode = default(string), string invoiceTerms = default(string), string gLIncomeCode = default(string), string priceBillingText = default(string), string payMethodName = default(string), string baseUsageItemID = default(string), string overageItemID = default(string), int? billDayOfMonth = default(int?), int? billStartMonth = default(int?), int? daysAheadToInvoice = default(int?), int? dayOfMonthToPay = default(int?), int? payMethod = default(int?), int? lastDayOfPeriod = default(int?), int? overagePriceLevel = default(int?), double? overageRate = default(double?), bool? autoInvoice = default(bool?), bool? emailInvoice = default(bool?), bool? allowInvoiceConsolidation = default(bool?), bool? printIncludesMemo = default(bool?), bool? printSpecialInstructions = default(bool?), bool? autoPay = default(bool?), string includes = default(string), string specialInstructions = default(string), string generalNotes = default(string), int? tripsIncluded = default(int?), int? tripsRemaining = default(int?), int? responseHours = default(int?), double? additionalTripCharge = default(double?), bool? creditUtilizationTime = default(bool?), bool? utilizeOverride = default(bool?), bool? useLaborOverride = default(bool?), bool? billingOverride = default(bool?), double? timeLogRateDiscount = default(double?), double? fixedHourlyRate = default(double?), string laborBillingType = default(string), string billingOption = default(string), string defaultLogReason = default(string), int? contractHours = default(int?), int? contractMinutes = default(int?), double? ratePerHour = default(double?), double? warningPercent = default(double?), int? startingMeter = default(int?), int? maxMeter = default(int?), int? warningClicks = default(int?), double? overageChargePerClick = default(double?), int? currentMeter = default(int?), double? prePaidAmount = default(double?), double? maxUnits = default(double?), double? chargePerUnit = default(double?), double? periodBaseHours = default(double?), string periodUsageCycle = default(string), string roundingFactor = default(string), bool? allowContractWithNoHours = default(bool?), double? periodBaseClicks = default(double?))
        {
            this.AccountNumber = accountNumber;
            this.BasisType = basisType;
            this.Description = description;
            this.AllowContractWithNoPrice = allowContractWithNoPrice;
            this.UseAsDefaultAccountContract = useAsDefaultAccountContract;
            this.CustomersOnContract = customersOnContract;
            this.BillToAddressType = billToAddressType;
            this.AlternateBillToAddressID = alternateBillToAddressID;
            this.BillTo = billTo;
            this.ContractType = contractType;
            this.Reference = reference;
            this.Status = status;
            this.VendorContract = vendorContract;
            this.PaymentType = paymentType;
            this.CustomerPONumber = customerPONumber;
            this.ContactName = contactName;
            this.DefaultServiceOrderPriority = defaultServiceOrderPriority;
            this.AssignedTech = assignedTech;
            this.RepToCredit = repToCredit;
            this.ModifiedByRepNumber = modifiedByRepNumber;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.DateWritten = dateWritten;
            this.Price = price;
            this.BasePrice = basePrice;
            this.UseBasePrice = useBasePrice;
            this.UseInvoiceDateForAutoPayment = useInvoiceDateForAutoPayment;
            this.UseLastDayOfMonthForPeriodClosing = useLastDayOfMonthForPeriodClosing;
            this.BillOverageOnContract = billOverageOnContract;
            this.UseBaseUsagePriceLevel = useBaseUsagePriceLevel;
            this.UseLastDayOfBillingMonth = useLastDayOfBillingMonth;
            this.UseLastDayOfMonthForAutoPayment = useLastDayOfMonthForAutoPayment;
            this.BillingCycle = billingCycle;
            this.BillingStyle = billingStyle;
            this.SalesTaxCode = salesTaxCode;
            this.InvoiceTerms = invoiceTerms;
            this.GLIncomeCode = gLIncomeCode;
            this.PriceBillingText = priceBillingText;
            this.PayMethodName = payMethodName;
            this.BaseUsageItemID = baseUsageItemID;
            this.OverageItemID = overageItemID;
            this.BillDayOfMonth = billDayOfMonth;
            this.BillStartMonth = billStartMonth;
            this.DaysAheadToInvoice = daysAheadToInvoice;
            this.DayOfMonthToPay = dayOfMonthToPay;
            this.PayMethod = payMethod;
            this.LastDayOfPeriod = lastDayOfPeriod;
            this.OveragePriceLevel = overagePriceLevel;
            this.OverageRate = overageRate;
            this.AutoInvoice = autoInvoice;
            this.EmailInvoice = emailInvoice;
            this.AllowInvoiceConsolidation = allowInvoiceConsolidation;
            this.PrintIncludesMemo = printIncludesMemo;
            this.PrintSpecialInstructions = printSpecialInstructions;
            this.AutoPay = autoPay;
            this.Includes = includes;
            this.SpecialInstructions = specialInstructions;
            this.GeneralNotes = generalNotes;
            this.TripsIncluded = tripsIncluded;
            this.TripsRemaining = tripsRemaining;
            this.ResponseHours = responseHours;
            this.AdditionalTripCharge = additionalTripCharge;
            this.CreditUtilizationTime = creditUtilizationTime;
            this.UtilizeOverride = utilizeOverride;
            this.UseLaborOverride = useLaborOverride;
            this.BillingOverride = billingOverride;
            this.TimeLogRateDiscount = timeLogRateDiscount;
            this.FixedHourlyRate = fixedHourlyRate;
            this.LaborBillingType = laborBillingType;
            this.BillingOption = billingOption;
            this.DefaultLogReason = defaultLogReason;
            this.ContractHours = contractHours;
            this.ContractMinutes = contractMinutes;
            this.RatePerHour = ratePerHour;
            this.WarningPercent = warningPercent;
            this.StartingMeter = startingMeter;
            this.MaxMeter = maxMeter;
            this.WarningClicks = warningClicks;
            this.OverageChargePerClick = overageChargePerClick;
            this.CurrentMeter = currentMeter;
            this.PrePaidAmount = prePaidAmount;
            this.MaxUnits = maxUnits;
            this.ChargePerUnit = chargePerUnit;
            this.PeriodBaseHours = periodBaseHours;
            this.PeriodUsageCycle = periodUsageCycle;
            this.RoundingFactor = roundingFactor;
            this.AllowContractWithNoHours = allowContractWithNoHours;
            this.PeriodBaseClicks = periodBaseClicks;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BasisType
        /// </summary>
        [DataMember(Name="BasisType", EmitDefaultValue=false)]
        public string BasisType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AllowContractWithNoPrice
        /// </summary>
        [DataMember(Name="AllowContractWithNoPrice", EmitDefaultValue=false)]
        public bool? AllowContractWithNoPrice { get; set; }

        /// <summary>
        /// Gets or Sets UseAsDefaultAccountContract
        /// </summary>
        [DataMember(Name="UseAsDefaultAccountContract", EmitDefaultValue=false)]
        public bool? UseAsDefaultAccountContract { get; set; }

        /// <summary>
        /// Gets or Sets CustomersOnContract
        /// </summary>
        [DataMember(Name="CustomersOnContract", EmitDefaultValue=false)]
        public List<int?> CustomersOnContract { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddressType
        /// </summary>
        [DataMember(Name="BillToAddressType", EmitDefaultValue=false)]
        public string BillToAddressType { get; set; }

        /// <summary>
        /// Gets or Sets AlternateBillToAddressID
        /// </summary>
        [DataMember(Name="AlternateBillToAddressID", EmitDefaultValue=false)]
        public int? AlternateBillToAddressID { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="BillTo", EmitDefaultValue=false)]
        public TsiWebContractBillToAddress BillTo { get; set; }

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name="ContractType", EmitDefaultValue=false)]
        public string ContractType { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="Reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets VendorContract
        /// </summary>
        [DataMember(Name="VendorContract", EmitDefaultValue=false)]
        public string VendorContract { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="PaymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPONumber
        /// </summary>
        [DataMember(Name="CustomerPONumber", EmitDefaultValue=false)]
        public string CustomerPONumber { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="ContactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets DefaultServiceOrderPriority
        /// </summary>
        [DataMember(Name="DefaultServiceOrderPriority", EmitDefaultValue=false)]
        public string DefaultServiceOrderPriority { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTech
        /// </summary>
        [DataMember(Name="AssignedTech", EmitDefaultValue=false)]
        public int? AssignedTech { get; set; }

        /// <summary>
        /// Gets or Sets RepToCredit
        /// </summary>
        [DataMember(Name="RepToCredit", EmitDefaultValue=false)]
        public int? RepToCredit { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByRepNumber
        /// </summary>
        [DataMember(Name="ModifiedByRepNumber", EmitDefaultValue=false)]
        public int? ModifiedByRepNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets DateWritten
        /// </summary>
        [DataMember(Name="DateWritten", EmitDefaultValue=false)]
        public DateTime? DateWritten { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name="BasePrice", EmitDefaultValue=false)]
        public double? BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets UseBasePrice
        /// </summary>
        [DataMember(Name="UseBasePrice", EmitDefaultValue=false)]
        public bool? UseBasePrice { get; set; }

        /// <summary>
        /// Gets or Sets UseInvoiceDateForAutoPayment
        /// </summary>
        [DataMember(Name="UseInvoiceDateForAutoPayment", EmitDefaultValue=false)]
        public bool? UseInvoiceDateForAutoPayment { get; set; }

        /// <summary>
        /// Gets or Sets UseLastDayOfMonthForPeriodClosing
        /// </summary>
        [DataMember(Name="UseLastDayOfMonthForPeriodClosing", EmitDefaultValue=false)]
        public bool? UseLastDayOfMonthForPeriodClosing { get; set; }

        /// <summary>
        /// Gets or Sets BillOverageOnContract
        /// </summary>
        [DataMember(Name="BillOverageOnContract", EmitDefaultValue=false)]
        public bool? BillOverageOnContract { get; set; }

        /// <summary>
        /// Gets or Sets UseBaseUsagePriceLevel
        /// </summary>
        [DataMember(Name="UseBaseUsagePriceLevel", EmitDefaultValue=false)]
        public bool? UseBaseUsagePriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets UseLastDayOfBillingMonth
        /// </summary>
        [DataMember(Name="UseLastDayOfBillingMonth", EmitDefaultValue=false)]
        public bool? UseLastDayOfBillingMonth { get; set; }

        /// <summary>
        /// Gets or Sets UseLastDayOfMonthForAutoPayment
        /// </summary>
        [DataMember(Name="UseLastDayOfMonthForAutoPayment", EmitDefaultValue=false)]
        public bool? UseLastDayOfMonthForAutoPayment { get; set; }

        /// <summary>
        /// Gets or Sets BillingCycle
        /// </summary>
        [DataMember(Name="BillingCycle", EmitDefaultValue=false)]
        public string BillingCycle { get; set; }

        /// <summary>
        /// Gets or Sets BillingStyle
        /// </summary>
        [DataMember(Name="BillingStyle", EmitDefaultValue=false)]
        public string BillingStyle { get; set; }

        /// <summary>
        /// Gets or Sets SalesTaxCode
        /// </summary>
        [DataMember(Name="SalesTaxCode", EmitDefaultValue=false)]
        public string SalesTaxCode { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTerms
        /// </summary>
        [DataMember(Name="InvoiceTerms", EmitDefaultValue=false)]
        public string InvoiceTerms { get; set; }

        /// <summary>
        /// Gets or Sets GLIncomeCode
        /// </summary>
        [DataMember(Name="GLIncomeCode", EmitDefaultValue=false)]
        public string GLIncomeCode { get; set; }

        /// <summary>
        /// Gets or Sets PriceBillingText
        /// </summary>
        [DataMember(Name="PriceBillingText", EmitDefaultValue=false)]
        public string PriceBillingText { get; set; }

        /// <summary>
        /// Gets or Sets PayMethodName
        /// </summary>
        [DataMember(Name="PayMethodName", EmitDefaultValue=false)]
        public string PayMethodName { get; set; }

        /// <summary>
        /// Gets or Sets BaseUsageItemID
        /// </summary>
        [DataMember(Name="BaseUsageItemID", EmitDefaultValue=false)]
        public string BaseUsageItemID { get; set; }

        /// <summary>
        /// Gets or Sets OverageItemID
        /// </summary>
        [DataMember(Name="OverageItemID", EmitDefaultValue=false)]
        public string OverageItemID { get; set; }

        /// <summary>
        /// Gets or Sets BillDayOfMonth
        /// </summary>
        [DataMember(Name="BillDayOfMonth", EmitDefaultValue=false)]
        public int? BillDayOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets BillStartMonth
        /// </summary>
        [DataMember(Name="BillStartMonth", EmitDefaultValue=false)]
        public int? BillStartMonth { get; set; }

        /// <summary>
        /// Gets or Sets DaysAheadToInvoice
        /// </summary>
        [DataMember(Name="DaysAheadToInvoice", EmitDefaultValue=false)]
        public int? DaysAheadToInvoice { get; set; }

        /// <summary>
        /// Gets or Sets DayOfMonthToPay
        /// </summary>
        [DataMember(Name="DayOfMonthToPay", EmitDefaultValue=false)]
        public int? DayOfMonthToPay { get; set; }

        /// <summary>
        /// Gets or Sets PayMethod
        /// </summary>
        [DataMember(Name="PayMethod", EmitDefaultValue=false)]
        public int? PayMethod { get; set; }

        /// <summary>
        /// Gets or Sets LastDayOfPeriod
        /// </summary>
        [DataMember(Name="LastDayOfPeriod", EmitDefaultValue=false)]
        public int? LastDayOfPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OveragePriceLevel
        /// </summary>
        [DataMember(Name="OveragePriceLevel", EmitDefaultValue=false)]
        public int? OveragePriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets OverageRate
        /// </summary>
        [DataMember(Name="OverageRate", EmitDefaultValue=false)]
        public double? OverageRate { get; set; }

        /// <summary>
        /// Gets or Sets AutoInvoice
        /// </summary>
        [DataMember(Name="AutoInvoice", EmitDefaultValue=false)]
        public bool? AutoInvoice { get; set; }

        /// <summary>
        /// Gets or Sets EmailInvoice
        /// </summary>
        [DataMember(Name="EmailInvoice", EmitDefaultValue=false)]
        public bool? EmailInvoice { get; set; }

        /// <summary>
        /// Gets or Sets AllowInvoiceConsolidation
        /// </summary>
        [DataMember(Name="AllowInvoiceConsolidation", EmitDefaultValue=false)]
        public bool? AllowInvoiceConsolidation { get; set; }

        /// <summary>
        /// Gets or Sets PrintIncludesMemo
        /// </summary>
        [DataMember(Name="PrintIncludesMemo", EmitDefaultValue=false)]
        public bool? PrintIncludesMemo { get; set; }

        /// <summary>
        /// Gets or Sets PrintSpecialInstructions
        /// </summary>
        [DataMember(Name="PrintSpecialInstructions", EmitDefaultValue=false)]
        public bool? PrintSpecialInstructions { get; set; }

        /// <summary>
        /// Gets or Sets AutoPay
        /// </summary>
        [DataMember(Name="AutoPay", EmitDefaultValue=false)]
        public bool? AutoPay { get; set; }

        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="Includes", EmitDefaultValue=false)]
        public string Includes { get; set; }

        /// <summary>
        /// Gets or Sets SpecialInstructions
        /// </summary>
        [DataMember(Name="SpecialInstructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Gets or Sets GeneralNotes
        /// </summary>
        [DataMember(Name="GeneralNotes", EmitDefaultValue=false)]
        public string GeneralNotes { get; set; }

        /// <summary>
        /// Gets or Sets TripsIncluded
        /// </summary>
        [DataMember(Name="TripsIncluded", EmitDefaultValue=false)]
        public int? TripsIncluded { get; set; }

        /// <summary>
        /// Gets or Sets TripsRemaining
        /// </summary>
        [DataMember(Name="TripsRemaining", EmitDefaultValue=false)]
        public int? TripsRemaining { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHours
        /// </summary>
        [DataMember(Name="ResponseHours", EmitDefaultValue=false)]
        public int? ResponseHours { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalTripCharge
        /// </summary>
        [DataMember(Name="AdditionalTripCharge", EmitDefaultValue=false)]
        public double? AdditionalTripCharge { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Gets or Sets UtilizeOverride
        /// </summary>
        [DataMember(Name="UtilizeOverride", EmitDefaultValue=false)]
        public bool? UtilizeOverride { get; set; }

        /// <summary>
        /// Gets or Sets UseLaborOverride
        /// </summary>
        [DataMember(Name="UseLaborOverride", EmitDefaultValue=false)]
        public bool? UseLaborOverride { get; set; }

        /// <summary>
        /// Gets or Sets BillingOverride
        /// </summary>
        [DataMember(Name="BillingOverride", EmitDefaultValue=false)]
        public bool? BillingOverride { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogRateDiscount
        /// </summary>
        [DataMember(Name="TimeLogRateDiscount", EmitDefaultValue=false)]
        public double? TimeLogRateDiscount { get; set; }

        /// <summary>
        /// Gets or Sets FixedHourlyRate
        /// </summary>
        [DataMember(Name="FixedHourlyRate", EmitDefaultValue=false)]
        public double? FixedHourlyRate { get; set; }

        /// <summary>
        /// Gets or Sets LaborBillingType
        /// </summary>
        [DataMember(Name="LaborBillingType", EmitDefaultValue=false)]
        public string LaborBillingType { get; set; }

        /// <summary>
        /// Gets or Sets BillingOption
        /// </summary>
        [DataMember(Name="BillingOption", EmitDefaultValue=false)]
        public string BillingOption { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLogReason
        /// </summary>
        [DataMember(Name="DefaultLogReason", EmitDefaultValue=false)]
        public string DefaultLogReason { get; set; }

        /// <summary>
        /// Gets or Sets ContractHours
        /// </summary>
        [DataMember(Name="ContractHours", EmitDefaultValue=false)]
        public int? ContractHours { get; set; }

        /// <summary>
        /// Gets or Sets ContractMinutes
        /// </summary>
        [DataMember(Name="ContractMinutes", EmitDefaultValue=false)]
        public int? ContractMinutes { get; set; }

        /// <summary>
        /// Gets or Sets RatePerHour
        /// </summary>
        [DataMember(Name="RatePerHour", EmitDefaultValue=false)]
        public double? RatePerHour { get; set; }

        /// <summary>
        /// Gets or Sets WarningPercent
        /// </summary>
        [DataMember(Name="WarningPercent", EmitDefaultValue=false)]
        public double? WarningPercent { get; set; }

        /// <summary>
        /// Gets or Sets StartingMeter
        /// </summary>
        [DataMember(Name="StartingMeter", EmitDefaultValue=false)]
        public int? StartingMeter { get; set; }

        /// <summary>
        /// Gets or Sets MaxMeter
        /// </summary>
        [DataMember(Name="MaxMeter", EmitDefaultValue=false)]
        public int? MaxMeter { get; set; }

        /// <summary>
        /// Gets or Sets WarningClicks
        /// </summary>
        [DataMember(Name="WarningClicks", EmitDefaultValue=false)]
        public int? WarningClicks { get; set; }

        /// <summary>
        /// Gets or Sets OverageChargePerClick
        /// </summary>
        [DataMember(Name="OverageChargePerClick", EmitDefaultValue=false)]
        public double? OverageChargePerClick { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMeter
        /// </summary>
        [DataMember(Name="CurrentMeter", EmitDefaultValue=false)]
        public int? CurrentMeter { get; set; }

        /// <summary>
        /// Gets or Sets PrePaidAmount
        /// </summary>
        [DataMember(Name="PrePaidAmount", EmitDefaultValue=false)]
        public double? PrePaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaxUnits
        /// </summary>
        [DataMember(Name="MaxUnits", EmitDefaultValue=false)]
        public double? MaxUnits { get; set; }

        /// <summary>
        /// Gets or Sets ChargePerUnit
        /// </summary>
        [DataMember(Name="ChargePerUnit", EmitDefaultValue=false)]
        public double? ChargePerUnit { get; set; }

        /// <summary>
        /// Gets or Sets PeriodBaseHours
        /// </summary>
        [DataMember(Name="PeriodBaseHours", EmitDefaultValue=false)]
        public double? PeriodBaseHours { get; set; }

        /// <summary>
        /// Gets or Sets PeriodUsageCycle
        /// </summary>
        [DataMember(Name="PeriodUsageCycle", EmitDefaultValue=false)]
        public string PeriodUsageCycle { get; set; }

        /// <summary>
        /// Gets or Sets RoundingFactor
        /// </summary>
        [DataMember(Name="RoundingFactor", EmitDefaultValue=false)]
        public string RoundingFactor { get; set; }

        /// <summary>
        /// Gets or Sets AllowContractWithNoHours
        /// </summary>
        [DataMember(Name="AllowContractWithNoHours", EmitDefaultValue=false)]
        public bool? AllowContractWithNoHours { get; set; }

        /// <summary>
        /// Gets or Sets PeriodBaseClicks
        /// </summary>
        [DataMember(Name="PeriodBaseClicks", EmitDefaultValue=false)]
        public double? PeriodBaseClicks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebCreateContractModel {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BasisType: ").Append(BasisType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AllowContractWithNoPrice: ").Append(AllowContractWithNoPrice).Append("\n");
            sb.Append("  UseAsDefaultAccountContract: ").Append(UseAsDefaultAccountContract).Append("\n");
            sb.Append("  CustomersOnContract: ").Append(CustomersOnContract).Append("\n");
            sb.Append("  BillToAddressType: ").Append(BillToAddressType).Append("\n");
            sb.Append("  AlternateBillToAddressID: ").Append(AlternateBillToAddressID).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VendorContract: ").Append(VendorContract).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  CustomerPONumber: ").Append(CustomerPONumber).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  DefaultServiceOrderPriority: ").Append(DefaultServiceOrderPriority).Append("\n");
            sb.Append("  AssignedTech: ").Append(AssignedTech).Append("\n");
            sb.Append("  RepToCredit: ").Append(RepToCredit).Append("\n");
            sb.Append("  ModifiedByRepNumber: ").Append(ModifiedByRepNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  DateWritten: ").Append(DateWritten).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  UseBasePrice: ").Append(UseBasePrice).Append("\n");
            sb.Append("  UseInvoiceDateForAutoPayment: ").Append(UseInvoiceDateForAutoPayment).Append("\n");
            sb.Append("  UseLastDayOfMonthForPeriodClosing: ").Append(UseLastDayOfMonthForPeriodClosing).Append("\n");
            sb.Append("  BillOverageOnContract: ").Append(BillOverageOnContract).Append("\n");
            sb.Append("  UseBaseUsagePriceLevel: ").Append(UseBaseUsagePriceLevel).Append("\n");
            sb.Append("  UseLastDayOfBillingMonth: ").Append(UseLastDayOfBillingMonth).Append("\n");
            sb.Append("  UseLastDayOfMonthForAutoPayment: ").Append(UseLastDayOfMonthForAutoPayment).Append("\n");
            sb.Append("  BillingCycle: ").Append(BillingCycle).Append("\n");
            sb.Append("  BillingStyle: ").Append(BillingStyle).Append("\n");
            sb.Append("  SalesTaxCode: ").Append(SalesTaxCode).Append("\n");
            sb.Append("  InvoiceTerms: ").Append(InvoiceTerms).Append("\n");
            sb.Append("  GLIncomeCode: ").Append(GLIncomeCode).Append("\n");
            sb.Append("  PriceBillingText: ").Append(PriceBillingText).Append("\n");
            sb.Append("  PayMethodName: ").Append(PayMethodName).Append("\n");
            sb.Append("  BaseUsageItemID: ").Append(BaseUsageItemID).Append("\n");
            sb.Append("  OverageItemID: ").Append(OverageItemID).Append("\n");
            sb.Append("  BillDayOfMonth: ").Append(BillDayOfMonth).Append("\n");
            sb.Append("  BillStartMonth: ").Append(BillStartMonth).Append("\n");
            sb.Append("  DaysAheadToInvoice: ").Append(DaysAheadToInvoice).Append("\n");
            sb.Append("  DayOfMonthToPay: ").Append(DayOfMonthToPay).Append("\n");
            sb.Append("  PayMethod: ").Append(PayMethod).Append("\n");
            sb.Append("  LastDayOfPeriod: ").Append(LastDayOfPeriod).Append("\n");
            sb.Append("  OveragePriceLevel: ").Append(OveragePriceLevel).Append("\n");
            sb.Append("  OverageRate: ").Append(OverageRate).Append("\n");
            sb.Append("  AutoInvoice: ").Append(AutoInvoice).Append("\n");
            sb.Append("  EmailInvoice: ").Append(EmailInvoice).Append("\n");
            sb.Append("  AllowInvoiceConsolidation: ").Append(AllowInvoiceConsolidation).Append("\n");
            sb.Append("  PrintIncludesMemo: ").Append(PrintIncludesMemo).Append("\n");
            sb.Append("  PrintSpecialInstructions: ").Append(PrintSpecialInstructions).Append("\n");
            sb.Append("  AutoPay: ").Append(AutoPay).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("  GeneralNotes: ").Append(GeneralNotes).Append("\n");
            sb.Append("  TripsIncluded: ").Append(TripsIncluded).Append("\n");
            sb.Append("  TripsRemaining: ").Append(TripsRemaining).Append("\n");
            sb.Append("  ResponseHours: ").Append(ResponseHours).Append("\n");
            sb.Append("  AdditionalTripCharge: ").Append(AdditionalTripCharge).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("  UtilizeOverride: ").Append(UtilizeOverride).Append("\n");
            sb.Append("  UseLaborOverride: ").Append(UseLaborOverride).Append("\n");
            sb.Append("  BillingOverride: ").Append(BillingOverride).Append("\n");
            sb.Append("  TimeLogRateDiscount: ").Append(TimeLogRateDiscount).Append("\n");
            sb.Append("  FixedHourlyRate: ").Append(FixedHourlyRate).Append("\n");
            sb.Append("  LaborBillingType: ").Append(LaborBillingType).Append("\n");
            sb.Append("  BillingOption: ").Append(BillingOption).Append("\n");
            sb.Append("  DefaultLogReason: ").Append(DefaultLogReason).Append("\n");
            sb.Append("  ContractHours: ").Append(ContractHours).Append("\n");
            sb.Append("  ContractMinutes: ").Append(ContractMinutes).Append("\n");
            sb.Append("  RatePerHour: ").Append(RatePerHour).Append("\n");
            sb.Append("  WarningPercent: ").Append(WarningPercent).Append("\n");
            sb.Append("  StartingMeter: ").Append(StartingMeter).Append("\n");
            sb.Append("  MaxMeter: ").Append(MaxMeter).Append("\n");
            sb.Append("  WarningClicks: ").Append(WarningClicks).Append("\n");
            sb.Append("  OverageChargePerClick: ").Append(OverageChargePerClick).Append("\n");
            sb.Append("  CurrentMeter: ").Append(CurrentMeter).Append("\n");
            sb.Append("  PrePaidAmount: ").Append(PrePaidAmount).Append("\n");
            sb.Append("  MaxUnits: ").Append(MaxUnits).Append("\n");
            sb.Append("  ChargePerUnit: ").Append(ChargePerUnit).Append("\n");
            sb.Append("  PeriodBaseHours: ").Append(PeriodBaseHours).Append("\n");
            sb.Append("  PeriodUsageCycle: ").Append(PeriodUsageCycle).Append("\n");
            sb.Append("  RoundingFactor: ").Append(RoundingFactor).Append("\n");
            sb.Append("  AllowContractWithNoHours: ").Append(AllowContractWithNoHours).Append("\n");
            sb.Append("  PeriodBaseClicks: ").Append(PeriodBaseClicks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebCreateContractModel);
        }

        /// <summary>
        /// Returns true if TsiWebCreateContractModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebCreateContractModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebCreateContractModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.BasisType == input.BasisType ||
                    (this.BasisType != null &&
                    this.BasisType.Equals(input.BasisType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AllowContractWithNoPrice == input.AllowContractWithNoPrice ||
                    (this.AllowContractWithNoPrice != null &&
                    this.AllowContractWithNoPrice.Equals(input.AllowContractWithNoPrice))
                ) && 
                (
                    this.UseAsDefaultAccountContract == input.UseAsDefaultAccountContract ||
                    (this.UseAsDefaultAccountContract != null &&
                    this.UseAsDefaultAccountContract.Equals(input.UseAsDefaultAccountContract))
                ) && 
                (
                    this.CustomersOnContract == input.CustomersOnContract ||
                    this.CustomersOnContract != null &&
                    this.CustomersOnContract.SequenceEqual(input.CustomersOnContract)
                ) && 
                (
                    this.BillToAddressType == input.BillToAddressType ||
                    (this.BillToAddressType != null &&
                    this.BillToAddressType.Equals(input.BillToAddressType))
                ) && 
                (
                    this.AlternateBillToAddressID == input.AlternateBillToAddressID ||
                    (this.AlternateBillToAddressID != null &&
                    this.AlternateBillToAddressID.Equals(input.AlternateBillToAddressID))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VendorContract == input.VendorContract ||
                    (this.VendorContract != null &&
                    this.VendorContract.Equals(input.VendorContract))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.CustomerPONumber == input.CustomerPONumber ||
                    (this.CustomerPONumber != null &&
                    this.CustomerPONumber.Equals(input.CustomerPONumber))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.DefaultServiceOrderPriority == input.DefaultServiceOrderPriority ||
                    (this.DefaultServiceOrderPriority != null &&
                    this.DefaultServiceOrderPriority.Equals(input.DefaultServiceOrderPriority))
                ) && 
                (
                    this.AssignedTech == input.AssignedTech ||
                    (this.AssignedTech != null &&
                    this.AssignedTech.Equals(input.AssignedTech))
                ) && 
                (
                    this.RepToCredit == input.RepToCredit ||
                    (this.RepToCredit != null &&
                    this.RepToCredit.Equals(input.RepToCredit))
                ) && 
                (
                    this.ModifiedByRepNumber == input.ModifiedByRepNumber ||
                    (this.ModifiedByRepNumber != null &&
                    this.ModifiedByRepNumber.Equals(input.ModifiedByRepNumber))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.DateWritten == input.DateWritten ||
                    (this.DateWritten != null &&
                    this.DateWritten.Equals(input.DateWritten))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.BasePrice == input.BasePrice ||
                    (this.BasePrice != null &&
                    this.BasePrice.Equals(input.BasePrice))
                ) && 
                (
                    this.UseBasePrice == input.UseBasePrice ||
                    (this.UseBasePrice != null &&
                    this.UseBasePrice.Equals(input.UseBasePrice))
                ) && 
                (
                    this.UseInvoiceDateForAutoPayment == input.UseInvoiceDateForAutoPayment ||
                    (this.UseInvoiceDateForAutoPayment != null &&
                    this.UseInvoiceDateForAutoPayment.Equals(input.UseInvoiceDateForAutoPayment))
                ) && 
                (
                    this.UseLastDayOfMonthForPeriodClosing == input.UseLastDayOfMonthForPeriodClosing ||
                    (this.UseLastDayOfMonthForPeriodClosing != null &&
                    this.UseLastDayOfMonthForPeriodClosing.Equals(input.UseLastDayOfMonthForPeriodClosing))
                ) && 
                (
                    this.BillOverageOnContract == input.BillOverageOnContract ||
                    (this.BillOverageOnContract != null &&
                    this.BillOverageOnContract.Equals(input.BillOverageOnContract))
                ) && 
                (
                    this.UseBaseUsagePriceLevel == input.UseBaseUsagePriceLevel ||
                    (this.UseBaseUsagePriceLevel != null &&
                    this.UseBaseUsagePriceLevel.Equals(input.UseBaseUsagePriceLevel))
                ) && 
                (
                    this.UseLastDayOfBillingMonth == input.UseLastDayOfBillingMonth ||
                    (this.UseLastDayOfBillingMonth != null &&
                    this.UseLastDayOfBillingMonth.Equals(input.UseLastDayOfBillingMonth))
                ) && 
                (
                    this.UseLastDayOfMonthForAutoPayment == input.UseLastDayOfMonthForAutoPayment ||
                    (this.UseLastDayOfMonthForAutoPayment != null &&
                    this.UseLastDayOfMonthForAutoPayment.Equals(input.UseLastDayOfMonthForAutoPayment))
                ) && 
                (
                    this.BillingCycle == input.BillingCycle ||
                    (this.BillingCycle != null &&
                    this.BillingCycle.Equals(input.BillingCycle))
                ) && 
                (
                    this.BillingStyle == input.BillingStyle ||
                    (this.BillingStyle != null &&
                    this.BillingStyle.Equals(input.BillingStyle))
                ) && 
                (
                    this.SalesTaxCode == input.SalesTaxCode ||
                    (this.SalesTaxCode != null &&
                    this.SalesTaxCode.Equals(input.SalesTaxCode))
                ) && 
                (
                    this.InvoiceTerms == input.InvoiceTerms ||
                    (this.InvoiceTerms != null &&
                    this.InvoiceTerms.Equals(input.InvoiceTerms))
                ) && 
                (
                    this.GLIncomeCode == input.GLIncomeCode ||
                    (this.GLIncomeCode != null &&
                    this.GLIncomeCode.Equals(input.GLIncomeCode))
                ) && 
                (
                    this.PriceBillingText == input.PriceBillingText ||
                    (this.PriceBillingText != null &&
                    this.PriceBillingText.Equals(input.PriceBillingText))
                ) && 
                (
                    this.PayMethodName == input.PayMethodName ||
                    (this.PayMethodName != null &&
                    this.PayMethodName.Equals(input.PayMethodName))
                ) && 
                (
                    this.BaseUsageItemID == input.BaseUsageItemID ||
                    (this.BaseUsageItemID != null &&
                    this.BaseUsageItemID.Equals(input.BaseUsageItemID))
                ) && 
                (
                    this.OverageItemID == input.OverageItemID ||
                    (this.OverageItemID != null &&
                    this.OverageItemID.Equals(input.OverageItemID))
                ) && 
                (
                    this.BillDayOfMonth == input.BillDayOfMonth ||
                    (this.BillDayOfMonth != null &&
                    this.BillDayOfMonth.Equals(input.BillDayOfMonth))
                ) && 
                (
                    this.BillStartMonth == input.BillStartMonth ||
                    (this.BillStartMonth != null &&
                    this.BillStartMonth.Equals(input.BillStartMonth))
                ) && 
                (
                    this.DaysAheadToInvoice == input.DaysAheadToInvoice ||
                    (this.DaysAheadToInvoice != null &&
                    this.DaysAheadToInvoice.Equals(input.DaysAheadToInvoice))
                ) && 
                (
                    this.DayOfMonthToPay == input.DayOfMonthToPay ||
                    (this.DayOfMonthToPay != null &&
                    this.DayOfMonthToPay.Equals(input.DayOfMonthToPay))
                ) && 
                (
                    this.PayMethod == input.PayMethod ||
                    (this.PayMethod != null &&
                    this.PayMethod.Equals(input.PayMethod))
                ) && 
                (
                    this.LastDayOfPeriod == input.LastDayOfPeriod ||
                    (this.LastDayOfPeriod != null &&
                    this.LastDayOfPeriod.Equals(input.LastDayOfPeriod))
                ) && 
                (
                    this.OveragePriceLevel == input.OveragePriceLevel ||
                    (this.OveragePriceLevel != null &&
                    this.OveragePriceLevel.Equals(input.OveragePriceLevel))
                ) && 
                (
                    this.OverageRate == input.OverageRate ||
                    (this.OverageRate != null &&
                    this.OverageRate.Equals(input.OverageRate))
                ) && 
                (
                    this.AutoInvoice == input.AutoInvoice ||
                    (this.AutoInvoice != null &&
                    this.AutoInvoice.Equals(input.AutoInvoice))
                ) && 
                (
                    this.EmailInvoice == input.EmailInvoice ||
                    (this.EmailInvoice != null &&
                    this.EmailInvoice.Equals(input.EmailInvoice))
                ) && 
                (
                    this.AllowInvoiceConsolidation == input.AllowInvoiceConsolidation ||
                    (this.AllowInvoiceConsolidation != null &&
                    this.AllowInvoiceConsolidation.Equals(input.AllowInvoiceConsolidation))
                ) && 
                (
                    this.PrintIncludesMemo == input.PrintIncludesMemo ||
                    (this.PrintIncludesMemo != null &&
                    this.PrintIncludesMemo.Equals(input.PrintIncludesMemo))
                ) && 
                (
                    this.PrintSpecialInstructions == input.PrintSpecialInstructions ||
                    (this.PrintSpecialInstructions != null &&
                    this.PrintSpecialInstructions.Equals(input.PrintSpecialInstructions))
                ) && 
                (
                    this.AutoPay == input.AutoPay ||
                    (this.AutoPay != null &&
                    this.AutoPay.Equals(input.AutoPay))
                ) && 
                (
                    this.Includes == input.Includes ||
                    (this.Includes != null &&
                    this.Includes.Equals(input.Includes))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                ) && 
                (
                    this.GeneralNotes == input.GeneralNotes ||
                    (this.GeneralNotes != null &&
                    this.GeneralNotes.Equals(input.GeneralNotes))
                ) && 
                (
                    this.TripsIncluded == input.TripsIncluded ||
                    (this.TripsIncluded != null &&
                    this.TripsIncluded.Equals(input.TripsIncluded))
                ) && 
                (
                    this.TripsRemaining == input.TripsRemaining ||
                    (this.TripsRemaining != null &&
                    this.TripsRemaining.Equals(input.TripsRemaining))
                ) && 
                (
                    this.ResponseHours == input.ResponseHours ||
                    (this.ResponseHours != null &&
                    this.ResponseHours.Equals(input.ResponseHours))
                ) && 
                (
                    this.AdditionalTripCharge == input.AdditionalTripCharge ||
                    (this.AdditionalTripCharge != null &&
                    this.AdditionalTripCharge.Equals(input.AdditionalTripCharge))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                ) && 
                (
                    this.UtilizeOverride == input.UtilizeOverride ||
                    (this.UtilizeOverride != null &&
                    this.UtilizeOverride.Equals(input.UtilizeOverride))
                ) && 
                (
                    this.UseLaborOverride == input.UseLaborOverride ||
                    (this.UseLaborOverride != null &&
                    this.UseLaborOverride.Equals(input.UseLaborOverride))
                ) && 
                (
                    this.BillingOverride == input.BillingOverride ||
                    (this.BillingOverride != null &&
                    this.BillingOverride.Equals(input.BillingOverride))
                ) && 
                (
                    this.TimeLogRateDiscount == input.TimeLogRateDiscount ||
                    (this.TimeLogRateDiscount != null &&
                    this.TimeLogRateDiscount.Equals(input.TimeLogRateDiscount))
                ) && 
                (
                    this.FixedHourlyRate == input.FixedHourlyRate ||
                    (this.FixedHourlyRate != null &&
                    this.FixedHourlyRate.Equals(input.FixedHourlyRate))
                ) && 
                (
                    this.LaborBillingType == input.LaborBillingType ||
                    (this.LaborBillingType != null &&
                    this.LaborBillingType.Equals(input.LaborBillingType))
                ) && 
                (
                    this.BillingOption == input.BillingOption ||
                    (this.BillingOption != null &&
                    this.BillingOption.Equals(input.BillingOption))
                ) && 
                (
                    this.DefaultLogReason == input.DefaultLogReason ||
                    (this.DefaultLogReason != null &&
                    this.DefaultLogReason.Equals(input.DefaultLogReason))
                ) && 
                (
                    this.ContractHours == input.ContractHours ||
                    (this.ContractHours != null &&
                    this.ContractHours.Equals(input.ContractHours))
                ) && 
                (
                    this.ContractMinutes == input.ContractMinutes ||
                    (this.ContractMinutes != null &&
                    this.ContractMinutes.Equals(input.ContractMinutes))
                ) && 
                (
                    this.RatePerHour == input.RatePerHour ||
                    (this.RatePerHour != null &&
                    this.RatePerHour.Equals(input.RatePerHour))
                ) && 
                (
                    this.WarningPercent == input.WarningPercent ||
                    (this.WarningPercent != null &&
                    this.WarningPercent.Equals(input.WarningPercent))
                ) && 
                (
                    this.StartingMeter == input.StartingMeter ||
                    (this.StartingMeter != null &&
                    this.StartingMeter.Equals(input.StartingMeter))
                ) && 
                (
                    this.MaxMeter == input.MaxMeter ||
                    (this.MaxMeter != null &&
                    this.MaxMeter.Equals(input.MaxMeter))
                ) && 
                (
                    this.WarningClicks == input.WarningClicks ||
                    (this.WarningClicks != null &&
                    this.WarningClicks.Equals(input.WarningClicks))
                ) && 
                (
                    this.OverageChargePerClick == input.OverageChargePerClick ||
                    (this.OverageChargePerClick != null &&
                    this.OverageChargePerClick.Equals(input.OverageChargePerClick))
                ) && 
                (
                    this.CurrentMeter == input.CurrentMeter ||
                    (this.CurrentMeter != null &&
                    this.CurrentMeter.Equals(input.CurrentMeter))
                ) && 
                (
                    this.PrePaidAmount == input.PrePaidAmount ||
                    (this.PrePaidAmount != null &&
                    this.PrePaidAmount.Equals(input.PrePaidAmount))
                ) && 
                (
                    this.MaxUnits == input.MaxUnits ||
                    (this.MaxUnits != null &&
                    this.MaxUnits.Equals(input.MaxUnits))
                ) && 
                (
                    this.ChargePerUnit == input.ChargePerUnit ||
                    (this.ChargePerUnit != null &&
                    this.ChargePerUnit.Equals(input.ChargePerUnit))
                ) && 
                (
                    this.PeriodBaseHours == input.PeriodBaseHours ||
                    (this.PeriodBaseHours != null &&
                    this.PeriodBaseHours.Equals(input.PeriodBaseHours))
                ) && 
                (
                    this.PeriodUsageCycle == input.PeriodUsageCycle ||
                    (this.PeriodUsageCycle != null &&
                    this.PeriodUsageCycle.Equals(input.PeriodUsageCycle))
                ) && 
                (
                    this.RoundingFactor == input.RoundingFactor ||
                    (this.RoundingFactor != null &&
                    this.RoundingFactor.Equals(input.RoundingFactor))
                ) && 
                (
                    this.AllowContractWithNoHours == input.AllowContractWithNoHours ||
                    (this.AllowContractWithNoHours != null &&
                    this.AllowContractWithNoHours.Equals(input.AllowContractWithNoHours))
                ) && 
                (
                    this.PeriodBaseClicks == input.PeriodBaseClicks ||
                    (this.PeriodBaseClicks != null &&
                    this.PeriodBaseClicks.Equals(input.PeriodBaseClicks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.BasisType != null)
                    hashCode = hashCode * 59 + this.BasisType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AllowContractWithNoPrice != null)
                    hashCode = hashCode * 59 + this.AllowContractWithNoPrice.GetHashCode();
                if (this.UseAsDefaultAccountContract != null)
                    hashCode = hashCode * 59 + this.UseAsDefaultAccountContract.GetHashCode();
                if (this.CustomersOnContract != null)
                    hashCode = hashCode * 59 + this.CustomersOnContract.GetHashCode();
                if (this.BillToAddressType != null)
                    hashCode = hashCode * 59 + this.BillToAddressType.GetHashCode();
                if (this.AlternateBillToAddressID != null)
                    hashCode = hashCode * 59 + this.AlternateBillToAddressID.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.ContractType != null)
                    hashCode = hashCode * 59 + this.ContractType.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VendorContract != null)
                    hashCode = hashCode * 59 + this.VendorContract.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.CustomerPONumber != null)
                    hashCode = hashCode * 59 + this.CustomerPONumber.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.DefaultServiceOrderPriority != null)
                    hashCode = hashCode * 59 + this.DefaultServiceOrderPriority.GetHashCode();
                if (this.AssignedTech != null)
                    hashCode = hashCode * 59 + this.AssignedTech.GetHashCode();
                if (this.RepToCredit != null)
                    hashCode = hashCode * 59 + this.RepToCredit.GetHashCode();
                if (this.ModifiedByRepNumber != null)
                    hashCode = hashCode * 59 + this.ModifiedByRepNumber.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.DateWritten != null)
                    hashCode = hashCode * 59 + this.DateWritten.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.BasePrice != null)
                    hashCode = hashCode * 59 + this.BasePrice.GetHashCode();
                if (this.UseBasePrice != null)
                    hashCode = hashCode * 59 + this.UseBasePrice.GetHashCode();
                if (this.UseInvoiceDateForAutoPayment != null)
                    hashCode = hashCode * 59 + this.UseInvoiceDateForAutoPayment.GetHashCode();
                if (this.UseLastDayOfMonthForPeriodClosing != null)
                    hashCode = hashCode * 59 + this.UseLastDayOfMonthForPeriodClosing.GetHashCode();
                if (this.BillOverageOnContract != null)
                    hashCode = hashCode * 59 + this.BillOverageOnContract.GetHashCode();
                if (this.UseBaseUsagePriceLevel != null)
                    hashCode = hashCode * 59 + this.UseBaseUsagePriceLevel.GetHashCode();
                if (this.UseLastDayOfBillingMonth != null)
                    hashCode = hashCode * 59 + this.UseLastDayOfBillingMonth.GetHashCode();
                if (this.UseLastDayOfMonthForAutoPayment != null)
                    hashCode = hashCode * 59 + this.UseLastDayOfMonthForAutoPayment.GetHashCode();
                if (this.BillingCycle != null)
                    hashCode = hashCode * 59 + this.BillingCycle.GetHashCode();
                if (this.BillingStyle != null)
                    hashCode = hashCode * 59 + this.BillingStyle.GetHashCode();
                if (this.SalesTaxCode != null)
                    hashCode = hashCode * 59 + this.SalesTaxCode.GetHashCode();
                if (this.InvoiceTerms != null)
                    hashCode = hashCode * 59 + this.InvoiceTerms.GetHashCode();
                if (this.GLIncomeCode != null)
                    hashCode = hashCode * 59 + this.GLIncomeCode.GetHashCode();
                if (this.PriceBillingText != null)
                    hashCode = hashCode * 59 + this.PriceBillingText.GetHashCode();
                if (this.PayMethodName != null)
                    hashCode = hashCode * 59 + this.PayMethodName.GetHashCode();
                if (this.BaseUsageItemID != null)
                    hashCode = hashCode * 59 + this.BaseUsageItemID.GetHashCode();
                if (this.OverageItemID != null)
                    hashCode = hashCode * 59 + this.OverageItemID.GetHashCode();
                if (this.BillDayOfMonth != null)
                    hashCode = hashCode * 59 + this.BillDayOfMonth.GetHashCode();
                if (this.BillStartMonth != null)
                    hashCode = hashCode * 59 + this.BillStartMonth.GetHashCode();
                if (this.DaysAheadToInvoice != null)
                    hashCode = hashCode * 59 + this.DaysAheadToInvoice.GetHashCode();
                if (this.DayOfMonthToPay != null)
                    hashCode = hashCode * 59 + this.DayOfMonthToPay.GetHashCode();
                if (this.PayMethod != null)
                    hashCode = hashCode * 59 + this.PayMethod.GetHashCode();
                if (this.LastDayOfPeriod != null)
                    hashCode = hashCode * 59 + this.LastDayOfPeriod.GetHashCode();
                if (this.OveragePriceLevel != null)
                    hashCode = hashCode * 59 + this.OveragePriceLevel.GetHashCode();
                if (this.OverageRate != null)
                    hashCode = hashCode * 59 + this.OverageRate.GetHashCode();
                if (this.AutoInvoice != null)
                    hashCode = hashCode * 59 + this.AutoInvoice.GetHashCode();
                if (this.EmailInvoice != null)
                    hashCode = hashCode * 59 + this.EmailInvoice.GetHashCode();
                if (this.AllowInvoiceConsolidation != null)
                    hashCode = hashCode * 59 + this.AllowInvoiceConsolidation.GetHashCode();
                if (this.PrintIncludesMemo != null)
                    hashCode = hashCode * 59 + this.PrintIncludesMemo.GetHashCode();
                if (this.PrintSpecialInstructions != null)
                    hashCode = hashCode * 59 + this.PrintSpecialInstructions.GetHashCode();
                if (this.AutoPay != null)
                    hashCode = hashCode * 59 + this.AutoPay.GetHashCode();
                if (this.Includes != null)
                    hashCode = hashCode * 59 + this.Includes.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                if (this.GeneralNotes != null)
                    hashCode = hashCode * 59 + this.GeneralNotes.GetHashCode();
                if (this.TripsIncluded != null)
                    hashCode = hashCode * 59 + this.TripsIncluded.GetHashCode();
                if (this.TripsRemaining != null)
                    hashCode = hashCode * 59 + this.TripsRemaining.GetHashCode();
                if (this.ResponseHours != null)
                    hashCode = hashCode * 59 + this.ResponseHours.GetHashCode();
                if (this.AdditionalTripCharge != null)
                    hashCode = hashCode * 59 + this.AdditionalTripCharge.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                if (this.UtilizeOverride != null)
                    hashCode = hashCode * 59 + this.UtilizeOverride.GetHashCode();
                if (this.UseLaborOverride != null)
                    hashCode = hashCode * 59 + this.UseLaborOverride.GetHashCode();
                if (this.BillingOverride != null)
                    hashCode = hashCode * 59 + this.BillingOverride.GetHashCode();
                if (this.TimeLogRateDiscount != null)
                    hashCode = hashCode * 59 + this.TimeLogRateDiscount.GetHashCode();
                if (this.FixedHourlyRate != null)
                    hashCode = hashCode * 59 + this.FixedHourlyRate.GetHashCode();
                if (this.LaborBillingType != null)
                    hashCode = hashCode * 59 + this.LaborBillingType.GetHashCode();
                if (this.BillingOption != null)
                    hashCode = hashCode * 59 + this.BillingOption.GetHashCode();
                if (this.DefaultLogReason != null)
                    hashCode = hashCode * 59 + this.DefaultLogReason.GetHashCode();
                if (this.ContractHours != null)
                    hashCode = hashCode * 59 + this.ContractHours.GetHashCode();
                if (this.ContractMinutes != null)
                    hashCode = hashCode * 59 + this.ContractMinutes.GetHashCode();
                if (this.RatePerHour != null)
                    hashCode = hashCode * 59 + this.RatePerHour.GetHashCode();
                if (this.WarningPercent != null)
                    hashCode = hashCode * 59 + this.WarningPercent.GetHashCode();
                if (this.StartingMeter != null)
                    hashCode = hashCode * 59 + this.StartingMeter.GetHashCode();
                if (this.MaxMeter != null)
                    hashCode = hashCode * 59 + this.MaxMeter.GetHashCode();
                if (this.WarningClicks != null)
                    hashCode = hashCode * 59 + this.WarningClicks.GetHashCode();
                if (this.OverageChargePerClick != null)
                    hashCode = hashCode * 59 + this.OverageChargePerClick.GetHashCode();
                if (this.CurrentMeter != null)
                    hashCode = hashCode * 59 + this.CurrentMeter.GetHashCode();
                if (this.PrePaidAmount != null)
                    hashCode = hashCode * 59 + this.PrePaidAmount.GetHashCode();
                if (this.MaxUnits != null)
                    hashCode = hashCode * 59 + this.MaxUnits.GetHashCode();
                if (this.ChargePerUnit != null)
                    hashCode = hashCode * 59 + this.ChargePerUnit.GetHashCode();
                if (this.PeriodBaseHours != null)
                    hashCode = hashCode * 59 + this.PeriodBaseHours.GetHashCode();
                if (this.PeriodUsageCycle != null)
                    hashCode = hashCode * 59 + this.PeriodUsageCycle.GetHashCode();
                if (this.RoundingFactor != null)
                    hashCode = hashCode * 59 + this.RoundingFactor.GetHashCode();
                if (this.AllowContractWithNoHours != null)
                    hashCode = hashCode * 59 + this.AllowContractWithNoHours.GetHashCode();
                if (this.PeriodBaseClicks != null)
                    hashCode = hashCode * 59 + this.PeriodBaseClicks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
