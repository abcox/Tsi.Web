/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebCreateQuoteDetailSubTotalModel
    /// </summary>
    [DataContract]
    public partial class TsiWebCreateQuoteDetailSubTotalModel :  IEquatable<TsiWebCreateQuoteDetailSubTotalModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebCreateQuoteDetailSubTotalModel" /> class.
        /// </summary>
        /// <param name="headerDescription">headerDescription.</param>
        /// <param name="footerDescription">footerDescription.</param>
        /// <param name="headerLineNumber">headerLineNumber.</param>
        /// <param name="footerLineNumber">footerLineNumber.</param>
        /// <param name="printSubtotalInHeader">printSubtotalInHeader.</param>
        /// <param name="printOnQuote">printOnQuote.</param>
        public TsiWebCreateQuoteDetailSubTotalModel(string headerDescription = default(string), string footerDescription = default(string), int? headerLineNumber = default(int?), int? footerLineNumber = default(int?), bool? printSubtotalInHeader = default(bool?), bool? printOnQuote = default(bool?))
        {
            this.HeaderDescription = headerDescription;
            this.FooterDescription = footerDescription;
            this.HeaderLineNumber = headerLineNumber;
            this.FooterLineNumber = footerLineNumber;
            this.PrintSubtotalInHeader = printSubtotalInHeader;
            this.PrintOnQuote = printOnQuote;
        }
        
        /// <summary>
        /// Gets or Sets HeaderDescription
        /// </summary>
        [DataMember(Name="HeaderDescription", EmitDefaultValue=false)]
        public string HeaderDescription { get; set; }

        /// <summary>
        /// Gets or Sets FooterDescription
        /// </summary>
        [DataMember(Name="FooterDescription", EmitDefaultValue=false)]
        public string FooterDescription { get; set; }

        /// <summary>
        /// Gets or Sets HeaderLineNumber
        /// </summary>
        [DataMember(Name="HeaderLineNumber", EmitDefaultValue=false)]
        public int? HeaderLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets FooterLineNumber
        /// </summary>
        [DataMember(Name="FooterLineNumber", EmitDefaultValue=false)]
        public int? FooterLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrintSubtotalInHeader
        /// </summary>
        [DataMember(Name="PrintSubtotalInHeader", EmitDefaultValue=false)]
        public bool? PrintSubtotalInHeader { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnQuote
        /// </summary>
        [DataMember(Name="PrintOnQuote", EmitDefaultValue=false)]
        public bool? PrintOnQuote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebCreateQuoteDetailSubTotalModel {\n");
            sb.Append("  HeaderDescription: ").Append(HeaderDescription).Append("\n");
            sb.Append("  FooterDescription: ").Append(FooterDescription).Append("\n");
            sb.Append("  HeaderLineNumber: ").Append(HeaderLineNumber).Append("\n");
            sb.Append("  FooterLineNumber: ").Append(FooterLineNumber).Append("\n");
            sb.Append("  PrintSubtotalInHeader: ").Append(PrintSubtotalInHeader).Append("\n");
            sb.Append("  PrintOnQuote: ").Append(PrintOnQuote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebCreateQuoteDetailSubTotalModel);
        }

        /// <summary>
        /// Returns true if TsiWebCreateQuoteDetailSubTotalModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebCreateQuoteDetailSubTotalModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebCreateQuoteDetailSubTotalModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HeaderDescription == input.HeaderDescription ||
                    (this.HeaderDescription != null &&
                    this.HeaderDescription.Equals(input.HeaderDescription))
                ) && 
                (
                    this.FooterDescription == input.FooterDescription ||
                    (this.FooterDescription != null &&
                    this.FooterDescription.Equals(input.FooterDescription))
                ) && 
                (
                    this.HeaderLineNumber == input.HeaderLineNumber ||
                    (this.HeaderLineNumber != null &&
                    this.HeaderLineNumber.Equals(input.HeaderLineNumber))
                ) && 
                (
                    this.FooterLineNumber == input.FooterLineNumber ||
                    (this.FooterLineNumber != null &&
                    this.FooterLineNumber.Equals(input.FooterLineNumber))
                ) && 
                (
                    this.PrintSubtotalInHeader == input.PrintSubtotalInHeader ||
                    (this.PrintSubtotalInHeader != null &&
                    this.PrintSubtotalInHeader.Equals(input.PrintSubtotalInHeader))
                ) && 
                (
                    this.PrintOnQuote == input.PrintOnQuote ||
                    (this.PrintOnQuote != null &&
                    this.PrintOnQuote.Equals(input.PrintOnQuote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HeaderDescription != null)
                    hashCode = hashCode * 59 + this.HeaderDescription.GetHashCode();
                if (this.FooterDescription != null)
                    hashCode = hashCode * 59 + this.FooterDescription.GetHashCode();
                if (this.HeaderLineNumber != null)
                    hashCode = hashCode * 59 + this.HeaderLineNumber.GetHashCode();
                if (this.FooterLineNumber != null)
                    hashCode = hashCode * 59 + this.FooterLineNumber.GetHashCode();
                if (this.PrintSubtotalInHeader != null)
                    hashCode = hashCode * 59 + this.PrintSubtotalInHeader.GetHashCode();
                if (this.PrintOnQuote != null)
                    hashCode = hashCode * 59 + this.PrintOnQuote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
