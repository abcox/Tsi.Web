/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebCreateServiceOrderItemServicedModel
    /// </summary>
    [DataContract]
    public partial class TsiWebCreateServiceOrderItemServicedModel :  IEquatable<TsiWebCreateServiceOrderItemServicedModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebCreateServiceOrderItemServicedModel" /> class.
        /// </summary>
        /// <param name="createItemServicedType">createItemServicedType.</param>
        /// <param name="customerInventoryNumber">customerInventoryNumber.</param>
        /// <param name="contractDetailNumber">contractDetailNumber.</param>
        /// <param name="managedAccountAssetNumber">managedAccountAssetNumber.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="meterReading">meterReading.</param>
        /// <param name="clicksUsed">clicksUsed.</param>
        /// <param name="itemID">itemID.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="location">location.</param>
        /// <param name="problem">problem.</param>
        /// <param name="repair">repair.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="warrantyCovered">warrantyCovered.</param>
        /// <param name="updateContractMetersType">updateContractMetersType.</param>
        /// <param name="completeDate">completeDate.</param>
        /// <param name="lastPreventativeMaintenanceDate">lastPreventativeMaintenanceDate.</param>
        /// <param name="nextPreventativeMaintenanceDate">nextPreventativeMaintenanceDate.</param>
        /// <param name="symptom1">symptom1.</param>
        /// <param name="symptom2">symptom2.</param>
        /// <param name="symptom3">symptom3.</param>
        /// <param name="symptom4">symptom4.</param>
        /// <param name="symptom5">symptom5.</param>
        /// <param name="resolution1">resolution1.</param>
        /// <param name="resolution2">resolution2.</param>
        /// <param name="resolution3">resolution3.</param>
        /// <param name="resolution4">resolution4.</param>
        /// <param name="resolution5">resolution5.</param>
        /// <param name="addItemToCustomerAssets">addItemToCustomerAssets.</param>
        /// <param name="includeAssemblyDetailsWhenAddedToCustomerAssets">includeAssemblyDetailsWhenAddedToCustomerAssets.</param>
        /// <param name="allowDecreasedMeterReadings">allowDecreasedMeterReadings.</param>
        public TsiWebCreateServiceOrderItemServicedModel(string createItemServicedType = default(string), int? customerInventoryNumber = default(int?), int? contractDetailNumber = default(int?), int? managedAccountAssetNumber = default(int?), int? quantity = default(int?), int? meterReading = default(int?), int? clicksUsed = default(int?), string itemID = default(string), string itemDescription = default(string), string location = default(string), string problem = default(string), string repair = default(string), string serialNumber = default(string), bool? warrantyCovered = default(bool?), string updateContractMetersType = default(string), SystemNullableTsiWebOptionalDateTime completeDate = default(SystemNullableTsiWebOptionalDateTime), SystemNullableTsiWebOptionalDateTime lastPreventativeMaintenanceDate = default(SystemNullableTsiWebOptionalDateTime), SystemNullableTsiWebOptionalDateTime nextPreventativeMaintenanceDate = default(SystemNullableTsiWebOptionalDateTime), string symptom1 = default(string), string symptom2 = default(string), string symptom3 = default(string), string symptom4 = default(string), string symptom5 = default(string), string resolution1 = default(string), string resolution2 = default(string), string resolution3 = default(string), string resolution4 = default(string), string resolution5 = default(string), bool? addItemToCustomerAssets = default(bool?), bool? includeAssemblyDetailsWhenAddedToCustomerAssets = default(bool?), bool? allowDecreasedMeterReadings = default(bool?))
        {
            this.CreateItemServicedType = createItemServicedType;
            this.CustomerInventoryNumber = customerInventoryNumber;
            this.ContractDetailNumber = contractDetailNumber;
            this.ManagedAccountAssetNumber = managedAccountAssetNumber;
            this.Quantity = quantity;
            this.MeterReading = meterReading;
            this.ClicksUsed = clicksUsed;
            this.ItemID = itemID;
            this.ItemDescription = itemDescription;
            this.Location = location;
            this.Problem = problem;
            this.Repair = repair;
            this.SerialNumber = serialNumber;
            this.WarrantyCovered = warrantyCovered;
            this.UpdateContractMetersType = updateContractMetersType;
            this.CompleteDate = completeDate;
            this.LastPreventativeMaintenanceDate = lastPreventativeMaintenanceDate;
            this.NextPreventativeMaintenanceDate = nextPreventativeMaintenanceDate;
            this.Symptom1 = symptom1;
            this.Symptom2 = symptom2;
            this.Symptom3 = symptom3;
            this.Symptom4 = symptom4;
            this.Symptom5 = symptom5;
            this.Resolution1 = resolution1;
            this.Resolution2 = resolution2;
            this.Resolution3 = resolution3;
            this.Resolution4 = resolution4;
            this.Resolution5 = resolution5;
            this.AddItemToCustomerAssets = addItemToCustomerAssets;
            this.IncludeAssemblyDetailsWhenAddedToCustomerAssets = includeAssemblyDetailsWhenAddedToCustomerAssets;
            this.AllowDecreasedMeterReadings = allowDecreasedMeterReadings;
        }
        
        /// <summary>
        /// Gets or Sets CreateItemServicedType
        /// </summary>
        [DataMember(Name="CreateItemServicedType", EmitDefaultValue=false)]
        public string CreateItemServicedType { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInventoryNumber
        /// </summary>
        [DataMember(Name="CustomerInventoryNumber", EmitDefaultValue=false)]
        public int? CustomerInventoryNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContractDetailNumber
        /// </summary>
        [DataMember(Name="ContractDetailNumber", EmitDefaultValue=false)]
        public int? ContractDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets ManagedAccountAssetNumber
        /// </summary>
        [DataMember(Name="ManagedAccountAssetNumber", EmitDefaultValue=false)]
        public int? ManagedAccountAssetNumber { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets MeterReading
        /// </summary>
        [DataMember(Name="MeterReading", EmitDefaultValue=false)]
        public int? MeterReading { get; set; }

        /// <summary>
        /// Gets or Sets ClicksUsed
        /// </summary>
        [DataMember(Name="ClicksUsed", EmitDefaultValue=false)]
        public int? ClicksUsed { get; set; }

        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Problem
        /// </summary>
        [DataMember(Name="Problem", EmitDefaultValue=false)]
        public string Problem { get; set; }

        /// <summary>
        /// Gets or Sets Repair
        /// </summary>
        [DataMember(Name="Repair", EmitDefaultValue=false)]
        public string Repair { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="SerialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyCovered
        /// </summary>
        [DataMember(Name="WarrantyCovered", EmitDefaultValue=false)]
        public bool? WarrantyCovered { get; set; }

        /// <summary>
        /// Gets or Sets UpdateContractMetersType
        /// </summary>
        [DataMember(Name="UpdateContractMetersType", EmitDefaultValue=false)]
        public string UpdateContractMetersType { get; set; }

        /// <summary>
        /// Gets or Sets CompleteDate
        /// </summary>
        [DataMember(Name="CompleteDate", EmitDefaultValue=false)]
        public SystemNullableTsiWebOptionalDateTime CompleteDate { get; set; }

        /// <summary>
        /// Gets or Sets LastPreventativeMaintenanceDate
        /// </summary>
        [DataMember(Name="LastPreventativeMaintenanceDate", EmitDefaultValue=false)]
        public SystemNullableTsiWebOptionalDateTime LastPreventativeMaintenanceDate { get; set; }

        /// <summary>
        /// Gets or Sets NextPreventativeMaintenanceDate
        /// </summary>
        [DataMember(Name="NextPreventativeMaintenanceDate", EmitDefaultValue=false)]
        public SystemNullableTsiWebOptionalDateTime NextPreventativeMaintenanceDate { get; set; }

        /// <summary>
        /// Gets or Sets Symptom1
        /// </summary>
        [DataMember(Name="Symptom1", EmitDefaultValue=false)]
        public string Symptom1 { get; set; }

        /// <summary>
        /// Gets or Sets Symptom2
        /// </summary>
        [DataMember(Name="Symptom2", EmitDefaultValue=false)]
        public string Symptom2 { get; set; }

        /// <summary>
        /// Gets or Sets Symptom3
        /// </summary>
        [DataMember(Name="Symptom3", EmitDefaultValue=false)]
        public string Symptom3 { get; set; }

        /// <summary>
        /// Gets or Sets Symptom4
        /// </summary>
        [DataMember(Name="Symptom4", EmitDefaultValue=false)]
        public string Symptom4 { get; set; }

        /// <summary>
        /// Gets or Sets Symptom5
        /// </summary>
        [DataMember(Name="Symptom5", EmitDefaultValue=false)]
        public string Symptom5 { get; set; }

        /// <summary>
        /// Gets or Sets Resolution1
        /// </summary>
        [DataMember(Name="Resolution1", EmitDefaultValue=false)]
        public string Resolution1 { get; set; }

        /// <summary>
        /// Gets or Sets Resolution2
        /// </summary>
        [DataMember(Name="Resolution2", EmitDefaultValue=false)]
        public string Resolution2 { get; set; }

        /// <summary>
        /// Gets or Sets Resolution3
        /// </summary>
        [DataMember(Name="Resolution3", EmitDefaultValue=false)]
        public string Resolution3 { get; set; }

        /// <summary>
        /// Gets or Sets Resolution4
        /// </summary>
        [DataMember(Name="Resolution4", EmitDefaultValue=false)]
        public string Resolution4 { get; set; }

        /// <summary>
        /// Gets or Sets Resolution5
        /// </summary>
        [DataMember(Name="Resolution5", EmitDefaultValue=false)]
        public string Resolution5 { get; set; }

        /// <summary>
        /// Gets or Sets AddItemToCustomerAssets
        /// </summary>
        [DataMember(Name="AddItemToCustomerAssets", EmitDefaultValue=false)]
        public bool? AddItemToCustomerAssets { get; set; }

        /// <summary>
        /// Gets or Sets IncludeAssemblyDetailsWhenAddedToCustomerAssets
        /// </summary>
        [DataMember(Name="IncludeAssemblyDetailsWhenAddedToCustomerAssets", EmitDefaultValue=false)]
        public bool? IncludeAssemblyDetailsWhenAddedToCustomerAssets { get; set; }

        /// <summary>
        /// Gets or Sets AllowDecreasedMeterReadings
        /// </summary>
        [DataMember(Name="AllowDecreasedMeterReadings", EmitDefaultValue=false)]
        public bool? AllowDecreasedMeterReadings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebCreateServiceOrderItemServicedModel {\n");
            sb.Append("  CreateItemServicedType: ").Append(CreateItemServicedType).Append("\n");
            sb.Append("  CustomerInventoryNumber: ").Append(CustomerInventoryNumber).Append("\n");
            sb.Append("  ContractDetailNumber: ").Append(ContractDetailNumber).Append("\n");
            sb.Append("  ManagedAccountAssetNumber: ").Append(ManagedAccountAssetNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  MeterReading: ").Append(MeterReading).Append("\n");
            sb.Append("  ClicksUsed: ").Append(ClicksUsed).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  Repair: ").Append(Repair).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  WarrantyCovered: ").Append(WarrantyCovered).Append("\n");
            sb.Append("  UpdateContractMetersType: ").Append(UpdateContractMetersType).Append("\n");
            sb.Append("  CompleteDate: ").Append(CompleteDate).Append("\n");
            sb.Append("  LastPreventativeMaintenanceDate: ").Append(LastPreventativeMaintenanceDate).Append("\n");
            sb.Append("  NextPreventativeMaintenanceDate: ").Append(NextPreventativeMaintenanceDate).Append("\n");
            sb.Append("  Symptom1: ").Append(Symptom1).Append("\n");
            sb.Append("  Symptom2: ").Append(Symptom2).Append("\n");
            sb.Append("  Symptom3: ").Append(Symptom3).Append("\n");
            sb.Append("  Symptom4: ").Append(Symptom4).Append("\n");
            sb.Append("  Symptom5: ").Append(Symptom5).Append("\n");
            sb.Append("  Resolution1: ").Append(Resolution1).Append("\n");
            sb.Append("  Resolution2: ").Append(Resolution2).Append("\n");
            sb.Append("  Resolution3: ").Append(Resolution3).Append("\n");
            sb.Append("  Resolution4: ").Append(Resolution4).Append("\n");
            sb.Append("  Resolution5: ").Append(Resolution5).Append("\n");
            sb.Append("  AddItemToCustomerAssets: ").Append(AddItemToCustomerAssets).Append("\n");
            sb.Append("  IncludeAssemblyDetailsWhenAddedToCustomerAssets: ").Append(IncludeAssemblyDetailsWhenAddedToCustomerAssets).Append("\n");
            sb.Append("  AllowDecreasedMeterReadings: ").Append(AllowDecreasedMeterReadings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebCreateServiceOrderItemServicedModel);
        }

        /// <summary>
        /// Returns true if TsiWebCreateServiceOrderItemServicedModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebCreateServiceOrderItemServicedModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebCreateServiceOrderItemServicedModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateItemServicedType == input.CreateItemServicedType ||
                    (this.CreateItemServicedType != null &&
                    this.CreateItemServicedType.Equals(input.CreateItemServicedType))
                ) && 
                (
                    this.CustomerInventoryNumber == input.CustomerInventoryNumber ||
                    (this.CustomerInventoryNumber != null &&
                    this.CustomerInventoryNumber.Equals(input.CustomerInventoryNumber))
                ) && 
                (
                    this.ContractDetailNumber == input.ContractDetailNumber ||
                    (this.ContractDetailNumber != null &&
                    this.ContractDetailNumber.Equals(input.ContractDetailNumber))
                ) && 
                (
                    this.ManagedAccountAssetNumber == input.ManagedAccountAssetNumber ||
                    (this.ManagedAccountAssetNumber != null &&
                    this.ManagedAccountAssetNumber.Equals(input.ManagedAccountAssetNumber))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.MeterReading == input.MeterReading ||
                    (this.MeterReading != null &&
                    this.MeterReading.Equals(input.MeterReading))
                ) && 
                (
                    this.ClicksUsed == input.ClicksUsed ||
                    (this.ClicksUsed != null &&
                    this.ClicksUsed.Equals(input.ClicksUsed))
                ) && 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Problem == input.Problem ||
                    (this.Problem != null &&
                    this.Problem.Equals(input.Problem))
                ) && 
                (
                    this.Repair == input.Repair ||
                    (this.Repair != null &&
                    this.Repair.Equals(input.Repair))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.WarrantyCovered == input.WarrantyCovered ||
                    (this.WarrantyCovered != null &&
                    this.WarrantyCovered.Equals(input.WarrantyCovered))
                ) && 
                (
                    this.UpdateContractMetersType == input.UpdateContractMetersType ||
                    (this.UpdateContractMetersType != null &&
                    this.UpdateContractMetersType.Equals(input.UpdateContractMetersType))
                ) && 
                (
                    this.CompleteDate == input.CompleteDate ||
                    (this.CompleteDate != null &&
                    this.CompleteDate.Equals(input.CompleteDate))
                ) && 
                (
                    this.LastPreventativeMaintenanceDate == input.LastPreventativeMaintenanceDate ||
                    (this.LastPreventativeMaintenanceDate != null &&
                    this.LastPreventativeMaintenanceDate.Equals(input.LastPreventativeMaintenanceDate))
                ) && 
                (
                    this.NextPreventativeMaintenanceDate == input.NextPreventativeMaintenanceDate ||
                    (this.NextPreventativeMaintenanceDate != null &&
                    this.NextPreventativeMaintenanceDate.Equals(input.NextPreventativeMaintenanceDate))
                ) && 
                (
                    this.Symptom1 == input.Symptom1 ||
                    (this.Symptom1 != null &&
                    this.Symptom1.Equals(input.Symptom1))
                ) && 
                (
                    this.Symptom2 == input.Symptom2 ||
                    (this.Symptom2 != null &&
                    this.Symptom2.Equals(input.Symptom2))
                ) && 
                (
                    this.Symptom3 == input.Symptom3 ||
                    (this.Symptom3 != null &&
                    this.Symptom3.Equals(input.Symptom3))
                ) && 
                (
                    this.Symptom4 == input.Symptom4 ||
                    (this.Symptom4 != null &&
                    this.Symptom4.Equals(input.Symptom4))
                ) && 
                (
                    this.Symptom5 == input.Symptom5 ||
                    (this.Symptom5 != null &&
                    this.Symptom5.Equals(input.Symptom5))
                ) && 
                (
                    this.Resolution1 == input.Resolution1 ||
                    (this.Resolution1 != null &&
                    this.Resolution1.Equals(input.Resolution1))
                ) && 
                (
                    this.Resolution2 == input.Resolution2 ||
                    (this.Resolution2 != null &&
                    this.Resolution2.Equals(input.Resolution2))
                ) && 
                (
                    this.Resolution3 == input.Resolution3 ||
                    (this.Resolution3 != null &&
                    this.Resolution3.Equals(input.Resolution3))
                ) && 
                (
                    this.Resolution4 == input.Resolution4 ||
                    (this.Resolution4 != null &&
                    this.Resolution4.Equals(input.Resolution4))
                ) && 
                (
                    this.Resolution5 == input.Resolution5 ||
                    (this.Resolution5 != null &&
                    this.Resolution5.Equals(input.Resolution5))
                ) && 
                (
                    this.AddItemToCustomerAssets == input.AddItemToCustomerAssets ||
                    (this.AddItemToCustomerAssets != null &&
                    this.AddItemToCustomerAssets.Equals(input.AddItemToCustomerAssets))
                ) && 
                (
                    this.IncludeAssemblyDetailsWhenAddedToCustomerAssets == input.IncludeAssemblyDetailsWhenAddedToCustomerAssets ||
                    (this.IncludeAssemblyDetailsWhenAddedToCustomerAssets != null &&
                    this.IncludeAssemblyDetailsWhenAddedToCustomerAssets.Equals(input.IncludeAssemblyDetailsWhenAddedToCustomerAssets))
                ) && 
                (
                    this.AllowDecreasedMeterReadings == input.AllowDecreasedMeterReadings ||
                    (this.AllowDecreasedMeterReadings != null &&
                    this.AllowDecreasedMeterReadings.Equals(input.AllowDecreasedMeterReadings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateItemServicedType != null)
                    hashCode = hashCode * 59 + this.CreateItemServicedType.GetHashCode();
                if (this.CustomerInventoryNumber != null)
                    hashCode = hashCode * 59 + this.CustomerInventoryNumber.GetHashCode();
                if (this.ContractDetailNumber != null)
                    hashCode = hashCode * 59 + this.ContractDetailNumber.GetHashCode();
                if (this.ManagedAccountAssetNumber != null)
                    hashCode = hashCode * 59 + this.ManagedAccountAssetNumber.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.MeterReading != null)
                    hashCode = hashCode * 59 + this.MeterReading.GetHashCode();
                if (this.ClicksUsed != null)
                    hashCode = hashCode * 59 + this.ClicksUsed.GetHashCode();
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Problem != null)
                    hashCode = hashCode * 59 + this.Problem.GetHashCode();
                if (this.Repair != null)
                    hashCode = hashCode * 59 + this.Repair.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.WarrantyCovered != null)
                    hashCode = hashCode * 59 + this.WarrantyCovered.GetHashCode();
                if (this.UpdateContractMetersType != null)
                    hashCode = hashCode * 59 + this.UpdateContractMetersType.GetHashCode();
                if (this.CompleteDate != null)
                    hashCode = hashCode * 59 + this.CompleteDate.GetHashCode();
                if (this.LastPreventativeMaintenanceDate != null)
                    hashCode = hashCode * 59 + this.LastPreventativeMaintenanceDate.GetHashCode();
                if (this.NextPreventativeMaintenanceDate != null)
                    hashCode = hashCode * 59 + this.NextPreventativeMaintenanceDate.GetHashCode();
                if (this.Symptom1 != null)
                    hashCode = hashCode * 59 + this.Symptom1.GetHashCode();
                if (this.Symptom2 != null)
                    hashCode = hashCode * 59 + this.Symptom2.GetHashCode();
                if (this.Symptom3 != null)
                    hashCode = hashCode * 59 + this.Symptom3.GetHashCode();
                if (this.Symptom4 != null)
                    hashCode = hashCode * 59 + this.Symptom4.GetHashCode();
                if (this.Symptom5 != null)
                    hashCode = hashCode * 59 + this.Symptom5.GetHashCode();
                if (this.Resolution1 != null)
                    hashCode = hashCode * 59 + this.Resolution1.GetHashCode();
                if (this.Resolution2 != null)
                    hashCode = hashCode * 59 + this.Resolution2.GetHashCode();
                if (this.Resolution3 != null)
                    hashCode = hashCode * 59 + this.Resolution3.GetHashCode();
                if (this.Resolution4 != null)
                    hashCode = hashCode * 59 + this.Resolution4.GetHashCode();
                if (this.Resolution5 != null)
                    hashCode = hashCode * 59 + this.Resolution5.GetHashCode();
                if (this.AddItemToCustomerAssets != null)
                    hashCode = hashCode * 59 + this.AddItemToCustomerAssets.GetHashCode();
                if (this.IncludeAssemblyDetailsWhenAddedToCustomerAssets != null)
                    hashCode = hashCode * 59 + this.IncludeAssemblyDetailsWhenAddedToCustomerAssets.GetHashCode();
                if (this.AllowDecreasedMeterReadings != null)
                    hashCode = hashCode * 59 + this.AllowDecreasedMeterReadings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
