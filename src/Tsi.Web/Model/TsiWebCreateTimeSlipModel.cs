/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebCreateTimeSlipModel
    /// </summary>
    [DataContract]
    public partial class TsiWebCreateTimeSlipModel :  IEquatable<TsiWebCreateTimeSlipModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebCreateTimeSlipModel" /> class.
        /// </summary>
        /// <param name="billingOption">billingOption.</param>
        /// <param name="logReason">logReason.</param>
        /// <param name="techAssigned">techAssigned.</param>
        /// <param name="logComment">logComment.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="internalComments">internalComments.</param>
        /// <param name="deductHours">deductHours.</param>
        /// <param name="deductMinutes">deductMinutes.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        public TsiWebCreateTimeSlipModel(string billingOption = default(string), string logReason = default(string), int? techAssigned = default(int?), string logComment = default(string), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), string internalComments = default(string), int? deductHours = default(int?), int? deductMinutes = default(int?), bool? creditUtilizationTime = default(bool?))
        {
            this.BillingOption = billingOption;
            this.LogReason = logReason;
            this.TechAssigned = techAssigned;
            this.LogComment = logComment;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.InternalComments = internalComments;
            this.DeductHours = deductHours;
            this.DeductMinutes = deductMinutes;
            this.CreditUtilizationTime = creditUtilizationTime;
        }
        
        /// <summary>
        /// Gets or Sets BillingOption
        /// </summary>
        [DataMember(Name="BillingOption", EmitDefaultValue=false)]
        public string BillingOption { get; set; }

        /// <summary>
        /// Gets or Sets LogReason
        /// </summary>
        [DataMember(Name="LogReason", EmitDefaultValue=false)]
        public string LogReason { get; set; }

        /// <summary>
        /// Gets or Sets TechAssigned
        /// </summary>
        [DataMember(Name="TechAssigned", EmitDefaultValue=false)]
        public int? TechAssigned { get; set; }

        /// <summary>
        /// Gets or Sets LogComment
        /// </summary>
        [DataMember(Name="LogComment", EmitDefaultValue=false)]
        public string LogComment { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="StartDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="EndDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets InternalComments
        /// </summary>
        [DataMember(Name="InternalComments", EmitDefaultValue=false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// Gets or Sets DeductHours
        /// </summary>
        [DataMember(Name="DeductHours", EmitDefaultValue=false)]
        public int? DeductHours { get; set; }

        /// <summary>
        /// Gets or Sets DeductMinutes
        /// </summary>
        [DataMember(Name="DeductMinutes", EmitDefaultValue=false)]
        public int? DeductMinutes { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebCreateTimeSlipModel {\n");
            sb.Append("  BillingOption: ").Append(BillingOption).Append("\n");
            sb.Append("  LogReason: ").Append(LogReason).Append("\n");
            sb.Append("  TechAssigned: ").Append(TechAssigned).Append("\n");
            sb.Append("  LogComment: ").Append(LogComment).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  DeductHours: ").Append(DeductHours).Append("\n");
            sb.Append("  DeductMinutes: ").Append(DeductMinutes).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebCreateTimeSlipModel);
        }

        /// <summary>
        /// Returns true if TsiWebCreateTimeSlipModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebCreateTimeSlipModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebCreateTimeSlipModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingOption == input.BillingOption ||
                    (this.BillingOption != null &&
                    this.BillingOption.Equals(input.BillingOption))
                ) && 
                (
                    this.LogReason == input.LogReason ||
                    (this.LogReason != null &&
                    this.LogReason.Equals(input.LogReason))
                ) && 
                (
                    this.TechAssigned == input.TechAssigned ||
                    (this.TechAssigned != null &&
                    this.TechAssigned.Equals(input.TechAssigned))
                ) && 
                (
                    this.LogComment == input.LogComment ||
                    (this.LogComment != null &&
                    this.LogComment.Equals(input.LogComment))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.InternalComments == input.InternalComments ||
                    (this.InternalComments != null &&
                    this.InternalComments.Equals(input.InternalComments))
                ) && 
                (
                    this.DeductHours == input.DeductHours ||
                    (this.DeductHours != null &&
                    this.DeductHours.Equals(input.DeductHours))
                ) && 
                (
                    this.DeductMinutes == input.DeductMinutes ||
                    (this.DeductMinutes != null &&
                    this.DeductMinutes.Equals(input.DeductMinutes))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingOption != null)
                    hashCode = hashCode * 59 + this.BillingOption.GetHashCode();
                if (this.LogReason != null)
                    hashCode = hashCode * 59 + this.LogReason.GetHashCode();
                if (this.TechAssigned != null)
                    hashCode = hashCode * 59 + this.TechAssigned.GetHashCode();
                if (this.LogComment != null)
                    hashCode = hashCode * 59 + this.LogComment.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.InternalComments != null)
                    hashCode = hashCode * 59 + this.InternalComments.GetHashCode();
                if (this.DeductHours != null)
                    hashCode = hashCode * 59 + this.DeductHours.GetHashCode();
                if (this.DeductMinutes != null)
                    hashCode = hashCode * 59 + this.DeductMinutes.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
