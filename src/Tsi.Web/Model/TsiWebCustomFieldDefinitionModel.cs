/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebCustomFieldDefinitionModel
    /// </summary>
    [DataContract]
    public partial class TsiWebCustomFieldDefinitionModel :  IEquatable<TsiWebCustomFieldDefinitionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebCustomFieldDefinitionModel" /> class.
        /// </summary>
        /// <param name="categoryName">categoryName.</param>
        /// <param name="customFieldLabel">customFieldLabel.</param>
        /// <param name="description">description.</param>
        /// <param name="ordinalPosition">ordinalPosition.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="maxValue">maxValue.</param>
        /// <param name="dropDownConstraints">dropDownConstraints.</param>
        public TsiWebCustomFieldDefinitionModel(string categoryName = default(string), string customFieldLabel = default(string), string description = default(string), int? ordinalPosition = default(int?), int? maxLength = default(int?), int? minValue = default(int?), int? maxValue = default(int?), List<string> dropDownConstraints = default(List<string>))
        {
            this.CategoryName = categoryName;
            this.CustomFieldLabel = customFieldLabel;
            this.Description = description;
            this.OrdinalPosition = ordinalPosition;
            this.MaxLength = maxLength;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            this.DropDownConstraints = dropDownConstraints;
        }
        
        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="CategoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets CustomFieldLabel
        /// </summary>
        [DataMember(Name="CustomFieldLabel", EmitDefaultValue=false)]
        public string CustomFieldLabel { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets OrdinalPosition
        /// </summary>
        [DataMember(Name="OrdinalPosition", EmitDefaultValue=false)]
        public int? OrdinalPosition { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name="MaxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="MinValue", EmitDefaultValue=false)]
        public int? MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="MaxValue", EmitDefaultValue=false)]
        public int? MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets DropDownConstraints
        /// </summary>
        [DataMember(Name="DropDownConstraints", EmitDefaultValue=false)]
        public List<string> DropDownConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebCustomFieldDefinitionModel {\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  CustomFieldLabel: ").Append(CustomFieldLabel).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OrdinalPosition: ").Append(OrdinalPosition).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  DropDownConstraints: ").Append(DropDownConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebCustomFieldDefinitionModel);
        }

        /// <summary>
        /// Returns true if TsiWebCustomFieldDefinitionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebCustomFieldDefinitionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebCustomFieldDefinitionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.CustomFieldLabel == input.CustomFieldLabel ||
                    (this.CustomFieldLabel != null &&
                    this.CustomFieldLabel.Equals(input.CustomFieldLabel))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.OrdinalPosition == input.OrdinalPosition ||
                    (this.OrdinalPosition != null &&
                    this.OrdinalPosition.Equals(input.OrdinalPosition))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.DropDownConstraints == input.DropDownConstraints ||
                    this.DropDownConstraints != null &&
                    this.DropDownConstraints.SequenceEqual(input.DropDownConstraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                if (this.CustomFieldLabel != null)
                    hashCode = hashCode * 59 + this.CustomFieldLabel.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OrdinalPosition != null)
                    hashCode = hashCode * 59 + this.OrdinalPosition.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.DropDownConstraints != null)
                    hashCode = hashCode * 59 + this.DropDownConstraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
