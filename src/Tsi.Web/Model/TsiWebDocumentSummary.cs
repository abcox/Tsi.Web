/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebDocumentSummary
    /// </summary>
    [DataContract]
    public partial class TsiWebDocumentSummary :  IEquatable<TsiWebDocumentSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebDocumentSummary" /> class.
        /// </summary>
        /// <param name="documentId">documentId.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="contactNumber">contactNumber.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="appliesToDocumentType">appliesToDocumentType.</param>
        /// <param name="appliesToDocumentNumber">appliesToDocumentNumber.</param>
        /// <param name="document">document.</param>
        public TsiWebDocumentSummary(int? documentId = default(int?), int? accountNumber = default(int?), string accountName = default(string), int? contactNumber = default(int?), string contactName = default(string), string appliesToDocumentType = default(string), int? appliesToDocumentNumber = default(int?), TsiWebDocument document = default(TsiWebDocument))
        {
            this.DocumentId = documentId;
            this.AccountNumber = accountNumber;
            this.AccountName = accountName;
            this.ContactNumber = contactNumber;
            this.ContactName = contactName;
            this.AppliesToDocumentType = appliesToDocumentType;
            this.AppliesToDocumentNumber = appliesToDocumentNumber;
            this.Document = document;
        }
        
        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="DocumentId", EmitDefaultValue=false)]
        public int? DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="AccountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets ContactNumber
        /// </summary>
        [DataMember(Name="ContactNumber", EmitDefaultValue=false)]
        public int? ContactNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="ContactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets AppliesToDocumentType
        /// </summary>
        [DataMember(Name="AppliesToDocumentType", EmitDefaultValue=false)]
        public string AppliesToDocumentType { get; set; }

        /// <summary>
        /// Gets or Sets AppliesToDocumentNumber
        /// </summary>
        [DataMember(Name="AppliesToDocumentNumber", EmitDefaultValue=false)]
        public int? AppliesToDocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="Document", EmitDefaultValue=false)]
        public TsiWebDocument Document { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebDocumentSummary {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  AppliesToDocumentType: ").Append(AppliesToDocumentType).Append("\n");
            sb.Append("  AppliesToDocumentNumber: ").Append(AppliesToDocumentNumber).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebDocumentSummary);
        }

        /// <summary>
        /// Returns true if TsiWebDocumentSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebDocumentSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebDocumentSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.AppliesToDocumentType == input.AppliesToDocumentType ||
                    (this.AppliesToDocumentType != null &&
                    this.AppliesToDocumentType.Equals(input.AppliesToDocumentType))
                ) && 
                (
                    this.AppliesToDocumentNumber == input.AppliesToDocumentNumber ||
                    (this.AppliesToDocumentNumber != null &&
                    this.AppliesToDocumentNumber.Equals(input.AppliesToDocumentNumber))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.AppliesToDocumentType != null)
                    hashCode = hashCode * 59 + this.AppliesToDocumentType.GetHashCode();
                if (this.AppliesToDocumentNumber != null)
                    hashCode = hashCode * 59 + this.AppliesToDocumentNumber.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
