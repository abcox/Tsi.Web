/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebEmailAddress
    /// </summary>
    [DataContract]
    public partial class TsiWebEmailAddress :  IEquatable<TsiWebEmailAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebEmailAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebEmailAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebEmailAddress" /> class.
        /// </summary>
        /// <param name="emailAddressId">Gets or sets the email address identifier..</param>
        /// <param name="email">Gets or sets the email. (required).</param>
        /// <param name="description">description.</param>
        /// <param name="doNotEmail">doNotEmail.</param>
        /// <param name="isPrimary">isPrimary.</param>
        public TsiWebEmailAddress(int? emailAddressId = default(int?), string email = default(string), string description = default(string), bool? doNotEmail = default(bool?), bool? isPrimary = default(bool?))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for TsiWebEmailAddress and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            this.EmailAddressId = emailAddressId;
            this.Description = description;
            this.DoNotEmail = doNotEmail;
            this.IsPrimary = isPrimary;
        }
        
        /// <summary>
        /// Gets or sets the email address identifier.
        /// </summary>
        /// <value>Gets or sets the email address identifier.</value>
        [DataMember(Name="EmailAddressId", EmitDefaultValue=false)]
        public int? EmailAddressId { get; set; }

        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        /// <value>Gets or sets the email.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DoNotEmail
        /// </summary>
        [DataMember(Name="DoNotEmail", EmitDefaultValue=false)]
        public bool? DoNotEmail { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="IsPrimary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebEmailAddress {\n");
            sb.Append("  EmailAddressId: ").Append(EmailAddressId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DoNotEmail: ").Append(DoNotEmail).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebEmailAddress);
        }

        /// <summary>
        /// Returns true if TsiWebEmailAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebEmailAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebEmailAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailAddressId == input.EmailAddressId ||
                    (this.EmailAddressId != null &&
                    this.EmailAddressId.Equals(input.EmailAddressId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DoNotEmail == input.DoNotEmail ||
                    (this.DoNotEmail != null &&
                    this.DoNotEmail.Equals(input.DoNotEmail))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddressId != null)
                    hashCode = hashCode * 59 + this.EmailAddressId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DoNotEmail != null)
                    hashCode = hashCode * 59 + this.DoNotEmail.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
