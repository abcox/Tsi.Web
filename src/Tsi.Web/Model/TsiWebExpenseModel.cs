/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebExpenseModel
    /// </summary>
    [DataContract]
    public partial class TsiWebExpenseModel :  IEquatable<TsiWebExpenseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebExpenseModel" /> class.
        /// </summary>
        /// <param name="expenseTypeNumber">expenseTypeNumber.</param>
        /// <param name="expenseType">expenseType.</param>
        /// <param name="repNumber">repNumber.</param>
        /// <param name="expensePaymentTypeNumber">expensePaymentTypeNumber.</param>
        /// <param name="expensePaymentType">expensePaymentType.</param>
        /// <param name="expenseDateTime">expenseDateTime.</param>
        /// <param name="expenseAmount">expenseAmount.</param>
        /// <param name="odometerStart">odometerStart.</param>
        /// <param name="odometerEnd">odometerEnd.</param>
        /// <param name="distance">distance.</param>
        /// <param name="comments">comments.</param>
        /// <param name="billable">billable.</param>
        /// <param name="reimbursable">reimbursable.</param>
        /// <param name="distanceType">distanceType.</param>
        public TsiWebExpenseModel(int? expenseTypeNumber = default(int?), string expenseType = default(string), int? repNumber = default(int?), int? expensePaymentTypeNumber = default(int?), string expensePaymentType = default(string), DateTime? expenseDateTime = default(DateTime?), double? expenseAmount = default(double?), double? odometerStart = default(double?), double? odometerEnd = default(double?), double? distance = default(double?), string comments = default(string), bool? billable = default(bool?), bool? reimbursable = default(bool?), string distanceType = default(string))
        {
            this.ExpenseTypeNumber = expenseTypeNumber;
            this.ExpenseType = expenseType;
            this.RepNumber = repNumber;
            this.ExpensePaymentTypeNumber = expensePaymentTypeNumber;
            this.ExpensePaymentType = expensePaymentType;
            this.ExpenseDateTime = expenseDateTime;
            this.ExpenseAmount = expenseAmount;
            this.OdometerStart = odometerStart;
            this.OdometerEnd = odometerEnd;
            this.Distance = distance;
            this.Comments = comments;
            this.Billable = billable;
            this.Reimbursable = reimbursable;
            this.DistanceType = distanceType;
        }
        
        /// <summary>
        /// Gets or Sets ExpenseTypeNumber
        /// </summary>
        [DataMember(Name="ExpenseTypeNumber", EmitDefaultValue=false)]
        public int? ExpenseTypeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseType
        /// </summary>
        [DataMember(Name="ExpenseType", EmitDefaultValue=false)]
        public string ExpenseType { get; set; }

        /// <summary>
        /// Gets or Sets RepNumber
        /// </summary>
        [DataMember(Name="RepNumber", EmitDefaultValue=false)]
        public int? RepNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePaymentTypeNumber
        /// </summary>
        [DataMember(Name="ExpensePaymentTypeNumber", EmitDefaultValue=false)]
        public int? ExpensePaymentTypeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePaymentType
        /// </summary>
        [DataMember(Name="ExpensePaymentType", EmitDefaultValue=false)]
        public string ExpensePaymentType { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseDateTime
        /// </summary>
        [DataMember(Name="ExpenseDateTime", EmitDefaultValue=false)]
        public DateTime? ExpenseDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseAmount
        /// </summary>
        [DataMember(Name="ExpenseAmount", EmitDefaultValue=false)]
        public double? ExpenseAmount { get; set; }

        /// <summary>
        /// Gets or Sets OdometerStart
        /// </summary>
        [DataMember(Name="OdometerStart", EmitDefaultValue=false)]
        public double? OdometerStart { get; set; }

        /// <summary>
        /// Gets or Sets OdometerEnd
        /// </summary>
        [DataMember(Name="OdometerEnd", EmitDefaultValue=false)]
        public double? OdometerEnd { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="Distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets Reimbursable
        /// </summary>
        [DataMember(Name="Reimbursable", EmitDefaultValue=false)]
        public bool? Reimbursable { get; set; }

        /// <summary>
        /// Gets or Sets DistanceType
        /// </summary>
        [DataMember(Name="DistanceType", EmitDefaultValue=false)]
        public string DistanceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebExpenseModel {\n");
            sb.Append("  ExpenseTypeNumber: ").Append(ExpenseTypeNumber).Append("\n");
            sb.Append("  ExpenseType: ").Append(ExpenseType).Append("\n");
            sb.Append("  RepNumber: ").Append(RepNumber).Append("\n");
            sb.Append("  ExpensePaymentTypeNumber: ").Append(ExpensePaymentTypeNumber).Append("\n");
            sb.Append("  ExpensePaymentType: ").Append(ExpensePaymentType).Append("\n");
            sb.Append("  ExpenseDateTime: ").Append(ExpenseDateTime).Append("\n");
            sb.Append("  ExpenseAmount: ").Append(ExpenseAmount).Append("\n");
            sb.Append("  OdometerStart: ").Append(OdometerStart).Append("\n");
            sb.Append("  OdometerEnd: ").Append(OdometerEnd).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Reimbursable: ").Append(Reimbursable).Append("\n");
            sb.Append("  DistanceType: ").Append(DistanceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebExpenseModel);
        }

        /// <summary>
        /// Returns true if TsiWebExpenseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebExpenseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebExpenseModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpenseTypeNumber == input.ExpenseTypeNumber ||
                    (this.ExpenseTypeNumber != null &&
                    this.ExpenseTypeNumber.Equals(input.ExpenseTypeNumber))
                ) && 
                (
                    this.ExpenseType == input.ExpenseType ||
                    (this.ExpenseType != null &&
                    this.ExpenseType.Equals(input.ExpenseType))
                ) && 
                (
                    this.RepNumber == input.RepNumber ||
                    (this.RepNumber != null &&
                    this.RepNumber.Equals(input.RepNumber))
                ) && 
                (
                    this.ExpensePaymentTypeNumber == input.ExpensePaymentTypeNumber ||
                    (this.ExpensePaymentTypeNumber != null &&
                    this.ExpensePaymentTypeNumber.Equals(input.ExpensePaymentTypeNumber))
                ) && 
                (
                    this.ExpensePaymentType == input.ExpensePaymentType ||
                    (this.ExpensePaymentType != null &&
                    this.ExpensePaymentType.Equals(input.ExpensePaymentType))
                ) && 
                (
                    this.ExpenseDateTime == input.ExpenseDateTime ||
                    (this.ExpenseDateTime != null &&
                    this.ExpenseDateTime.Equals(input.ExpenseDateTime))
                ) && 
                (
                    this.ExpenseAmount == input.ExpenseAmount ||
                    (this.ExpenseAmount != null &&
                    this.ExpenseAmount.Equals(input.ExpenseAmount))
                ) && 
                (
                    this.OdometerStart == input.OdometerStart ||
                    (this.OdometerStart != null &&
                    this.OdometerStart.Equals(input.OdometerStart))
                ) && 
                (
                    this.OdometerEnd == input.OdometerEnd ||
                    (this.OdometerEnd != null &&
                    this.OdometerEnd.Equals(input.OdometerEnd))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Reimbursable == input.Reimbursable ||
                    (this.Reimbursable != null &&
                    this.Reimbursable.Equals(input.Reimbursable))
                ) && 
                (
                    this.DistanceType == input.DistanceType ||
                    (this.DistanceType != null &&
                    this.DistanceType.Equals(input.DistanceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpenseTypeNumber != null)
                    hashCode = hashCode * 59 + this.ExpenseTypeNumber.GetHashCode();
                if (this.ExpenseType != null)
                    hashCode = hashCode * 59 + this.ExpenseType.GetHashCode();
                if (this.RepNumber != null)
                    hashCode = hashCode * 59 + this.RepNumber.GetHashCode();
                if (this.ExpensePaymentTypeNumber != null)
                    hashCode = hashCode * 59 + this.ExpensePaymentTypeNumber.GetHashCode();
                if (this.ExpensePaymentType != null)
                    hashCode = hashCode * 59 + this.ExpensePaymentType.GetHashCode();
                if (this.ExpenseDateTime != null)
                    hashCode = hashCode * 59 + this.ExpenseDateTime.GetHashCode();
                if (this.ExpenseAmount != null)
                    hashCode = hashCode * 59 + this.ExpenseAmount.GetHashCode();
                if (this.OdometerStart != null)
                    hashCode = hashCode * 59 + this.OdometerStart.GetHashCode();
                if (this.OdometerEnd != null)
                    hashCode = hashCode * 59 + this.OdometerEnd.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Reimbursable != null)
                    hashCode = hashCode * 59 + this.Reimbursable.GetHashCode();
                if (this.DistanceType != null)
                    hashCode = hashCode * 59 + this.DistanceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
