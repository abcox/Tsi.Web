/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebInvoiceTerm
    /// </summary>
    [DataContract]
    public partial class TsiWebInvoiceTerm :  IEquatable<TsiWebInvoiceTerm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebInvoiceTerm" /> class.
        /// </summary>
        /// <param name="term">term.</param>
        /// <param name="aRTermsCode">aRTermsCode.</param>
        /// <param name="netDateOfNextMonth">netDateOfNextMonth.</param>
        /// <param name="netDays">netDays.</param>
        /// <param name="discountDays">discountDays.</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="isSystemDefault">isSystemDefault.</param>
        public TsiWebInvoiceTerm(string term = default(string), string aRTermsCode = default(string), int? netDateOfNextMonth = default(int?), int? netDays = default(int?), int? discountDays = default(int?), double? discountPercent = default(double?), bool? isSystemDefault = default(bool?))
        {
            this.Term = term;
            this.ARTermsCode = aRTermsCode;
            this.NetDateOfNextMonth = netDateOfNextMonth;
            this.NetDays = netDays;
            this.DiscountDays = discountDays;
            this.DiscountPercent = discountPercent;
            this.IsSystemDefault = isSystemDefault;
        }
        
        /// <summary>
        /// Gets or Sets Term
        /// </summary>
        [DataMember(Name="Term", EmitDefaultValue=false)]
        public string Term { get; set; }

        /// <summary>
        /// Gets or Sets ARTermsCode
        /// </summary>
        [DataMember(Name="ARTermsCode", EmitDefaultValue=false)]
        public string ARTermsCode { get; set; }

        /// <summary>
        /// Gets or Sets NetDateOfNextMonth
        /// </summary>
        [DataMember(Name="NetDateOfNextMonth", EmitDefaultValue=false)]
        public int? NetDateOfNextMonth { get; set; }

        /// <summary>
        /// Gets or Sets NetDays
        /// </summary>
        [DataMember(Name="NetDays", EmitDefaultValue=false)]
        public int? NetDays { get; set; }

        /// <summary>
        /// Gets or Sets DiscountDays
        /// </summary>
        [DataMember(Name="DiscountDays", EmitDefaultValue=false)]
        public int? DiscountDays { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="DiscountPercent", EmitDefaultValue=false)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemDefault
        /// </summary>
        [DataMember(Name="IsSystemDefault", EmitDefaultValue=false)]
        public bool? IsSystemDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebInvoiceTerm {\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("  ARTermsCode: ").Append(ARTermsCode).Append("\n");
            sb.Append("  NetDateOfNextMonth: ").Append(NetDateOfNextMonth).Append("\n");
            sb.Append("  NetDays: ").Append(NetDays).Append("\n");
            sb.Append("  DiscountDays: ").Append(DiscountDays).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  IsSystemDefault: ").Append(IsSystemDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebInvoiceTerm);
        }

        /// <summary>
        /// Returns true if TsiWebInvoiceTerm instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebInvoiceTerm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebInvoiceTerm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Term == input.Term ||
                    (this.Term != null &&
                    this.Term.Equals(input.Term))
                ) && 
                (
                    this.ARTermsCode == input.ARTermsCode ||
                    (this.ARTermsCode != null &&
                    this.ARTermsCode.Equals(input.ARTermsCode))
                ) && 
                (
                    this.NetDateOfNextMonth == input.NetDateOfNextMonth ||
                    (this.NetDateOfNextMonth != null &&
                    this.NetDateOfNextMonth.Equals(input.NetDateOfNextMonth))
                ) && 
                (
                    this.NetDays == input.NetDays ||
                    (this.NetDays != null &&
                    this.NetDays.Equals(input.NetDays))
                ) && 
                (
                    this.DiscountDays == input.DiscountDays ||
                    (this.DiscountDays != null &&
                    this.DiscountDays.Equals(input.DiscountDays))
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    (this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(input.DiscountPercent))
                ) && 
                (
                    this.IsSystemDefault == input.IsSystemDefault ||
                    (this.IsSystemDefault != null &&
                    this.IsSystemDefault.Equals(input.IsSystemDefault))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Term != null)
                    hashCode = hashCode * 59 + this.Term.GetHashCode();
                if (this.ARTermsCode != null)
                    hashCode = hashCode * 59 + this.ARTermsCode.GetHashCode();
                if (this.NetDateOfNextMonth != null)
                    hashCode = hashCode * 59 + this.NetDateOfNextMonth.GetHashCode();
                if (this.NetDays != null)
                    hashCode = hashCode * 59 + this.NetDays.GetHashCode();
                if (this.DiscountDays != null)
                    hashCode = hashCode * 59 + this.DiscountDays.GetHashCode();
                if (this.DiscountPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPercent.GetHashCode();
                if (this.IsSystemDefault != null)
                    hashCode = hashCode * 59 + this.IsSystemDefault.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
