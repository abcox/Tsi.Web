/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebMeterModel
    /// </summary>
    [DataContract]
    public partial class TsiWebMeterModel :  IEquatable<TsiWebMeterModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebMeterModel" /> class.
        /// </summary>
        /// <param name="contractMeterName">Gets or sets the contract meter name.</param>
        /// <param name="deviceId">Gets or sets the Device ID.</param>
        /// <param name="currentMeterReading">Gets or sets the CurrentMeterReading.</param>
        /// <param name="dateRead">Gets or sets the DateRead.</param>
        public TsiWebMeterModel(string contractMeterName = default(string), string deviceId = default(string), int? currentMeterReading = default(int?), DateTime? dateRead = default(DateTime?))
        {
            this.ContractMeterName = contractMeterName;
            this.DeviceId = deviceId;
            this.CurrentMeterReading = currentMeterReading;
            this.DateRead = dateRead;
        }
        
        /// <summary>
        /// Gets or sets the contract meter name
        /// </summary>
        /// <value>Gets or sets the contract meter name</value>
        [DataMember(Name="ContractMeterName", EmitDefaultValue=false)]
        public string ContractMeterName { get; set; }

        /// <summary>
        /// Gets or sets the Device ID
        /// </summary>
        /// <value>Gets or sets the Device ID</value>
        [DataMember(Name="DeviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets the CurrentMeterReading
        /// </summary>
        /// <value>Gets or sets the CurrentMeterReading</value>
        [DataMember(Name="CurrentMeterReading", EmitDefaultValue=false)]
        public int? CurrentMeterReading { get; set; }

        /// <summary>
        /// Gets or sets the DateRead
        /// </summary>
        /// <value>Gets or sets the DateRead</value>
        [DataMember(Name="DateRead", EmitDefaultValue=false)]
        public DateTime? DateRead { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebMeterModel {\n");
            sb.Append("  ContractMeterName: ").Append(ContractMeterName).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  CurrentMeterReading: ").Append(CurrentMeterReading).Append("\n");
            sb.Append("  DateRead: ").Append(DateRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebMeterModel);
        }

        /// <summary>
        /// Returns true if TsiWebMeterModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebMeterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebMeterModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractMeterName == input.ContractMeterName ||
                    (this.ContractMeterName != null &&
                    this.ContractMeterName.Equals(input.ContractMeterName))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.CurrentMeterReading == input.CurrentMeterReading ||
                    (this.CurrentMeterReading != null &&
                    this.CurrentMeterReading.Equals(input.CurrentMeterReading))
                ) && 
                (
                    this.DateRead == input.DateRead ||
                    (this.DateRead != null &&
                    this.DateRead.Equals(input.DateRead))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractMeterName != null)
                    hashCode = hashCode * 59 + this.ContractMeterName.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.CurrentMeterReading != null)
                    hashCode = hashCode * 59 + this.CurrentMeterReading.GetHashCode();
                if (this.DateRead != null)
                    hashCode = hashCode * 59 + this.DateRead.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
