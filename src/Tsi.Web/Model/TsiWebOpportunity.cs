/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebOpportunity
    /// </summary>
    [DataContract]
    public partial class TsiWebOpportunity :  IEquatable<TsiWebOpportunity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebOpportunity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebOpportunity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebOpportunity" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type.</param>
        /// <param name="status">status (required).</param>
        /// <param name="source">source.</param>
        /// <param name="notes">notes (required).</param>
        /// <param name="nextStep">nextStep (required).</param>
        /// <param name="competition">competition (required).</param>
        /// <param name="closeReason">closeReason.</param>
        /// <param name="strategy">strategy.</param>
        /// <param name="howDidYouHearAboutUs">howDidYouHearAboutUs.</param>
        /// <param name="stageId">stageId.</param>
        /// <param name="probabilityPercent">probabilityPercent.</param>
        /// <param name="owner">owner.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="contactNumber">contactNumber.</param>
        /// <param name="age">age.</param>
        /// <param name="lastModifiedByRepNumber">lastModifiedByRepNumber.</param>
        /// <param name="estimatedCloseDate">estimatedCloseDate.</param>
        /// <param name="closeDate">closeDate.</param>
        /// <param name="nextDate">nextDate.</param>
        /// <param name="lastStageChangeDate">lastStageChangeDate.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="lastModifiedDate">lastModifiedDate.</param>
        /// <param name="expectedAmount">expectedAmount.</param>
        /// <param name="bestCaseAmount">bestCaseAmount.</param>
        /// <param name="worstCaseAmount">worstCaseAmount.</param>
        /// <param name="finalQuoteAmount">finalQuoteAmount.</param>
        public TsiWebOpportunity(string name = default(string), string type = default(string), string status = default(string), string source = default(string), string notes = default(string), string nextStep = default(string), string competition = default(string), string closeReason = default(string), string strategy = default(string), string howDidYouHearAboutUs = default(string), int? stageId = default(int?), int? probabilityPercent = default(int?), int? owner = default(int?), int? accountNumber = default(int?), int? contactNumber = default(int?), int? age = default(int?), int? lastModifiedByRepNumber = default(int?), DateTime? estimatedCloseDate = default(DateTime?), DateTime? closeDate = default(DateTime?), DateTime? nextDate = default(DateTime?), DateTime? lastStageChangeDate = default(DateTime?), DateTime? createdDate = default(DateTime?), DateTime? lastModifiedDate = default(DateTime?), double? expectedAmount = default(double?), double? bestCaseAmount = default(double?), double? worstCaseAmount = default(double?), double? finalQuoteAmount = default(double?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TsiWebOpportunity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for TsiWebOpportunity and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "notes" is required (not null)
            if (notes == null)
            {
                throw new InvalidDataException("notes is a required property for TsiWebOpportunity and cannot be null");
            }
            else
            {
                this.Notes = notes;
            }
            // to ensure "nextStep" is required (not null)
            if (nextStep == null)
            {
                throw new InvalidDataException("nextStep is a required property for TsiWebOpportunity and cannot be null");
            }
            else
            {
                this.NextStep = nextStep;
            }
            // to ensure "competition" is required (not null)
            if (competition == null)
            {
                throw new InvalidDataException("competition is a required property for TsiWebOpportunity and cannot be null");
            }
            else
            {
                this.Competition = competition;
            }
            this.Type = type;
            this.Source = source;
            this.CloseReason = closeReason;
            this.Strategy = strategy;
            this.HowDidYouHearAboutUs = howDidYouHearAboutUs;
            this.StageId = stageId;
            this.ProbabilityPercent = probabilityPercent;
            this.Owner = owner;
            this.AccountNumber = accountNumber;
            this.ContactNumber = contactNumber;
            this.Age = age;
            this.LastModifiedByRepNumber = lastModifiedByRepNumber;
            this.EstimatedCloseDate = estimatedCloseDate;
            this.CloseDate = closeDate;
            this.NextDate = nextDate;
            this.LastStageChangeDate = lastStageChangeDate;
            this.CreatedDate = createdDate;
            this.LastModifiedDate = lastModifiedDate;
            this.ExpectedAmount = expectedAmount;
            this.BestCaseAmount = bestCaseAmount;
            this.WorstCaseAmount = worstCaseAmount;
            this.FinalQuoteAmount = finalQuoteAmount;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets NextStep
        /// </summary>
        [DataMember(Name="NextStep", EmitDefaultValue=false)]
        public string NextStep { get; set; }

        /// <summary>
        /// Gets or Sets Competition
        /// </summary>
        [DataMember(Name="Competition", EmitDefaultValue=false)]
        public string Competition { get; set; }

        /// <summary>
        /// Gets or Sets CloseReason
        /// </summary>
        [DataMember(Name="CloseReason", EmitDefaultValue=false)]
        public string CloseReason { get; set; }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name="Strategy", EmitDefaultValue=false)]
        public string Strategy { get; set; }

        /// <summary>
        /// Gets or Sets HowDidYouHearAboutUs
        /// </summary>
        [DataMember(Name="HowDidYouHearAboutUs", EmitDefaultValue=false)]
        public string HowDidYouHearAboutUs { get; set; }

        /// <summary>
        /// Gets or Sets StageId
        /// </summary>
        [DataMember(Name="StageId", EmitDefaultValue=false)]
        public int? StageId { get; set; }

        /// <summary>
        /// Gets or Sets ProbabilityPercent
        /// </summary>
        [DataMember(Name="ProbabilityPercent", EmitDefaultValue=false)]
        public int? ProbabilityPercent { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public int? Owner { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContactNumber
        /// </summary>
        [DataMember(Name="ContactNumber", EmitDefaultValue=false)]
        public int? ContactNumber { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="Age", EmitDefaultValue=false)]
        public int? Age { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedByRepNumber
        /// </summary>
        [DataMember(Name="LastModifiedByRepNumber", EmitDefaultValue=false)]
        public int? LastModifiedByRepNumber { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedCloseDate
        /// </summary>
        [DataMember(Name="EstimatedCloseDate", EmitDefaultValue=false)]
        public DateTime? EstimatedCloseDate { get; set; }

        /// <summary>
        /// Gets or Sets CloseDate
        /// </summary>
        [DataMember(Name="CloseDate", EmitDefaultValue=false)]
        public DateTime? CloseDate { get; set; }

        /// <summary>
        /// Gets or Sets NextDate
        /// </summary>
        [DataMember(Name="NextDate", EmitDefaultValue=false)]
        public DateTime? NextDate { get; set; }

        /// <summary>
        /// Gets or Sets LastStageChangeDate
        /// </summary>
        [DataMember(Name="LastStageChangeDate", EmitDefaultValue=false)]
        public DateTime? LastStageChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDate
        /// </summary>
        [DataMember(Name="LastModifiedDate", EmitDefaultValue=false)]
        public DateTime? LastModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedAmount
        /// </summary>
        [DataMember(Name="ExpectedAmount", EmitDefaultValue=false)]
        public double? ExpectedAmount { get; set; }

        /// <summary>
        /// Gets or Sets BestCaseAmount
        /// </summary>
        [DataMember(Name="BestCaseAmount", EmitDefaultValue=false)]
        public double? BestCaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets WorstCaseAmount
        /// </summary>
        [DataMember(Name="WorstCaseAmount", EmitDefaultValue=false)]
        public double? WorstCaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets FinalQuoteAmount
        /// </summary>
        [DataMember(Name="FinalQuoteAmount", EmitDefaultValue=false)]
        public double? FinalQuoteAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebOpportunity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NextStep: ").Append(NextStep).Append("\n");
            sb.Append("  Competition: ").Append(Competition).Append("\n");
            sb.Append("  CloseReason: ").Append(CloseReason).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  HowDidYouHearAboutUs: ").Append(HowDidYouHearAboutUs).Append("\n");
            sb.Append("  StageId: ").Append(StageId).Append("\n");
            sb.Append("  ProbabilityPercent: ").Append(ProbabilityPercent).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  LastModifiedByRepNumber: ").Append(LastModifiedByRepNumber).Append("\n");
            sb.Append("  EstimatedCloseDate: ").Append(EstimatedCloseDate).Append("\n");
            sb.Append("  CloseDate: ").Append(CloseDate).Append("\n");
            sb.Append("  NextDate: ").Append(NextDate).Append("\n");
            sb.Append("  LastStageChangeDate: ").Append(LastStageChangeDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  ExpectedAmount: ").Append(ExpectedAmount).Append("\n");
            sb.Append("  BestCaseAmount: ").Append(BestCaseAmount).Append("\n");
            sb.Append("  WorstCaseAmount: ").Append(WorstCaseAmount).Append("\n");
            sb.Append("  FinalQuoteAmount: ").Append(FinalQuoteAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebOpportunity);
        }

        /// <summary>
        /// Returns true if TsiWebOpportunity instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebOpportunity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebOpportunity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.NextStep == input.NextStep ||
                    (this.NextStep != null &&
                    this.NextStep.Equals(input.NextStep))
                ) && 
                (
                    this.Competition == input.Competition ||
                    (this.Competition != null &&
                    this.Competition.Equals(input.Competition))
                ) && 
                (
                    this.CloseReason == input.CloseReason ||
                    (this.CloseReason != null &&
                    this.CloseReason.Equals(input.CloseReason))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.HowDidYouHearAboutUs == input.HowDidYouHearAboutUs ||
                    (this.HowDidYouHearAboutUs != null &&
                    this.HowDidYouHearAboutUs.Equals(input.HowDidYouHearAboutUs))
                ) && 
                (
                    this.StageId == input.StageId ||
                    (this.StageId != null &&
                    this.StageId.Equals(input.StageId))
                ) && 
                (
                    this.ProbabilityPercent == input.ProbabilityPercent ||
                    (this.ProbabilityPercent != null &&
                    this.ProbabilityPercent.Equals(input.ProbabilityPercent))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.LastModifiedByRepNumber == input.LastModifiedByRepNumber ||
                    (this.LastModifiedByRepNumber != null &&
                    this.LastModifiedByRepNumber.Equals(input.LastModifiedByRepNumber))
                ) && 
                (
                    this.EstimatedCloseDate == input.EstimatedCloseDate ||
                    (this.EstimatedCloseDate != null &&
                    this.EstimatedCloseDate.Equals(input.EstimatedCloseDate))
                ) && 
                (
                    this.CloseDate == input.CloseDate ||
                    (this.CloseDate != null &&
                    this.CloseDate.Equals(input.CloseDate))
                ) && 
                (
                    this.NextDate == input.NextDate ||
                    (this.NextDate != null &&
                    this.NextDate.Equals(input.NextDate))
                ) && 
                (
                    this.LastStageChangeDate == input.LastStageChangeDate ||
                    (this.LastStageChangeDate != null &&
                    this.LastStageChangeDate.Equals(input.LastStageChangeDate))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) && 
                (
                    this.ExpectedAmount == input.ExpectedAmount ||
                    (this.ExpectedAmount != null &&
                    this.ExpectedAmount.Equals(input.ExpectedAmount))
                ) && 
                (
                    this.BestCaseAmount == input.BestCaseAmount ||
                    (this.BestCaseAmount != null &&
                    this.BestCaseAmount.Equals(input.BestCaseAmount))
                ) && 
                (
                    this.WorstCaseAmount == input.WorstCaseAmount ||
                    (this.WorstCaseAmount != null &&
                    this.WorstCaseAmount.Equals(input.WorstCaseAmount))
                ) && 
                (
                    this.FinalQuoteAmount == input.FinalQuoteAmount ||
                    (this.FinalQuoteAmount != null &&
                    this.FinalQuoteAmount.Equals(input.FinalQuoteAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.NextStep != null)
                    hashCode = hashCode * 59 + this.NextStep.GetHashCode();
                if (this.Competition != null)
                    hashCode = hashCode * 59 + this.Competition.GetHashCode();
                if (this.CloseReason != null)
                    hashCode = hashCode * 59 + this.CloseReason.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.HowDidYouHearAboutUs != null)
                    hashCode = hashCode * 59 + this.HowDidYouHearAboutUs.GetHashCode();
                if (this.StageId != null)
                    hashCode = hashCode * 59 + this.StageId.GetHashCode();
                if (this.ProbabilityPercent != null)
                    hashCode = hashCode * 59 + this.ProbabilityPercent.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.LastModifiedByRepNumber != null)
                    hashCode = hashCode * 59 + this.LastModifiedByRepNumber.GetHashCode();
                if (this.EstimatedCloseDate != null)
                    hashCode = hashCode * 59 + this.EstimatedCloseDate.GetHashCode();
                if (this.CloseDate != null)
                    hashCode = hashCode * 59 + this.CloseDate.GetHashCode();
                if (this.NextDate != null)
                    hashCode = hashCode * 59 + this.NextDate.GetHashCode();
                if (this.LastStageChangeDate != null)
                    hashCode = hashCode * 59 + this.LastStageChangeDate.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.LastModifiedDate != null)
                    hashCode = hashCode * 59 + this.LastModifiedDate.GetHashCode();
                if (this.ExpectedAmount != null)
                    hashCode = hashCode * 59 + this.ExpectedAmount.GetHashCode();
                if (this.BestCaseAmount != null)
                    hashCode = hashCode * 59 + this.BestCaseAmount.GetHashCode();
                if (this.WorstCaseAmount != null)
                    hashCode = hashCode * 59 + this.WorstCaseAmount.GetHashCode();
                if (this.FinalQuoteAmount != null)
                    hashCode = hashCode * 59 + this.FinalQuoteAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
