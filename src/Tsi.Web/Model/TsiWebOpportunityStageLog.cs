/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebOpportunityStageLog
    /// </summary>
    [DataContract]
    public partial class TsiWebOpportunityStageLog :  IEquatable<TsiWebOpportunityStageLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebOpportunityStageLog" /> class.
        /// </summary>
        /// <param name="opportunityStageLogId">opportunityStageLogId.</param>
        /// <param name="nextStep">nextStep.</param>
        /// <param name="stageChangedTo">stageChangedTo.</param>
        /// <param name="stageChangedByRep">stageChangedByRep.</param>
        /// <param name="expectedAmount">expectedAmount.</param>
        /// <param name="probablilityPercent">probablilityPercent.</param>
        /// <param name="stageChangedDate">stageChangedDate.</param>
        /// <param name="dateLeftThisStage">dateLeftThisStage.</param>
        public TsiWebOpportunityStageLog(int? opportunityStageLogId = default(int?), string nextStep = default(string), string stageChangedTo = default(string), int? stageChangedByRep = default(int?), double? expectedAmount = default(double?), int? probablilityPercent = default(int?), DateTime? stageChangedDate = default(DateTime?), DateTime? dateLeftThisStage = default(DateTime?))
        {
            this.OpportunityStageLogId = opportunityStageLogId;
            this.NextStep = nextStep;
            this.StageChangedTo = stageChangedTo;
            this.StageChangedByRep = stageChangedByRep;
            this.ExpectedAmount = expectedAmount;
            this.ProbablilityPercent = probablilityPercent;
            this.StageChangedDate = stageChangedDate;
            this.DateLeftThisStage = dateLeftThisStage;
        }
        
        /// <summary>
        /// Gets or Sets OpportunityStageLogId
        /// </summary>
        [DataMember(Name="OpportunityStageLogId", EmitDefaultValue=false)]
        public int? OpportunityStageLogId { get; set; }

        /// <summary>
        /// Gets or Sets NextStep
        /// </summary>
        [DataMember(Name="NextStep", EmitDefaultValue=false)]
        public string NextStep { get; set; }

        /// <summary>
        /// Gets or Sets StageChangedTo
        /// </summary>
        [DataMember(Name="StageChangedTo", EmitDefaultValue=false)]
        public string StageChangedTo { get; set; }

        /// <summary>
        /// Gets or Sets StageChangedByRep
        /// </summary>
        [DataMember(Name="StageChangedByRep", EmitDefaultValue=false)]
        public int? StageChangedByRep { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedAmount
        /// </summary>
        [DataMember(Name="ExpectedAmount", EmitDefaultValue=false)]
        public double? ExpectedAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProbablilityPercent
        /// </summary>
        [DataMember(Name="ProbablilityPercent", EmitDefaultValue=false)]
        public int? ProbablilityPercent { get; set; }

        /// <summary>
        /// Gets or Sets StageChangedDate
        /// </summary>
        [DataMember(Name="StageChangedDate", EmitDefaultValue=false)]
        public DateTime? StageChangedDate { get; set; }

        /// <summary>
        /// Gets or Sets DateLeftThisStage
        /// </summary>
        [DataMember(Name="DateLeftThisStage", EmitDefaultValue=false)]
        public DateTime? DateLeftThisStage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebOpportunityStageLog {\n");
            sb.Append("  OpportunityStageLogId: ").Append(OpportunityStageLogId).Append("\n");
            sb.Append("  NextStep: ").Append(NextStep).Append("\n");
            sb.Append("  StageChangedTo: ").Append(StageChangedTo).Append("\n");
            sb.Append("  StageChangedByRep: ").Append(StageChangedByRep).Append("\n");
            sb.Append("  ExpectedAmount: ").Append(ExpectedAmount).Append("\n");
            sb.Append("  ProbablilityPercent: ").Append(ProbablilityPercent).Append("\n");
            sb.Append("  StageChangedDate: ").Append(StageChangedDate).Append("\n");
            sb.Append("  DateLeftThisStage: ").Append(DateLeftThisStage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebOpportunityStageLog);
        }

        /// <summary>
        /// Returns true if TsiWebOpportunityStageLog instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebOpportunityStageLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebOpportunityStageLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpportunityStageLogId == input.OpportunityStageLogId ||
                    (this.OpportunityStageLogId != null &&
                    this.OpportunityStageLogId.Equals(input.OpportunityStageLogId))
                ) && 
                (
                    this.NextStep == input.NextStep ||
                    (this.NextStep != null &&
                    this.NextStep.Equals(input.NextStep))
                ) && 
                (
                    this.StageChangedTo == input.StageChangedTo ||
                    (this.StageChangedTo != null &&
                    this.StageChangedTo.Equals(input.StageChangedTo))
                ) && 
                (
                    this.StageChangedByRep == input.StageChangedByRep ||
                    (this.StageChangedByRep != null &&
                    this.StageChangedByRep.Equals(input.StageChangedByRep))
                ) && 
                (
                    this.ExpectedAmount == input.ExpectedAmount ||
                    (this.ExpectedAmount != null &&
                    this.ExpectedAmount.Equals(input.ExpectedAmount))
                ) && 
                (
                    this.ProbablilityPercent == input.ProbablilityPercent ||
                    (this.ProbablilityPercent != null &&
                    this.ProbablilityPercent.Equals(input.ProbablilityPercent))
                ) && 
                (
                    this.StageChangedDate == input.StageChangedDate ||
                    (this.StageChangedDate != null &&
                    this.StageChangedDate.Equals(input.StageChangedDate))
                ) && 
                (
                    this.DateLeftThisStage == input.DateLeftThisStage ||
                    (this.DateLeftThisStage != null &&
                    this.DateLeftThisStage.Equals(input.DateLeftThisStage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpportunityStageLogId != null)
                    hashCode = hashCode * 59 + this.OpportunityStageLogId.GetHashCode();
                if (this.NextStep != null)
                    hashCode = hashCode * 59 + this.NextStep.GetHashCode();
                if (this.StageChangedTo != null)
                    hashCode = hashCode * 59 + this.StageChangedTo.GetHashCode();
                if (this.StageChangedByRep != null)
                    hashCode = hashCode * 59 + this.StageChangedByRep.GetHashCode();
                if (this.ExpectedAmount != null)
                    hashCode = hashCode * 59 + this.ExpectedAmount.GetHashCode();
                if (this.ProbablilityPercent != null)
                    hashCode = hashCode * 59 + this.ProbablilityPercent.GetHashCode();
                if (this.StageChangedDate != null)
                    hashCode = hashCode * 59 + this.StageChangedDate.GetHashCode();
                if (this.DateLeftThisStage != null)
                    hashCode = hashCode * 59 + this.DateLeftThisStage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
