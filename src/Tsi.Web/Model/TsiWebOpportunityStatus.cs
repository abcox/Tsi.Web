/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebOpportunityStatus
    /// </summary>
    [DataContract]
    public partial class TsiWebOpportunityStatus :  IEquatable<TsiWebOpportunityStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebOpportunityStatus" /> class.
        /// </summary>
        /// <param name="opportunityStatusId">opportunityStatusId.</param>
        /// <param name="status">status.</param>
        /// <param name="stateOfOpportunity">stateOfOpportunity.</param>
        /// <param name="systemEntry">systemEntry.</param>
        public TsiWebOpportunityStatus(int? opportunityStatusId = default(int?), string status = default(string), int? stateOfOpportunity = default(int?), bool? systemEntry = default(bool?))
        {
            this.OpportunityStatusId = opportunityStatusId;
            this.Status = status;
            this.StateOfOpportunity = stateOfOpportunity;
            this.SystemEntry = systemEntry;
        }
        
        /// <summary>
        /// Gets or Sets OpportunityStatusId
        /// </summary>
        [DataMember(Name="OpportunityStatusId", EmitDefaultValue=false)]
        public int? OpportunityStatusId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StateOfOpportunity
        /// </summary>
        [DataMember(Name="StateOfOpportunity", EmitDefaultValue=false)]
        public int? StateOfOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets SystemEntry
        /// </summary>
        [DataMember(Name="SystemEntry", EmitDefaultValue=false)]
        public bool? SystemEntry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebOpportunityStatus {\n");
            sb.Append("  OpportunityStatusId: ").Append(OpportunityStatusId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StateOfOpportunity: ").Append(StateOfOpportunity).Append("\n");
            sb.Append("  SystemEntry: ").Append(SystemEntry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebOpportunityStatus);
        }

        /// <summary>
        /// Returns true if TsiWebOpportunityStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebOpportunityStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebOpportunityStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpportunityStatusId == input.OpportunityStatusId ||
                    (this.OpportunityStatusId != null &&
                    this.OpportunityStatusId.Equals(input.OpportunityStatusId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StateOfOpportunity == input.StateOfOpportunity ||
                    (this.StateOfOpportunity != null &&
                    this.StateOfOpportunity.Equals(input.StateOfOpportunity))
                ) && 
                (
                    this.SystemEntry == input.SystemEntry ||
                    (this.SystemEntry != null &&
                    this.SystemEntry.Equals(input.SystemEntry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpportunityStatusId != null)
                    hashCode = hashCode * 59 + this.OpportunityStatusId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StateOfOpportunity != null)
                    hashCode = hashCode * 59 + this.StateOfOpportunity.GetHashCode();
                if (this.SystemEntry != null)
                    hashCode = hashCode * 59 + this.SystemEntry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
