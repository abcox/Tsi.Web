/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPayMethod
    /// </summary>
    [DataContract]
    public partial class TsiWebPayMethod :  IEquatable<TsiWebPayMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPayMethod" /> class.
        /// </summary>
        /// <param name="payMethodId">payMethodId.</param>
        /// <param name="payMethodTypeId">payMethodTypeId.</param>
        /// <param name="payMethodType">payMethodType.</param>
        /// <param name="name">name.</param>
        /// <param name="creditCardType">creditCardType.</param>
        /// <param name="creditCardName">creditCardName.</param>
        /// <param name="aCHAccountHolderName">aCHAccountHolderName.</param>
        /// <param name="aCHAccountHolderType">aCHAccountHolderType.</param>
        /// <param name="aCHAccountType">aCHAccountType.</param>
        /// <param name="aCHBankName">aCHBankName.</param>
        /// <param name="gLAccount">gLAccount.</param>
        /// <param name="gLDepartment">gLDepartment.</param>
        /// <param name="token">token.</param>
        /// <param name="maskedCreditCardNumber">maskedCreditCardNumber.</param>
        /// <param name="address1">address1.</param>
        /// <param name="address2">address2.</param>
        /// <param name="city">city.</param>
        /// <param name="state">state.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="country">country.</param>
        /// <param name="creditCardExpirationMonth">creditCardExpirationMonth.</param>
        /// <param name="creditCardExpirationYear">creditCardExpirationYear.</param>
        /// <param name="contactNumber">contactNumber.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="inactive">inactive.</param>
        /// <param name="converted">converted.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="accountNumber">accountNumber.</param>
        public TsiWebPayMethod(int? payMethodId = default(int?), int? payMethodTypeId = default(int?), string payMethodType = default(string), string name = default(string), string creditCardType = default(string), string creditCardName = default(string), string aCHAccountHolderName = default(string), string aCHAccountHolderType = default(string), string aCHAccountType = default(string), string aCHBankName = default(string), string gLAccount = default(string), string gLDepartment = default(string), string token = default(string), string maskedCreditCardNumber = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string), int? creditCardExpirationMonth = default(int?), int? creditCardExpirationYear = default(int?), int? contactNumber = default(int?), string contactName = default(string), bool? inactive = default(bool?), bool? converted = default(bool?), bool? isDefault = default(bool?), int? accountNumber = default(int?))
        {
            this.PayMethodId = payMethodId;
            this.PayMethodTypeId = payMethodTypeId;
            this.PayMethodType = payMethodType;
            this.Name = name;
            this.CreditCardType = creditCardType;
            this.CreditCardName = creditCardName;
            this.ACHAccountHolderName = aCHAccountHolderName;
            this.ACHAccountHolderType = aCHAccountHolderType;
            this.ACHAccountType = aCHAccountType;
            this.ACHBankName = aCHBankName;
            this.GLAccount = gLAccount;
            this.GLDepartment = gLDepartment;
            this.Token = token;
            this.MaskedCreditCardNumber = maskedCreditCardNumber;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.Country = country;
            this.CreditCardExpirationMonth = creditCardExpirationMonth;
            this.CreditCardExpirationYear = creditCardExpirationYear;
            this.ContactNumber = contactNumber;
            this.ContactName = contactName;
            this.Inactive = inactive;
            this.Converted = converted;
            this.IsDefault = isDefault;
            this.AccountNumber = accountNumber;
        }
        
        /// <summary>
        /// Gets or Sets PayMethodId
        /// </summary>
        [DataMember(Name="PayMethodId", EmitDefaultValue=false)]
        public int? PayMethodId { get; set; }

        /// <summary>
        /// Gets or Sets PayMethodTypeId
        /// </summary>
        [DataMember(Name="PayMethodTypeId", EmitDefaultValue=false)]
        public int? PayMethodTypeId { get; set; }

        /// <summary>
        /// Gets or Sets PayMethodType
        /// </summary>
        [DataMember(Name="PayMethodType", EmitDefaultValue=false)]
        public string PayMethodType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardType
        /// </summary>
        [DataMember(Name="CreditCardType", EmitDefaultValue=false)]
        public string CreditCardType { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardName
        /// </summary>
        [DataMember(Name="CreditCardName", EmitDefaultValue=false)]
        public string CreditCardName { get; set; }

        /// <summary>
        /// Gets or Sets ACHAccountHolderName
        /// </summary>
        [DataMember(Name="ACHAccountHolderName", EmitDefaultValue=false)]
        public string ACHAccountHolderName { get; set; }

        /// <summary>
        /// Gets or Sets ACHAccountHolderType
        /// </summary>
        [DataMember(Name="ACHAccountHolderType", EmitDefaultValue=false)]
        public string ACHAccountHolderType { get; set; }

        /// <summary>
        /// Gets or Sets ACHAccountType
        /// </summary>
        [DataMember(Name="ACHAccountType", EmitDefaultValue=false)]
        public string ACHAccountType { get; set; }

        /// <summary>
        /// Gets or Sets ACHBankName
        /// </summary>
        [DataMember(Name="ACHBankName", EmitDefaultValue=false)]
        public string ACHBankName { get; set; }

        /// <summary>
        /// Gets or Sets GLAccount
        /// </summary>
        [DataMember(Name="GLAccount", EmitDefaultValue=false)]
        public string GLAccount { get; set; }

        /// <summary>
        /// Gets or Sets GLDepartment
        /// </summary>
        [DataMember(Name="GLDepartment", EmitDefaultValue=false)]
        public string GLDepartment { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="Token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets MaskedCreditCardNumber
        /// </summary>
        [DataMember(Name="MaskedCreditCardNumber", EmitDefaultValue=false)]
        public string MaskedCreditCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardExpirationMonth
        /// </summary>
        [DataMember(Name="CreditCardExpirationMonth", EmitDefaultValue=false)]
        public int? CreditCardExpirationMonth { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardExpirationYear
        /// </summary>
        [DataMember(Name="CreditCardExpirationYear", EmitDefaultValue=false)]
        public int? CreditCardExpirationYear { get; set; }

        /// <summary>
        /// Gets or Sets ContactNumber
        /// </summary>
        [DataMember(Name="ContactNumber", EmitDefaultValue=false)]
        public int? ContactNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="ContactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="Inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets Converted
        /// </summary>
        [DataMember(Name="Converted", EmitDefaultValue=false)]
        public bool? Converted { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name="IsDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPayMethod {\n");
            sb.Append("  PayMethodId: ").Append(PayMethodId).Append("\n");
            sb.Append("  PayMethodTypeId: ").Append(PayMethodTypeId).Append("\n");
            sb.Append("  PayMethodType: ").Append(PayMethodType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreditCardType: ").Append(CreditCardType).Append("\n");
            sb.Append("  CreditCardName: ").Append(CreditCardName).Append("\n");
            sb.Append("  ACHAccountHolderName: ").Append(ACHAccountHolderName).Append("\n");
            sb.Append("  ACHAccountHolderType: ").Append(ACHAccountHolderType).Append("\n");
            sb.Append("  ACHAccountType: ").Append(ACHAccountType).Append("\n");
            sb.Append("  ACHBankName: ").Append(ACHBankName).Append("\n");
            sb.Append("  GLAccount: ").Append(GLAccount).Append("\n");
            sb.Append("  GLDepartment: ").Append(GLDepartment).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  MaskedCreditCardNumber: ").Append(MaskedCreditCardNumber).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreditCardExpirationMonth: ").Append(CreditCardExpirationMonth).Append("\n");
            sb.Append("  CreditCardExpirationYear: ").Append(CreditCardExpirationYear).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  Converted: ").Append(Converted).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPayMethod);
        }

        /// <summary>
        /// Returns true if TsiWebPayMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPayMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPayMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayMethodId == input.PayMethodId ||
                    (this.PayMethodId != null &&
                    this.PayMethodId.Equals(input.PayMethodId))
                ) && 
                (
                    this.PayMethodTypeId == input.PayMethodTypeId ||
                    (this.PayMethodTypeId != null &&
                    this.PayMethodTypeId.Equals(input.PayMethodTypeId))
                ) && 
                (
                    this.PayMethodType == input.PayMethodType ||
                    (this.PayMethodType != null &&
                    this.PayMethodType.Equals(input.PayMethodType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreditCardType == input.CreditCardType ||
                    (this.CreditCardType != null &&
                    this.CreditCardType.Equals(input.CreditCardType))
                ) && 
                (
                    this.CreditCardName == input.CreditCardName ||
                    (this.CreditCardName != null &&
                    this.CreditCardName.Equals(input.CreditCardName))
                ) && 
                (
                    this.ACHAccountHolderName == input.ACHAccountHolderName ||
                    (this.ACHAccountHolderName != null &&
                    this.ACHAccountHolderName.Equals(input.ACHAccountHolderName))
                ) && 
                (
                    this.ACHAccountHolderType == input.ACHAccountHolderType ||
                    (this.ACHAccountHolderType != null &&
                    this.ACHAccountHolderType.Equals(input.ACHAccountHolderType))
                ) && 
                (
                    this.ACHAccountType == input.ACHAccountType ||
                    (this.ACHAccountType != null &&
                    this.ACHAccountType.Equals(input.ACHAccountType))
                ) && 
                (
                    this.ACHBankName == input.ACHBankName ||
                    (this.ACHBankName != null &&
                    this.ACHBankName.Equals(input.ACHBankName))
                ) && 
                (
                    this.GLAccount == input.GLAccount ||
                    (this.GLAccount != null &&
                    this.GLAccount.Equals(input.GLAccount))
                ) && 
                (
                    this.GLDepartment == input.GLDepartment ||
                    (this.GLDepartment != null &&
                    this.GLDepartment.Equals(input.GLDepartment))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.MaskedCreditCardNumber == input.MaskedCreditCardNumber ||
                    (this.MaskedCreditCardNumber != null &&
                    this.MaskedCreditCardNumber.Equals(input.MaskedCreditCardNumber))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CreditCardExpirationMonth == input.CreditCardExpirationMonth ||
                    (this.CreditCardExpirationMonth != null &&
                    this.CreditCardExpirationMonth.Equals(input.CreditCardExpirationMonth))
                ) && 
                (
                    this.CreditCardExpirationYear == input.CreditCardExpirationYear ||
                    (this.CreditCardExpirationYear != null &&
                    this.CreditCardExpirationYear.Equals(input.CreditCardExpirationYear))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.Converted == input.Converted ||
                    (this.Converted != null &&
                    this.Converted.Equals(input.Converted))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayMethodId != null)
                    hashCode = hashCode * 59 + this.PayMethodId.GetHashCode();
                if (this.PayMethodTypeId != null)
                    hashCode = hashCode * 59 + this.PayMethodTypeId.GetHashCode();
                if (this.PayMethodType != null)
                    hashCode = hashCode * 59 + this.PayMethodType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreditCardType != null)
                    hashCode = hashCode * 59 + this.CreditCardType.GetHashCode();
                if (this.CreditCardName != null)
                    hashCode = hashCode * 59 + this.CreditCardName.GetHashCode();
                if (this.ACHAccountHolderName != null)
                    hashCode = hashCode * 59 + this.ACHAccountHolderName.GetHashCode();
                if (this.ACHAccountHolderType != null)
                    hashCode = hashCode * 59 + this.ACHAccountHolderType.GetHashCode();
                if (this.ACHAccountType != null)
                    hashCode = hashCode * 59 + this.ACHAccountType.GetHashCode();
                if (this.ACHBankName != null)
                    hashCode = hashCode * 59 + this.ACHBankName.GetHashCode();
                if (this.GLAccount != null)
                    hashCode = hashCode * 59 + this.GLAccount.GetHashCode();
                if (this.GLDepartment != null)
                    hashCode = hashCode * 59 + this.GLDepartment.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.MaskedCreditCardNumber != null)
                    hashCode = hashCode * 59 + this.MaskedCreditCardNumber.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CreditCardExpirationMonth != null)
                    hashCode = hashCode * 59 + this.CreditCardExpirationMonth.GetHashCode();
                if (this.CreditCardExpirationYear != null)
                    hashCode = hashCode * 59 + this.CreditCardExpirationYear.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.Converted != null)
                    hashCode = hashCode * 59 + this.Converted.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
