/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPhoneNumber
    /// </summary>
    [DataContract]
    public partial class TsiWebPhoneNumber :  IEquatable<TsiWebPhoneNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPhoneNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebPhoneNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPhoneNumber" /> class.
        /// </summary>
        /// <param name="phoneNumberId">Gets or sets the identifier..</param>
        /// <param name="number">Gets or sets the phone number. (required).</param>
        /// <param name="location">Gets or sets the type or extenstion for the phone number..</param>
        /// <param name="isPrimary">Gets or sets a value indicating whether this phone number is primary..</param>
        public TsiWebPhoneNumber(int? phoneNumberId = default(int?), string number = default(string), string location = default(string), bool? isPrimary = default(bool?))
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for TsiWebPhoneNumber and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            this.PhoneNumberId = phoneNumberId;
            this.Location = location;
            this.IsPrimary = isPrimary;
        }
        
        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>Gets or sets the identifier.</value>
        [DataMember(Name="PhoneNumberId", EmitDefaultValue=false)]
        public int? PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or sets the phone number.
        /// </summary>
        /// <value>Gets or sets the phone number.</value>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the type or extenstion for the phone number.
        /// </summary>
        /// <value>Gets or sets the type or extenstion for the phone number.</value>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this phone number is primary.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this phone number is primary.</value>
        [DataMember(Name="IsPrimary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPhoneNumber {\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPhoneNumber);
        }

        /// <summary>
        /// Returns true if TsiWebPhoneNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPhoneNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhoneNumberId == input.PhoneNumberId ||
                    (this.PhoneNumberId != null &&
                    this.PhoneNumberId.Equals(input.PhoneNumberId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhoneNumberId != null)
                    hashCode = hashCode * 59 + this.PhoneNumberId.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
