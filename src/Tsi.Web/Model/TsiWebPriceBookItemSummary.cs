/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPriceBookItemSummary
    /// </summary>
    [DataContract]
    public partial class TsiWebPriceBookItemSummary :  IEquatable<TsiWebPriceBookItemSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPriceBookItemSummary" /> class.
        /// </summary>
        /// <param name="itemId">itemId.</param>
        /// <param name="priceBookItemNumber">priceBookItemNumber.</param>
        /// <param name="item">item.</param>
        /// <param name="assembly">assembly.</param>
        /// <param name="defaultProjectPhase">defaultProjectPhase.</param>
        /// <param name="vendorPartNumbers">vendorPartNumbers.</param>
        /// <param name="quantityOnHand">Gets or sets QuantityOnHand of the item in the pricebook..</param>
        /// <param name="quantityReserved">Gets or sets QuantityReserved of the item in the pricebook..</param>
        /// <param name="quantityOnOrder">Gets or sets QuantityOnOrder of the item in the pricebook..</param>
        /// <param name="available">Gets or sets Available Quantity of the item in the pricebook..</param>
        public TsiWebPriceBookItemSummary(string itemId = default(string), int? priceBookItemNumber = default(int?), TsiWebPriceBookItem item = default(TsiWebPriceBookItem), List<TsiWebAssemblyDetail> assembly = default(List<TsiWebAssemblyDetail>), string defaultProjectPhase = default(string), string vendorPartNumbers = default(string), int? quantityOnHand = default(int?), int? quantityReserved = default(int?), int? quantityOnOrder = default(int?), int? available = default(int?))
        {
            this.ItemId = itemId;
            this.PriceBookItemNumber = priceBookItemNumber;
            this.Item = item;
            this.Assembly = assembly;
            this.DefaultProjectPhase = defaultProjectPhase;
            this.VendorPartNumbers = vendorPartNumbers;
            this.QuantityOnHand = quantityOnHand;
            this.QuantityReserved = quantityReserved;
            this.QuantityOnOrder = quantityOnOrder;
            this.Available = available;
        }
        
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets PriceBookItemNumber
        /// </summary>
        [DataMember(Name="PriceBookItemNumber", EmitDefaultValue=false)]
        public int? PriceBookItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="Item", EmitDefaultValue=false)]
        public TsiWebPriceBookItem Item { get; set; }

        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="Assembly", EmitDefaultValue=false)]
        public List<TsiWebAssemblyDetail> Assembly { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProjectPhase
        /// </summary>
        [DataMember(Name="DefaultProjectPhase", EmitDefaultValue=false)]
        public string DefaultProjectPhase { get; set; }

        /// <summary>
        /// Gets or Sets VendorPartNumbers
        /// </summary>
        [DataMember(Name="VendorPartNumbers", EmitDefaultValue=false)]
        public string VendorPartNumbers { get; set; }

        /// <summary>
        /// Gets or sets QuantityOnHand of the item in the pricebook.
        /// </summary>
        /// <value>Gets or sets QuantityOnHand of the item in the pricebook.</value>
        [DataMember(Name="QuantityOnHand", EmitDefaultValue=false)]
        public int? QuantityOnHand { get; set; }

        /// <summary>
        /// Gets or sets QuantityReserved of the item in the pricebook.
        /// </summary>
        /// <value>Gets or sets QuantityReserved of the item in the pricebook.</value>
        [DataMember(Name="QuantityReserved", EmitDefaultValue=false)]
        public int? QuantityReserved { get; set; }

        /// <summary>
        /// Gets or sets QuantityOnOrder of the item in the pricebook.
        /// </summary>
        /// <value>Gets or sets QuantityOnOrder of the item in the pricebook.</value>
        [DataMember(Name="QuantityOnOrder", EmitDefaultValue=false)]
        public int? QuantityOnOrder { get; set; }

        /// <summary>
        /// Gets or sets Available Quantity of the item in the pricebook.
        /// </summary>
        /// <value>Gets or sets Available Quantity of the item in the pricebook.</value>
        [DataMember(Name="Available", EmitDefaultValue=false)]
        public int? Available { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPriceBookItemSummary {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  PriceBookItemNumber: ").Append(PriceBookItemNumber).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("  DefaultProjectPhase: ").Append(DefaultProjectPhase).Append("\n");
            sb.Append("  VendorPartNumbers: ").Append(VendorPartNumbers).Append("\n");
            sb.Append("  QuantityOnHand: ").Append(QuantityOnHand).Append("\n");
            sb.Append("  QuantityReserved: ").Append(QuantityReserved).Append("\n");
            sb.Append("  QuantityOnOrder: ").Append(QuantityOnOrder).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPriceBookItemSummary);
        }

        /// <summary>
        /// Returns true if TsiWebPriceBookItemSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPriceBookItemSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPriceBookItemSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.PriceBookItemNumber == input.PriceBookItemNumber ||
                    (this.PriceBookItemNumber != null &&
                    this.PriceBookItemNumber.Equals(input.PriceBookItemNumber))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                ) && 
                (
                    this.DefaultProjectPhase == input.DefaultProjectPhase ||
                    (this.DefaultProjectPhase != null &&
                    this.DefaultProjectPhase.Equals(input.DefaultProjectPhase))
                ) && 
                (
                    this.VendorPartNumbers == input.VendorPartNumbers ||
                    (this.VendorPartNumbers != null &&
                    this.VendorPartNumbers.Equals(input.VendorPartNumbers))
                ) && 
                (
                    this.QuantityOnHand == input.QuantityOnHand ||
                    (this.QuantityOnHand != null &&
                    this.QuantityOnHand.Equals(input.QuantityOnHand))
                ) && 
                (
                    this.QuantityReserved == input.QuantityReserved ||
                    (this.QuantityReserved != null &&
                    this.QuantityReserved.Equals(input.QuantityReserved))
                ) && 
                (
                    this.QuantityOnOrder == input.QuantityOnOrder ||
                    (this.QuantityOnOrder != null &&
                    this.QuantityOnOrder.Equals(input.QuantityOnOrder))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.PriceBookItemNumber != null)
                    hashCode = hashCode * 59 + this.PriceBookItemNumber.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                if (this.DefaultProjectPhase != null)
                    hashCode = hashCode * 59 + this.DefaultProjectPhase.GetHashCode();
                if (this.VendorPartNumbers != null)
                    hashCode = hashCode * 59 + this.VendorPartNumbers.GetHashCode();
                if (this.QuantityOnHand != null)
                    hashCode = hashCode * 59 + this.QuantityOnHand.GetHashCode();
                if (this.QuantityReserved != null)
                    hashCode = hashCode * 59 + this.QuantityReserved.GetHashCode();
                if (this.QuantityOnOrder != null)
                    hashCode = hashCode * 59 + this.QuantityOnOrder.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
