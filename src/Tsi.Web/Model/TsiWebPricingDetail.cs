/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPricingDetail
    /// </summary>
    [DataContract]
    public partial class TsiWebPricingDetail :  IEquatable<TsiWebPricingDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPricingDetail" /> class.
        /// </summary>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="description">description.</param>
        /// <param name="priceOverride">priceOverride.</param>
        /// <param name="sellingPrice">sellingPrice.</param>
        /// <param name="markup">markup.</param>
        /// <param name="markdown">markdown.</param>
        /// <param name="margin">margin.</param>
        /// <param name="flatPrice">flatPrice.</param>
        /// <param name="repairLevel">repairLevel.</param>
        /// <param name="costToUse">costToUse.</param>
        /// <param name="priceLevelCategoryName">priceLevelCategoryName.</param>
        /// <param name="glCodeOverride">glCodeOverride.</param>
        /// <param name="incomeGlCode">incomeGlCode.</param>
        /// <param name="costGlCode">costGlCode.</param>
        public TsiWebPricingDetail(int? priceLevel = default(int?), string description = default(string), bool? priceOverride = default(bool?), double? sellingPrice = default(double?), double? markup = default(double?), double? markdown = default(double?), double? margin = default(double?), double? flatPrice = default(double?), bool? repairLevel = default(bool?), string costToUse = default(string), string priceLevelCategoryName = default(string), bool? glCodeOverride = default(bool?), string incomeGlCode = default(string), string costGlCode = default(string))
        {
            this.PriceLevel = priceLevel;
            this.Description = description;
            this.PriceOverride = priceOverride;
            this.SellingPrice = sellingPrice;
            this.Markup = markup;
            this.Markdown = markdown;
            this.Margin = margin;
            this.FlatPrice = flatPrice;
            this.RepairLevel = repairLevel;
            this.CostToUse = costToUse;
            this.PriceLevelCategoryName = priceLevelCategoryName;
            this.GlCodeOverride = glCodeOverride;
            this.IncomeGlCode = incomeGlCode;
            this.CostGlCode = costGlCode;
        }
        
        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PriceOverride
        /// </summary>
        [DataMember(Name="PriceOverride", EmitDefaultValue=false)]
        public bool? PriceOverride { get; set; }

        /// <summary>
        /// Gets or Sets SellingPrice
        /// </summary>
        [DataMember(Name="SellingPrice", EmitDefaultValue=false)]
        public double? SellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets Markup
        /// </summary>
        [DataMember(Name="Markup", EmitDefaultValue=false)]
        public double? Markup { get; set; }

        /// <summary>
        /// Gets or Sets Markdown
        /// </summary>
        [DataMember(Name="Markdown", EmitDefaultValue=false)]
        public double? Markdown { get; set; }

        /// <summary>
        /// Gets or Sets Margin
        /// </summary>
        [DataMember(Name="Margin", EmitDefaultValue=false)]
        public double? Margin { get; set; }

        /// <summary>
        /// Gets or Sets FlatPrice
        /// </summary>
        [DataMember(Name="FlatPrice", EmitDefaultValue=false)]
        public double? FlatPrice { get; set; }

        /// <summary>
        /// Gets or Sets RepairLevel
        /// </summary>
        [DataMember(Name="RepairLevel", EmitDefaultValue=false)]
        public bool? RepairLevel { get; set; }

        /// <summary>
        /// Gets or Sets CostToUse
        /// </summary>
        [DataMember(Name="CostToUse", EmitDefaultValue=false)]
        public string CostToUse { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevelCategoryName
        /// </summary>
        [DataMember(Name="PriceLevelCategoryName", EmitDefaultValue=false)]
        public string PriceLevelCategoryName { get; set; }

        /// <summary>
        /// Gets or Sets GlCodeOverride
        /// </summary>
        [DataMember(Name="GlCodeOverride", EmitDefaultValue=false)]
        public bool? GlCodeOverride { get; set; }

        /// <summary>
        /// Gets or Sets IncomeGlCode
        /// </summary>
        [DataMember(Name="IncomeGlCode", EmitDefaultValue=false)]
        public string IncomeGlCode { get; set; }

        /// <summary>
        /// Gets or Sets CostGlCode
        /// </summary>
        [DataMember(Name="CostGlCode", EmitDefaultValue=false)]
        public string CostGlCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPricingDetail {\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PriceOverride: ").Append(PriceOverride).Append("\n");
            sb.Append("  SellingPrice: ").Append(SellingPrice).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  Markdown: ").Append(Markdown).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  FlatPrice: ").Append(FlatPrice).Append("\n");
            sb.Append("  RepairLevel: ").Append(RepairLevel).Append("\n");
            sb.Append("  CostToUse: ").Append(CostToUse).Append("\n");
            sb.Append("  PriceLevelCategoryName: ").Append(PriceLevelCategoryName).Append("\n");
            sb.Append("  GlCodeOverride: ").Append(GlCodeOverride).Append("\n");
            sb.Append("  IncomeGlCode: ").Append(IncomeGlCode).Append("\n");
            sb.Append("  CostGlCode: ").Append(CostGlCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPricingDetail);
        }

        /// <summary>
        /// Returns true if TsiWebPricingDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPricingDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPricingDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PriceOverride == input.PriceOverride ||
                    (this.PriceOverride != null &&
                    this.PriceOverride.Equals(input.PriceOverride))
                ) && 
                (
                    this.SellingPrice == input.SellingPrice ||
                    (this.SellingPrice != null &&
                    this.SellingPrice.Equals(input.SellingPrice))
                ) && 
                (
                    this.Markup == input.Markup ||
                    (this.Markup != null &&
                    this.Markup.Equals(input.Markup))
                ) && 
                (
                    this.Markdown == input.Markdown ||
                    (this.Markdown != null &&
                    this.Markdown.Equals(input.Markdown))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.FlatPrice == input.FlatPrice ||
                    (this.FlatPrice != null &&
                    this.FlatPrice.Equals(input.FlatPrice))
                ) && 
                (
                    this.RepairLevel == input.RepairLevel ||
                    (this.RepairLevel != null &&
                    this.RepairLevel.Equals(input.RepairLevel))
                ) && 
                (
                    this.CostToUse == input.CostToUse ||
                    (this.CostToUse != null &&
                    this.CostToUse.Equals(input.CostToUse))
                ) && 
                (
                    this.PriceLevelCategoryName == input.PriceLevelCategoryName ||
                    (this.PriceLevelCategoryName != null &&
                    this.PriceLevelCategoryName.Equals(input.PriceLevelCategoryName))
                ) && 
                (
                    this.GlCodeOverride == input.GlCodeOverride ||
                    (this.GlCodeOverride != null &&
                    this.GlCodeOverride.Equals(input.GlCodeOverride))
                ) && 
                (
                    this.IncomeGlCode == input.IncomeGlCode ||
                    (this.IncomeGlCode != null &&
                    this.IncomeGlCode.Equals(input.IncomeGlCode))
                ) && 
                (
                    this.CostGlCode == input.CostGlCode ||
                    (this.CostGlCode != null &&
                    this.CostGlCode.Equals(input.CostGlCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PriceOverride != null)
                    hashCode = hashCode * 59 + this.PriceOverride.GetHashCode();
                if (this.SellingPrice != null)
                    hashCode = hashCode * 59 + this.SellingPrice.GetHashCode();
                if (this.Markup != null)
                    hashCode = hashCode * 59 + this.Markup.GetHashCode();
                if (this.Markdown != null)
                    hashCode = hashCode * 59 + this.Markdown.GetHashCode();
                if (this.Margin != null)
                    hashCode = hashCode * 59 + this.Margin.GetHashCode();
                if (this.FlatPrice != null)
                    hashCode = hashCode * 59 + this.FlatPrice.GetHashCode();
                if (this.RepairLevel != null)
                    hashCode = hashCode * 59 + this.RepairLevel.GetHashCode();
                if (this.CostToUse != null)
                    hashCode = hashCode * 59 + this.CostToUse.GetHashCode();
                if (this.PriceLevelCategoryName != null)
                    hashCode = hashCode * 59 + this.PriceLevelCategoryName.GetHashCode();
                if (this.GlCodeOverride != null)
                    hashCode = hashCode * 59 + this.GlCodeOverride.GetHashCode();
                if (this.IncomeGlCode != null)
                    hashCode = hashCode * 59 + this.IncomeGlCode.GetHashCode();
                if (this.CostGlCode != null)
                    hashCode = hashCode * 59 + this.CostGlCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
