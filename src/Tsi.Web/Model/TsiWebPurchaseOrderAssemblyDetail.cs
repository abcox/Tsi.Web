/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPurchaseOrderAssemblyDetail
    /// </summary>
    [DataContract]
    public partial class TsiWebPurchaseOrderAssemblyDetail :  IEquatable<TsiWebPurchaseOrderAssemblyDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPurchaseOrderAssemblyDetail" /> class.
        /// </summary>
        /// <param name="purchaseOrderAssemblyDetailNumber">purchaseOrderAssemblyDetailNumber.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="quantityOnAssembly">quantityOnAssembly.</param>
        /// <param name="projectedCost">projectedCost.</param>
        /// <param name="totalProjectedCost">totalProjectedCost.</param>
        /// <param name="actualCost">actualCost.</param>
        /// <param name="gLCode">gLCode.</param>
        /// <param name="type">type.</param>
        /// <param name="serialNumbers">serialNumbers.</param>
        public TsiWebPurchaseOrderAssemblyDetail(int? purchaseOrderAssemblyDetailNumber = default(int?), string itemDescription = default(string), string itemId = default(string), double? quantityOnAssembly = default(double?), double? projectedCost = default(double?), double? totalProjectedCost = default(double?), double? actualCost = default(double?), string gLCode = default(string), string type = default(string), int? serialNumbers = default(int?))
        {
            this.PurchaseOrderAssemblyDetailNumber = purchaseOrderAssemblyDetailNumber;
            this.ItemDescription = itemDescription;
            this.ItemId = itemId;
            this.QuantityOnAssembly = quantityOnAssembly;
            this.ProjectedCost = projectedCost;
            this.TotalProjectedCost = totalProjectedCost;
            this.ActualCost = actualCost;
            this.GLCode = gLCode;
            this.Type = type;
            this.SerialNumbers = serialNumbers;
        }
        
        /// <summary>
        /// Gets or Sets PurchaseOrderAssemblyDetailNumber
        /// </summary>
        [DataMember(Name="PurchaseOrderAssemblyDetailNumber", EmitDefaultValue=false)]
        public int? PurchaseOrderAssemblyDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOnAssembly
        /// </summary>
        [DataMember(Name="QuantityOnAssembly", EmitDefaultValue=false)]
        public double? QuantityOnAssembly { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedCost
        /// </summary>
        [DataMember(Name="ProjectedCost", EmitDefaultValue=false)]
        public double? ProjectedCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalProjectedCost
        /// </summary>
        [DataMember(Name="TotalProjectedCost", EmitDefaultValue=false)]
        public double? TotalProjectedCost { get; set; }

        /// <summary>
        /// Gets or Sets ActualCost
        /// </summary>
        [DataMember(Name="ActualCost", EmitDefaultValue=false)]
        public double? ActualCost { get; set; }

        /// <summary>
        /// Gets or Sets GLCode
        /// </summary>
        [DataMember(Name="GLCode", EmitDefaultValue=false)]
        public string GLCode { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumbers
        /// </summary>
        [DataMember(Name="SerialNumbers", EmitDefaultValue=false)]
        public int? SerialNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPurchaseOrderAssemblyDetail {\n");
            sb.Append("  PurchaseOrderAssemblyDetailNumber: ").Append(PurchaseOrderAssemblyDetailNumber).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  QuantityOnAssembly: ").Append(QuantityOnAssembly).Append("\n");
            sb.Append("  ProjectedCost: ").Append(ProjectedCost).Append("\n");
            sb.Append("  TotalProjectedCost: ").Append(TotalProjectedCost).Append("\n");
            sb.Append("  ActualCost: ").Append(ActualCost).Append("\n");
            sb.Append("  GLCode: ").Append(GLCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPurchaseOrderAssemblyDetail);
        }

        /// <summary>
        /// Returns true if TsiWebPurchaseOrderAssemblyDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPurchaseOrderAssemblyDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPurchaseOrderAssemblyDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderAssemblyDetailNumber == input.PurchaseOrderAssemblyDetailNumber ||
                    (this.PurchaseOrderAssemblyDetailNumber != null &&
                    this.PurchaseOrderAssemblyDetailNumber.Equals(input.PurchaseOrderAssemblyDetailNumber))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.QuantityOnAssembly == input.QuantityOnAssembly ||
                    (this.QuantityOnAssembly != null &&
                    this.QuantityOnAssembly.Equals(input.QuantityOnAssembly))
                ) && 
                (
                    this.ProjectedCost == input.ProjectedCost ||
                    (this.ProjectedCost != null &&
                    this.ProjectedCost.Equals(input.ProjectedCost))
                ) && 
                (
                    this.TotalProjectedCost == input.TotalProjectedCost ||
                    (this.TotalProjectedCost != null &&
                    this.TotalProjectedCost.Equals(input.TotalProjectedCost))
                ) && 
                (
                    this.ActualCost == input.ActualCost ||
                    (this.ActualCost != null &&
                    this.ActualCost.Equals(input.ActualCost))
                ) && 
                (
                    this.GLCode == input.GLCode ||
                    (this.GLCode != null &&
                    this.GLCode.Equals(input.GLCode))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SerialNumbers == input.SerialNumbers ||
                    (this.SerialNumbers != null &&
                    this.SerialNumbers.Equals(input.SerialNumbers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderAssemblyDetailNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderAssemblyDetailNumber.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.QuantityOnAssembly != null)
                    hashCode = hashCode * 59 + this.QuantityOnAssembly.GetHashCode();
                if (this.ProjectedCost != null)
                    hashCode = hashCode * 59 + this.ProjectedCost.GetHashCode();
                if (this.TotalProjectedCost != null)
                    hashCode = hashCode * 59 + this.TotalProjectedCost.GetHashCode();
                if (this.ActualCost != null)
                    hashCode = hashCode * 59 + this.ActualCost.GetHashCode();
                if (this.GLCode != null)
                    hashCode = hashCode * 59 + this.GLCode.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SerialNumbers != null)
                    hashCode = hashCode * 59 + this.SerialNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
