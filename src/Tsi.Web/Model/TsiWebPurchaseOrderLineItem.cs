/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPurchaseOrderLineItem
    /// </summary>
    [DataContract]
    public partial class TsiWebPurchaseOrderLineItem :  IEquatable<TsiWebPurchaseOrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPurchaseOrderLineItem" /> class.
        /// </summary>
        /// <param name="purchaseOrderLineItemNumber">purchaseOrderLineItemNumber.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="itemID">itemID.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="partNumber">partNumber.</param>
        /// <param name="vendorItemNumber">vendorItemNumber.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="receivingLocation">receivingLocation.</param>
        /// <param name="quantityOrdered">quantityOrdered.</param>
        /// <param name="projectedCost">projectedCost.</param>
        /// <param name="totalProjectedCost">totalProjectedCost.</param>
        /// <param name="isRepair">isRepair.</param>
        /// <param name="unitOfValue">unitOfValue.</param>
        /// <param name="receivedCost">receivedCost.</param>
        /// <param name="quantityCancelled">quantityCancelled.</param>
        /// <param name="stock">stock.</param>
        /// <param name="distributionFlag">distributionFlag.</param>
        /// <param name="comment">comment.</param>
        /// <param name="cancelledComment">cancelledComment.</param>
        /// <param name="expectedDate">expectedDate.</param>
        /// <param name="gLCode">gLCode.</param>
        /// <param name="caseItemID">caseItemID.</param>
        /// <param name="caseItemDescription">caseItemDescription.</param>
        /// <param name="caseUnitOfMeasure">caseUnitOfMeasure.</param>
        /// <param name="displayQuantityOrdered">displayQuantityOrdered.</param>
        /// <param name="caseUnitCost">caseUnitCost.</param>
        /// <param name="isCaseOrder">isCaseOrder.</param>
        /// <param name="updateBaseCostAndSellPrices">updateBaseCostAndSellPrices.</param>
        /// <param name="isClosedAssembly">isClosedAssembly.</param>
        /// <param name="type">type.</param>
        /// <param name="updateVendorCost">updateVendorCost.</param>
        /// <param name="receivingBin">receivingBin.</param>
        /// <param name="serialNumbers">serialNumbers.</param>
        /// <param name="lineItemReceipts">lineItemReceipts.</param>
        /// <param name="assembly">assembly.</param>
        public TsiWebPurchaseOrderLineItem(int? purchaseOrderLineItemNumber = default(int?), int? lineNumber = default(int?), string itemID = default(string), string itemDescription = default(string), string partNumber = default(string), string vendorItemNumber = default(string), string unitOfMeasure = default(string), string receivingLocation = default(string), double? quantityOrdered = default(double?), double? projectedCost = default(double?), double? totalProjectedCost = default(double?), bool? isRepair = default(bool?), int? unitOfValue = default(int?), double? receivedCost = default(double?), double? quantityCancelled = default(double?), bool? stock = default(bool?), bool? distributionFlag = default(bool?), string comment = default(string), string cancelledComment = default(string), DateTime? expectedDate = default(DateTime?), string gLCode = default(string), string caseItemID = default(string), string caseItemDescription = default(string), string caseUnitOfMeasure = default(string), double? displayQuantityOrdered = default(double?), double? caseUnitCost = default(double?), bool? isCaseOrder = default(bool?), bool? updateBaseCostAndSellPrices = default(bool?), bool? isClosedAssembly = default(bool?), string type = default(string), bool? updateVendorCost = default(bool?), string receivingBin = default(string), int? serialNumbers = default(int?), int? lineItemReceipts = default(int?), List<TsiWebPurchaseOrderAssemblyDetail> assembly = default(List<TsiWebPurchaseOrderAssemblyDetail>))
        {
            this.PurchaseOrderLineItemNumber = purchaseOrderLineItemNumber;
            this.LineNumber = lineNumber;
            this.ItemID = itemID;
            this.ItemDescription = itemDescription;
            this.PartNumber = partNumber;
            this.VendorItemNumber = vendorItemNumber;
            this.UnitOfMeasure = unitOfMeasure;
            this.ReceivingLocation = receivingLocation;
            this.QuantityOrdered = quantityOrdered;
            this.ProjectedCost = projectedCost;
            this.TotalProjectedCost = totalProjectedCost;
            this.IsRepair = isRepair;
            this.UnitOfValue = unitOfValue;
            this.ReceivedCost = receivedCost;
            this.QuantityCancelled = quantityCancelled;
            this.Stock = stock;
            this.DistributionFlag = distributionFlag;
            this.Comment = comment;
            this.CancelledComment = cancelledComment;
            this.ExpectedDate = expectedDate;
            this.GLCode = gLCode;
            this.CaseItemID = caseItemID;
            this.CaseItemDescription = caseItemDescription;
            this.CaseUnitOfMeasure = caseUnitOfMeasure;
            this.DisplayQuantityOrdered = displayQuantityOrdered;
            this.CaseUnitCost = caseUnitCost;
            this.IsCaseOrder = isCaseOrder;
            this.UpdateBaseCostAndSellPrices = updateBaseCostAndSellPrices;
            this.IsClosedAssembly = isClosedAssembly;
            this.Type = type;
            this.UpdateVendorCost = updateVendorCost;
            this.ReceivingBin = receivingBin;
            this.SerialNumbers = serialNumbers;
            this.LineItemReceipts = lineItemReceipts;
            this.Assembly = assembly;
        }
        
        /// <summary>
        /// Gets or Sets PurchaseOrderLineItemNumber
        /// </summary>
        [DataMember(Name="PurchaseOrderLineItemNumber", EmitDefaultValue=false)]
        public int? PurchaseOrderLineItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="LineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="PartNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets VendorItemNumber
        /// </summary>
        [DataMember(Name="VendorItemNumber", EmitDefaultValue=false)]
        public string VendorItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="UnitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingLocation
        /// </summary>
        [DataMember(Name="ReceivingLocation", EmitDefaultValue=false)]
        public string ReceivingLocation { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOrdered
        /// </summary>
        [DataMember(Name="QuantityOrdered", EmitDefaultValue=false)]
        public double? QuantityOrdered { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedCost
        /// </summary>
        [DataMember(Name="ProjectedCost", EmitDefaultValue=false)]
        public double? ProjectedCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalProjectedCost
        /// </summary>
        [DataMember(Name="TotalProjectedCost", EmitDefaultValue=false)]
        public double? TotalProjectedCost { get; set; }

        /// <summary>
        /// Gets or Sets IsRepair
        /// </summary>
        [DataMember(Name="IsRepair", EmitDefaultValue=false)]
        public bool? IsRepair { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfValue
        /// </summary>
        [DataMember(Name="UnitOfValue", EmitDefaultValue=false)]
        public int? UnitOfValue { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedCost
        /// </summary>
        [DataMember(Name="ReceivedCost", EmitDefaultValue=false)]
        public double? ReceivedCost { get; set; }

        /// <summary>
        /// Gets or Sets QuantityCancelled
        /// </summary>
        [DataMember(Name="QuantityCancelled", EmitDefaultValue=false)]
        public double? QuantityCancelled { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name="Stock", EmitDefaultValue=false)]
        public bool? Stock { get; set; }

        /// <summary>
        /// Gets or Sets DistributionFlag
        /// </summary>
        [DataMember(Name="DistributionFlag", EmitDefaultValue=false)]
        public bool? DistributionFlag { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CancelledComment
        /// </summary>
        [DataMember(Name="CancelledComment", EmitDefaultValue=false)]
        public string CancelledComment { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedDate
        /// </summary>
        [DataMember(Name="ExpectedDate", EmitDefaultValue=false)]
        public DateTime? ExpectedDate { get; set; }

        /// <summary>
        /// Gets or Sets GLCode
        /// </summary>
        [DataMember(Name="GLCode", EmitDefaultValue=false)]
        public string GLCode { get; set; }

        /// <summary>
        /// Gets or Sets CaseItemID
        /// </summary>
        [DataMember(Name="CaseItemID", EmitDefaultValue=false)]
        public string CaseItemID { get; set; }

        /// <summary>
        /// Gets or Sets CaseItemDescription
        /// </summary>
        [DataMember(Name="CaseItemDescription", EmitDefaultValue=false)]
        public string CaseItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets CaseUnitOfMeasure
        /// </summary>
        [DataMember(Name="CaseUnitOfMeasure", EmitDefaultValue=false)]
        public string CaseUnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets DisplayQuantityOrdered
        /// </summary>
        [DataMember(Name="DisplayQuantityOrdered", EmitDefaultValue=false)]
        public double? DisplayQuantityOrdered { get; set; }

        /// <summary>
        /// Gets or Sets CaseUnitCost
        /// </summary>
        [DataMember(Name="CaseUnitCost", EmitDefaultValue=false)]
        public double? CaseUnitCost { get; set; }

        /// <summary>
        /// Gets or Sets IsCaseOrder
        /// </summary>
        [DataMember(Name="IsCaseOrder", EmitDefaultValue=false)]
        public bool? IsCaseOrder { get; set; }

        /// <summary>
        /// Gets or Sets UpdateBaseCostAndSellPrices
        /// </summary>
        [DataMember(Name="UpdateBaseCostAndSellPrices", EmitDefaultValue=false)]
        public bool? UpdateBaseCostAndSellPrices { get; set; }

        /// <summary>
        /// Gets or Sets IsClosedAssembly
        /// </summary>
        [DataMember(Name="IsClosedAssembly", EmitDefaultValue=false)]
        public bool? IsClosedAssembly { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdateVendorCost
        /// </summary>
        [DataMember(Name="UpdateVendorCost", EmitDefaultValue=false)]
        public bool? UpdateVendorCost { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingBin
        /// </summary>
        [DataMember(Name="ReceivingBin", EmitDefaultValue=false)]
        public string ReceivingBin { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumbers
        /// </summary>
        [DataMember(Name="SerialNumbers", EmitDefaultValue=false)]
        public int? SerialNumbers { get; set; }

        /// <summary>
        /// Gets or Sets LineItemReceipts
        /// </summary>
        [DataMember(Name="LineItemReceipts", EmitDefaultValue=false)]
        public int? LineItemReceipts { get; set; }

        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="Assembly", EmitDefaultValue=false)]
        public List<TsiWebPurchaseOrderAssemblyDetail> Assembly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPurchaseOrderLineItem {\n");
            sb.Append("  PurchaseOrderLineItemNumber: ").Append(PurchaseOrderLineItemNumber).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  VendorItemNumber: ").Append(VendorItemNumber).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  ReceivingLocation: ").Append(ReceivingLocation).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  ProjectedCost: ").Append(ProjectedCost).Append("\n");
            sb.Append("  TotalProjectedCost: ").Append(TotalProjectedCost).Append("\n");
            sb.Append("  IsRepair: ").Append(IsRepair).Append("\n");
            sb.Append("  UnitOfValue: ").Append(UnitOfValue).Append("\n");
            sb.Append("  ReceivedCost: ").Append(ReceivedCost).Append("\n");
            sb.Append("  QuantityCancelled: ").Append(QuantityCancelled).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  DistributionFlag: ").Append(DistributionFlag).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CancelledComment: ").Append(CancelledComment).Append("\n");
            sb.Append("  ExpectedDate: ").Append(ExpectedDate).Append("\n");
            sb.Append("  GLCode: ").Append(GLCode).Append("\n");
            sb.Append("  CaseItemID: ").Append(CaseItemID).Append("\n");
            sb.Append("  CaseItemDescription: ").Append(CaseItemDescription).Append("\n");
            sb.Append("  CaseUnitOfMeasure: ").Append(CaseUnitOfMeasure).Append("\n");
            sb.Append("  DisplayQuantityOrdered: ").Append(DisplayQuantityOrdered).Append("\n");
            sb.Append("  CaseUnitCost: ").Append(CaseUnitCost).Append("\n");
            sb.Append("  IsCaseOrder: ").Append(IsCaseOrder).Append("\n");
            sb.Append("  UpdateBaseCostAndSellPrices: ").Append(UpdateBaseCostAndSellPrices).Append("\n");
            sb.Append("  IsClosedAssembly: ").Append(IsClosedAssembly).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdateVendorCost: ").Append(UpdateVendorCost).Append("\n");
            sb.Append("  ReceivingBin: ").Append(ReceivingBin).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("  LineItemReceipts: ").Append(LineItemReceipts).Append("\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPurchaseOrderLineItem);
        }

        /// <summary>
        /// Returns true if TsiWebPurchaseOrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPurchaseOrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPurchaseOrderLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PurchaseOrderLineItemNumber == input.PurchaseOrderLineItemNumber ||
                    (this.PurchaseOrderLineItemNumber != null &&
                    this.PurchaseOrderLineItemNumber.Equals(input.PurchaseOrderLineItemNumber))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.VendorItemNumber == input.VendorItemNumber ||
                    (this.VendorItemNumber != null &&
                    this.VendorItemNumber.Equals(input.VendorItemNumber))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.ReceivingLocation == input.ReceivingLocation ||
                    (this.ReceivingLocation != null &&
                    this.ReceivingLocation.Equals(input.ReceivingLocation))
                ) && 
                (
                    this.QuantityOrdered == input.QuantityOrdered ||
                    (this.QuantityOrdered != null &&
                    this.QuantityOrdered.Equals(input.QuantityOrdered))
                ) && 
                (
                    this.ProjectedCost == input.ProjectedCost ||
                    (this.ProjectedCost != null &&
                    this.ProjectedCost.Equals(input.ProjectedCost))
                ) && 
                (
                    this.TotalProjectedCost == input.TotalProjectedCost ||
                    (this.TotalProjectedCost != null &&
                    this.TotalProjectedCost.Equals(input.TotalProjectedCost))
                ) && 
                (
                    this.IsRepair == input.IsRepair ||
                    (this.IsRepair != null &&
                    this.IsRepair.Equals(input.IsRepair))
                ) && 
                (
                    this.UnitOfValue == input.UnitOfValue ||
                    (this.UnitOfValue != null &&
                    this.UnitOfValue.Equals(input.UnitOfValue))
                ) && 
                (
                    this.ReceivedCost == input.ReceivedCost ||
                    (this.ReceivedCost != null &&
                    this.ReceivedCost.Equals(input.ReceivedCost))
                ) && 
                (
                    this.QuantityCancelled == input.QuantityCancelled ||
                    (this.QuantityCancelled != null &&
                    this.QuantityCancelled.Equals(input.QuantityCancelled))
                ) && 
                (
                    this.Stock == input.Stock ||
                    (this.Stock != null &&
                    this.Stock.Equals(input.Stock))
                ) && 
                (
                    this.DistributionFlag == input.DistributionFlag ||
                    (this.DistributionFlag != null &&
                    this.DistributionFlag.Equals(input.DistributionFlag))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CancelledComment == input.CancelledComment ||
                    (this.CancelledComment != null &&
                    this.CancelledComment.Equals(input.CancelledComment))
                ) && 
                (
                    this.ExpectedDate == input.ExpectedDate ||
                    (this.ExpectedDate != null &&
                    this.ExpectedDate.Equals(input.ExpectedDate))
                ) && 
                (
                    this.GLCode == input.GLCode ||
                    (this.GLCode != null &&
                    this.GLCode.Equals(input.GLCode))
                ) && 
                (
                    this.CaseItemID == input.CaseItemID ||
                    (this.CaseItemID != null &&
                    this.CaseItemID.Equals(input.CaseItemID))
                ) && 
                (
                    this.CaseItemDescription == input.CaseItemDescription ||
                    (this.CaseItemDescription != null &&
                    this.CaseItemDescription.Equals(input.CaseItemDescription))
                ) && 
                (
                    this.CaseUnitOfMeasure == input.CaseUnitOfMeasure ||
                    (this.CaseUnitOfMeasure != null &&
                    this.CaseUnitOfMeasure.Equals(input.CaseUnitOfMeasure))
                ) && 
                (
                    this.DisplayQuantityOrdered == input.DisplayQuantityOrdered ||
                    (this.DisplayQuantityOrdered != null &&
                    this.DisplayQuantityOrdered.Equals(input.DisplayQuantityOrdered))
                ) && 
                (
                    this.CaseUnitCost == input.CaseUnitCost ||
                    (this.CaseUnitCost != null &&
                    this.CaseUnitCost.Equals(input.CaseUnitCost))
                ) && 
                (
                    this.IsCaseOrder == input.IsCaseOrder ||
                    (this.IsCaseOrder != null &&
                    this.IsCaseOrder.Equals(input.IsCaseOrder))
                ) && 
                (
                    this.UpdateBaseCostAndSellPrices == input.UpdateBaseCostAndSellPrices ||
                    (this.UpdateBaseCostAndSellPrices != null &&
                    this.UpdateBaseCostAndSellPrices.Equals(input.UpdateBaseCostAndSellPrices))
                ) && 
                (
                    this.IsClosedAssembly == input.IsClosedAssembly ||
                    (this.IsClosedAssembly != null &&
                    this.IsClosedAssembly.Equals(input.IsClosedAssembly))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdateVendorCost == input.UpdateVendorCost ||
                    (this.UpdateVendorCost != null &&
                    this.UpdateVendorCost.Equals(input.UpdateVendorCost))
                ) && 
                (
                    this.ReceivingBin == input.ReceivingBin ||
                    (this.ReceivingBin != null &&
                    this.ReceivingBin.Equals(input.ReceivingBin))
                ) && 
                (
                    this.SerialNumbers == input.SerialNumbers ||
                    (this.SerialNumbers != null &&
                    this.SerialNumbers.Equals(input.SerialNumbers))
                ) && 
                (
                    this.LineItemReceipts == input.LineItemReceipts ||
                    (this.LineItemReceipts != null &&
                    this.LineItemReceipts.Equals(input.LineItemReceipts))
                ) && 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PurchaseOrderLineItemNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderLineItemNumber.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.VendorItemNumber != null)
                    hashCode = hashCode * 59 + this.VendorItemNumber.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.ReceivingLocation != null)
                    hashCode = hashCode * 59 + this.ReceivingLocation.GetHashCode();
                if (this.QuantityOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityOrdered.GetHashCode();
                if (this.ProjectedCost != null)
                    hashCode = hashCode * 59 + this.ProjectedCost.GetHashCode();
                if (this.TotalProjectedCost != null)
                    hashCode = hashCode * 59 + this.TotalProjectedCost.GetHashCode();
                if (this.IsRepair != null)
                    hashCode = hashCode * 59 + this.IsRepair.GetHashCode();
                if (this.UnitOfValue != null)
                    hashCode = hashCode * 59 + this.UnitOfValue.GetHashCode();
                if (this.ReceivedCost != null)
                    hashCode = hashCode * 59 + this.ReceivedCost.GetHashCode();
                if (this.QuantityCancelled != null)
                    hashCode = hashCode * 59 + this.QuantityCancelled.GetHashCode();
                if (this.Stock != null)
                    hashCode = hashCode * 59 + this.Stock.GetHashCode();
                if (this.DistributionFlag != null)
                    hashCode = hashCode * 59 + this.DistributionFlag.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CancelledComment != null)
                    hashCode = hashCode * 59 + this.CancelledComment.GetHashCode();
                if (this.ExpectedDate != null)
                    hashCode = hashCode * 59 + this.ExpectedDate.GetHashCode();
                if (this.GLCode != null)
                    hashCode = hashCode * 59 + this.GLCode.GetHashCode();
                if (this.CaseItemID != null)
                    hashCode = hashCode * 59 + this.CaseItemID.GetHashCode();
                if (this.CaseItemDescription != null)
                    hashCode = hashCode * 59 + this.CaseItemDescription.GetHashCode();
                if (this.CaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.CaseUnitOfMeasure.GetHashCode();
                if (this.DisplayQuantityOrdered != null)
                    hashCode = hashCode * 59 + this.DisplayQuantityOrdered.GetHashCode();
                if (this.CaseUnitCost != null)
                    hashCode = hashCode * 59 + this.CaseUnitCost.GetHashCode();
                if (this.IsCaseOrder != null)
                    hashCode = hashCode * 59 + this.IsCaseOrder.GetHashCode();
                if (this.UpdateBaseCostAndSellPrices != null)
                    hashCode = hashCode * 59 + this.UpdateBaseCostAndSellPrices.GetHashCode();
                if (this.IsClosedAssembly != null)
                    hashCode = hashCode * 59 + this.IsClosedAssembly.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdateVendorCost != null)
                    hashCode = hashCode * 59 + this.UpdateVendorCost.GetHashCode();
                if (this.ReceivingBin != null)
                    hashCode = hashCode * 59 + this.ReceivingBin.GetHashCode();
                if (this.SerialNumbers != null)
                    hashCode = hashCode * 59 + this.SerialNumbers.GetHashCode();
                if (this.LineItemReceipts != null)
                    hashCode = hashCode * 59 + this.LineItemReceipts.GetHashCode();
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
