/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebPurchasing
    /// </summary>
    [DataContract]
    public partial class TsiWebPurchasing :  IEquatable<TsiWebPurchasing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebPurchasing" /> class.
        /// </summary>
        /// <param name="caseItemId">caseItemId.</param>
        /// <param name="caseDescription">caseDescription.</param>
        /// <param name="caseUnitOfMeasure">caseUnitOfMeasure.</param>
        /// <param name="caseQuantity">caseQuantity.</param>
        /// <param name="caseCost">caseCost.</param>
        /// <param name="minimumQuantity">minimumQuantity.</param>
        /// <param name="maximumQuantity">maximumQuantity.</param>
        /// <param name="reorderQuantity">reorderQuantity.</param>
        /// <param name="quantityNeededtoFillOrders">quantityNeededtoFillOrders.</param>
        /// <param name="quantityShort">quantityShort.</param>
        /// <param name="receivingLocation">receivingLocation.</param>
        /// <param name="lastReceivedDate">lastReceivedDate.</param>
        /// <param name="latestCost">latestCost.</param>
        /// <param name="printSingleReceiptLabels">printSingleReceiptLabels.</param>
        /// <param name="updateVendorCost">updateVendorCost.</param>
        /// <param name="updateBaseCostAndSellPrices">updateBaseCostAndSellPrices.</param>
        public TsiWebPurchasing(string caseItemId = default(string), string caseDescription = default(string), string caseUnitOfMeasure = default(string), double? caseQuantity = default(double?), double? caseCost = default(double?), int? minimumQuantity = default(int?), int? maximumQuantity = default(int?), double? reorderQuantity = default(double?), int? quantityNeededtoFillOrders = default(int?), int? quantityShort = default(int?), string receivingLocation = default(string), DateTime? lastReceivedDate = default(DateTime?), double? latestCost = default(double?), bool? printSingleReceiptLabels = default(bool?), bool? updateVendorCost = default(bool?), bool? updateBaseCostAndSellPrices = default(bool?))
        {
            this.CaseItemId = caseItemId;
            this.CaseDescription = caseDescription;
            this.CaseUnitOfMeasure = caseUnitOfMeasure;
            this.CaseQuantity = caseQuantity;
            this.CaseCost = caseCost;
            this.MinimumQuantity = minimumQuantity;
            this.MaximumQuantity = maximumQuantity;
            this.ReorderQuantity = reorderQuantity;
            this.QuantityNeededtoFillOrders = quantityNeededtoFillOrders;
            this.QuantityShort = quantityShort;
            this.ReceivingLocation = receivingLocation;
            this.LastReceivedDate = lastReceivedDate;
            this.LatestCost = latestCost;
            this.PrintSingleReceiptLabels = printSingleReceiptLabels;
            this.UpdateVendorCost = updateVendorCost;
            this.UpdateBaseCostAndSellPrices = updateBaseCostAndSellPrices;
        }
        
        /// <summary>
        /// Gets or Sets CaseItemId
        /// </summary>
        [DataMember(Name="CaseItemId", EmitDefaultValue=false)]
        public string CaseItemId { get; set; }

        /// <summary>
        /// Gets or Sets CaseDescription
        /// </summary>
        [DataMember(Name="CaseDescription", EmitDefaultValue=false)]
        public string CaseDescription { get; set; }

        /// <summary>
        /// Gets or Sets CaseUnitOfMeasure
        /// </summary>
        [DataMember(Name="CaseUnitOfMeasure", EmitDefaultValue=false)]
        public string CaseUnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets CaseQuantity
        /// </summary>
        [DataMember(Name="CaseQuantity", EmitDefaultValue=false)]
        public double? CaseQuantity { get; set; }

        /// <summary>
        /// Gets or Sets CaseCost
        /// </summary>
        [DataMember(Name="CaseCost", EmitDefaultValue=false)]
        public double? CaseCost { get; set; }

        /// <summary>
        /// Gets or Sets MinimumQuantity
        /// </summary>
        [DataMember(Name="MinimumQuantity", EmitDefaultValue=false)]
        public int? MinimumQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MaximumQuantity
        /// </summary>
        [DataMember(Name="MaximumQuantity", EmitDefaultValue=false)]
        public int? MaximumQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ReorderQuantity
        /// </summary>
        [DataMember(Name="ReorderQuantity", EmitDefaultValue=false)]
        public double? ReorderQuantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityNeededtoFillOrders
        /// </summary>
        [DataMember(Name="QuantityNeededtoFillOrders", EmitDefaultValue=false)]
        public int? QuantityNeededtoFillOrders { get; set; }

        /// <summary>
        /// Gets or Sets QuantityShort
        /// </summary>
        [DataMember(Name="QuantityShort", EmitDefaultValue=false)]
        public int? QuantityShort { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingLocation
        /// </summary>
        [DataMember(Name="ReceivingLocation", EmitDefaultValue=false)]
        public string ReceivingLocation { get; set; }

        /// <summary>
        /// Gets or Sets LastReceivedDate
        /// </summary>
        [DataMember(Name="LastReceivedDate", EmitDefaultValue=false)]
        public DateTime? LastReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets LatestCost
        /// </summary>
        [DataMember(Name="LatestCost", EmitDefaultValue=false)]
        public double? LatestCost { get; set; }

        /// <summary>
        /// Gets or Sets PrintSingleReceiptLabels
        /// </summary>
        [DataMember(Name="PrintSingleReceiptLabels", EmitDefaultValue=false)]
        public bool? PrintSingleReceiptLabels { get; set; }

        /// <summary>
        /// Gets or Sets UpdateVendorCost
        /// </summary>
        [DataMember(Name="UpdateVendorCost", EmitDefaultValue=false)]
        public bool? UpdateVendorCost { get; set; }

        /// <summary>
        /// Gets or Sets UpdateBaseCostAndSellPrices
        /// </summary>
        [DataMember(Name="UpdateBaseCostAndSellPrices", EmitDefaultValue=false)]
        public bool? UpdateBaseCostAndSellPrices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebPurchasing {\n");
            sb.Append("  CaseItemId: ").Append(CaseItemId).Append("\n");
            sb.Append("  CaseDescription: ").Append(CaseDescription).Append("\n");
            sb.Append("  CaseUnitOfMeasure: ").Append(CaseUnitOfMeasure).Append("\n");
            sb.Append("  CaseQuantity: ").Append(CaseQuantity).Append("\n");
            sb.Append("  CaseCost: ").Append(CaseCost).Append("\n");
            sb.Append("  MinimumQuantity: ").Append(MinimumQuantity).Append("\n");
            sb.Append("  MaximumQuantity: ").Append(MaximumQuantity).Append("\n");
            sb.Append("  ReorderQuantity: ").Append(ReorderQuantity).Append("\n");
            sb.Append("  QuantityNeededtoFillOrders: ").Append(QuantityNeededtoFillOrders).Append("\n");
            sb.Append("  QuantityShort: ").Append(QuantityShort).Append("\n");
            sb.Append("  ReceivingLocation: ").Append(ReceivingLocation).Append("\n");
            sb.Append("  LastReceivedDate: ").Append(LastReceivedDate).Append("\n");
            sb.Append("  LatestCost: ").Append(LatestCost).Append("\n");
            sb.Append("  PrintSingleReceiptLabels: ").Append(PrintSingleReceiptLabels).Append("\n");
            sb.Append("  UpdateVendorCost: ").Append(UpdateVendorCost).Append("\n");
            sb.Append("  UpdateBaseCostAndSellPrices: ").Append(UpdateBaseCostAndSellPrices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebPurchasing);
        }

        /// <summary>
        /// Returns true if TsiWebPurchasing instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebPurchasing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebPurchasing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CaseItemId == input.CaseItemId ||
                    (this.CaseItemId != null &&
                    this.CaseItemId.Equals(input.CaseItemId))
                ) && 
                (
                    this.CaseDescription == input.CaseDescription ||
                    (this.CaseDescription != null &&
                    this.CaseDescription.Equals(input.CaseDescription))
                ) && 
                (
                    this.CaseUnitOfMeasure == input.CaseUnitOfMeasure ||
                    (this.CaseUnitOfMeasure != null &&
                    this.CaseUnitOfMeasure.Equals(input.CaseUnitOfMeasure))
                ) && 
                (
                    this.CaseQuantity == input.CaseQuantity ||
                    (this.CaseQuantity != null &&
                    this.CaseQuantity.Equals(input.CaseQuantity))
                ) && 
                (
                    this.CaseCost == input.CaseCost ||
                    (this.CaseCost != null &&
                    this.CaseCost.Equals(input.CaseCost))
                ) && 
                (
                    this.MinimumQuantity == input.MinimumQuantity ||
                    (this.MinimumQuantity != null &&
                    this.MinimumQuantity.Equals(input.MinimumQuantity))
                ) && 
                (
                    this.MaximumQuantity == input.MaximumQuantity ||
                    (this.MaximumQuantity != null &&
                    this.MaximumQuantity.Equals(input.MaximumQuantity))
                ) && 
                (
                    this.ReorderQuantity == input.ReorderQuantity ||
                    (this.ReorderQuantity != null &&
                    this.ReorderQuantity.Equals(input.ReorderQuantity))
                ) && 
                (
                    this.QuantityNeededtoFillOrders == input.QuantityNeededtoFillOrders ||
                    (this.QuantityNeededtoFillOrders != null &&
                    this.QuantityNeededtoFillOrders.Equals(input.QuantityNeededtoFillOrders))
                ) && 
                (
                    this.QuantityShort == input.QuantityShort ||
                    (this.QuantityShort != null &&
                    this.QuantityShort.Equals(input.QuantityShort))
                ) && 
                (
                    this.ReceivingLocation == input.ReceivingLocation ||
                    (this.ReceivingLocation != null &&
                    this.ReceivingLocation.Equals(input.ReceivingLocation))
                ) && 
                (
                    this.LastReceivedDate == input.LastReceivedDate ||
                    (this.LastReceivedDate != null &&
                    this.LastReceivedDate.Equals(input.LastReceivedDate))
                ) && 
                (
                    this.LatestCost == input.LatestCost ||
                    (this.LatestCost != null &&
                    this.LatestCost.Equals(input.LatestCost))
                ) && 
                (
                    this.PrintSingleReceiptLabels == input.PrintSingleReceiptLabels ||
                    (this.PrintSingleReceiptLabels != null &&
                    this.PrintSingleReceiptLabels.Equals(input.PrintSingleReceiptLabels))
                ) && 
                (
                    this.UpdateVendorCost == input.UpdateVendorCost ||
                    (this.UpdateVendorCost != null &&
                    this.UpdateVendorCost.Equals(input.UpdateVendorCost))
                ) && 
                (
                    this.UpdateBaseCostAndSellPrices == input.UpdateBaseCostAndSellPrices ||
                    (this.UpdateBaseCostAndSellPrices != null &&
                    this.UpdateBaseCostAndSellPrices.Equals(input.UpdateBaseCostAndSellPrices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaseItemId != null)
                    hashCode = hashCode * 59 + this.CaseItemId.GetHashCode();
                if (this.CaseDescription != null)
                    hashCode = hashCode * 59 + this.CaseDescription.GetHashCode();
                if (this.CaseUnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.CaseUnitOfMeasure.GetHashCode();
                if (this.CaseQuantity != null)
                    hashCode = hashCode * 59 + this.CaseQuantity.GetHashCode();
                if (this.CaseCost != null)
                    hashCode = hashCode * 59 + this.CaseCost.GetHashCode();
                if (this.MinimumQuantity != null)
                    hashCode = hashCode * 59 + this.MinimumQuantity.GetHashCode();
                if (this.MaximumQuantity != null)
                    hashCode = hashCode * 59 + this.MaximumQuantity.GetHashCode();
                if (this.ReorderQuantity != null)
                    hashCode = hashCode * 59 + this.ReorderQuantity.GetHashCode();
                if (this.QuantityNeededtoFillOrders != null)
                    hashCode = hashCode * 59 + this.QuantityNeededtoFillOrders.GetHashCode();
                if (this.QuantityShort != null)
                    hashCode = hashCode * 59 + this.QuantityShort.GetHashCode();
                if (this.ReceivingLocation != null)
                    hashCode = hashCode * 59 + this.ReceivingLocation.GetHashCode();
                if (this.LastReceivedDate != null)
                    hashCode = hashCode * 59 + this.LastReceivedDate.GetHashCode();
                if (this.LatestCost != null)
                    hashCode = hashCode * 59 + this.LatestCost.GetHashCode();
                if (this.PrintSingleReceiptLabels != null)
                    hashCode = hashCode * 59 + this.PrintSingleReceiptLabels.GetHashCode();
                if (this.UpdateVendorCost != null)
                    hashCode = hashCode * 59 + this.UpdateVendorCost.GetHashCode();
                if (this.UpdateBaseCostAndSellPrices != null)
                    hashCode = hashCode * 59 + this.UpdateBaseCostAndSellPrices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
