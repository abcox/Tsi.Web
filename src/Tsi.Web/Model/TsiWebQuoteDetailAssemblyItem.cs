/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebQuoteDetailAssemblyItem
    /// </summary>
    [DataContract]
    public partial class TsiWebQuoteDetailAssemblyItem :  IEquatable<TsiWebQuoteDetailAssemblyItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebQuoteDetailAssemblyItem" /> class.
        /// </summary>
        /// <param name="quoteDetailAssemblyItemNumber">quoteDetailAssemblyItemNumber.</param>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="cancelledBy">cancelledBy.</param>
        /// <param name="invoiceAssemblyDetailNumber">invoiceAssemblyDetailNumber.</param>
        /// <param name="serviceOrderAssemblyDetailNumber">serviceOrderAssemblyDetailNumber.</param>
        /// <param name="priceLevelDescription">priceLevelDescription.</param>
        /// <param name="assemblyItemId">assemblyItemId.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="gSTExempt">gSTExempt.</param>
        /// <param name="printOnQuote">printOnQuote.</param>
        /// <param name="printOnInvoice">printOnInvoice.</param>
        /// <param name="subjectToProviderTax">subjectToProviderTax.</param>
        /// <param name="useThisCostWhenOrdering">useThisCostWhenOrdering.</param>
        /// <param name="orderByDate">orderByDate.</param>
        /// <param name="type">type.</param>
        /// <param name="eachQuantity">eachQuantity.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="quantityFilled">quantityFilled.</param>
        /// <param name="quantityPosted">quantityPosted.</param>
        /// <param name="unitHoursNeeded">unitHoursNeeded.</param>
        /// <param name="hoursEntered">hoursEntered.</param>
        /// <param name="totalHoursNeeded">totalHoursNeeded.</param>
        /// <param name="quantityOrdered">quantityOrdered.</param>
        /// <param name="quantityReceived">quantityReceived.</param>
        /// <param name="manufacturerListPrice">manufacturerListPrice.</param>
        /// <param name="bookPrice">bookPrice.</param>
        /// <param name="sellingPrice">sellingPrice.</param>
        /// <param name="totalSellingPrice">totalSellingPrice.</param>
        /// <param name="cost">cost.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="taxableAmount">taxableAmount.</param>
        /// <param name="gSTaxableAmount">gSTaxableAmount.</param>
        /// <param name="actualUnitCost">actualUnitCost.</param>
        /// <param name="providerTaxableAmount">providerTaxableAmount.</param>
        public TsiWebQuoteDetailAssemblyItem(int? quoteDetailAssemblyItemNumber = default(int?), int? priceLevel = default(int?), int? cancelledBy = default(int?), int? invoiceAssemblyDetailNumber = default(int?), int? serviceOrderAssemblyDetailNumber = default(int?), string priceLevelDescription = default(string), string assemblyItemId = default(string), string itemId = default(string), string itemDescription = default(string), string unitOfMeasure = default(string), bool? taxable = default(bool?), bool? gSTExempt = default(bool?), bool? printOnQuote = default(bool?), bool? printOnInvoice = default(bool?), bool? subjectToProviderTax = default(bool?), bool? useThisCostWhenOrdering = default(bool?), DateTime? orderByDate = default(DateTime?), string type = default(string), double? eachQuantity = default(double?), double? quantity = default(double?), double? quantityFilled = default(double?), double? quantityPosted = default(double?), double? unitHoursNeeded = default(double?), double? hoursEntered = default(double?), double? totalHoursNeeded = default(double?), double? quantityOrdered = default(double?), double? quantityReceived = default(double?), double? manufacturerListPrice = default(double?), double? bookPrice = default(double?), double? sellingPrice = default(double?), double? totalSellingPrice = default(double?), double? cost = default(double?), double? totalCost = default(double?), double? taxableAmount = default(double?), double? gSTaxableAmount = default(double?), double? actualUnitCost = default(double?), double? providerTaxableAmount = default(double?))
        {
            this.QuoteDetailAssemblyItemNumber = quoteDetailAssemblyItemNumber;
            this.PriceLevel = priceLevel;
            this.CancelledBy = cancelledBy;
            this.InvoiceAssemblyDetailNumber = invoiceAssemblyDetailNumber;
            this.ServiceOrderAssemblyDetailNumber = serviceOrderAssemblyDetailNumber;
            this.PriceLevelDescription = priceLevelDescription;
            this.AssemblyItemId = assemblyItemId;
            this.ItemId = itemId;
            this.ItemDescription = itemDescription;
            this.UnitOfMeasure = unitOfMeasure;
            this.Taxable = taxable;
            this.GSTExempt = gSTExempt;
            this.PrintOnQuote = printOnQuote;
            this.PrintOnInvoice = printOnInvoice;
            this.SubjectToProviderTax = subjectToProviderTax;
            this.UseThisCostWhenOrdering = useThisCostWhenOrdering;
            this.OrderByDate = orderByDate;
            this.Type = type;
            this.EachQuantity = eachQuantity;
            this.Quantity = quantity;
            this.QuantityFilled = quantityFilled;
            this.QuantityPosted = quantityPosted;
            this.UnitHoursNeeded = unitHoursNeeded;
            this.HoursEntered = hoursEntered;
            this.TotalHoursNeeded = totalHoursNeeded;
            this.QuantityOrdered = quantityOrdered;
            this.QuantityReceived = quantityReceived;
            this.ManufacturerListPrice = manufacturerListPrice;
            this.BookPrice = bookPrice;
            this.SellingPrice = sellingPrice;
            this.TotalSellingPrice = totalSellingPrice;
            this.Cost = cost;
            this.TotalCost = totalCost;
            this.TaxableAmount = taxableAmount;
            this.GSTaxableAmount = gSTaxableAmount;
            this.ActualUnitCost = actualUnitCost;
            this.ProviderTaxableAmount = providerTaxableAmount;
        }
        
        /// <summary>
        /// Gets or Sets QuoteDetailAssemblyItemNumber
        /// </summary>
        [DataMember(Name="QuoteDetailAssemblyItemNumber", EmitDefaultValue=false)]
        public int? QuoteDetailAssemblyItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets CancelledBy
        /// </summary>
        [DataMember(Name="CancelledBy", EmitDefaultValue=false)]
        public int? CancelledBy { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAssemblyDetailNumber
        /// </summary>
        [DataMember(Name="InvoiceAssemblyDetailNumber", EmitDefaultValue=false)]
        public int? InvoiceAssemblyDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderAssemblyDetailNumber
        /// </summary>
        [DataMember(Name="ServiceOrderAssemblyDetailNumber", EmitDefaultValue=false)]
        public int? ServiceOrderAssemblyDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevelDescription
        /// </summary>
        [DataMember(Name="PriceLevelDescription", EmitDefaultValue=false)]
        public string PriceLevelDescription { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyItemId
        /// </summary>
        [DataMember(Name="AssemblyItemId", EmitDefaultValue=false)]
        public string AssemblyItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="UnitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name="Taxable", EmitDefaultValue=false)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Gets or Sets GSTExempt
        /// </summary>
        [DataMember(Name="GSTExempt", EmitDefaultValue=false)]
        public bool? GSTExempt { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnQuote
        /// </summary>
        [DataMember(Name="PrintOnQuote", EmitDefaultValue=false)]
        public bool? PrintOnQuote { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnInvoice
        /// </summary>
        [DataMember(Name="PrintOnInvoice", EmitDefaultValue=false)]
        public bool? PrintOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets SubjectToProviderTax
        /// </summary>
        [DataMember(Name="SubjectToProviderTax", EmitDefaultValue=false)]
        public bool? SubjectToProviderTax { get; set; }

        /// <summary>
        /// Gets or Sets UseThisCostWhenOrdering
        /// </summary>
        [DataMember(Name="UseThisCostWhenOrdering", EmitDefaultValue=false)]
        public bool? UseThisCostWhenOrdering { get; set; }

        /// <summary>
        /// Gets or Sets OrderByDate
        /// </summary>
        [DataMember(Name="OrderByDate", EmitDefaultValue=false)]
        public DateTime? OrderByDate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets EachQuantity
        /// </summary>
        [DataMember(Name="EachQuantity", EmitDefaultValue=false)]
        public double? EachQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [DataMember(Name="QuantityFilled", EmitDefaultValue=false)]
        public double? QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPosted
        /// </summary>
        [DataMember(Name="QuantityPosted", EmitDefaultValue=false)]
        public double? QuantityPosted { get; set; }

        /// <summary>
        /// Gets or Sets UnitHoursNeeded
        /// </summary>
        [DataMember(Name="UnitHoursNeeded", EmitDefaultValue=false)]
        public double? UnitHoursNeeded { get; set; }

        /// <summary>
        /// Gets or Sets HoursEntered
        /// </summary>
        [DataMember(Name="HoursEntered", EmitDefaultValue=false)]
        public double? HoursEntered { get; set; }

        /// <summary>
        /// Gets or Sets TotalHoursNeeded
        /// </summary>
        [DataMember(Name="TotalHoursNeeded", EmitDefaultValue=false)]
        public double? TotalHoursNeeded { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOrdered
        /// </summary>
        [DataMember(Name="QuantityOrdered", EmitDefaultValue=false)]
        public double? QuantityOrdered { get; set; }

        /// <summary>
        /// Gets or Sets QuantityReceived
        /// </summary>
        [DataMember(Name="QuantityReceived", EmitDefaultValue=false)]
        public double? QuantityReceived { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerListPrice
        /// </summary>
        [DataMember(Name="ManufacturerListPrice", EmitDefaultValue=false)]
        public double? ManufacturerListPrice { get; set; }

        /// <summary>
        /// Gets or Sets BookPrice
        /// </summary>
        [DataMember(Name="BookPrice", EmitDefaultValue=false)]
        public double? BookPrice { get; set; }

        /// <summary>
        /// Gets or Sets SellingPrice
        /// </summary>
        [DataMember(Name="SellingPrice", EmitDefaultValue=false)]
        public double? SellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalSellingPrice
        /// </summary>
        [DataMember(Name="TotalSellingPrice", EmitDefaultValue=false)]
        public double? TotalSellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="Cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name="TotalCost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets TaxableAmount
        /// </summary>
        [DataMember(Name="TaxableAmount", EmitDefaultValue=false)]
        public double? TaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxableAmount
        /// </summary>
        [DataMember(Name="GSTaxableAmount", EmitDefaultValue=false)]
        public double? GSTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ActualUnitCost
        /// </summary>
        [DataMember(Name="ActualUnitCost", EmitDefaultValue=false)]
        public double? ActualUnitCost { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTaxableAmount
        /// </summary>
        [DataMember(Name="ProviderTaxableAmount", EmitDefaultValue=false)]
        public double? ProviderTaxableAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebQuoteDetailAssemblyItem {\n");
            sb.Append("  QuoteDetailAssemblyItemNumber: ").Append(QuoteDetailAssemblyItemNumber).Append("\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  CancelledBy: ").Append(CancelledBy).Append("\n");
            sb.Append("  InvoiceAssemblyDetailNumber: ").Append(InvoiceAssemblyDetailNumber).Append("\n");
            sb.Append("  ServiceOrderAssemblyDetailNumber: ").Append(ServiceOrderAssemblyDetailNumber).Append("\n");
            sb.Append("  PriceLevelDescription: ").Append(PriceLevelDescription).Append("\n");
            sb.Append("  AssemblyItemId: ").Append(AssemblyItemId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  GSTExempt: ").Append(GSTExempt).Append("\n");
            sb.Append("  PrintOnQuote: ").Append(PrintOnQuote).Append("\n");
            sb.Append("  PrintOnInvoice: ").Append(PrintOnInvoice).Append("\n");
            sb.Append("  SubjectToProviderTax: ").Append(SubjectToProviderTax).Append("\n");
            sb.Append("  UseThisCostWhenOrdering: ").Append(UseThisCostWhenOrdering).Append("\n");
            sb.Append("  OrderByDate: ").Append(OrderByDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EachQuantity: ").Append(EachQuantity).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityPosted: ").Append(QuantityPosted).Append("\n");
            sb.Append("  UnitHoursNeeded: ").Append(UnitHoursNeeded).Append("\n");
            sb.Append("  HoursEntered: ").Append(HoursEntered).Append("\n");
            sb.Append("  TotalHoursNeeded: ").Append(TotalHoursNeeded).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  QuantityReceived: ").Append(QuantityReceived).Append("\n");
            sb.Append("  ManufacturerListPrice: ").Append(ManufacturerListPrice).Append("\n");
            sb.Append("  BookPrice: ").Append(BookPrice).Append("\n");
            sb.Append("  SellingPrice: ").Append(SellingPrice).Append("\n");
            sb.Append("  TotalSellingPrice: ").Append(TotalSellingPrice).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  GSTaxableAmount: ").Append(GSTaxableAmount).Append("\n");
            sb.Append("  ActualUnitCost: ").Append(ActualUnitCost).Append("\n");
            sb.Append("  ProviderTaxableAmount: ").Append(ProviderTaxableAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebQuoteDetailAssemblyItem);
        }

        /// <summary>
        /// Returns true if TsiWebQuoteDetailAssemblyItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebQuoteDetailAssemblyItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebQuoteDetailAssemblyItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteDetailAssemblyItemNumber == input.QuoteDetailAssemblyItemNumber ||
                    (this.QuoteDetailAssemblyItemNumber != null &&
                    this.QuoteDetailAssemblyItemNumber.Equals(input.QuoteDetailAssemblyItemNumber))
                ) && 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.CancelledBy == input.CancelledBy ||
                    (this.CancelledBy != null &&
                    this.CancelledBy.Equals(input.CancelledBy))
                ) && 
                (
                    this.InvoiceAssemblyDetailNumber == input.InvoiceAssemblyDetailNumber ||
                    (this.InvoiceAssemblyDetailNumber != null &&
                    this.InvoiceAssemblyDetailNumber.Equals(input.InvoiceAssemblyDetailNumber))
                ) && 
                (
                    this.ServiceOrderAssemblyDetailNumber == input.ServiceOrderAssemblyDetailNumber ||
                    (this.ServiceOrderAssemblyDetailNumber != null &&
                    this.ServiceOrderAssemblyDetailNumber.Equals(input.ServiceOrderAssemblyDetailNumber))
                ) && 
                (
                    this.PriceLevelDescription == input.PriceLevelDescription ||
                    (this.PriceLevelDescription != null &&
                    this.PriceLevelDescription.Equals(input.PriceLevelDescription))
                ) && 
                (
                    this.AssemblyItemId == input.AssemblyItemId ||
                    (this.AssemblyItemId != null &&
                    this.AssemblyItemId.Equals(input.AssemblyItemId))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    (this.Taxable != null &&
                    this.Taxable.Equals(input.Taxable))
                ) && 
                (
                    this.GSTExempt == input.GSTExempt ||
                    (this.GSTExempt != null &&
                    this.GSTExempt.Equals(input.GSTExempt))
                ) && 
                (
                    this.PrintOnQuote == input.PrintOnQuote ||
                    (this.PrintOnQuote != null &&
                    this.PrintOnQuote.Equals(input.PrintOnQuote))
                ) && 
                (
                    this.PrintOnInvoice == input.PrintOnInvoice ||
                    (this.PrintOnInvoice != null &&
                    this.PrintOnInvoice.Equals(input.PrintOnInvoice))
                ) && 
                (
                    this.SubjectToProviderTax == input.SubjectToProviderTax ||
                    (this.SubjectToProviderTax != null &&
                    this.SubjectToProviderTax.Equals(input.SubjectToProviderTax))
                ) && 
                (
                    this.UseThisCostWhenOrdering == input.UseThisCostWhenOrdering ||
                    (this.UseThisCostWhenOrdering != null &&
                    this.UseThisCostWhenOrdering.Equals(input.UseThisCostWhenOrdering))
                ) && 
                (
                    this.OrderByDate == input.OrderByDate ||
                    (this.OrderByDate != null &&
                    this.OrderByDate.Equals(input.OrderByDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EachQuantity == input.EachQuantity ||
                    (this.EachQuantity != null &&
                    this.EachQuantity.Equals(input.EachQuantity))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityFilled == input.QuantityFilled ||
                    (this.QuantityFilled != null &&
                    this.QuantityFilled.Equals(input.QuantityFilled))
                ) && 
                (
                    this.QuantityPosted == input.QuantityPosted ||
                    (this.QuantityPosted != null &&
                    this.QuantityPosted.Equals(input.QuantityPosted))
                ) && 
                (
                    this.UnitHoursNeeded == input.UnitHoursNeeded ||
                    (this.UnitHoursNeeded != null &&
                    this.UnitHoursNeeded.Equals(input.UnitHoursNeeded))
                ) && 
                (
                    this.HoursEntered == input.HoursEntered ||
                    (this.HoursEntered != null &&
                    this.HoursEntered.Equals(input.HoursEntered))
                ) && 
                (
                    this.TotalHoursNeeded == input.TotalHoursNeeded ||
                    (this.TotalHoursNeeded != null &&
                    this.TotalHoursNeeded.Equals(input.TotalHoursNeeded))
                ) && 
                (
                    this.QuantityOrdered == input.QuantityOrdered ||
                    (this.QuantityOrdered != null &&
                    this.QuantityOrdered.Equals(input.QuantityOrdered))
                ) && 
                (
                    this.QuantityReceived == input.QuantityReceived ||
                    (this.QuantityReceived != null &&
                    this.QuantityReceived.Equals(input.QuantityReceived))
                ) && 
                (
                    this.ManufacturerListPrice == input.ManufacturerListPrice ||
                    (this.ManufacturerListPrice != null &&
                    this.ManufacturerListPrice.Equals(input.ManufacturerListPrice))
                ) && 
                (
                    this.BookPrice == input.BookPrice ||
                    (this.BookPrice != null &&
                    this.BookPrice.Equals(input.BookPrice))
                ) && 
                (
                    this.SellingPrice == input.SellingPrice ||
                    (this.SellingPrice != null &&
                    this.SellingPrice.Equals(input.SellingPrice))
                ) && 
                (
                    this.TotalSellingPrice == input.TotalSellingPrice ||
                    (this.TotalSellingPrice != null &&
                    this.TotalSellingPrice.Equals(input.TotalSellingPrice))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    (this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(input.TaxableAmount))
                ) && 
                (
                    this.GSTaxableAmount == input.GSTaxableAmount ||
                    (this.GSTaxableAmount != null &&
                    this.GSTaxableAmount.Equals(input.GSTaxableAmount))
                ) && 
                (
                    this.ActualUnitCost == input.ActualUnitCost ||
                    (this.ActualUnitCost != null &&
                    this.ActualUnitCost.Equals(input.ActualUnitCost))
                ) && 
                (
                    this.ProviderTaxableAmount == input.ProviderTaxableAmount ||
                    (this.ProviderTaxableAmount != null &&
                    this.ProviderTaxableAmount.Equals(input.ProviderTaxableAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteDetailAssemblyItemNumber != null)
                    hashCode = hashCode * 59 + this.QuoteDetailAssemblyItemNumber.GetHashCode();
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.CancelledBy != null)
                    hashCode = hashCode * 59 + this.CancelledBy.GetHashCode();
                if (this.InvoiceAssemblyDetailNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceAssemblyDetailNumber.GetHashCode();
                if (this.ServiceOrderAssemblyDetailNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderAssemblyDetailNumber.GetHashCode();
                if (this.PriceLevelDescription != null)
                    hashCode = hashCode * 59 + this.PriceLevelDescription.GetHashCode();
                if (this.AssemblyItemId != null)
                    hashCode = hashCode * 59 + this.AssemblyItemId.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.Taxable != null)
                    hashCode = hashCode * 59 + this.Taxable.GetHashCode();
                if (this.GSTExempt != null)
                    hashCode = hashCode * 59 + this.GSTExempt.GetHashCode();
                if (this.PrintOnQuote != null)
                    hashCode = hashCode * 59 + this.PrintOnQuote.GetHashCode();
                if (this.PrintOnInvoice != null)
                    hashCode = hashCode * 59 + this.PrintOnInvoice.GetHashCode();
                if (this.SubjectToProviderTax != null)
                    hashCode = hashCode * 59 + this.SubjectToProviderTax.GetHashCode();
                if (this.UseThisCostWhenOrdering != null)
                    hashCode = hashCode * 59 + this.UseThisCostWhenOrdering.GetHashCode();
                if (this.OrderByDate != null)
                    hashCode = hashCode * 59 + this.OrderByDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EachQuantity != null)
                    hashCode = hashCode * 59 + this.EachQuantity.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityFilled != null)
                    hashCode = hashCode * 59 + this.QuantityFilled.GetHashCode();
                if (this.QuantityPosted != null)
                    hashCode = hashCode * 59 + this.QuantityPosted.GetHashCode();
                if (this.UnitHoursNeeded != null)
                    hashCode = hashCode * 59 + this.UnitHoursNeeded.GetHashCode();
                if (this.HoursEntered != null)
                    hashCode = hashCode * 59 + this.HoursEntered.GetHashCode();
                if (this.TotalHoursNeeded != null)
                    hashCode = hashCode * 59 + this.TotalHoursNeeded.GetHashCode();
                if (this.QuantityOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityOrdered.GetHashCode();
                if (this.QuantityReceived != null)
                    hashCode = hashCode * 59 + this.QuantityReceived.GetHashCode();
                if (this.ManufacturerListPrice != null)
                    hashCode = hashCode * 59 + this.ManufacturerListPrice.GetHashCode();
                if (this.BookPrice != null)
                    hashCode = hashCode * 59 + this.BookPrice.GetHashCode();
                if (this.SellingPrice != null)
                    hashCode = hashCode * 59 + this.SellingPrice.GetHashCode();
                if (this.TotalSellingPrice != null)
                    hashCode = hashCode * 59 + this.TotalSellingPrice.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.TaxableAmount != null)
                    hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                if (this.GSTaxableAmount != null)
                    hashCode = hashCode * 59 + this.GSTaxableAmount.GetHashCode();
                if (this.ActualUnitCost != null)
                    hashCode = hashCode * 59 + this.ActualUnitCost.GetHashCode();
                if (this.ProviderTaxableAmount != null)
                    hashCode = hashCode * 59 + this.ProviderTaxableAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
