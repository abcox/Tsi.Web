/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebQuoteDetailItem
    /// </summary>
    [DataContract]
    public partial class TsiWebQuoteDetailItem :  IEquatable<TsiWebQuoteDetailItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebQuoteDetailItem" /> class.
        /// </summary>
        /// <param name="quoteDetailItemNumber">quoteDetailItemNumber.</param>
        /// <param name="priceLevelDescription">priceLevelDescription.</param>
        /// <param name="assembly">assembly.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="vendorAccountNumber">vendorAccountNumber.</param>
        /// <param name="originalQuoteNumber">originalQuoteNumber.</param>
        /// <param name="serviceOrderDetailNumber">serviceOrderDetailNumber.</param>
        /// <param name="subtotalIndent">subtotalIndent.</param>
        /// <param name="associatedFooterLineNumber">associatedFooterLineNumber.</param>
        /// <param name="associatedHeaderLineNumber">associatedHeaderLineNumber.</param>
        /// <param name="subtotalFooterItemNumber">subtotalFooterItemNumber.</param>
        /// <param name="subtotalHeaderItemNumber">subtotalHeaderItemNumber.</param>
        /// <param name="projectPhaseNumber">projectPhaseNumber.</param>
        /// <param name="invoiceDetailNumber">invoiceDetailNumber.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="installLocation">installLocation.</param>
        /// <param name="applyDiscountOff">applyDiscountOff.</param>
        /// <param name="priceAdjuster">priceAdjuster.</param>
        /// <param name="nonStockItemType">nonStockItemType.</param>
        /// <param name="nonStockVendorItemNumber">nonStockVendorItemNumber.</param>
        /// <param name="type">type.</param>
        /// <param name="assemblyType">assemblyType.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="isAssembly">isAssembly.</param>
        /// <param name="gSTExempt">gSTExempt.</param>
        /// <param name="isCommentOnly">isCommentOnly.</param>
        /// <param name="isStockItem">isStockItem.</param>
        /// <param name="printOnQuote">printOnQuote.</param>
        /// <param name="useBookPricesAndDiscounts">useBookPricesAndDiscounts.</param>
        /// <param name="subjectToProviderTax">subjectToProviderTax.</param>
        /// <param name="itemCanBeDiscounted">itemCanBeDiscounted.</param>
        /// <param name="useThisCostWhenOrdering">useThisCostWhenOrdering.</param>
        /// <param name="printOnInvoice">printOnInvoice.</param>
        /// <param name="subjectToSingleItemTax">subjectToSingleItemTax.</param>
        /// <param name="printSubTotalHeaderFooter">printSubTotalHeaderFooter.</param>
        /// <param name="orderByDate">orderByDate.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="quantityFilled">quantityFilled.</param>
        /// <param name="quantityBackOrdered">quantityBackOrdered.</param>
        /// <param name="quantityPosted">quantityPosted.</param>
        /// <param name="unitHoursNeeded">unitHoursNeeded.</param>
        /// <param name="totalHoursNeeded">totalHoursNeeded.</param>
        /// <param name="quantityOrdered">quantityOrdered.</param>
        /// <param name="quantityReceived">quantityReceived.</param>
        /// <param name="quantityAssignedToServiceOrders">quantityAssignedToServiceOrders.</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="adjustmentPercent">adjustmentPercent.</param>
        /// <param name="hoursEntered">hoursEntered.</param>
        /// <param name="taxableAmount">taxableAmount.</param>
        /// <param name="manufacturerListPrice">manufacturerListPrice.</param>
        /// <param name="bookPrice">bookPrice.</param>
        /// <param name="sellingPrice">sellingPrice.</param>
        /// <param name="totalSellingPrice">totalSellingPrice.</param>
        /// <param name="cost">cost.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="gSTaxableAmount">gSTaxableAmount.</param>
        /// <param name="actualUnitCost">actualUnitCost.</param>
        /// <param name="discountAmount">discountAmount.</param>
        /// <param name="providerTaxableAmount">providerTaxableAmount.</param>
        /// <param name="adjustmentAmount">adjustmentAmount.</param>
        /// <param name="totalDiscount">totalDiscount.</param>
        /// <param name="isSerialized">isSerialized.</param>
        public TsiWebQuoteDetailItem(int? quoteDetailItemNumber = default(int?), string priceLevelDescription = default(string), List<TsiWebQuoteDetailAssemblyItem> assembly = default(List<TsiWebQuoteDetailAssemblyItem>), int? lineNumber = default(int?), int? priceLevel = default(int?), int? vendorAccountNumber = default(int?), int? originalQuoteNumber = default(int?), int? serviceOrderDetailNumber = default(int?), int? subtotalIndent = default(int?), int? associatedFooterLineNumber = default(int?), int? associatedHeaderLineNumber = default(int?), int? subtotalFooterItemNumber = default(int?), int? subtotalHeaderItemNumber = default(int?), int? projectPhaseNumber = default(int?), int? invoiceDetailNumber = default(int?), string itemId = default(string), string itemDescription = default(string), string unitOfMeasure = default(string), string installLocation = default(string), string applyDiscountOff = default(string), string priceAdjuster = default(string), string nonStockItemType = default(string), string nonStockVendorItemNumber = default(string), string type = default(string), string assemblyType = default(string), bool? taxable = default(bool?), bool? isAssembly = default(bool?), bool? gSTExempt = default(bool?), bool? isCommentOnly = default(bool?), bool? isStockItem = default(bool?), bool? printOnQuote = default(bool?), bool? useBookPricesAndDiscounts = default(bool?), bool? subjectToProviderTax = default(bool?), bool? itemCanBeDiscounted = default(bool?), bool? useThisCostWhenOrdering = default(bool?), bool? printOnInvoice = default(bool?), bool? subjectToSingleItemTax = default(bool?), bool? printSubTotalHeaderFooter = default(bool?), DateTime? orderByDate = default(DateTime?), double? quantity = default(double?), double? quantityFilled = default(double?), double? quantityBackOrdered = default(double?), double? quantityPosted = default(double?), double? unitHoursNeeded = default(double?), double? totalHoursNeeded = default(double?), double? quantityOrdered = default(double?), double? quantityReceived = default(double?), double? quantityAssignedToServiceOrders = default(double?), double? discountPercent = default(double?), double? adjustmentPercent = default(double?), double? hoursEntered = default(double?), double? taxableAmount = default(double?), double? manufacturerListPrice = default(double?), double? bookPrice = default(double?), double? sellingPrice = default(double?), double? totalSellingPrice = default(double?), double? cost = default(double?), double? totalCost = default(double?), double? gSTaxableAmount = default(double?), double? actualUnitCost = default(double?), double? discountAmount = default(double?), double? providerTaxableAmount = default(double?), double? adjustmentAmount = default(double?), double? totalDiscount = default(double?), bool? isSerialized = default(bool?))
        {
            this.QuoteDetailItemNumber = quoteDetailItemNumber;
            this.PriceLevelDescription = priceLevelDescription;
            this.Assembly = assembly;
            this.LineNumber = lineNumber;
            this.PriceLevel = priceLevel;
            this.VendorAccountNumber = vendorAccountNumber;
            this.OriginalQuoteNumber = originalQuoteNumber;
            this.ServiceOrderDetailNumber = serviceOrderDetailNumber;
            this.SubtotalIndent = subtotalIndent;
            this.AssociatedFooterLineNumber = associatedFooterLineNumber;
            this.AssociatedHeaderLineNumber = associatedHeaderLineNumber;
            this.SubtotalFooterItemNumber = subtotalFooterItemNumber;
            this.SubtotalHeaderItemNumber = subtotalHeaderItemNumber;
            this.ProjectPhaseNumber = projectPhaseNumber;
            this.InvoiceDetailNumber = invoiceDetailNumber;
            this.ItemId = itemId;
            this.ItemDescription = itemDescription;
            this.UnitOfMeasure = unitOfMeasure;
            this.InstallLocation = installLocation;
            this.ApplyDiscountOff = applyDiscountOff;
            this.PriceAdjuster = priceAdjuster;
            this.NonStockItemType = nonStockItemType;
            this.NonStockVendorItemNumber = nonStockVendorItemNumber;
            this.Type = type;
            this.AssemblyType = assemblyType;
            this.Taxable = taxable;
            this.IsAssembly = isAssembly;
            this.GSTExempt = gSTExempt;
            this.IsCommentOnly = isCommentOnly;
            this.IsStockItem = isStockItem;
            this.PrintOnQuote = printOnQuote;
            this.UseBookPricesAndDiscounts = useBookPricesAndDiscounts;
            this.SubjectToProviderTax = subjectToProviderTax;
            this.ItemCanBeDiscounted = itemCanBeDiscounted;
            this.UseThisCostWhenOrdering = useThisCostWhenOrdering;
            this.PrintOnInvoice = printOnInvoice;
            this.SubjectToSingleItemTax = subjectToSingleItemTax;
            this.PrintSubTotalHeaderFooter = printSubTotalHeaderFooter;
            this.OrderByDate = orderByDate;
            this.Quantity = quantity;
            this.QuantityFilled = quantityFilled;
            this.QuantityBackOrdered = quantityBackOrdered;
            this.QuantityPosted = quantityPosted;
            this.UnitHoursNeeded = unitHoursNeeded;
            this.TotalHoursNeeded = totalHoursNeeded;
            this.QuantityOrdered = quantityOrdered;
            this.QuantityReceived = quantityReceived;
            this.QuantityAssignedToServiceOrders = quantityAssignedToServiceOrders;
            this.DiscountPercent = discountPercent;
            this.AdjustmentPercent = adjustmentPercent;
            this.HoursEntered = hoursEntered;
            this.TaxableAmount = taxableAmount;
            this.ManufacturerListPrice = manufacturerListPrice;
            this.BookPrice = bookPrice;
            this.SellingPrice = sellingPrice;
            this.TotalSellingPrice = totalSellingPrice;
            this.Cost = cost;
            this.TotalCost = totalCost;
            this.GSTaxableAmount = gSTaxableAmount;
            this.ActualUnitCost = actualUnitCost;
            this.DiscountAmount = discountAmount;
            this.ProviderTaxableAmount = providerTaxableAmount;
            this.AdjustmentAmount = adjustmentAmount;
            this.TotalDiscount = totalDiscount;
            this.IsSerialized = isSerialized;
        }
        
        /// <summary>
        /// Gets or Sets QuoteDetailItemNumber
        /// </summary>
        [DataMember(Name="QuoteDetailItemNumber", EmitDefaultValue=false)]
        public int? QuoteDetailItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevelDescription
        /// </summary>
        [DataMember(Name="PriceLevelDescription", EmitDefaultValue=false)]
        public string PriceLevelDescription { get; set; }

        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="Assembly", EmitDefaultValue=false)]
        public List<TsiWebQuoteDetailAssemblyItem> Assembly { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="LineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets VendorAccountNumber
        /// </summary>
        [DataMember(Name="VendorAccountNumber", EmitDefaultValue=false)]
        public int? VendorAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets OriginalQuoteNumber
        /// </summary>
        [DataMember(Name="OriginalQuoteNumber", EmitDefaultValue=false)]
        public int? OriginalQuoteNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderDetailNumber
        /// </summary>
        [DataMember(Name="ServiceOrderDetailNumber", EmitDefaultValue=false)]
        public int? ServiceOrderDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubtotalIndent
        /// </summary>
        [DataMember(Name="SubtotalIndent", EmitDefaultValue=false)]
        public int? SubtotalIndent { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedFooterLineNumber
        /// </summary>
        [DataMember(Name="AssociatedFooterLineNumber", EmitDefaultValue=false)]
        public int? AssociatedFooterLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedHeaderLineNumber
        /// </summary>
        [DataMember(Name="AssociatedHeaderLineNumber", EmitDefaultValue=false)]
        public int? AssociatedHeaderLineNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubtotalFooterItemNumber
        /// </summary>
        [DataMember(Name="SubtotalFooterItemNumber", EmitDefaultValue=false)]
        public int? SubtotalFooterItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubtotalHeaderItemNumber
        /// </summary>
        [DataMember(Name="SubtotalHeaderItemNumber", EmitDefaultValue=false)]
        public int? SubtotalHeaderItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDetailNumber
        /// </summary>
        [DataMember(Name="InvoiceDetailNumber", EmitDefaultValue=false)]
        public int? InvoiceDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="UnitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets InstallLocation
        /// </summary>
        [DataMember(Name="InstallLocation", EmitDefaultValue=false)]
        public string InstallLocation { get; set; }

        /// <summary>
        /// Gets or Sets ApplyDiscountOff
        /// </summary>
        [DataMember(Name="ApplyDiscountOff", EmitDefaultValue=false)]
        public string ApplyDiscountOff { get; set; }

        /// <summary>
        /// Gets or Sets PriceAdjuster
        /// </summary>
        [DataMember(Name="PriceAdjuster", EmitDefaultValue=false)]
        public string PriceAdjuster { get; set; }

        /// <summary>
        /// Gets or Sets NonStockItemType
        /// </summary>
        [DataMember(Name="NonStockItemType", EmitDefaultValue=false)]
        public string NonStockItemType { get; set; }

        /// <summary>
        /// Gets or Sets NonStockVendorItemNumber
        /// </summary>
        [DataMember(Name="NonStockVendorItemNumber", EmitDefaultValue=false)]
        public string NonStockVendorItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyType
        /// </summary>
        [DataMember(Name="AssemblyType", EmitDefaultValue=false)]
        public string AssemblyType { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name="Taxable", EmitDefaultValue=false)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Gets or Sets IsAssembly
        /// </summary>
        [DataMember(Name="IsAssembly", EmitDefaultValue=false)]
        public bool? IsAssembly { get; set; }

        /// <summary>
        /// Gets or Sets GSTExempt
        /// </summary>
        [DataMember(Name="GSTExempt", EmitDefaultValue=false)]
        public bool? GSTExempt { get; set; }

        /// <summary>
        /// Gets or Sets IsCommentOnly
        /// </summary>
        [DataMember(Name="IsCommentOnly", EmitDefaultValue=false)]
        public bool? IsCommentOnly { get; set; }

        /// <summary>
        /// Gets or Sets IsStockItem
        /// </summary>
        [DataMember(Name="IsStockItem", EmitDefaultValue=false)]
        public bool? IsStockItem { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnQuote
        /// </summary>
        [DataMember(Name="PrintOnQuote", EmitDefaultValue=false)]
        public bool? PrintOnQuote { get; set; }

        /// <summary>
        /// Gets or Sets UseBookPricesAndDiscounts
        /// </summary>
        [DataMember(Name="UseBookPricesAndDiscounts", EmitDefaultValue=false)]
        public bool? UseBookPricesAndDiscounts { get; set; }

        /// <summary>
        /// Gets or Sets SubjectToProviderTax
        /// </summary>
        [DataMember(Name="SubjectToProviderTax", EmitDefaultValue=false)]
        public bool? SubjectToProviderTax { get; set; }

        /// <summary>
        /// Gets or Sets ItemCanBeDiscounted
        /// </summary>
        [DataMember(Name="ItemCanBeDiscounted", EmitDefaultValue=false)]
        public bool? ItemCanBeDiscounted { get; set; }

        /// <summary>
        /// Gets or Sets UseThisCostWhenOrdering
        /// </summary>
        [DataMember(Name="UseThisCostWhenOrdering", EmitDefaultValue=false)]
        public bool? UseThisCostWhenOrdering { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnInvoice
        /// </summary>
        [DataMember(Name="PrintOnInvoice", EmitDefaultValue=false)]
        public bool? PrintOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets SubjectToSingleItemTax
        /// </summary>
        [DataMember(Name="SubjectToSingleItemTax", EmitDefaultValue=false)]
        public bool? SubjectToSingleItemTax { get; set; }

        /// <summary>
        /// Gets or Sets PrintSubTotalHeaderFooter
        /// </summary>
        [DataMember(Name="PrintSubTotalHeaderFooter", EmitDefaultValue=false)]
        public bool? PrintSubTotalHeaderFooter { get; set; }

        /// <summary>
        /// Gets or Sets OrderByDate
        /// </summary>
        [DataMember(Name="OrderByDate", EmitDefaultValue=false)]
        public DateTime? OrderByDate { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [DataMember(Name="QuantityFilled", EmitDefaultValue=false)]
        public double? QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityBackOrdered
        /// </summary>
        [DataMember(Name="QuantityBackOrdered", EmitDefaultValue=false)]
        public double? QuantityBackOrdered { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPosted
        /// </summary>
        [DataMember(Name="QuantityPosted", EmitDefaultValue=false)]
        public double? QuantityPosted { get; set; }

        /// <summary>
        /// Gets or Sets UnitHoursNeeded
        /// </summary>
        [DataMember(Name="UnitHoursNeeded", EmitDefaultValue=false)]
        public double? UnitHoursNeeded { get; set; }

        /// <summary>
        /// Gets or Sets TotalHoursNeeded
        /// </summary>
        [DataMember(Name="TotalHoursNeeded", EmitDefaultValue=false)]
        public double? TotalHoursNeeded { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOrdered
        /// </summary>
        [DataMember(Name="QuantityOrdered", EmitDefaultValue=false)]
        public double? QuantityOrdered { get; set; }

        /// <summary>
        /// Gets or Sets QuantityReceived
        /// </summary>
        [DataMember(Name="QuantityReceived", EmitDefaultValue=false)]
        public double? QuantityReceived { get; set; }

        /// <summary>
        /// Gets or Sets QuantityAssignedToServiceOrders
        /// </summary>
        [DataMember(Name="QuantityAssignedToServiceOrders", EmitDefaultValue=false)]
        public double? QuantityAssignedToServiceOrders { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="DiscountPercent", EmitDefaultValue=false)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets AdjustmentPercent
        /// </summary>
        [DataMember(Name="AdjustmentPercent", EmitDefaultValue=false)]
        public double? AdjustmentPercent { get; set; }

        /// <summary>
        /// Gets or Sets HoursEntered
        /// </summary>
        [DataMember(Name="HoursEntered", EmitDefaultValue=false)]
        public double? HoursEntered { get; set; }

        /// <summary>
        /// Gets or Sets TaxableAmount
        /// </summary>
        [DataMember(Name="TaxableAmount", EmitDefaultValue=false)]
        public double? TaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerListPrice
        /// </summary>
        [DataMember(Name="ManufacturerListPrice", EmitDefaultValue=false)]
        public double? ManufacturerListPrice { get; set; }

        /// <summary>
        /// Gets or Sets BookPrice
        /// </summary>
        [DataMember(Name="BookPrice", EmitDefaultValue=false)]
        public double? BookPrice { get; set; }

        /// <summary>
        /// Gets or Sets SellingPrice
        /// </summary>
        [DataMember(Name="SellingPrice", EmitDefaultValue=false)]
        public double? SellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalSellingPrice
        /// </summary>
        [DataMember(Name="TotalSellingPrice", EmitDefaultValue=false)]
        public double? TotalSellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="Cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name="TotalCost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxableAmount
        /// </summary>
        [DataMember(Name="GSTaxableAmount", EmitDefaultValue=false)]
        public double? GSTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ActualUnitCost
        /// </summary>
        [DataMember(Name="ActualUnitCost", EmitDefaultValue=false)]
        public double? ActualUnitCost { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="DiscountAmount", EmitDefaultValue=false)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTaxableAmount
        /// </summary>
        [DataMember(Name="ProviderTaxableAmount", EmitDefaultValue=false)]
        public double? ProviderTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets AdjustmentAmount
        /// </summary>
        [DataMember(Name="AdjustmentAmount", EmitDefaultValue=false)]
        public double? AdjustmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalDiscount
        /// </summary>
        [DataMember(Name="TotalDiscount", EmitDefaultValue=false)]
        public double? TotalDiscount { get; set; }

        /// <summary>
        /// Gets or Sets IsSerialized
        /// </summary>
        [DataMember(Name="IsSerialized", EmitDefaultValue=false)]
        public bool? IsSerialized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebQuoteDetailItem {\n");
            sb.Append("  QuoteDetailItemNumber: ").Append(QuoteDetailItemNumber).Append("\n");
            sb.Append("  PriceLevelDescription: ").Append(PriceLevelDescription).Append("\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  VendorAccountNumber: ").Append(VendorAccountNumber).Append("\n");
            sb.Append("  OriginalQuoteNumber: ").Append(OriginalQuoteNumber).Append("\n");
            sb.Append("  ServiceOrderDetailNumber: ").Append(ServiceOrderDetailNumber).Append("\n");
            sb.Append("  SubtotalIndent: ").Append(SubtotalIndent).Append("\n");
            sb.Append("  AssociatedFooterLineNumber: ").Append(AssociatedFooterLineNumber).Append("\n");
            sb.Append("  AssociatedHeaderLineNumber: ").Append(AssociatedHeaderLineNumber).Append("\n");
            sb.Append("  SubtotalFooterItemNumber: ").Append(SubtotalFooterItemNumber).Append("\n");
            sb.Append("  SubtotalHeaderItemNumber: ").Append(SubtotalHeaderItemNumber).Append("\n");
            sb.Append("  ProjectPhaseNumber: ").Append(ProjectPhaseNumber).Append("\n");
            sb.Append("  InvoiceDetailNumber: ").Append(InvoiceDetailNumber).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  InstallLocation: ").Append(InstallLocation).Append("\n");
            sb.Append("  ApplyDiscountOff: ").Append(ApplyDiscountOff).Append("\n");
            sb.Append("  PriceAdjuster: ").Append(PriceAdjuster).Append("\n");
            sb.Append("  NonStockItemType: ").Append(NonStockItemType).Append("\n");
            sb.Append("  NonStockVendorItemNumber: ").Append(NonStockVendorItemNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssemblyType: ").Append(AssemblyType).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  IsAssembly: ").Append(IsAssembly).Append("\n");
            sb.Append("  GSTExempt: ").Append(GSTExempt).Append("\n");
            sb.Append("  IsCommentOnly: ").Append(IsCommentOnly).Append("\n");
            sb.Append("  IsStockItem: ").Append(IsStockItem).Append("\n");
            sb.Append("  PrintOnQuote: ").Append(PrintOnQuote).Append("\n");
            sb.Append("  UseBookPricesAndDiscounts: ").Append(UseBookPricesAndDiscounts).Append("\n");
            sb.Append("  SubjectToProviderTax: ").Append(SubjectToProviderTax).Append("\n");
            sb.Append("  ItemCanBeDiscounted: ").Append(ItemCanBeDiscounted).Append("\n");
            sb.Append("  UseThisCostWhenOrdering: ").Append(UseThisCostWhenOrdering).Append("\n");
            sb.Append("  PrintOnInvoice: ").Append(PrintOnInvoice).Append("\n");
            sb.Append("  SubjectToSingleItemTax: ").Append(SubjectToSingleItemTax).Append("\n");
            sb.Append("  PrintSubTotalHeaderFooter: ").Append(PrintSubTotalHeaderFooter).Append("\n");
            sb.Append("  OrderByDate: ").Append(OrderByDate).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityBackOrdered: ").Append(QuantityBackOrdered).Append("\n");
            sb.Append("  QuantityPosted: ").Append(QuantityPosted).Append("\n");
            sb.Append("  UnitHoursNeeded: ").Append(UnitHoursNeeded).Append("\n");
            sb.Append("  TotalHoursNeeded: ").Append(TotalHoursNeeded).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  QuantityReceived: ").Append(QuantityReceived).Append("\n");
            sb.Append("  QuantityAssignedToServiceOrders: ").Append(QuantityAssignedToServiceOrders).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  AdjustmentPercent: ").Append(AdjustmentPercent).Append("\n");
            sb.Append("  HoursEntered: ").Append(HoursEntered).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  ManufacturerListPrice: ").Append(ManufacturerListPrice).Append("\n");
            sb.Append("  BookPrice: ").Append(BookPrice).Append("\n");
            sb.Append("  SellingPrice: ").Append(SellingPrice).Append("\n");
            sb.Append("  TotalSellingPrice: ").Append(TotalSellingPrice).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  GSTaxableAmount: ").Append(GSTaxableAmount).Append("\n");
            sb.Append("  ActualUnitCost: ").Append(ActualUnitCost).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  ProviderTaxableAmount: ").Append(ProviderTaxableAmount).Append("\n");
            sb.Append("  AdjustmentAmount: ").Append(AdjustmentAmount).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  IsSerialized: ").Append(IsSerialized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebQuoteDetailItem);
        }

        /// <summary>
        /// Returns true if TsiWebQuoteDetailItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebQuoteDetailItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebQuoteDetailItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteDetailItemNumber == input.QuoteDetailItemNumber ||
                    (this.QuoteDetailItemNumber != null &&
                    this.QuoteDetailItemNumber.Equals(input.QuoteDetailItemNumber))
                ) && 
                (
                    this.PriceLevelDescription == input.PriceLevelDescription ||
                    (this.PriceLevelDescription != null &&
                    this.PriceLevelDescription.Equals(input.PriceLevelDescription))
                ) && 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.VendorAccountNumber == input.VendorAccountNumber ||
                    (this.VendorAccountNumber != null &&
                    this.VendorAccountNumber.Equals(input.VendorAccountNumber))
                ) && 
                (
                    this.OriginalQuoteNumber == input.OriginalQuoteNumber ||
                    (this.OriginalQuoteNumber != null &&
                    this.OriginalQuoteNumber.Equals(input.OriginalQuoteNumber))
                ) && 
                (
                    this.ServiceOrderDetailNumber == input.ServiceOrderDetailNumber ||
                    (this.ServiceOrderDetailNumber != null &&
                    this.ServiceOrderDetailNumber.Equals(input.ServiceOrderDetailNumber))
                ) && 
                (
                    this.SubtotalIndent == input.SubtotalIndent ||
                    (this.SubtotalIndent != null &&
                    this.SubtotalIndent.Equals(input.SubtotalIndent))
                ) && 
                (
                    this.AssociatedFooterLineNumber == input.AssociatedFooterLineNumber ||
                    (this.AssociatedFooterLineNumber != null &&
                    this.AssociatedFooterLineNumber.Equals(input.AssociatedFooterLineNumber))
                ) && 
                (
                    this.AssociatedHeaderLineNumber == input.AssociatedHeaderLineNumber ||
                    (this.AssociatedHeaderLineNumber != null &&
                    this.AssociatedHeaderLineNumber.Equals(input.AssociatedHeaderLineNumber))
                ) && 
                (
                    this.SubtotalFooterItemNumber == input.SubtotalFooterItemNumber ||
                    (this.SubtotalFooterItemNumber != null &&
                    this.SubtotalFooterItemNumber.Equals(input.SubtotalFooterItemNumber))
                ) && 
                (
                    this.SubtotalHeaderItemNumber == input.SubtotalHeaderItemNumber ||
                    (this.SubtotalHeaderItemNumber != null &&
                    this.SubtotalHeaderItemNumber.Equals(input.SubtotalHeaderItemNumber))
                ) && 
                (
                    this.ProjectPhaseNumber == input.ProjectPhaseNumber ||
                    (this.ProjectPhaseNumber != null &&
                    this.ProjectPhaseNumber.Equals(input.ProjectPhaseNumber))
                ) && 
                (
                    this.InvoiceDetailNumber == input.InvoiceDetailNumber ||
                    (this.InvoiceDetailNumber != null &&
                    this.InvoiceDetailNumber.Equals(input.InvoiceDetailNumber))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.InstallLocation == input.InstallLocation ||
                    (this.InstallLocation != null &&
                    this.InstallLocation.Equals(input.InstallLocation))
                ) && 
                (
                    this.ApplyDiscountOff == input.ApplyDiscountOff ||
                    (this.ApplyDiscountOff != null &&
                    this.ApplyDiscountOff.Equals(input.ApplyDiscountOff))
                ) && 
                (
                    this.PriceAdjuster == input.PriceAdjuster ||
                    (this.PriceAdjuster != null &&
                    this.PriceAdjuster.Equals(input.PriceAdjuster))
                ) && 
                (
                    this.NonStockItemType == input.NonStockItemType ||
                    (this.NonStockItemType != null &&
                    this.NonStockItemType.Equals(input.NonStockItemType))
                ) && 
                (
                    this.NonStockVendorItemNumber == input.NonStockVendorItemNumber ||
                    (this.NonStockVendorItemNumber != null &&
                    this.NonStockVendorItemNumber.Equals(input.NonStockVendorItemNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AssemblyType == input.AssemblyType ||
                    (this.AssemblyType != null &&
                    this.AssemblyType.Equals(input.AssemblyType))
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    (this.Taxable != null &&
                    this.Taxable.Equals(input.Taxable))
                ) && 
                (
                    this.IsAssembly == input.IsAssembly ||
                    (this.IsAssembly != null &&
                    this.IsAssembly.Equals(input.IsAssembly))
                ) && 
                (
                    this.GSTExempt == input.GSTExempt ||
                    (this.GSTExempt != null &&
                    this.GSTExempt.Equals(input.GSTExempt))
                ) && 
                (
                    this.IsCommentOnly == input.IsCommentOnly ||
                    (this.IsCommentOnly != null &&
                    this.IsCommentOnly.Equals(input.IsCommentOnly))
                ) && 
                (
                    this.IsStockItem == input.IsStockItem ||
                    (this.IsStockItem != null &&
                    this.IsStockItem.Equals(input.IsStockItem))
                ) && 
                (
                    this.PrintOnQuote == input.PrintOnQuote ||
                    (this.PrintOnQuote != null &&
                    this.PrintOnQuote.Equals(input.PrintOnQuote))
                ) && 
                (
                    this.UseBookPricesAndDiscounts == input.UseBookPricesAndDiscounts ||
                    (this.UseBookPricesAndDiscounts != null &&
                    this.UseBookPricesAndDiscounts.Equals(input.UseBookPricesAndDiscounts))
                ) && 
                (
                    this.SubjectToProviderTax == input.SubjectToProviderTax ||
                    (this.SubjectToProviderTax != null &&
                    this.SubjectToProviderTax.Equals(input.SubjectToProviderTax))
                ) && 
                (
                    this.ItemCanBeDiscounted == input.ItemCanBeDiscounted ||
                    (this.ItemCanBeDiscounted != null &&
                    this.ItemCanBeDiscounted.Equals(input.ItemCanBeDiscounted))
                ) && 
                (
                    this.UseThisCostWhenOrdering == input.UseThisCostWhenOrdering ||
                    (this.UseThisCostWhenOrdering != null &&
                    this.UseThisCostWhenOrdering.Equals(input.UseThisCostWhenOrdering))
                ) && 
                (
                    this.PrintOnInvoice == input.PrintOnInvoice ||
                    (this.PrintOnInvoice != null &&
                    this.PrintOnInvoice.Equals(input.PrintOnInvoice))
                ) && 
                (
                    this.SubjectToSingleItemTax == input.SubjectToSingleItemTax ||
                    (this.SubjectToSingleItemTax != null &&
                    this.SubjectToSingleItemTax.Equals(input.SubjectToSingleItemTax))
                ) && 
                (
                    this.PrintSubTotalHeaderFooter == input.PrintSubTotalHeaderFooter ||
                    (this.PrintSubTotalHeaderFooter != null &&
                    this.PrintSubTotalHeaderFooter.Equals(input.PrintSubTotalHeaderFooter))
                ) && 
                (
                    this.OrderByDate == input.OrderByDate ||
                    (this.OrderByDate != null &&
                    this.OrderByDate.Equals(input.OrderByDate))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityFilled == input.QuantityFilled ||
                    (this.QuantityFilled != null &&
                    this.QuantityFilled.Equals(input.QuantityFilled))
                ) && 
                (
                    this.QuantityBackOrdered == input.QuantityBackOrdered ||
                    (this.QuantityBackOrdered != null &&
                    this.QuantityBackOrdered.Equals(input.QuantityBackOrdered))
                ) && 
                (
                    this.QuantityPosted == input.QuantityPosted ||
                    (this.QuantityPosted != null &&
                    this.QuantityPosted.Equals(input.QuantityPosted))
                ) && 
                (
                    this.UnitHoursNeeded == input.UnitHoursNeeded ||
                    (this.UnitHoursNeeded != null &&
                    this.UnitHoursNeeded.Equals(input.UnitHoursNeeded))
                ) && 
                (
                    this.TotalHoursNeeded == input.TotalHoursNeeded ||
                    (this.TotalHoursNeeded != null &&
                    this.TotalHoursNeeded.Equals(input.TotalHoursNeeded))
                ) && 
                (
                    this.QuantityOrdered == input.QuantityOrdered ||
                    (this.QuantityOrdered != null &&
                    this.QuantityOrdered.Equals(input.QuantityOrdered))
                ) && 
                (
                    this.QuantityReceived == input.QuantityReceived ||
                    (this.QuantityReceived != null &&
                    this.QuantityReceived.Equals(input.QuantityReceived))
                ) && 
                (
                    this.QuantityAssignedToServiceOrders == input.QuantityAssignedToServiceOrders ||
                    (this.QuantityAssignedToServiceOrders != null &&
                    this.QuantityAssignedToServiceOrders.Equals(input.QuantityAssignedToServiceOrders))
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    (this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(input.DiscountPercent))
                ) && 
                (
                    this.AdjustmentPercent == input.AdjustmentPercent ||
                    (this.AdjustmentPercent != null &&
                    this.AdjustmentPercent.Equals(input.AdjustmentPercent))
                ) && 
                (
                    this.HoursEntered == input.HoursEntered ||
                    (this.HoursEntered != null &&
                    this.HoursEntered.Equals(input.HoursEntered))
                ) && 
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    (this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(input.TaxableAmount))
                ) && 
                (
                    this.ManufacturerListPrice == input.ManufacturerListPrice ||
                    (this.ManufacturerListPrice != null &&
                    this.ManufacturerListPrice.Equals(input.ManufacturerListPrice))
                ) && 
                (
                    this.BookPrice == input.BookPrice ||
                    (this.BookPrice != null &&
                    this.BookPrice.Equals(input.BookPrice))
                ) && 
                (
                    this.SellingPrice == input.SellingPrice ||
                    (this.SellingPrice != null &&
                    this.SellingPrice.Equals(input.SellingPrice))
                ) && 
                (
                    this.TotalSellingPrice == input.TotalSellingPrice ||
                    (this.TotalSellingPrice != null &&
                    this.TotalSellingPrice.Equals(input.TotalSellingPrice))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.GSTaxableAmount == input.GSTaxableAmount ||
                    (this.GSTaxableAmount != null &&
                    this.GSTaxableAmount.Equals(input.GSTaxableAmount))
                ) && 
                (
                    this.ActualUnitCost == input.ActualUnitCost ||
                    (this.ActualUnitCost != null &&
                    this.ActualUnitCost.Equals(input.ActualUnitCost))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.ProviderTaxableAmount == input.ProviderTaxableAmount ||
                    (this.ProviderTaxableAmount != null &&
                    this.ProviderTaxableAmount.Equals(input.ProviderTaxableAmount))
                ) && 
                (
                    this.AdjustmentAmount == input.AdjustmentAmount ||
                    (this.AdjustmentAmount != null &&
                    this.AdjustmentAmount.Equals(input.AdjustmentAmount))
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    (this.TotalDiscount != null &&
                    this.TotalDiscount.Equals(input.TotalDiscount))
                ) && 
                (
                    this.IsSerialized == input.IsSerialized ||
                    (this.IsSerialized != null &&
                    this.IsSerialized.Equals(input.IsSerialized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteDetailItemNumber != null)
                    hashCode = hashCode * 59 + this.QuoteDetailItemNumber.GetHashCode();
                if (this.PriceLevelDescription != null)
                    hashCode = hashCode * 59 + this.PriceLevelDescription.GetHashCode();
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.VendorAccountNumber != null)
                    hashCode = hashCode * 59 + this.VendorAccountNumber.GetHashCode();
                if (this.OriginalQuoteNumber != null)
                    hashCode = hashCode * 59 + this.OriginalQuoteNumber.GetHashCode();
                if (this.ServiceOrderDetailNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderDetailNumber.GetHashCode();
                if (this.SubtotalIndent != null)
                    hashCode = hashCode * 59 + this.SubtotalIndent.GetHashCode();
                if (this.AssociatedFooterLineNumber != null)
                    hashCode = hashCode * 59 + this.AssociatedFooterLineNumber.GetHashCode();
                if (this.AssociatedHeaderLineNumber != null)
                    hashCode = hashCode * 59 + this.AssociatedHeaderLineNumber.GetHashCode();
                if (this.SubtotalFooterItemNumber != null)
                    hashCode = hashCode * 59 + this.SubtotalFooterItemNumber.GetHashCode();
                if (this.SubtotalHeaderItemNumber != null)
                    hashCode = hashCode * 59 + this.SubtotalHeaderItemNumber.GetHashCode();
                if (this.ProjectPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectPhaseNumber.GetHashCode();
                if (this.InvoiceDetailNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceDetailNumber.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.InstallLocation != null)
                    hashCode = hashCode * 59 + this.InstallLocation.GetHashCode();
                if (this.ApplyDiscountOff != null)
                    hashCode = hashCode * 59 + this.ApplyDiscountOff.GetHashCode();
                if (this.PriceAdjuster != null)
                    hashCode = hashCode * 59 + this.PriceAdjuster.GetHashCode();
                if (this.NonStockItemType != null)
                    hashCode = hashCode * 59 + this.NonStockItemType.GetHashCode();
                if (this.NonStockVendorItemNumber != null)
                    hashCode = hashCode * 59 + this.NonStockVendorItemNumber.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AssemblyType != null)
                    hashCode = hashCode * 59 + this.AssemblyType.GetHashCode();
                if (this.Taxable != null)
                    hashCode = hashCode * 59 + this.Taxable.GetHashCode();
                if (this.IsAssembly != null)
                    hashCode = hashCode * 59 + this.IsAssembly.GetHashCode();
                if (this.GSTExempt != null)
                    hashCode = hashCode * 59 + this.GSTExempt.GetHashCode();
                if (this.IsCommentOnly != null)
                    hashCode = hashCode * 59 + this.IsCommentOnly.GetHashCode();
                if (this.IsStockItem != null)
                    hashCode = hashCode * 59 + this.IsStockItem.GetHashCode();
                if (this.PrintOnQuote != null)
                    hashCode = hashCode * 59 + this.PrintOnQuote.GetHashCode();
                if (this.UseBookPricesAndDiscounts != null)
                    hashCode = hashCode * 59 + this.UseBookPricesAndDiscounts.GetHashCode();
                if (this.SubjectToProviderTax != null)
                    hashCode = hashCode * 59 + this.SubjectToProviderTax.GetHashCode();
                if (this.ItemCanBeDiscounted != null)
                    hashCode = hashCode * 59 + this.ItemCanBeDiscounted.GetHashCode();
                if (this.UseThisCostWhenOrdering != null)
                    hashCode = hashCode * 59 + this.UseThisCostWhenOrdering.GetHashCode();
                if (this.PrintOnInvoice != null)
                    hashCode = hashCode * 59 + this.PrintOnInvoice.GetHashCode();
                if (this.SubjectToSingleItemTax != null)
                    hashCode = hashCode * 59 + this.SubjectToSingleItemTax.GetHashCode();
                if (this.PrintSubTotalHeaderFooter != null)
                    hashCode = hashCode * 59 + this.PrintSubTotalHeaderFooter.GetHashCode();
                if (this.OrderByDate != null)
                    hashCode = hashCode * 59 + this.OrderByDate.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityFilled != null)
                    hashCode = hashCode * 59 + this.QuantityFilled.GetHashCode();
                if (this.QuantityBackOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityBackOrdered.GetHashCode();
                if (this.QuantityPosted != null)
                    hashCode = hashCode * 59 + this.QuantityPosted.GetHashCode();
                if (this.UnitHoursNeeded != null)
                    hashCode = hashCode * 59 + this.UnitHoursNeeded.GetHashCode();
                if (this.TotalHoursNeeded != null)
                    hashCode = hashCode * 59 + this.TotalHoursNeeded.GetHashCode();
                if (this.QuantityOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityOrdered.GetHashCode();
                if (this.QuantityReceived != null)
                    hashCode = hashCode * 59 + this.QuantityReceived.GetHashCode();
                if (this.QuantityAssignedToServiceOrders != null)
                    hashCode = hashCode * 59 + this.QuantityAssignedToServiceOrders.GetHashCode();
                if (this.DiscountPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPercent.GetHashCode();
                if (this.AdjustmentPercent != null)
                    hashCode = hashCode * 59 + this.AdjustmentPercent.GetHashCode();
                if (this.HoursEntered != null)
                    hashCode = hashCode * 59 + this.HoursEntered.GetHashCode();
                if (this.TaxableAmount != null)
                    hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                if (this.ManufacturerListPrice != null)
                    hashCode = hashCode * 59 + this.ManufacturerListPrice.GetHashCode();
                if (this.BookPrice != null)
                    hashCode = hashCode * 59 + this.BookPrice.GetHashCode();
                if (this.SellingPrice != null)
                    hashCode = hashCode * 59 + this.SellingPrice.GetHashCode();
                if (this.TotalSellingPrice != null)
                    hashCode = hashCode * 59 + this.TotalSellingPrice.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.GSTaxableAmount != null)
                    hashCode = hashCode * 59 + this.GSTaxableAmount.GetHashCode();
                if (this.ActualUnitCost != null)
                    hashCode = hashCode * 59 + this.ActualUnitCost.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.ProviderTaxableAmount != null)
                    hashCode = hashCode * 59 + this.ProviderTaxableAmount.GetHashCode();
                if (this.AdjustmentAmount != null)
                    hashCode = hashCode * 59 + this.AdjustmentAmount.GetHashCode();
                if (this.TotalDiscount != null)
                    hashCode = hashCode * 59 + this.TotalDiscount.GetHashCode();
                if (this.IsSerialized != null)
                    hashCode = hashCode * 59 + this.IsSerialized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
