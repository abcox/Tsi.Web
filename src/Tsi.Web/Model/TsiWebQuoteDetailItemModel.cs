/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebQuoteDetailItemModel
    /// </summary>
    [DataContract]
    public partial class TsiWebQuoteDetailItemModel :  IEquatable<TsiWebQuoteDetailItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebQuoteDetailItemModel" /> class.
        /// </summary>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="projectPhaseNumber">projectPhaseNumber.</param>
        /// <param name="installLocation">installLocation.</param>
        /// <param name="priceAdjuster">priceAdjuster.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="orderByDate">orderByDate.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="subjectToProviderTax">subjectToProviderTax.</param>
        /// <param name="printOnQuote">printOnQuote.</param>
        /// <param name="printOnInvoice">printOnInvoice.</param>
        /// <param name="itemCanBeDiscounted">itemCanBeDiscounted.</param>
        /// <param name="useThisCostWhenOrdering">useThisCostWhenOrdering.</param>
        /// <param name="useBookPricesAndDiscounts">useBookPricesAndDiscounts.</param>
        /// <param name="calculateUsingAdjustedDiscountPercent">calculateUsingAdjustedDiscountPercent.</param>
        /// <param name="allowPriceLessThanCost">allowPriceLessThanCost.</param>
        /// <param name="canAdjustToMaxDiscount">canAdjustToMaxDiscount.</param>
        /// <param name="adjustedSellingPrice">adjustedSellingPrice.</param>
        /// <param name="estimatedCost">estimatedCost.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="adjustedDiscountPercent">adjustedDiscountPercent.</param>
        /// <param name="openAssemblyAdjustments">openAssemblyAdjustments.</param>
        public TsiWebQuoteDetailItemModel(int? priceLevel = default(int?), int? projectPhaseNumber = default(int?), string installLocation = default(string), string priceAdjuster = default(string), string itemDescription = default(string), SystemNullableTsiWebOptionalDateTime orderByDate = default(SystemNullableTsiWebOptionalDateTime), bool? taxable = default(bool?), bool? subjectToProviderTax = default(bool?), bool? printOnQuote = default(bool?), bool? printOnInvoice = default(bool?), bool? itemCanBeDiscounted = default(bool?), bool? useThisCostWhenOrdering = default(bool?), bool? useBookPricesAndDiscounts = default(bool?), bool? calculateUsingAdjustedDiscountPercent = default(bool?), bool? allowPriceLessThanCost = default(bool?), bool? canAdjustToMaxDiscount = default(bool?), double? adjustedSellingPrice = default(double?), double? estimatedCost = default(double?), double? quantity = default(double?), double? adjustedDiscountPercent = default(double?), List<TsiWebQuoteAssemblyDetailAdjustment> openAssemblyAdjustments = default(List<TsiWebQuoteAssemblyDetailAdjustment>))
        {
            this.PriceLevel = priceLevel;
            this.ProjectPhaseNumber = projectPhaseNumber;
            this.InstallLocation = installLocation;
            this.PriceAdjuster = priceAdjuster;
            this.ItemDescription = itemDescription;
            this.OrderByDate = orderByDate;
            this.Taxable = taxable;
            this.SubjectToProviderTax = subjectToProviderTax;
            this.PrintOnQuote = printOnQuote;
            this.PrintOnInvoice = printOnInvoice;
            this.ItemCanBeDiscounted = itemCanBeDiscounted;
            this.UseThisCostWhenOrdering = useThisCostWhenOrdering;
            this.UseBookPricesAndDiscounts = useBookPricesAndDiscounts;
            this.CalculateUsingAdjustedDiscountPercent = calculateUsingAdjustedDiscountPercent;
            this.AllowPriceLessThanCost = allowPriceLessThanCost;
            this.CanAdjustToMaxDiscount = canAdjustToMaxDiscount;
            this.AdjustedSellingPrice = adjustedSellingPrice;
            this.EstimatedCost = estimatedCost;
            this.Quantity = quantity;
            this.AdjustedDiscountPercent = adjustedDiscountPercent;
            this.OpenAssemblyAdjustments = openAssemblyAdjustments;
        }
        
        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets InstallLocation
        /// </summary>
        [DataMember(Name="InstallLocation", EmitDefaultValue=false)]
        public string InstallLocation { get; set; }

        /// <summary>
        /// Gets or Sets PriceAdjuster
        /// </summary>
        [DataMember(Name="PriceAdjuster", EmitDefaultValue=false)]
        public string PriceAdjuster { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets OrderByDate
        /// </summary>
        [DataMember(Name="OrderByDate", EmitDefaultValue=false)]
        public SystemNullableTsiWebOptionalDateTime OrderByDate { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name="Taxable", EmitDefaultValue=false)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Gets or Sets SubjectToProviderTax
        /// </summary>
        [DataMember(Name="SubjectToProviderTax", EmitDefaultValue=false)]
        public bool? SubjectToProviderTax { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnQuote
        /// </summary>
        [DataMember(Name="PrintOnQuote", EmitDefaultValue=false)]
        public bool? PrintOnQuote { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnInvoice
        /// </summary>
        [DataMember(Name="PrintOnInvoice", EmitDefaultValue=false)]
        public bool? PrintOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets ItemCanBeDiscounted
        /// </summary>
        [DataMember(Name="ItemCanBeDiscounted", EmitDefaultValue=false)]
        public bool? ItemCanBeDiscounted { get; set; }

        /// <summary>
        /// Gets or Sets UseThisCostWhenOrdering
        /// </summary>
        [DataMember(Name="UseThisCostWhenOrdering", EmitDefaultValue=false)]
        public bool? UseThisCostWhenOrdering { get; set; }

        /// <summary>
        /// Gets or Sets UseBookPricesAndDiscounts
        /// </summary>
        [DataMember(Name="UseBookPricesAndDiscounts", EmitDefaultValue=false)]
        public bool? UseBookPricesAndDiscounts { get; set; }

        /// <summary>
        /// Gets or Sets CalculateUsingAdjustedDiscountPercent
        /// </summary>
        [DataMember(Name="CalculateUsingAdjustedDiscountPercent", EmitDefaultValue=false)]
        public bool? CalculateUsingAdjustedDiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets AllowPriceLessThanCost
        /// </summary>
        [DataMember(Name="AllowPriceLessThanCost", EmitDefaultValue=false)]
        public bool? AllowPriceLessThanCost { get; set; }

        /// <summary>
        /// Gets or Sets CanAdjustToMaxDiscount
        /// </summary>
        [DataMember(Name="CanAdjustToMaxDiscount", EmitDefaultValue=false)]
        public bool? CanAdjustToMaxDiscount { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedSellingPrice
        /// </summary>
        [DataMember(Name="AdjustedSellingPrice", EmitDefaultValue=false)]
        public double? AdjustedSellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedCost
        /// </summary>
        [DataMember(Name="EstimatedCost", EmitDefaultValue=false)]
        public double? EstimatedCost { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedDiscountPercent
        /// </summary>
        [DataMember(Name="AdjustedDiscountPercent", EmitDefaultValue=false)]
        public double? AdjustedDiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets OpenAssemblyAdjustments
        /// </summary>
        [DataMember(Name="OpenAssemblyAdjustments", EmitDefaultValue=false)]
        public List<TsiWebQuoteAssemblyDetailAdjustment> OpenAssemblyAdjustments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebQuoteDetailItemModel {\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  ProjectPhaseNumber: ").Append(ProjectPhaseNumber).Append("\n");
            sb.Append("  InstallLocation: ").Append(InstallLocation).Append("\n");
            sb.Append("  PriceAdjuster: ").Append(PriceAdjuster).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  OrderByDate: ").Append(OrderByDate).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  SubjectToProviderTax: ").Append(SubjectToProviderTax).Append("\n");
            sb.Append("  PrintOnQuote: ").Append(PrintOnQuote).Append("\n");
            sb.Append("  PrintOnInvoice: ").Append(PrintOnInvoice).Append("\n");
            sb.Append("  ItemCanBeDiscounted: ").Append(ItemCanBeDiscounted).Append("\n");
            sb.Append("  UseThisCostWhenOrdering: ").Append(UseThisCostWhenOrdering).Append("\n");
            sb.Append("  UseBookPricesAndDiscounts: ").Append(UseBookPricesAndDiscounts).Append("\n");
            sb.Append("  CalculateUsingAdjustedDiscountPercent: ").Append(CalculateUsingAdjustedDiscountPercent).Append("\n");
            sb.Append("  AllowPriceLessThanCost: ").Append(AllowPriceLessThanCost).Append("\n");
            sb.Append("  CanAdjustToMaxDiscount: ").Append(CanAdjustToMaxDiscount).Append("\n");
            sb.Append("  AdjustedSellingPrice: ").Append(AdjustedSellingPrice).Append("\n");
            sb.Append("  EstimatedCost: ").Append(EstimatedCost).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  AdjustedDiscountPercent: ").Append(AdjustedDiscountPercent).Append("\n");
            sb.Append("  OpenAssemblyAdjustments: ").Append(OpenAssemblyAdjustments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebQuoteDetailItemModel);
        }

        /// <summary>
        /// Returns true if TsiWebQuoteDetailItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebQuoteDetailItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebQuoteDetailItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.ProjectPhaseNumber == input.ProjectPhaseNumber ||
                    (this.ProjectPhaseNumber != null &&
                    this.ProjectPhaseNumber.Equals(input.ProjectPhaseNumber))
                ) && 
                (
                    this.InstallLocation == input.InstallLocation ||
                    (this.InstallLocation != null &&
                    this.InstallLocation.Equals(input.InstallLocation))
                ) && 
                (
                    this.PriceAdjuster == input.PriceAdjuster ||
                    (this.PriceAdjuster != null &&
                    this.PriceAdjuster.Equals(input.PriceAdjuster))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.OrderByDate == input.OrderByDate ||
                    (this.OrderByDate != null &&
                    this.OrderByDate.Equals(input.OrderByDate))
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    (this.Taxable != null &&
                    this.Taxable.Equals(input.Taxable))
                ) && 
                (
                    this.SubjectToProviderTax == input.SubjectToProviderTax ||
                    (this.SubjectToProviderTax != null &&
                    this.SubjectToProviderTax.Equals(input.SubjectToProviderTax))
                ) && 
                (
                    this.PrintOnQuote == input.PrintOnQuote ||
                    (this.PrintOnQuote != null &&
                    this.PrintOnQuote.Equals(input.PrintOnQuote))
                ) && 
                (
                    this.PrintOnInvoice == input.PrintOnInvoice ||
                    (this.PrintOnInvoice != null &&
                    this.PrintOnInvoice.Equals(input.PrintOnInvoice))
                ) && 
                (
                    this.ItemCanBeDiscounted == input.ItemCanBeDiscounted ||
                    (this.ItemCanBeDiscounted != null &&
                    this.ItemCanBeDiscounted.Equals(input.ItemCanBeDiscounted))
                ) && 
                (
                    this.UseThisCostWhenOrdering == input.UseThisCostWhenOrdering ||
                    (this.UseThisCostWhenOrdering != null &&
                    this.UseThisCostWhenOrdering.Equals(input.UseThisCostWhenOrdering))
                ) && 
                (
                    this.UseBookPricesAndDiscounts == input.UseBookPricesAndDiscounts ||
                    (this.UseBookPricesAndDiscounts != null &&
                    this.UseBookPricesAndDiscounts.Equals(input.UseBookPricesAndDiscounts))
                ) && 
                (
                    this.CalculateUsingAdjustedDiscountPercent == input.CalculateUsingAdjustedDiscountPercent ||
                    (this.CalculateUsingAdjustedDiscountPercent != null &&
                    this.CalculateUsingAdjustedDiscountPercent.Equals(input.CalculateUsingAdjustedDiscountPercent))
                ) && 
                (
                    this.AllowPriceLessThanCost == input.AllowPriceLessThanCost ||
                    (this.AllowPriceLessThanCost != null &&
                    this.AllowPriceLessThanCost.Equals(input.AllowPriceLessThanCost))
                ) && 
                (
                    this.CanAdjustToMaxDiscount == input.CanAdjustToMaxDiscount ||
                    (this.CanAdjustToMaxDiscount != null &&
                    this.CanAdjustToMaxDiscount.Equals(input.CanAdjustToMaxDiscount))
                ) && 
                (
                    this.AdjustedSellingPrice == input.AdjustedSellingPrice ||
                    (this.AdjustedSellingPrice != null &&
                    this.AdjustedSellingPrice.Equals(input.AdjustedSellingPrice))
                ) && 
                (
                    this.EstimatedCost == input.EstimatedCost ||
                    (this.EstimatedCost != null &&
                    this.EstimatedCost.Equals(input.EstimatedCost))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.AdjustedDiscountPercent == input.AdjustedDiscountPercent ||
                    (this.AdjustedDiscountPercent != null &&
                    this.AdjustedDiscountPercent.Equals(input.AdjustedDiscountPercent))
                ) && 
                (
                    this.OpenAssemblyAdjustments == input.OpenAssemblyAdjustments ||
                    this.OpenAssemblyAdjustments != null &&
                    this.OpenAssemblyAdjustments.SequenceEqual(input.OpenAssemblyAdjustments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.ProjectPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectPhaseNumber.GetHashCode();
                if (this.InstallLocation != null)
                    hashCode = hashCode * 59 + this.InstallLocation.GetHashCode();
                if (this.PriceAdjuster != null)
                    hashCode = hashCode * 59 + this.PriceAdjuster.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.OrderByDate != null)
                    hashCode = hashCode * 59 + this.OrderByDate.GetHashCode();
                if (this.Taxable != null)
                    hashCode = hashCode * 59 + this.Taxable.GetHashCode();
                if (this.SubjectToProviderTax != null)
                    hashCode = hashCode * 59 + this.SubjectToProviderTax.GetHashCode();
                if (this.PrintOnQuote != null)
                    hashCode = hashCode * 59 + this.PrintOnQuote.GetHashCode();
                if (this.PrintOnInvoice != null)
                    hashCode = hashCode * 59 + this.PrintOnInvoice.GetHashCode();
                if (this.ItemCanBeDiscounted != null)
                    hashCode = hashCode * 59 + this.ItemCanBeDiscounted.GetHashCode();
                if (this.UseThisCostWhenOrdering != null)
                    hashCode = hashCode * 59 + this.UseThisCostWhenOrdering.GetHashCode();
                if (this.UseBookPricesAndDiscounts != null)
                    hashCode = hashCode * 59 + this.UseBookPricesAndDiscounts.GetHashCode();
                if (this.CalculateUsingAdjustedDiscountPercent != null)
                    hashCode = hashCode * 59 + this.CalculateUsingAdjustedDiscountPercent.GetHashCode();
                if (this.AllowPriceLessThanCost != null)
                    hashCode = hashCode * 59 + this.AllowPriceLessThanCost.GetHashCode();
                if (this.CanAdjustToMaxDiscount != null)
                    hashCode = hashCode * 59 + this.CanAdjustToMaxDiscount.GetHashCode();
                if (this.AdjustedSellingPrice != null)
                    hashCode = hashCode * 59 + this.AdjustedSellingPrice.GetHashCode();
                if (this.EstimatedCost != null)
                    hashCode = hashCode * 59 + this.EstimatedCost.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.AdjustedDiscountPercent != null)
                    hashCode = hashCode * 59 + this.AdjustedDiscountPercent.GetHashCode();
                if (this.OpenAssemblyAdjustments != null)
                    hashCode = hashCode * 59 + this.OpenAssemblyAdjustments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
