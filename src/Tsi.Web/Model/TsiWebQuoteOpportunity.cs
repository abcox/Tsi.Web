/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebQuoteOpportunity
    /// </summary>
    [DataContract]
    public partial class TsiWebQuoteOpportunity :  IEquatable<TsiWebQuoteOpportunity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebQuoteOpportunity" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        /// <param name="expectedAmount">expectedAmount.</param>
        /// <param name="notes">notes.</param>
        /// <param name="estimatedCloseDate">estimatedCloseDate.</param>
        /// <param name="stageDescription">stageDescription.</param>
        /// <param name="probabilityPercent">probabilityPercent.</param>
        public TsiWebQuoteOpportunity(string name = default(string), string status = default(string), double? expectedAmount = default(double?), string notes = default(string), DateTime? estimatedCloseDate = default(DateTime?), string stageDescription = default(string), int? probabilityPercent = default(int?))
        {
            this.Name = name;
            this.Status = status;
            this.ExpectedAmount = expectedAmount;
            this.Notes = notes;
            this.EstimatedCloseDate = estimatedCloseDate;
            this.StageDescription = stageDescription;
            this.ProbabilityPercent = probabilityPercent;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedAmount
        /// </summary>
        [DataMember(Name="ExpectedAmount", EmitDefaultValue=false)]
        public double? ExpectedAmount { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="Notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedCloseDate
        /// </summary>
        [DataMember(Name="EstimatedCloseDate", EmitDefaultValue=false)]
        public DateTime? EstimatedCloseDate { get; set; }

        /// <summary>
        /// Gets or Sets StageDescription
        /// </summary>
        [DataMember(Name="StageDescription", EmitDefaultValue=false)]
        public string StageDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProbabilityPercent
        /// </summary>
        [DataMember(Name="ProbabilityPercent", EmitDefaultValue=false)]
        public int? ProbabilityPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebQuoteOpportunity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpectedAmount: ").Append(ExpectedAmount).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  EstimatedCloseDate: ").Append(EstimatedCloseDate).Append("\n");
            sb.Append("  StageDescription: ").Append(StageDescription).Append("\n");
            sb.Append("  ProbabilityPercent: ").Append(ProbabilityPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebQuoteOpportunity);
        }

        /// <summary>
        /// Returns true if TsiWebQuoteOpportunity instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebQuoteOpportunity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebQuoteOpportunity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExpectedAmount == input.ExpectedAmount ||
                    (this.ExpectedAmount != null &&
                    this.ExpectedAmount.Equals(input.ExpectedAmount))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.EstimatedCloseDate == input.EstimatedCloseDate ||
                    (this.EstimatedCloseDate != null &&
                    this.EstimatedCloseDate.Equals(input.EstimatedCloseDate))
                ) && 
                (
                    this.StageDescription == input.StageDescription ||
                    (this.StageDescription != null &&
                    this.StageDescription.Equals(input.StageDescription))
                ) && 
                (
                    this.ProbabilityPercent == input.ProbabilityPercent ||
                    (this.ProbabilityPercent != null &&
                    this.ProbabilityPercent.Equals(input.ProbabilityPercent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExpectedAmount != null)
                    hashCode = hashCode * 59 + this.ExpectedAmount.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.EstimatedCloseDate != null)
                    hashCode = hashCode * 59 + this.EstimatedCloseDate.GetHashCode();
                if (this.StageDescription != null)
                    hashCode = hashCode * 59 + this.StageDescription.GetHashCode();
                if (this.ProbabilityPercent != null)
                    hashCode = hashCode * 59 + this.ProbabilityPercent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
