/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrder
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrder :  IEquatable<TsiWebServiceOrder>, IValidatableObject
    {

        public enum SearchType
        {
            ServiceOrderNumber,
            Reference,
            InvoiceNumber,
            ItemID,
            AgreementNumber,
            CustomerPurchaseOrder,
            ExternalProduct,
            ExternalTicket,
            AccountNumber,
            Status,
            Type,
            Profile,
            Resolution,
            Symptom,
            CustomField, // requires CategoryName and CustomFieldName
        }

        public enum MatchType
        {
            StartsWith, // default,
            EndsWith,
            Contains,
            GreaterThan,
            GreaterThanEqual,
            Equal,
            LessThan,
            LessThanEqual,
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebServiceOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrder" /> class.
        /// </summary>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="alternatePhoneNumber">alternatePhoneNumber.</param>
        /// <param name="alternatePhoneLocation">alternatePhoneLocation.</param>
        /// <param name="contactNumber">contactNumber.</param>
        /// <param name="alternateContactEmailAddress">alternateContactEmailAddress.</param>
        /// <param name="alternateContactPhoneNumber">alternateContactPhoneNumber.</param>
        /// <param name="alternateContactPhoneLocation">alternateContactPhoneLocation.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="invoicedStatus">invoicedStatus.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="technicianAssigned">technicianAssigned.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="customerPurchaseOrder">customerPurchaseOrder.</param>
        /// <param name="purchaseOrderNumber">purchaseOrderNumber.</param>
        /// <param name="externalAccountId">externalAccountId.</param>
        /// <param name="managedServiceProviderAlertId">managedServiceProviderAlertId.</param>
        /// <param name="age">age.</param>
        /// <param name="printedFlag">printedFlag.</param>
        /// <param name="serviceLevelAgreementDeadLine">serviceLevelAgreementDeadLine.</param>
        /// <param name="serviceLevelAgreementWarning">serviceLevelAgreementWarning.</param>
        /// <param name="priority">priority.</param>
        /// <param name="serviceOrderType">serviceOrderType.</param>
        /// <param name="dateTimeReceived">dateTimeReceived.</param>
        /// <param name="takenBy">takenBy (required).</param>
        /// <param name="dateTimeRequested">dateTimeRequested.</param>
        /// <param name="dateRequested">dateRequested.</param>
        /// <param name="timeRequested">timeRequested.</param>
        /// <param name="requestedBy">requestedBy.</param>
        /// <param name="dateTimeOpened">dateTimeOpened.</param>
        /// <param name="dateTimeClosed">dateTimeClosed.</param>
        /// <param name="verifiedDate">verifiedDate.</param>
        /// <param name="verifiedBy">verifiedBy.</param>
        /// <param name="serviceZone">serviceZone.</param>
        /// <param name="system">system.</param>
        /// <param name="reference">reference.</param>
        /// <param name="status">status.</param>
        /// <param name="billParent">billParent.</param>
        /// <param name="billTo">billTo.</param>
        /// <param name="shipTo">shipTo.</param>
        /// <param name="resolvedOnPhone">resolvedOnPhone.</param>
        /// <param name="callBackCount">callBackCount.</param>
        /// <param name="briefDescription">briefDescription.</param>
        /// <param name="workRequested">workRequested.</param>
        /// <param name="workPerformed">workPerformed.</param>
        /// <param name="internalComments">internalComments.</param>
        /// <param name="productType">productType.</param>
        /// <param name="projectNumber">projectNumber.</param>
        /// <param name="projectPhaseNumber">projectPhaseNumber.</param>
        /// <param name="projectSubPhaseNumber">projectSubPhaseNumber.</param>
        /// <param name="directionsToLocation">directionsToLocation.</param>
        /// <param name="statusChangeIndicator">statusChangeIndicator.</param>
        /// <param name="statusChangeDate">statusChangeDate.</param>
        /// <param name="canDiscountedItemsGetHeaderDiscount">canDiscountedItemsGetHeaderDiscount.</param>
        /// <param name="estimatedHours">estimatedHours.</param>
        /// <param name="estimatedMinutes">estimatedMinutes.</param>
        /// <param name="tagNumber">tagNumber.</param>
        /// <param name="loanAgreement">loanAgreement.</param>
        /// <param name="debitCreditMemo">debitCreditMemo.</param>
        /// <param name="dispatchBoardNumber">dispatchBoardNumber.</param>
        /// <param name="severity">severity.</param>
        /// <param name="payMethodId">payMethodId.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="invoiceTerms">invoiceTerms.</param>
        /// <param name="aRCustomerNumber">aRCustomerNumber.</param>
        /// <param name="readyToInvoice">readyToInvoice.</param>
        /// <param name="repToCredit">repToCredit.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        /// <param name="gSTaxable">gSTaxable.</param>
        /// <param name="gSTIsTaxable">gSTIsTaxable.</param>
        /// <param name="gSTaxComputeBeforeTradeIn">gSTaxComputeBeforeTradeIn.</param>
        /// <param name="gSTaxRate">gSTaxRate.</param>
        /// <param name="taxComputedBeforeTradeIn">taxComputedBeforeTradeIn.</param>
        /// <param name="freightTaxable">freightTaxable.</param>
        /// <param name="freightTerms">freightTerms.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="discountAmount">discountAmount.</param>
        /// <param name="discountSellForPrice">discountSellForPrice.</param>
        /// <param name="discountMarginPercent">discountMarginPercent.</param>
        /// <param name="salesTaxCode">salesTaxCode.</param>
        /// <param name="salesTaxRate">salesTaxRate.</param>
        /// <param name="tradeIn">tradeIn.</param>
        /// <param name="deposit">deposit.</param>
        /// <param name="totalSellingPrice">totalSellingPrice.</param>
        /// <param name="totalDollarsDiscounted">totalDollarsDiscounted.</param>
        /// <param name="totalPercentDiscounted">totalPercentDiscounted.</param>
        /// <param name="gSTax">gSTax.</param>
        /// <param name="gSTaxableAmount">gSTaxableAmount.</param>
        /// <param name="salesTax">salesTax.</param>
        /// <param name="taxableAmount">taxableAmount.</param>
        /// <param name="providerTax">providerTax.</param>
        /// <param name="providerTaxRate">providerTaxRate.</param>
        /// <param name="providerTaxableAmount">providerTaxableAmount.</param>
        /// <param name="freight">freight.</param>
        /// <param name="totalDue">totalDue.</param>
        /// <param name="bidPrice">bidPrice.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="voidBy">voidBy.</param>
        /// <param name="voidDate">voidDate.</param>
        /// <param name="voidReason">voidReason.</param>
        /// <param name="salesAgreementNumber">salesAgreementNumber.</param>
        /// <param name="dispatchReference">dispatchReference.</param>
        /// <param name="iBMNumber">iBMNumber.</param>
        /// <param name="otherReferenceNum">otherReferenceNum.</param>
        /// <param name="aRReference">aRReference.</param>
        /// <param name="customerReference">customerReference.</param>
        /// <param name="gLReference">gLReference.</param>
        /// <param name="miscellaneous">miscellaneous.</param>
        /// <param name="comment">comment.</param>
        /// <param name="externalInvoice">externalInvoice.</param>
        /// <param name="warrantyType">warrantyType.</param>
        /// <param name="managedServiceProviderAlertUrl">managedServiceProviderAlertUrl.</param>
        /// <param name="defaultBin">defaultBin.</param>
        /// <param name="postedStatus">postedStatus.</param>
        /// <param name="progressiveInvoiceTotalComment">progressiveInvoiceTotalComment.</param>
        /// <param name="serviceCategory">serviceCategory.</param>
        /// <param name="stagingLocation">stagingLocation.</param>
        /// <param name="priorityColor">priorityColor.</param>
        /// <param name="severityRank">severityRank.</param>
        /// <param name="actualHoursLogged">actualHoursLogged.</param>
        /// <param name="actualMinutesLogged">actualMinutesLogged.</param>
        /// <param name="meterReading">meterReading.</param>
        /// <param name="originalServiceOrderNumber">originalServiceOrderNumber.</param>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="priorityRank">priorityRank.</param>
        /// <param name="quoteNumber">quoteNumber.</param>
        /// <param name="receivedDateAge">receivedDateAge.</param>
        /// <param name="totalHours">totalHours.</param>
        /// <param name="totalMinutes">totalMinutes.</param>
        /// <param name="aRDate">aRDate.</param>
        /// <param name="bMFLastProcessed">bMFLastProcessed.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="dateToInstall">dateToInstall.</param>
        /// <param name="gLDate">gLDate.</param>
        /// <param name="nextDate">nextDate.</param>
        /// <param name="creditsWereInvoiced">creditsWereInvoiced.</param>
        /// <param name="emailConnectorUpdate">emailConnectorUpdate.</param>
        /// <param name="inThresholdEscalationNoticeSent">inThresholdEscalationNoticeSent.</param>
        /// <param name="needToTestEscalation">needToTestEscalation.</param>
        /// <param name="pastTargetEscalationNoticeSent">pastTargetEscalationNoticeSent.</param>
        /// <param name="taxLabor">taxLabor.</param>
        /// <param name="creditBalance">creditBalance.</param>
        /// <param name="totalLaborCost">totalLaborCost.</param>
        /// <param name="totalLaborSellPrice">totalLaborSellPrice.</param>
        /// <param name="totalOtherCost">totalOtherCost.</param>
        /// <param name="totalOtherSellPrice">totalOtherSellPrice.</param>
        /// <param name="unappliedBOTradein">unappliedBOTradein.</param>
        /// <param name="unappliedGSTradein">unappliedGSTradein.</param>
        /// <param name="unappliedTradeIn">unappliedTradeIn.</param>
        /// <param name="laborHours">laborHours.</param>
        /// <param name="savingsPercent">savingsPercent.</param>
        /// <param name="orderSource">orderSource.</param>
        /// <param name="displayOnCustomerPortal">displayOnCustomerPortal.</param>
        public TsiWebServiceOrder(
            int? accountNumber = default(int?),
            string alternatePhoneNumber = default(string),
            string alternatePhoneLocation = default(string),
            int? contactNumber = default(int?),
            string alternateContactEmailAddress = default(string),
            string alternateContactPhoneNumber = default(string),
            string alternateContactPhoneLocation = default(string),
            int? invoiceNumber = default(int?),
            string invoicedStatus = default(string),
            DateTime? invoiceDate = default(DateTime?),
            int? technicianAssigned = default(int?),
            int? contractNumber = default(int?),
            string customerPurchaseOrder = default(string),
            int? purchaseOrderNumber = default(int?),
            string externalAccountId = default(string),
            string managedServiceProviderAlertId = default(string),
            int? age = default(int?),
            bool? printedFlag = default(bool?),
            DateTime? serviceLevelAgreementDeadLine = default(DateTime?),
            DateTime? serviceLevelAgreementWarning = default(DateTime?),
            string priority = default(string),
            string serviceOrderType = default(string),
            DateTime? dateTimeReceived = default(DateTime?),
            int? takenBy = default(int?),
            DateTime? dateTimeRequested = default(DateTime?),
            DateTime? dateRequested = default(DateTime?),
            DateTime? timeRequested = default(DateTime?),
            string requestedBy = default(string),
            DateTime? dateTimeOpened = default(DateTime?),
            DateTime? dateTimeClosed = default(DateTime?),
            DateTime? verifiedDate = default(DateTime?),
            string verifiedBy = default(string),
            string serviceZone = default(string),
            string system = default(string),
            string reference = default(string),
            string status = default(string),
            bool? billParent = default(bool?),
            TsiWebAlternateAddress billTo = default(TsiWebAlternateAddress),
            TsiWebAlternateAddress shipTo = default(TsiWebAlternateAddress),
            bool? resolvedOnPhone = default(bool?),
            int? callBackCount = default(int?),
            string briefDescription = default(string),
            string workRequested = default(string),
            string workPerformed = default(string),
            string internalComments = default(string),
            int? productType = default(int?),
            int? projectNumber = default(int?),
            int? projectPhaseNumber = default(int?),
            int? projectSubPhaseNumber = default(int?),
            string directionsToLocation = default(string),
            bool? statusChangeIndicator = default(bool?),
            DateTime? statusChangeDate = default(DateTime?),
            bool? canDiscountedItemsGetHeaderDiscount = default(bool?),
            int? estimatedHours = default(int?),
            int? estimatedMinutes = default(int?),
            string tagNumber = default(string),
            string loanAgreement = default(string),
            string debitCreditMemo = default(string),
            int? dispatchBoardNumber = default(int?),
            int? severity = default(int?),
            int? payMethodId = default(int?),
            string paymentMethod = default(string),
            string invoiceTerms = default(string),
            string aRCustomerNumber = default(string),
            bool? readyToInvoice = default(bool?),
            int? repToCredit = default(int?),
            string shippingMethod = default(string),
            bool? gSTaxable = default(bool?),
            bool? gSTIsTaxable = default(bool?),
            bool? gSTaxComputeBeforeTradeIn = default(bool?),
            double? gSTaxRate = default(double?),
            bool? taxComputedBeforeTradeIn = default(bool?),
            bool? freightTaxable = default(bool?),
            string freightTerms = default(string),
            bool? taxable = default(bool?), 
            double? discountPercent = default(double?),
            double? discountAmount = default(double?),
            double? discountSellForPrice = default(double?),
            double? discountMarginPercent = default(double?),
            string salesTaxCode = default(string),
            double? salesTaxRate = default(double?),
            double? tradeIn = default(double?),
            double? deposit = default(double?),
            double? totalSellingPrice = default(double?),
            double? totalDollarsDiscounted = default(double?),
            double? totalPercentDiscounted = default(double?),
            double? gSTax = default(double?),
            double? gSTaxableAmount = default(double?),
            double? salesTax = default(double?),
            double? taxableAmount = default(double?),
            double? providerTax = default(double?),
            double? providerTaxRate = default(double?),
            double? providerTaxableAmount = default(double?),
            double? freight = default(double?),
            double? totalDue = default(double?),
            double? bidPrice = default(double?),
            double? totalCost = default(double?),
            int? voidBy = default(int?),
            DateTime? voidDate = default(DateTime?),
            string voidReason = default(string),
            string salesAgreementNumber = default(string),
            string dispatchReference = default(string),
            string iBMNumber = default(string),
            string otherReferenceNum = default(string),
            string aRReference = default(string),
            string customerReference = default(string),
            string gLReference = default(string),
            string miscellaneous = default(string),
            string comment = default(string),
            string externalInvoice = default(string),
            string warrantyType = default(string),
            string managedServiceProviderAlertUrl = default(string),
            string defaultBin = default(string),
            string postedStatus = default(string),
            string progressiveInvoiceTotalComment = default(string),
            string serviceCategory = default(string),
            string stagingLocation = default(string),
            int? priorityColor = default(int?),
            int? severityRank = default(int?),
            int? actualHoursLogged = default(int?),
            int? actualMinutesLogged = default(int?),
            int? meterReading = default(int?),
            int? originalServiceOrderNumber = default(int?),
            int? priceLevel = default(int?),
            int? priorityRank = default(int?),
            int? quoteNumber = default(int?),
            int? receivedDateAge = default(int?),
            int? totalHours = default(int?),
            int? totalMinutes = default(int?),
            DateTime? aRDate = default(DateTime?),
            DateTime? bMFLastProcessed = default(DateTime?),
            DateTime? dateCreated = default(DateTime?),
            DateTime? dateToInstall = default(DateTime?),
            DateTime? gLDate = default(DateTime?),
            DateTime? nextDate = default(DateTime?),
            bool? creditsWereInvoiced = default(bool?),
            bool? emailConnectorUpdate = default(bool?),
            bool? inThresholdEscalationNoticeSent = default(bool?),
            bool? needToTestEscalation = default(bool?),
            bool? pastTargetEscalationNoticeSent = default(bool?),
            bool? taxLabor = default(bool?),
            double? creditBalance = default(double?),
            double? totalLaborCost = default(double?),
            double? totalLaborSellPrice = default(double?),
            double? totalOtherCost = default(double?),
            double? totalOtherSellPrice = default(double?),
            double? unappliedBOTradein = default(double?),
            double? unappliedGSTradein = default(double?),
            double? unappliedTradeIn = default(double?),
            double? laborHours = default(double?),
            double? savingsPercent = default(double?),
            int? orderSource = default(int?),
            bool? displayOnCustomerPortal = default(bool?)
            )
        {
            // to ensure "takenBy" is required (not null)
            if (takenBy == null)
            {
                throw new InvalidDataException("takenBy is a required property for TsiWebServiceOrder and cannot be null");
            }
            else
            {
                this.TakenBy = takenBy;
            }
            this.AccountNumber = accountNumber;
            this.AlternatePhoneNumber = alternatePhoneNumber;
            this.AlternatePhoneLocation = alternatePhoneLocation;
            this.ContactNumber = contactNumber;
            this.AlternateContactEmailAddress = alternateContactEmailAddress;
            this.AlternateContactPhoneNumber = alternateContactPhoneNumber;
            this.AlternateContactPhoneLocation = alternateContactPhoneLocation;
            this.InvoiceNumber = invoiceNumber;
            this.InvoicedStatus = invoicedStatus;
            this.InvoiceDate = invoiceDate;
            this.TechnicianAssigned = technicianAssigned;
            this.ContractNumber = contractNumber;
            this.CustomerPurchaseOrder = customerPurchaseOrder;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.ExternalAccountId = externalAccountId;
            this.ManagedServiceProviderAlertId = managedServiceProviderAlertId;
            this.Age = age;
            this.PrintedFlag = printedFlag;
            this.ServiceLevelAgreementDeadLine = serviceLevelAgreementDeadLine;
            this.ServiceLevelAgreementWarning = serviceLevelAgreementWarning;
            this.Priority = priority;
            this.ServiceOrderType = serviceOrderType;
            this.DateTimeReceived = dateTimeReceived;
            this.DateTimeRequested = dateTimeRequested;
            this.DateRequested = dateRequested;
            this.TimeRequested = timeRequested;
            this.RequestedBy = requestedBy;
            this.DateTimeOpened = dateTimeOpened;
            this.DateTimeClosed = dateTimeClosed;
            this.VerifiedDate = verifiedDate;
            this.VerifiedBy = verifiedBy;
            this.ServiceZone = serviceZone;
            this.System = system;
            this.Reference = reference;
            this.Status = status;
            this.BillParent = billParent;
            this.BillTo = billTo;
            this.ShipTo = shipTo;
            this.ResolvedOnPhone = resolvedOnPhone;
            this.CallBackCount = callBackCount;
            this.BriefDescription = briefDescription;
            this.WorkRequested = workRequested;
            this.WorkPerformed = workPerformed;
            this.InternalComments = internalComments;
            this.ProductType = productType;
            this.ProjectNumber = projectNumber;
            this.ProjectPhaseNumber = projectPhaseNumber;
            this.ProjectSubPhaseNumber = projectSubPhaseNumber;
            this.DirectionsToLocation = directionsToLocation;
            this.StatusChangeIndicator = statusChangeIndicator;
            this.StatusChangeDate = statusChangeDate;
            this.CanDiscountedItemsGetHeaderDiscount = canDiscountedItemsGetHeaderDiscount;
            this.EstimatedHours = estimatedHours;
            this.EstimatedMinutes = estimatedMinutes;
            this.TagNumber = tagNumber;
            this.LoanAgreement = loanAgreement;
            this.DebitCreditMemo = debitCreditMemo;
            this.DispatchBoardNumber = dispatchBoardNumber;
            this.Severity = severity;
            this.PayMethodId = payMethodId;
            this.PaymentMethod = paymentMethod;
            this.InvoiceTerms = invoiceTerms;
            this.ARCustomerNumber = aRCustomerNumber;
            this.ReadyToInvoice = readyToInvoice;
            this.RepToCredit = repToCredit;
            this.ShippingMethod = shippingMethod;
            this.GSTaxable = gSTaxable;
            this.GSTIsTaxable = gSTIsTaxable;
            this.GSTaxComputeBeforeTradeIn = gSTaxComputeBeforeTradeIn;
            this.GSTaxRate = gSTaxRate;
            this.TaxComputedBeforeTradeIn = taxComputedBeforeTradeIn;
            this.FreightTaxable = freightTaxable;
            this.FreightTerms = freightTerms;
            this.Taxable = taxable;
            this.DiscountPercent = discountPercent;
            this.DiscountAmount = discountAmount;
            this.DiscountSellForPrice = discountSellForPrice;
            this.DiscountMarginPercent = discountMarginPercent;
            this.SalesTaxCode = salesTaxCode;
            this.SalesTaxRate = salesTaxRate;
            this.TradeIn = tradeIn;
            this.Deposit = deposit;
            this.TotalSellingPrice = totalSellingPrice;
            this.TotalDollarsDiscounted = totalDollarsDiscounted;
            this.TotalPercentDiscounted = totalPercentDiscounted;
            this.GSTax = gSTax;
            this.GSTaxableAmount = gSTaxableAmount;
            this.SalesTax = salesTax;
            this.TaxableAmount = taxableAmount;
            this.ProviderTax = providerTax;
            this.ProviderTaxRate = providerTaxRate;
            this.ProviderTaxableAmount = providerTaxableAmount;
            this.Freight = freight;
            this.TotalDue = totalDue;
            this.BidPrice = bidPrice;
            this.TotalCost = totalCost;
            this.VoidBy = voidBy;
            this.VoidDate = voidDate;
            this.VoidReason = voidReason;
            this.SalesAgreementNumber = salesAgreementNumber;
            this.DispatchReference = dispatchReference;
            this.IBMNumber = iBMNumber;
            this.OtherReferenceNum = otherReferenceNum;
            this.ARReference = aRReference;
            this.CustomerReference = customerReference;
            this.GLReference = gLReference;
            this.Miscellaneous = miscellaneous;
            this.Comment = comment;
            this.ExternalInvoice = externalInvoice;
            this.WarrantyType = warrantyType;
            this.ManagedServiceProviderAlertUrl = managedServiceProviderAlertUrl;
            this.DefaultBin = defaultBin;
            this.PostedStatus = postedStatus;
            this.ProgressiveInvoiceTotalComment = progressiveInvoiceTotalComment;
            this.ServiceCategory = serviceCategory;
            this.StagingLocation = stagingLocation;
            this.PriorityColor = priorityColor;
            this.SeverityRank = severityRank;
            this.ActualHoursLogged = actualHoursLogged;
            this.ActualMinutesLogged = actualMinutesLogged;
            this.MeterReading = meterReading;
            this.OriginalServiceOrderNumber = originalServiceOrderNumber;
            this.PriceLevel = priceLevel;
            this.PriorityRank = priorityRank;
            this.QuoteNumber = quoteNumber;
            this.ReceivedDateAge = receivedDateAge;
            this.TotalHours = totalHours;
            this.TotalMinutes = totalMinutes;
            this.ARDate = aRDate;
            this.BMFLastProcessed = bMFLastProcessed;
            this.DateCreated = dateCreated;
            this.DateToInstall = dateToInstall;
            this.GLDate = gLDate;
            this.NextDate = nextDate;
            this.CreditsWereInvoiced = creditsWereInvoiced;
            this.EmailConnectorUpdate = emailConnectorUpdate;
            this.InThresholdEscalationNoticeSent = inThresholdEscalationNoticeSent;
            this.NeedToTestEscalation = needToTestEscalation;
            this.PastTargetEscalationNoticeSent = pastTargetEscalationNoticeSent;
            this.TaxLabor = taxLabor;
            this.CreditBalance = creditBalance;
            this.TotalLaborCost = totalLaborCost;
            this.TotalLaborSellPrice = totalLaborSellPrice;
            this.TotalOtherCost = totalOtherCost;
            this.TotalOtherSellPrice = totalOtherSellPrice;
            this.UnappliedBOTradein = unappliedBOTradein;
            this.UnappliedGSTradein = unappliedGSTradein;
            this.UnappliedTradeIn = unappliedTradeIn;
            this.LaborHours = laborHours;
            this.SavingsPercent = savingsPercent;
            this.OrderSource = orderSource;
            this.DisplayOnCustomerPortal = displayOnCustomerPortal;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AlternatePhoneNumber
        /// </summary>
        [DataMember(Name="AlternatePhoneNumber", EmitDefaultValue=false)]
        public string AlternatePhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets AlternatePhoneLocation
        /// </summary>
        [DataMember(Name="AlternatePhoneLocation", EmitDefaultValue=false)]
        public string AlternatePhoneLocation { get; set; }

        /// <summary>
        /// Gets or Sets ContactNumber
        /// </summary>
        [DataMember(Name="ContactNumber", EmitDefaultValue=false)]
        public int? ContactNumber { get; set; }

        /// <summary>
        /// Gets or Sets AlternateContactEmailAddress
        /// </summary>
        [DataMember(Name="AlternateContactEmailAddress", EmitDefaultValue=false)]
        public string AlternateContactEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets AlternateContactPhoneNumber
        /// </summary>
        [DataMember(Name="AlternateContactPhoneNumber", EmitDefaultValue=false)]
        public string AlternateContactPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets AlternateContactPhoneLocation
        /// </summary>
        [DataMember(Name="AlternateContactPhoneLocation", EmitDefaultValue=false)]
        public string AlternateContactPhoneLocation { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="InvoiceNumber", EmitDefaultValue=false)]
        public int? InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoicedStatus
        /// </summary>
        [DataMember(Name="InvoicedStatus", EmitDefaultValue=false)]
        public string InvoicedStatus { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets TechnicianAssigned
        /// </summary>
        [DataMember(Name="TechnicianAssigned", EmitDefaultValue=false)]
        public int? TechnicianAssigned { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="ContractNumber", EmitDefaultValue=false)]
        public int? ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPurchaseOrder
        /// </summary>
        [DataMember(Name="CustomerPurchaseOrder", EmitDefaultValue=false)]
        public string CustomerPurchaseOrder { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderNumber
        /// </summary>
        [DataMember(Name="PurchaseOrderNumber", EmitDefaultValue=false)]
        public int? PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAccountId
        /// </summary>
        [DataMember(Name="ExternalAccountId", EmitDefaultValue=false)]
        public string ExternalAccountId { get; set; }

        /// <summary>
        /// Gets or Sets ManagedServiceProviderAlertId
        /// </summary>
        [DataMember(Name="ManagedServiceProviderAlertId", EmitDefaultValue=false)]
        public string ManagedServiceProviderAlertId { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="Age", EmitDefaultValue=false)]
        public int? Age { get; set; }

        /// <summary>
        /// Gets or Sets PrintedFlag
        /// </summary>
        [DataMember(Name="PrintedFlag", EmitDefaultValue=false)]
        public bool? PrintedFlag { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementDeadLine
        /// </summary>
        [DataMember(Name="ServiceLevelAgreementDeadLine", EmitDefaultValue=false)]
        public DateTime? ServiceLevelAgreementDeadLine { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevelAgreementWarning
        /// </summary>
        [DataMember(Name="ServiceLevelAgreementWarning", EmitDefaultValue=false)]
        public DateTime? ServiceLevelAgreementWarning { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderType
        /// </summary>
        [DataMember(Name="ServiceOrderType", EmitDefaultValue=false)]
        public string ServiceOrderType { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeReceived
        /// </summary>
        [DataMember(Name="DateTimeReceived", EmitDefaultValue=false)]
        public DateTime? DateTimeReceived { get; set; }

        /// <summary>
        /// Gets or Sets TakenBy
        /// </summary>
        [DataMember(Name="TakenBy", EmitDefaultValue=false)]
        public int? TakenBy { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeRequested
        /// </summary>
        [DataMember(Name="DateTimeRequested", EmitDefaultValue=false)]
        public DateTime? DateTimeRequested { get; set; }

        /// <summary>
        /// Gets or Sets DateRequested
        /// </summary>
        [DataMember(Name="DateRequested", EmitDefaultValue=false)]
        public DateTime? DateRequested { get; set; }

        /// <summary>
        /// Gets or Sets TimeRequested
        /// </summary>
        [DataMember(Name="TimeRequested", EmitDefaultValue=false)]
        public DateTime? TimeRequested { get; set; }

        /// <summary>
        /// Gets or Sets RequestedBy
        /// </summary>
        [DataMember(Name="RequestedBy", EmitDefaultValue=false)]
        public string RequestedBy { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeOpened
        /// </summary>
        [DataMember(Name="DateTimeOpened", EmitDefaultValue=false)]
        public DateTime? DateTimeOpened { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeClosed
        /// </summary>
        [DataMember(Name="DateTimeClosed", EmitDefaultValue=false)]
        public DateTime? DateTimeClosed { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedDate
        /// </summary>
        [DataMember(Name="VerifiedDate", EmitDefaultValue=false)]
        public DateTime? VerifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedBy
        /// </summary>
        [DataMember(Name="VerifiedBy", EmitDefaultValue=false)]
        public string VerifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ServiceZone
        /// </summary>
        [DataMember(Name="ServiceZone", EmitDefaultValue=false)]
        public string ServiceZone { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [DataMember(Name="System", EmitDefaultValue=false)]
        public string System { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="Reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets BillParent
        /// </summary>
        [DataMember(Name="BillParent", EmitDefaultValue=false)]
        public bool? BillParent { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="BillTo", EmitDefaultValue=false)]
        public TsiWebAlternateAddress BillTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name="ShipTo", EmitDefaultValue=false)]
        public TsiWebAlternateAddress ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets ResolvedOnPhone
        /// </summary>
        [DataMember(Name="ResolvedOnPhone", EmitDefaultValue=false)]
        public bool? ResolvedOnPhone { get; set; }

        /// <summary>
        /// Gets or Sets CallBackCount
        /// </summary>
        [DataMember(Name="CallBackCount", EmitDefaultValue=false)]
        public int? CallBackCount { get; set; }

        /// <summary>
        /// Gets or Sets BriefDescription
        /// </summary>
        [DataMember(Name="BriefDescription", EmitDefaultValue=false)]
        public string BriefDescription { get; set; }

        /// <summary>
        /// Gets or Sets WorkRequested
        /// </summary>
        [DataMember(Name="WorkRequested", EmitDefaultValue=false)]
        public string WorkRequested { get; set; }

        /// <summary>
        /// Gets or Sets WorkPerformed
        /// </summary>
        [DataMember(Name="WorkPerformed", EmitDefaultValue=false)]
        public string WorkPerformed { get; set; }

        /// <summary>
        /// Gets or Sets InternalComments
        /// </summary>
        [DataMember(Name="InternalComments", EmitDefaultValue=false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="ProductType", EmitDefaultValue=false)]
        public int? ProductType { get; set; }

        /// <summary>
        /// Gets or Sets ProjectNumber
        /// </summary>
        [DataMember(Name="ProjectNumber", EmitDefaultValue=false)]
        public int? ProjectNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProjectSubPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectSubPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectSubPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets DirectionsToLocation
        /// </summary>
        [DataMember(Name="DirectionsToLocation", EmitDefaultValue=false)]
        public string DirectionsToLocation { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeIndicator
        /// </summary>
        [DataMember(Name="StatusChangeIndicator", EmitDefaultValue=false)]
        public bool? StatusChangeIndicator { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeDate
        /// </summary>
        [DataMember(Name="StatusChangeDate", EmitDefaultValue=false)]
        public DateTime? StatusChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets CanDiscountedItemsGetHeaderDiscount
        /// </summary>
        [DataMember(Name="CanDiscountedItemsGetHeaderDiscount", EmitDefaultValue=false)]
        public bool? CanDiscountedItemsGetHeaderDiscount { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedHours
        /// </summary>
        [DataMember(Name="EstimatedHours", EmitDefaultValue=false)]
        public int? EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedMinutes
        /// </summary>
        [DataMember(Name="EstimatedMinutes", EmitDefaultValue=false)]
        public int? EstimatedMinutes { get; set; }

        /// <summary>
        /// Gets or Sets TagNumber
        /// </summary>
        [DataMember(Name="TagNumber", EmitDefaultValue=false)]
        public string TagNumber { get; set; }

        /// <summary>
        /// Gets or Sets LoanAgreement
        /// </summary>
        [DataMember(Name="LoanAgreement", EmitDefaultValue=false)]
        public string LoanAgreement { get; set; }

        /// <summary>
        /// Gets or Sets DebitCreditMemo
        /// </summary>
        [DataMember(Name="DebitCreditMemo", EmitDefaultValue=false)]
        public string DebitCreditMemo { get; set; }

        /// <summary>
        /// Gets or Sets DispatchBoardNumber
        /// </summary>
        [DataMember(Name="DispatchBoardNumber", EmitDefaultValue=false)]
        public int? DispatchBoardNumber { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="Severity", EmitDefaultValue=false)]
        public int? Severity { get; set; }

        /// <summary>
        /// Gets or Sets PayMethodId
        /// </summary>
        [DataMember(Name="PayMethodId", EmitDefaultValue=false)]
        public int? PayMethodId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTerms
        /// </summary>
        [DataMember(Name="InvoiceTerms", EmitDefaultValue=false)]
        public string InvoiceTerms { get; set; }

        /// <summary>
        /// Gets or Sets ARCustomerNumber
        /// </summary>
        [DataMember(Name="ARCustomerNumber", EmitDefaultValue=false)]
        public string ARCustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReadyToInvoice
        /// </summary>
        [DataMember(Name="ReadyToInvoice", EmitDefaultValue=false)]
        public bool? ReadyToInvoice { get; set; }

        /// <summary>
        /// Gets or Sets RepToCredit
        /// </summary>
        [DataMember(Name="RepToCredit", EmitDefaultValue=false)]
        public int? RepToCredit { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name="ShippingMethod", EmitDefaultValue=false)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxable
        /// </summary>
        [DataMember(Name="GSTaxable", EmitDefaultValue=false)]
        public bool? GSTaxable { get; set; }

        /// <summary>
        /// Gets or Sets GSTIsTaxable
        /// </summary>
        [DataMember(Name="GSTIsTaxable", EmitDefaultValue=false)]
        public bool? GSTIsTaxable { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxComputeBeforeTradeIn
        /// </summary>
        [DataMember(Name="GSTaxComputeBeforeTradeIn", EmitDefaultValue=false)]
        public bool? GSTaxComputeBeforeTradeIn { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxRate
        /// </summary>
        [DataMember(Name="GSTaxRate", EmitDefaultValue=false)]
        public double? GSTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TaxComputedBeforeTradeIn
        /// </summary>
        [DataMember(Name="TaxComputedBeforeTradeIn", EmitDefaultValue=false)]
        public bool? TaxComputedBeforeTradeIn { get; set; }

        /// <summary>
        /// Gets or Sets FreightTaxable
        /// </summary>
        [DataMember(Name="FreightTaxable", EmitDefaultValue=false)]
        public bool? FreightTaxable { get; set; }

        /// <summary>
        /// Gets or Sets FreightTerms
        /// </summary>
        [DataMember(Name="FreightTerms", EmitDefaultValue=false)]
        public string FreightTerms { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name="Taxable", EmitDefaultValue=false)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="DiscountPercent", EmitDefaultValue=false)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="DiscountAmount", EmitDefaultValue=false)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountSellForPrice
        /// </summary>
        [DataMember(Name="DiscountSellForPrice", EmitDefaultValue=false)]
        public double? DiscountSellForPrice { get; set; }

        /// <summary>
        /// Gets or Sets DiscountMarginPercent
        /// </summary>
        [DataMember(Name="DiscountMarginPercent", EmitDefaultValue=false)]
        public double? DiscountMarginPercent { get; set; }

        /// <summary>
        /// Gets or Sets SalesTaxCode
        /// </summary>
        [DataMember(Name="SalesTaxCode", EmitDefaultValue=false)]
        public string SalesTaxCode { get; set; }

        /// <summary>
        /// Gets or Sets SalesTaxRate
        /// </summary>
        [DataMember(Name="SalesTaxRate", EmitDefaultValue=false)]
        public double? SalesTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TradeIn
        /// </summary>
        [DataMember(Name="TradeIn", EmitDefaultValue=false)]
        public double? TradeIn { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name="Deposit", EmitDefaultValue=false)]
        public double? Deposit { get; set; }

        /// <summary>
        /// Gets or Sets TotalSellingPrice
        /// </summary>
        [DataMember(Name="TotalSellingPrice", EmitDefaultValue=false)]
        public double? TotalSellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalDollarsDiscounted
        /// </summary>
        [DataMember(Name="TotalDollarsDiscounted", EmitDefaultValue=false)]
        public double? TotalDollarsDiscounted { get; set; }

        /// <summary>
        /// Gets or Sets TotalPercentDiscounted
        /// </summary>
        [DataMember(Name="TotalPercentDiscounted", EmitDefaultValue=false)]
        public double? TotalPercentDiscounted { get; set; }

        /// <summary>
        /// Gets or Sets GSTax
        /// </summary>
        [DataMember(Name="GSTax", EmitDefaultValue=false)]
        public double? GSTax { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxableAmount
        /// </summary>
        [DataMember(Name="GSTaxableAmount", EmitDefaultValue=false)]
        public double? GSTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets SalesTax
        /// </summary>
        [DataMember(Name="SalesTax", EmitDefaultValue=false)]
        public double? SalesTax { get; set; }

        /// <summary>
        /// Gets or Sets TaxableAmount
        /// </summary>
        [DataMember(Name="TaxableAmount", EmitDefaultValue=false)]
        public double? TaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTax
        /// </summary>
        [DataMember(Name="ProviderTax", EmitDefaultValue=false)]
        public double? ProviderTax { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTaxRate
        /// </summary>
        [DataMember(Name="ProviderTaxRate", EmitDefaultValue=false)]
        public double? ProviderTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTaxableAmount
        /// </summary>
        [DataMember(Name="ProviderTaxableAmount", EmitDefaultValue=false)]
        public double? ProviderTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets Freight
        /// </summary>
        [DataMember(Name="Freight", EmitDefaultValue=false)]
        public double? Freight { get; set; }

        /// <summary>
        /// Gets or Sets TotalDue
        /// </summary>
        [DataMember(Name="TotalDue", EmitDefaultValue=false)]
        public double? TotalDue { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="BidPrice", EmitDefaultValue=false)]
        public double? BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name="TotalCost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets VoidBy
        /// </summary>
        [DataMember(Name="VoidBy", EmitDefaultValue=false)]
        public int? VoidBy { get; set; }

        /// <summary>
        /// Gets or Sets VoidDate
        /// </summary>
        [DataMember(Name="VoidDate", EmitDefaultValue=false)]
        public DateTime? VoidDate { get; set; }

        /// <summary>
        /// Gets or Sets VoidReason
        /// </summary>
        [DataMember(Name="VoidReason", EmitDefaultValue=false)]
        public string VoidReason { get; set; }

        /// <summary>
        /// Gets or Sets SalesAgreementNumber
        /// </summary>
        [DataMember(Name="SalesAgreementNumber", EmitDefaultValue=false)]
        public string SalesAgreementNumber { get; set; }

        /// <summary>
        /// Gets or Sets DispatchReference
        /// </summary>
        [DataMember(Name="DispatchReference", EmitDefaultValue=false)]
        public string DispatchReference { get; set; }

        /// <summary>
        /// Gets or Sets IBMNumber
        /// </summary>
        [DataMember(Name="IBMNumber", EmitDefaultValue=false)]
        public string IBMNumber { get; set; }

        /// <summary>
        /// Gets or Sets OtherReferenceNum
        /// </summary>
        [DataMember(Name="OtherReferenceNum", EmitDefaultValue=false)]
        public string OtherReferenceNum { get; set; }

        /// <summary>
        /// Gets or Sets ARReference
        /// </summary>
        [DataMember(Name="ARReference", EmitDefaultValue=false)]
        public string ARReference { get; set; }

        /// <summary>
        /// Gets or Sets CustomerReference
        /// </summary>
        [DataMember(Name="CustomerReference", EmitDefaultValue=false)]
        public string CustomerReference { get; set; }

        /// <summary>
        /// Gets or Sets GLReference
        /// </summary>
        [DataMember(Name="GLReference", EmitDefaultValue=false)]
        public string GLReference { get; set; }

        /// <summary>
        /// Gets or Sets Miscellaneous
        /// </summary>
        [DataMember(Name="Miscellaneous", EmitDefaultValue=false)]
        public string Miscellaneous { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets ExternalInvoice
        /// </summary>
        [DataMember(Name="ExternalInvoice", EmitDefaultValue=false)]
        public string ExternalInvoice { get; set; }

        /// <summary>
        /// Gets or Sets WarrantyType
        /// </summary>
        [DataMember(Name="WarrantyType", EmitDefaultValue=false)]
        public string WarrantyType { get; set; }

        /// <summary>
        /// Gets or Sets ManagedServiceProviderAlertUrl
        /// </summary>
        [DataMember(Name="ManagedServiceProviderAlertUrl", EmitDefaultValue=false)]
        public string ManagedServiceProviderAlertUrl { get; set; }

        /// <summary>
        /// Gets or Sets DefaultBin
        /// </summary>
        [DataMember(Name="DefaultBin", EmitDefaultValue=false)]
        public string DefaultBin { get; set; }

        /// <summary>
        /// Gets or Sets PostedStatus
        /// </summary>
        [DataMember(Name="PostedStatus", EmitDefaultValue=false)]
        public string PostedStatus { get; set; }

        /// <summary>
        /// Gets or Sets ProgressiveInvoiceTotalComment
        /// </summary>
        [DataMember(Name="ProgressiveInvoiceTotalComment", EmitDefaultValue=false)]
        public string ProgressiveInvoiceTotalComment { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCategory
        /// </summary>
        [DataMember(Name="ServiceCategory", EmitDefaultValue=false)]
        public string ServiceCategory { get; set; }

        /// <summary>
        /// Gets or Sets StagingLocation
        /// </summary>
        [DataMember(Name="StagingLocation", EmitDefaultValue=false)]
        public string StagingLocation { get; set; }

        /// <summary>
        /// Gets or Sets PriorityColor
        /// </summary>
        [DataMember(Name="PriorityColor", EmitDefaultValue=false)]
        public int? PriorityColor { get; set; }

        /// <summary>
        /// Gets or Sets SeverityRank
        /// </summary>
        [DataMember(Name="SeverityRank", EmitDefaultValue=false)]
        public int? SeverityRank { get; set; }

        /// <summary>
        /// Gets or Sets ActualHoursLogged
        /// </summary>
        [DataMember(Name="ActualHoursLogged", EmitDefaultValue=false)]
        public int? ActualHoursLogged { get; set; }

        /// <summary>
        /// Gets or Sets ActualMinutesLogged
        /// </summary>
        [DataMember(Name="ActualMinutesLogged", EmitDefaultValue=false)]
        public int? ActualMinutesLogged { get; set; }

        /// <summary>
        /// Gets or Sets MeterReading
        /// </summary>
        [DataMember(Name="MeterReading", EmitDefaultValue=false)]
        public int? MeterReading { get; set; }

        /// <summary>
        /// Gets or Sets OriginalServiceOrderNumber
        /// </summary>
        [DataMember(Name="OriginalServiceOrderNumber", EmitDefaultValue=false)]
        public int? OriginalServiceOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets PriorityRank
        /// </summary>
        [DataMember(Name="PriorityRank", EmitDefaultValue=false)]
        public int? PriorityRank { get; set; }

        /// <summary>
        /// Gets or Sets QuoteNumber
        /// </summary>
        [DataMember(Name="QuoteNumber", EmitDefaultValue=false)]
        public int? QuoteNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedDateAge
        /// </summary>
        [DataMember(Name="ReceivedDateAge", EmitDefaultValue=false)]
        public int? ReceivedDateAge { get; set; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [DataMember(Name="TotalHours", EmitDefaultValue=false)]
        public int? TotalHours { get; set; }

        /// <summary>
        /// Gets or Sets TotalMinutes
        /// </summary>
        [DataMember(Name="TotalMinutes", EmitDefaultValue=false)]
        public int? TotalMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ARDate
        /// </summary>
        [DataMember(Name="ARDate", EmitDefaultValue=false)]
        public DateTime? ARDate { get; set; }

        /// <summary>
        /// Gets or Sets BMFLastProcessed
        /// </summary>
        [DataMember(Name="BMFLastProcessed", EmitDefaultValue=false)]
        public DateTime? BMFLastProcessed { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateToInstall
        /// </summary>
        [DataMember(Name="DateToInstall", EmitDefaultValue=false)]
        public DateTime? DateToInstall { get; set; }

        /// <summary>
        /// Gets or Sets GLDate
        /// </summary>
        [DataMember(Name="GLDate", EmitDefaultValue=false)]
        public DateTime? GLDate { get; set; }

        /// <summary>
        /// Gets or Sets NextDate
        /// </summary>
        [DataMember(Name="NextDate", EmitDefaultValue=false)]
        public DateTime? NextDate { get; set; }

        /// <summary>
        /// Gets or Sets CreditsWereInvoiced
        /// </summary>
        [DataMember(Name="CreditsWereInvoiced", EmitDefaultValue=false)]
        public bool? CreditsWereInvoiced { get; set; }

        /// <summary>
        /// Gets or Sets EmailConnectorUpdate
        /// </summary>
        [DataMember(Name="EmailConnectorUpdate", EmitDefaultValue=false)]
        public bool? EmailConnectorUpdate { get; set; }

        /// <summary>
        /// Gets or Sets InThresholdEscalationNoticeSent
        /// </summary>
        [DataMember(Name="InThresholdEscalationNoticeSent", EmitDefaultValue=false)]
        public bool? InThresholdEscalationNoticeSent { get; set; }

        /// <summary>
        /// Gets or Sets NeedToTestEscalation
        /// </summary>
        [DataMember(Name="NeedToTestEscalation", EmitDefaultValue=false)]
        public bool? NeedToTestEscalation { get; set; }

        /// <summary>
        /// Gets or Sets PastTargetEscalationNoticeSent
        /// </summary>
        [DataMember(Name="PastTargetEscalationNoticeSent", EmitDefaultValue=false)]
        public bool? PastTargetEscalationNoticeSent { get; set; }

        /// <summary>
        /// Gets or Sets TaxLabor
        /// </summary>
        [DataMember(Name="TaxLabor", EmitDefaultValue=false)]
        public bool? TaxLabor { get; set; }

        /// <summary>
        /// Gets or Sets CreditBalance
        /// </summary>
        [DataMember(Name="CreditBalance", EmitDefaultValue=false)]
        public double? CreditBalance { get; set; }

        /// <summary>
        /// Gets or Sets TotalLaborCost
        /// </summary>
        [DataMember(Name="TotalLaborCost", EmitDefaultValue=false)]
        public double? TotalLaborCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalLaborSellPrice
        /// </summary>
        [DataMember(Name="TotalLaborSellPrice", EmitDefaultValue=false)]
        public double? TotalLaborSellPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherCost
        /// </summary>
        [DataMember(Name="TotalOtherCost", EmitDefaultValue=false)]
        public double? TotalOtherCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherSellPrice
        /// </summary>
        [DataMember(Name="TotalOtherSellPrice", EmitDefaultValue=false)]
        public double? TotalOtherSellPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnappliedBOTradein
        /// </summary>
        [DataMember(Name="UnappliedBOTradein", EmitDefaultValue=false)]
        public double? UnappliedBOTradein { get; set; }

        /// <summary>
        /// Gets or Sets UnappliedGSTradein
        /// </summary>
        [DataMember(Name="UnappliedGSTradein", EmitDefaultValue=false)]
        public double? UnappliedGSTradein { get; set; }

        /// <summary>
        /// Gets or Sets UnappliedTradeIn
        /// </summary>
        [DataMember(Name="UnappliedTradeIn", EmitDefaultValue=false)]
        public double? UnappliedTradeIn { get; set; }

        /// <summary>
        /// Gets or Sets LaborHours
        /// </summary>
        [DataMember(Name="LaborHours", EmitDefaultValue=false)]
        public double? LaborHours { get; set; }

        /// <summary>
        /// Gets or Sets SavingsPercent
        /// </summary>
        [DataMember(Name="SavingsPercent", EmitDefaultValue=false)]
        public double? SavingsPercent { get; set; }

        /// <summary>
        /// Gets or Sets OrderSource
        /// </summary>
        [DataMember(Name="OrderSource", EmitDefaultValue=false)]
        public int? OrderSource { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOnCustomerPortal
        /// </summary>
        [DataMember(Name="DisplayOnCustomerPortal", EmitDefaultValue=false)]
        public bool? DisplayOnCustomerPortal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrder {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AlternatePhoneNumber: ").Append(AlternatePhoneNumber).Append("\n");
            sb.Append("  AlternatePhoneLocation: ").Append(AlternatePhoneLocation).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  AlternateContactEmailAddress: ").Append(AlternateContactEmailAddress).Append("\n");
            sb.Append("  AlternateContactPhoneNumber: ").Append(AlternateContactPhoneNumber).Append("\n");
            sb.Append("  AlternateContactPhoneLocation: ").Append(AlternateContactPhoneLocation).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoicedStatus: ").Append(InvoicedStatus).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  TechnicianAssigned: ").Append(TechnicianAssigned).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  CustomerPurchaseOrder: ").Append(CustomerPurchaseOrder).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  ExternalAccountId: ").Append(ExternalAccountId).Append("\n");
            sb.Append("  ManagedServiceProviderAlertId: ").Append(ManagedServiceProviderAlertId).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  PrintedFlag: ").Append(PrintedFlag).Append("\n");
            sb.Append("  ServiceLevelAgreementDeadLine: ").Append(ServiceLevelAgreementDeadLine).Append("\n");
            sb.Append("  ServiceLevelAgreementWarning: ").Append(ServiceLevelAgreementWarning).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ServiceOrderType: ").Append(ServiceOrderType).Append("\n");
            sb.Append("  DateTimeReceived: ").Append(DateTimeReceived).Append("\n");
            sb.Append("  TakenBy: ").Append(TakenBy).Append("\n");
            sb.Append("  DateTimeRequested: ").Append(DateTimeRequested).Append("\n");
            sb.Append("  DateRequested: ").Append(DateRequested).Append("\n");
            sb.Append("  TimeRequested: ").Append(TimeRequested).Append("\n");
            sb.Append("  RequestedBy: ").Append(RequestedBy).Append("\n");
            sb.Append("  DateTimeOpened: ").Append(DateTimeOpened).Append("\n");
            sb.Append("  DateTimeClosed: ").Append(DateTimeClosed).Append("\n");
            sb.Append("  VerifiedDate: ").Append(VerifiedDate).Append("\n");
            sb.Append("  VerifiedBy: ").Append(VerifiedBy).Append("\n");
            sb.Append("  ServiceZone: ").Append(ServiceZone).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BillParent: ").Append(BillParent).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ResolvedOnPhone: ").Append(ResolvedOnPhone).Append("\n");
            sb.Append("  CallBackCount: ").Append(CallBackCount).Append("\n");
            sb.Append("  BriefDescription: ").Append(BriefDescription).Append("\n");
            sb.Append("  WorkRequested: ").Append(WorkRequested).Append("\n");
            sb.Append("  WorkPerformed: ").Append(WorkPerformed).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProjectNumber: ").Append(ProjectNumber).Append("\n");
            sb.Append("  ProjectPhaseNumber: ").Append(ProjectPhaseNumber).Append("\n");
            sb.Append("  ProjectSubPhaseNumber: ").Append(ProjectSubPhaseNumber).Append("\n");
            sb.Append("  DirectionsToLocation: ").Append(DirectionsToLocation).Append("\n");
            sb.Append("  StatusChangeIndicator: ").Append(StatusChangeIndicator).Append("\n");
            sb.Append("  StatusChangeDate: ").Append(StatusChangeDate).Append("\n");
            sb.Append("  CanDiscountedItemsGetHeaderDiscount: ").Append(CanDiscountedItemsGetHeaderDiscount).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  EstimatedMinutes: ").Append(EstimatedMinutes).Append("\n");
            sb.Append("  TagNumber: ").Append(TagNumber).Append("\n");
            sb.Append("  LoanAgreement: ").Append(LoanAgreement).Append("\n");
            sb.Append("  DebitCreditMemo: ").Append(DebitCreditMemo).Append("\n");
            sb.Append("  DispatchBoardNumber: ").Append(DispatchBoardNumber).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  PayMethodId: ").Append(PayMethodId).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  InvoiceTerms: ").Append(InvoiceTerms).Append("\n");
            sb.Append("  ARCustomerNumber: ").Append(ARCustomerNumber).Append("\n");
            sb.Append("  ReadyToInvoice: ").Append(ReadyToInvoice).Append("\n");
            sb.Append("  RepToCredit: ").Append(RepToCredit).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  GSTaxable: ").Append(GSTaxable).Append("\n");
            sb.Append("  GSTIsTaxable: ").Append(GSTIsTaxable).Append("\n");
            sb.Append("  GSTaxComputeBeforeTradeIn: ").Append(GSTaxComputeBeforeTradeIn).Append("\n");
            sb.Append("  GSTaxRate: ").Append(GSTaxRate).Append("\n");
            sb.Append("  TaxComputedBeforeTradeIn: ").Append(TaxComputedBeforeTradeIn).Append("\n");
            sb.Append("  FreightTaxable: ").Append(FreightTaxable).Append("\n");
            sb.Append("  FreightTerms: ").Append(FreightTerms).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountSellForPrice: ").Append(DiscountSellForPrice).Append("\n");
            sb.Append("  DiscountMarginPercent: ").Append(DiscountMarginPercent).Append("\n");
            sb.Append("  SalesTaxCode: ").Append(SalesTaxCode).Append("\n");
            sb.Append("  SalesTaxRate: ").Append(SalesTaxRate).Append("\n");
            sb.Append("  TradeIn: ").Append(TradeIn).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  TotalSellingPrice: ").Append(TotalSellingPrice).Append("\n");
            sb.Append("  TotalDollarsDiscounted: ").Append(TotalDollarsDiscounted).Append("\n");
            sb.Append("  TotalPercentDiscounted: ").Append(TotalPercentDiscounted).Append("\n");
            sb.Append("  GSTax: ").Append(GSTax).Append("\n");
            sb.Append("  GSTaxableAmount: ").Append(GSTaxableAmount).Append("\n");
            sb.Append("  SalesTax: ").Append(SalesTax).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  ProviderTax: ").Append(ProviderTax).Append("\n");
            sb.Append("  ProviderTaxRate: ").Append(ProviderTaxRate).Append("\n");
            sb.Append("  ProviderTaxableAmount: ").Append(ProviderTaxableAmount).Append("\n");
            sb.Append("  Freight: ").Append(Freight).Append("\n");
            sb.Append("  TotalDue: ").Append(TotalDue).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  VoidBy: ").Append(VoidBy).Append("\n");
            sb.Append("  VoidDate: ").Append(VoidDate).Append("\n");
            sb.Append("  VoidReason: ").Append(VoidReason).Append("\n");
            sb.Append("  SalesAgreementNumber: ").Append(SalesAgreementNumber).Append("\n");
            sb.Append("  DispatchReference: ").Append(DispatchReference).Append("\n");
            sb.Append("  IBMNumber: ").Append(IBMNumber).Append("\n");
            sb.Append("  OtherReferenceNum: ").Append(OtherReferenceNum).Append("\n");
            sb.Append("  ARReference: ").Append(ARReference).Append("\n");
            sb.Append("  CustomerReference: ").Append(CustomerReference).Append("\n");
            sb.Append("  GLReference: ").Append(GLReference).Append("\n");
            sb.Append("  Miscellaneous: ").Append(Miscellaneous).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ExternalInvoice: ").Append(ExternalInvoice).Append("\n");
            sb.Append("  WarrantyType: ").Append(WarrantyType).Append("\n");
            sb.Append("  ManagedServiceProviderAlertUrl: ").Append(ManagedServiceProviderAlertUrl).Append("\n");
            sb.Append("  DefaultBin: ").Append(DefaultBin).Append("\n");
            sb.Append("  PostedStatus: ").Append(PostedStatus).Append("\n");
            sb.Append("  ProgressiveInvoiceTotalComment: ").Append(ProgressiveInvoiceTotalComment).Append("\n");
            sb.Append("  ServiceCategory: ").Append(ServiceCategory).Append("\n");
            sb.Append("  StagingLocation: ").Append(StagingLocation).Append("\n");
            sb.Append("  PriorityColor: ").Append(PriorityColor).Append("\n");
            sb.Append("  SeverityRank: ").Append(SeverityRank).Append("\n");
            sb.Append("  ActualHoursLogged: ").Append(ActualHoursLogged).Append("\n");
            sb.Append("  ActualMinutesLogged: ").Append(ActualMinutesLogged).Append("\n");
            sb.Append("  MeterReading: ").Append(MeterReading).Append("\n");
            sb.Append("  OriginalServiceOrderNumber: ").Append(OriginalServiceOrderNumber).Append("\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  PriorityRank: ").Append(PriorityRank).Append("\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  ReceivedDateAge: ").Append(ReceivedDateAge).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  ARDate: ").Append(ARDate).Append("\n");
            sb.Append("  BMFLastProcessed: ").Append(BMFLastProcessed).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateToInstall: ").Append(DateToInstall).Append("\n");
            sb.Append("  GLDate: ").Append(GLDate).Append("\n");
            sb.Append("  NextDate: ").Append(NextDate).Append("\n");
            sb.Append("  CreditsWereInvoiced: ").Append(CreditsWereInvoiced).Append("\n");
            sb.Append("  EmailConnectorUpdate: ").Append(EmailConnectorUpdate).Append("\n");
            sb.Append("  InThresholdEscalationNoticeSent: ").Append(InThresholdEscalationNoticeSent).Append("\n");
            sb.Append("  NeedToTestEscalation: ").Append(NeedToTestEscalation).Append("\n");
            sb.Append("  PastTargetEscalationNoticeSent: ").Append(PastTargetEscalationNoticeSent).Append("\n");
            sb.Append("  TaxLabor: ").Append(TaxLabor).Append("\n");
            sb.Append("  CreditBalance: ").Append(CreditBalance).Append("\n");
            sb.Append("  TotalLaborCost: ").Append(TotalLaborCost).Append("\n");
            sb.Append("  TotalLaborSellPrice: ").Append(TotalLaborSellPrice).Append("\n");
            sb.Append("  TotalOtherCost: ").Append(TotalOtherCost).Append("\n");
            sb.Append("  TotalOtherSellPrice: ").Append(TotalOtherSellPrice).Append("\n");
            sb.Append("  UnappliedBOTradein: ").Append(UnappliedBOTradein).Append("\n");
            sb.Append("  UnappliedGSTradein: ").Append(UnappliedGSTradein).Append("\n");
            sb.Append("  UnappliedTradeIn: ").Append(UnappliedTradeIn).Append("\n");
            sb.Append("  LaborHours: ").Append(LaborHours).Append("\n");
            sb.Append("  SavingsPercent: ").Append(SavingsPercent).Append("\n");
            sb.Append("  OrderSource: ").Append(OrderSource).Append("\n");
            sb.Append("  DisplayOnCustomerPortal: ").Append(DisplayOnCustomerPortal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrder);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AlternatePhoneNumber == input.AlternatePhoneNumber ||
                    (this.AlternatePhoneNumber != null &&
                    this.AlternatePhoneNumber.Equals(input.AlternatePhoneNumber))
                ) && 
                (
                    this.AlternatePhoneLocation == input.AlternatePhoneLocation ||
                    (this.AlternatePhoneLocation != null &&
                    this.AlternatePhoneLocation.Equals(input.AlternatePhoneLocation))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.AlternateContactEmailAddress == input.AlternateContactEmailAddress ||
                    (this.AlternateContactEmailAddress != null &&
                    this.AlternateContactEmailAddress.Equals(input.AlternateContactEmailAddress))
                ) && 
                (
                    this.AlternateContactPhoneNumber == input.AlternateContactPhoneNumber ||
                    (this.AlternateContactPhoneNumber != null &&
                    this.AlternateContactPhoneNumber.Equals(input.AlternateContactPhoneNumber))
                ) && 
                (
                    this.AlternateContactPhoneLocation == input.AlternateContactPhoneLocation ||
                    (this.AlternateContactPhoneLocation != null &&
                    this.AlternateContactPhoneLocation.Equals(input.AlternateContactPhoneLocation))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.InvoicedStatus == input.InvoicedStatus ||
                    (this.InvoicedStatus != null &&
                    this.InvoicedStatus.Equals(input.InvoicedStatus))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.TechnicianAssigned == input.TechnicianAssigned ||
                    (this.TechnicianAssigned != null &&
                    this.TechnicianAssigned.Equals(input.TechnicianAssigned))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.CustomerPurchaseOrder == input.CustomerPurchaseOrder ||
                    (this.CustomerPurchaseOrder != null &&
                    this.CustomerPurchaseOrder.Equals(input.CustomerPurchaseOrder))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.ExternalAccountId == input.ExternalAccountId ||
                    (this.ExternalAccountId != null &&
                    this.ExternalAccountId.Equals(input.ExternalAccountId))
                ) && 
                (
                    this.ManagedServiceProviderAlertId == input.ManagedServiceProviderAlertId ||
                    (this.ManagedServiceProviderAlertId != null &&
                    this.ManagedServiceProviderAlertId.Equals(input.ManagedServiceProviderAlertId))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.PrintedFlag == input.PrintedFlag ||
                    (this.PrintedFlag != null &&
                    this.PrintedFlag.Equals(input.PrintedFlag))
                ) && 
                (
                    this.ServiceLevelAgreementDeadLine == input.ServiceLevelAgreementDeadLine ||
                    (this.ServiceLevelAgreementDeadLine != null &&
                    this.ServiceLevelAgreementDeadLine.Equals(input.ServiceLevelAgreementDeadLine))
                ) && 
                (
                    this.ServiceLevelAgreementWarning == input.ServiceLevelAgreementWarning ||
                    (this.ServiceLevelAgreementWarning != null &&
                    this.ServiceLevelAgreementWarning.Equals(input.ServiceLevelAgreementWarning))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ServiceOrderType == input.ServiceOrderType ||
                    (this.ServiceOrderType != null &&
                    this.ServiceOrderType.Equals(input.ServiceOrderType))
                ) && 
                (
                    this.DateTimeReceived == input.DateTimeReceived ||
                    (this.DateTimeReceived != null &&
                    this.DateTimeReceived.Equals(input.DateTimeReceived))
                ) && 
                (
                    this.TakenBy == input.TakenBy ||
                    (this.TakenBy != null &&
                    this.TakenBy.Equals(input.TakenBy))
                ) && 
                (
                    this.DateTimeRequested == input.DateTimeRequested ||
                    (this.DateTimeRequested != null &&
                    this.DateTimeRequested.Equals(input.DateTimeRequested))
                ) && 
                (
                    this.DateRequested == input.DateRequested ||
                    (this.DateRequested != null &&
                    this.DateRequested.Equals(input.DateRequested))
                ) && 
                (
                    this.TimeRequested == input.TimeRequested ||
                    (this.TimeRequested != null &&
                    this.TimeRequested.Equals(input.TimeRequested))
                ) && 
                (
                    this.RequestedBy == input.RequestedBy ||
                    (this.RequestedBy != null &&
                    this.RequestedBy.Equals(input.RequestedBy))
                ) && 
                (
                    this.DateTimeOpened == input.DateTimeOpened ||
                    (this.DateTimeOpened != null &&
                    this.DateTimeOpened.Equals(input.DateTimeOpened))
                ) && 
                (
                    this.DateTimeClosed == input.DateTimeClosed ||
                    (this.DateTimeClosed != null &&
                    this.DateTimeClosed.Equals(input.DateTimeClosed))
                ) && 
                (
                    this.VerifiedDate == input.VerifiedDate ||
                    (this.VerifiedDate != null &&
                    this.VerifiedDate.Equals(input.VerifiedDate))
                ) && 
                (
                    this.VerifiedBy == input.VerifiedBy ||
                    (this.VerifiedBy != null &&
                    this.VerifiedBy.Equals(input.VerifiedBy))
                ) && 
                (
                    this.ServiceZone == input.ServiceZone ||
                    (this.ServiceZone != null &&
                    this.ServiceZone.Equals(input.ServiceZone))
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.BillParent == input.BillParent ||
                    (this.BillParent != null &&
                    this.BillParent.Equals(input.BillParent))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) && 
                (
                    this.ResolvedOnPhone == input.ResolvedOnPhone ||
                    (this.ResolvedOnPhone != null &&
                    this.ResolvedOnPhone.Equals(input.ResolvedOnPhone))
                ) && 
                (
                    this.CallBackCount == input.CallBackCount ||
                    (this.CallBackCount != null &&
                    this.CallBackCount.Equals(input.CallBackCount))
                ) && 
                (
                    this.BriefDescription == input.BriefDescription ||
                    (this.BriefDescription != null &&
                    this.BriefDescription.Equals(input.BriefDescription))
                ) && 
                (
                    this.WorkRequested == input.WorkRequested ||
                    (this.WorkRequested != null &&
                    this.WorkRequested.Equals(input.WorkRequested))
                ) && 
                (
                    this.WorkPerformed == input.WorkPerformed ||
                    (this.WorkPerformed != null &&
                    this.WorkPerformed.Equals(input.WorkPerformed))
                ) && 
                (
                    this.InternalComments == input.InternalComments ||
                    (this.InternalComments != null &&
                    this.InternalComments.Equals(input.InternalComments))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.ProjectNumber == input.ProjectNumber ||
                    (this.ProjectNumber != null &&
                    this.ProjectNumber.Equals(input.ProjectNumber))
                ) && 
                (
                    this.ProjectPhaseNumber == input.ProjectPhaseNumber ||
                    (this.ProjectPhaseNumber != null &&
                    this.ProjectPhaseNumber.Equals(input.ProjectPhaseNumber))
                ) && 
                (
                    this.ProjectSubPhaseNumber == input.ProjectSubPhaseNumber ||
                    (this.ProjectSubPhaseNumber != null &&
                    this.ProjectSubPhaseNumber.Equals(input.ProjectSubPhaseNumber))
                ) && 
                (
                    this.DirectionsToLocation == input.DirectionsToLocation ||
                    (this.DirectionsToLocation != null &&
                    this.DirectionsToLocation.Equals(input.DirectionsToLocation))
                ) && 
                (
                    this.StatusChangeIndicator == input.StatusChangeIndicator ||
                    (this.StatusChangeIndicator != null &&
                    this.StatusChangeIndicator.Equals(input.StatusChangeIndicator))
                ) && 
                (
                    this.StatusChangeDate == input.StatusChangeDate ||
                    (this.StatusChangeDate != null &&
                    this.StatusChangeDate.Equals(input.StatusChangeDate))
                ) && 
                (
                    this.CanDiscountedItemsGetHeaderDiscount == input.CanDiscountedItemsGetHeaderDiscount ||
                    (this.CanDiscountedItemsGetHeaderDiscount != null &&
                    this.CanDiscountedItemsGetHeaderDiscount.Equals(input.CanDiscountedItemsGetHeaderDiscount))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.EstimatedMinutes == input.EstimatedMinutes ||
                    (this.EstimatedMinutes != null &&
                    this.EstimatedMinutes.Equals(input.EstimatedMinutes))
                ) && 
                (
                    this.TagNumber == input.TagNumber ||
                    (this.TagNumber != null &&
                    this.TagNumber.Equals(input.TagNumber))
                ) && 
                (
                    this.LoanAgreement == input.LoanAgreement ||
                    (this.LoanAgreement != null &&
                    this.LoanAgreement.Equals(input.LoanAgreement))
                ) && 
                (
                    this.DebitCreditMemo == input.DebitCreditMemo ||
                    (this.DebitCreditMemo != null &&
                    this.DebitCreditMemo.Equals(input.DebitCreditMemo))
                ) && 
                (
                    this.DispatchBoardNumber == input.DispatchBoardNumber ||
                    (this.DispatchBoardNumber != null &&
                    this.DispatchBoardNumber.Equals(input.DispatchBoardNumber))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.PayMethodId == input.PayMethodId ||
                    (this.PayMethodId != null &&
                    this.PayMethodId.Equals(input.PayMethodId))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.InvoiceTerms == input.InvoiceTerms ||
                    (this.InvoiceTerms != null &&
                    this.InvoiceTerms.Equals(input.InvoiceTerms))
                ) && 
                (
                    this.ARCustomerNumber == input.ARCustomerNumber ||
                    (this.ARCustomerNumber != null &&
                    this.ARCustomerNumber.Equals(input.ARCustomerNumber))
                ) && 
                (
                    this.ReadyToInvoice == input.ReadyToInvoice ||
                    (this.ReadyToInvoice != null &&
                    this.ReadyToInvoice.Equals(input.ReadyToInvoice))
                ) && 
                (
                    this.RepToCredit == input.RepToCredit ||
                    (this.RepToCredit != null &&
                    this.RepToCredit.Equals(input.RepToCredit))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.GSTaxable == input.GSTaxable ||
                    (this.GSTaxable != null &&
                    this.GSTaxable.Equals(input.GSTaxable))
                ) && 
                (
                    this.GSTIsTaxable == input.GSTIsTaxable ||
                    (this.GSTIsTaxable != null &&
                    this.GSTIsTaxable.Equals(input.GSTIsTaxable))
                ) && 
                (
                    this.GSTaxComputeBeforeTradeIn == input.GSTaxComputeBeforeTradeIn ||
                    (this.GSTaxComputeBeforeTradeIn != null &&
                    this.GSTaxComputeBeforeTradeIn.Equals(input.GSTaxComputeBeforeTradeIn))
                ) && 
                (
                    this.GSTaxRate == input.GSTaxRate ||
                    (this.GSTaxRate != null &&
                    this.GSTaxRate.Equals(input.GSTaxRate))
                ) && 
                (
                    this.TaxComputedBeforeTradeIn == input.TaxComputedBeforeTradeIn ||
                    (this.TaxComputedBeforeTradeIn != null &&
                    this.TaxComputedBeforeTradeIn.Equals(input.TaxComputedBeforeTradeIn))
                ) && 
                (
                    this.FreightTaxable == input.FreightTaxable ||
                    (this.FreightTaxable != null &&
                    this.FreightTaxable.Equals(input.FreightTaxable))
                ) && 
                (
                    this.FreightTerms == input.FreightTerms ||
                    (this.FreightTerms != null &&
                    this.FreightTerms.Equals(input.FreightTerms))
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    (this.Taxable != null &&
                    this.Taxable.Equals(input.Taxable))
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    (this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(input.DiscountPercent))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.DiscountSellForPrice == input.DiscountSellForPrice ||
                    (this.DiscountSellForPrice != null &&
                    this.DiscountSellForPrice.Equals(input.DiscountSellForPrice))
                ) && 
                (
                    this.DiscountMarginPercent == input.DiscountMarginPercent ||
                    (this.DiscountMarginPercent != null &&
                    this.DiscountMarginPercent.Equals(input.DiscountMarginPercent))
                ) && 
                (
                    this.SalesTaxCode == input.SalesTaxCode ||
                    (this.SalesTaxCode != null &&
                    this.SalesTaxCode.Equals(input.SalesTaxCode))
                ) && 
                (
                    this.SalesTaxRate == input.SalesTaxRate ||
                    (this.SalesTaxRate != null &&
                    this.SalesTaxRate.Equals(input.SalesTaxRate))
                ) && 
                (
                    this.TradeIn == input.TradeIn ||
                    (this.TradeIn != null &&
                    this.TradeIn.Equals(input.TradeIn))
                ) && 
                (
                    this.Deposit == input.Deposit ||
                    (this.Deposit != null &&
                    this.Deposit.Equals(input.Deposit))
                ) && 
                (
                    this.TotalSellingPrice == input.TotalSellingPrice ||
                    (this.TotalSellingPrice != null &&
                    this.TotalSellingPrice.Equals(input.TotalSellingPrice))
                ) && 
                (
                    this.TotalDollarsDiscounted == input.TotalDollarsDiscounted ||
                    (this.TotalDollarsDiscounted != null &&
                    this.TotalDollarsDiscounted.Equals(input.TotalDollarsDiscounted))
                ) && 
                (
                    this.TotalPercentDiscounted == input.TotalPercentDiscounted ||
                    (this.TotalPercentDiscounted != null &&
                    this.TotalPercentDiscounted.Equals(input.TotalPercentDiscounted))
                ) && 
                (
                    this.GSTax == input.GSTax ||
                    (this.GSTax != null &&
                    this.GSTax.Equals(input.GSTax))
                ) && 
                (
                    this.GSTaxableAmount == input.GSTaxableAmount ||
                    (this.GSTaxableAmount != null &&
                    this.GSTaxableAmount.Equals(input.GSTaxableAmount))
                ) && 
                (
                    this.SalesTax == input.SalesTax ||
                    (this.SalesTax != null &&
                    this.SalesTax.Equals(input.SalesTax))
                ) && 
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    (this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(input.TaxableAmount))
                ) && 
                (
                    this.ProviderTax == input.ProviderTax ||
                    (this.ProviderTax != null &&
                    this.ProviderTax.Equals(input.ProviderTax))
                ) && 
                (
                    this.ProviderTaxRate == input.ProviderTaxRate ||
                    (this.ProviderTaxRate != null &&
                    this.ProviderTaxRate.Equals(input.ProviderTaxRate))
                ) && 
                (
                    this.ProviderTaxableAmount == input.ProviderTaxableAmount ||
                    (this.ProviderTaxableAmount != null &&
                    this.ProviderTaxableAmount.Equals(input.ProviderTaxableAmount))
                ) && 
                (
                    this.Freight == input.Freight ||
                    (this.Freight != null &&
                    this.Freight.Equals(input.Freight))
                ) && 
                (
                    this.TotalDue == input.TotalDue ||
                    (this.TotalDue != null &&
                    this.TotalDue.Equals(input.TotalDue))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    (this.BidPrice != null &&
                    this.BidPrice.Equals(input.BidPrice))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.VoidBy == input.VoidBy ||
                    (this.VoidBy != null &&
                    this.VoidBy.Equals(input.VoidBy))
                ) && 
                (
                    this.VoidDate == input.VoidDate ||
                    (this.VoidDate != null &&
                    this.VoidDate.Equals(input.VoidDate))
                ) && 
                (
                    this.VoidReason == input.VoidReason ||
                    (this.VoidReason != null &&
                    this.VoidReason.Equals(input.VoidReason))
                ) && 
                (
                    this.SalesAgreementNumber == input.SalesAgreementNumber ||
                    (this.SalesAgreementNumber != null &&
                    this.SalesAgreementNumber.Equals(input.SalesAgreementNumber))
                ) && 
                (
                    this.DispatchReference == input.DispatchReference ||
                    (this.DispatchReference != null &&
                    this.DispatchReference.Equals(input.DispatchReference))
                ) && 
                (
                    this.IBMNumber == input.IBMNumber ||
                    (this.IBMNumber != null &&
                    this.IBMNumber.Equals(input.IBMNumber))
                ) && 
                (
                    this.OtherReferenceNum == input.OtherReferenceNum ||
                    (this.OtherReferenceNum != null &&
                    this.OtherReferenceNum.Equals(input.OtherReferenceNum))
                ) && 
                (
                    this.ARReference == input.ARReference ||
                    (this.ARReference != null &&
                    this.ARReference.Equals(input.ARReference))
                ) && 
                (
                    this.CustomerReference == input.CustomerReference ||
                    (this.CustomerReference != null &&
                    this.CustomerReference.Equals(input.CustomerReference))
                ) && 
                (
                    this.GLReference == input.GLReference ||
                    (this.GLReference != null &&
                    this.GLReference.Equals(input.GLReference))
                ) && 
                (
                    this.Miscellaneous == input.Miscellaneous ||
                    (this.Miscellaneous != null &&
                    this.Miscellaneous.Equals(input.Miscellaneous))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ExternalInvoice == input.ExternalInvoice ||
                    (this.ExternalInvoice != null &&
                    this.ExternalInvoice.Equals(input.ExternalInvoice))
                ) && 
                (
                    this.WarrantyType == input.WarrantyType ||
                    (this.WarrantyType != null &&
                    this.WarrantyType.Equals(input.WarrantyType))
                ) && 
                (
                    this.ManagedServiceProviderAlertUrl == input.ManagedServiceProviderAlertUrl ||
                    (this.ManagedServiceProviderAlertUrl != null &&
                    this.ManagedServiceProviderAlertUrl.Equals(input.ManagedServiceProviderAlertUrl))
                ) && 
                (
                    this.DefaultBin == input.DefaultBin ||
                    (this.DefaultBin != null &&
                    this.DefaultBin.Equals(input.DefaultBin))
                ) && 
                (
                    this.PostedStatus == input.PostedStatus ||
                    (this.PostedStatus != null &&
                    this.PostedStatus.Equals(input.PostedStatus))
                ) && 
                (
                    this.ProgressiveInvoiceTotalComment == input.ProgressiveInvoiceTotalComment ||
                    (this.ProgressiveInvoiceTotalComment != null &&
                    this.ProgressiveInvoiceTotalComment.Equals(input.ProgressiveInvoiceTotalComment))
                ) && 
                (
                    this.ServiceCategory == input.ServiceCategory ||
                    (this.ServiceCategory != null &&
                    this.ServiceCategory.Equals(input.ServiceCategory))
                ) && 
                (
                    this.StagingLocation == input.StagingLocation ||
                    (this.StagingLocation != null &&
                    this.StagingLocation.Equals(input.StagingLocation))
                ) && 
                (
                    this.PriorityColor == input.PriorityColor ||
                    (this.PriorityColor != null &&
                    this.PriorityColor.Equals(input.PriorityColor))
                ) && 
                (
                    this.SeverityRank == input.SeverityRank ||
                    (this.SeverityRank != null &&
                    this.SeverityRank.Equals(input.SeverityRank))
                ) && 
                (
                    this.ActualHoursLogged == input.ActualHoursLogged ||
                    (this.ActualHoursLogged != null &&
                    this.ActualHoursLogged.Equals(input.ActualHoursLogged))
                ) && 
                (
                    this.ActualMinutesLogged == input.ActualMinutesLogged ||
                    (this.ActualMinutesLogged != null &&
                    this.ActualMinutesLogged.Equals(input.ActualMinutesLogged))
                ) && 
                (
                    this.MeterReading == input.MeterReading ||
                    (this.MeterReading != null &&
                    this.MeterReading.Equals(input.MeterReading))
                ) && 
                (
                    this.OriginalServiceOrderNumber == input.OriginalServiceOrderNumber ||
                    (this.OriginalServiceOrderNumber != null &&
                    this.OriginalServiceOrderNumber.Equals(input.OriginalServiceOrderNumber))
                ) && 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.PriorityRank == input.PriorityRank ||
                    (this.PriorityRank != null &&
                    this.PriorityRank.Equals(input.PriorityRank))
                ) && 
                (
                    this.QuoteNumber == input.QuoteNumber ||
                    (this.QuoteNumber != null &&
                    this.QuoteNumber.Equals(input.QuoteNumber))
                ) && 
                (
                    this.ReceivedDateAge == input.ReceivedDateAge ||
                    (this.ReceivedDateAge != null &&
                    this.ReceivedDateAge.Equals(input.ReceivedDateAge))
                ) && 
                (
                    this.TotalHours == input.TotalHours ||
                    (this.TotalHours != null &&
                    this.TotalHours.Equals(input.TotalHours))
                ) && 
                (
                    this.TotalMinutes == input.TotalMinutes ||
                    (this.TotalMinutes != null &&
                    this.TotalMinutes.Equals(input.TotalMinutes))
                ) && 
                (
                    this.ARDate == input.ARDate ||
                    (this.ARDate != null &&
                    this.ARDate.Equals(input.ARDate))
                ) && 
                (
                    this.BMFLastProcessed == input.BMFLastProcessed ||
                    (this.BMFLastProcessed != null &&
                    this.BMFLastProcessed.Equals(input.BMFLastProcessed))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateToInstall == input.DateToInstall ||
                    (this.DateToInstall != null &&
                    this.DateToInstall.Equals(input.DateToInstall))
                ) && 
                (
                    this.GLDate == input.GLDate ||
                    (this.GLDate != null &&
                    this.GLDate.Equals(input.GLDate))
                ) && 
                (
                    this.NextDate == input.NextDate ||
                    (this.NextDate != null &&
                    this.NextDate.Equals(input.NextDate))
                ) && 
                (
                    this.CreditsWereInvoiced == input.CreditsWereInvoiced ||
                    (this.CreditsWereInvoiced != null &&
                    this.CreditsWereInvoiced.Equals(input.CreditsWereInvoiced))
                ) && 
                (
                    this.EmailConnectorUpdate == input.EmailConnectorUpdate ||
                    (this.EmailConnectorUpdate != null &&
                    this.EmailConnectorUpdate.Equals(input.EmailConnectorUpdate))
                ) && 
                (
                    this.InThresholdEscalationNoticeSent == input.InThresholdEscalationNoticeSent ||
                    (this.InThresholdEscalationNoticeSent != null &&
                    this.InThresholdEscalationNoticeSent.Equals(input.InThresholdEscalationNoticeSent))
                ) && 
                (
                    this.NeedToTestEscalation == input.NeedToTestEscalation ||
                    (this.NeedToTestEscalation != null &&
                    this.NeedToTestEscalation.Equals(input.NeedToTestEscalation))
                ) && 
                (
                    this.PastTargetEscalationNoticeSent == input.PastTargetEscalationNoticeSent ||
                    (this.PastTargetEscalationNoticeSent != null &&
                    this.PastTargetEscalationNoticeSent.Equals(input.PastTargetEscalationNoticeSent))
                ) && 
                (
                    this.TaxLabor == input.TaxLabor ||
                    (this.TaxLabor != null &&
                    this.TaxLabor.Equals(input.TaxLabor))
                ) && 
                (
                    this.CreditBalance == input.CreditBalance ||
                    (this.CreditBalance != null &&
                    this.CreditBalance.Equals(input.CreditBalance))
                ) && 
                (
                    this.TotalLaborCost == input.TotalLaborCost ||
                    (this.TotalLaborCost != null &&
                    this.TotalLaborCost.Equals(input.TotalLaborCost))
                ) && 
                (
                    this.TotalLaborSellPrice == input.TotalLaborSellPrice ||
                    (this.TotalLaborSellPrice != null &&
                    this.TotalLaborSellPrice.Equals(input.TotalLaborSellPrice))
                ) && 
                (
                    this.TotalOtherCost == input.TotalOtherCost ||
                    (this.TotalOtherCost != null &&
                    this.TotalOtherCost.Equals(input.TotalOtherCost))
                ) && 
                (
                    this.TotalOtherSellPrice == input.TotalOtherSellPrice ||
                    (this.TotalOtherSellPrice != null &&
                    this.TotalOtherSellPrice.Equals(input.TotalOtherSellPrice))
                ) && 
                (
                    this.UnappliedBOTradein == input.UnappliedBOTradein ||
                    (this.UnappliedBOTradein != null &&
                    this.UnappliedBOTradein.Equals(input.UnappliedBOTradein))
                ) && 
                (
                    this.UnappliedGSTradein == input.UnappliedGSTradein ||
                    (this.UnappliedGSTradein != null &&
                    this.UnappliedGSTradein.Equals(input.UnappliedGSTradein))
                ) && 
                (
                    this.UnappliedTradeIn == input.UnappliedTradeIn ||
                    (this.UnappliedTradeIn != null &&
                    this.UnappliedTradeIn.Equals(input.UnappliedTradeIn))
                ) && 
                (
                    this.LaborHours == input.LaborHours ||
                    (this.LaborHours != null &&
                    this.LaborHours.Equals(input.LaborHours))
                ) && 
                (
                    this.SavingsPercent == input.SavingsPercent ||
                    (this.SavingsPercent != null &&
                    this.SavingsPercent.Equals(input.SavingsPercent))
                ) && 
                (
                    this.OrderSource == input.OrderSource ||
                    (this.OrderSource != null &&
                    this.OrderSource.Equals(input.OrderSource))
                ) && 
                (
                    this.DisplayOnCustomerPortal == input.DisplayOnCustomerPortal ||
                    (this.DisplayOnCustomerPortal != null &&
                    this.DisplayOnCustomerPortal.Equals(input.DisplayOnCustomerPortal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AlternatePhoneNumber != null)
                    hashCode = hashCode * 59 + this.AlternatePhoneNumber.GetHashCode();
                if (this.AlternatePhoneLocation != null)
                    hashCode = hashCode * 59 + this.AlternatePhoneLocation.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.AlternateContactEmailAddress != null)
                    hashCode = hashCode * 59 + this.AlternateContactEmailAddress.GetHashCode();
                if (this.AlternateContactPhoneNumber != null)
                    hashCode = hashCode * 59 + this.AlternateContactPhoneNumber.GetHashCode();
                if (this.AlternateContactPhoneLocation != null)
                    hashCode = hashCode * 59 + this.AlternateContactPhoneLocation.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.InvoicedStatus != null)
                    hashCode = hashCode * 59 + this.InvoicedStatus.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.TechnicianAssigned != null)
                    hashCode = hashCode * 59 + this.TechnicianAssigned.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.CustomerPurchaseOrder != null)
                    hashCode = hashCode * 59 + this.CustomerPurchaseOrder.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.ExternalAccountId != null)
                    hashCode = hashCode * 59 + this.ExternalAccountId.GetHashCode();
                if (this.ManagedServiceProviderAlertId != null)
                    hashCode = hashCode * 59 + this.ManagedServiceProviderAlertId.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.PrintedFlag != null)
                    hashCode = hashCode * 59 + this.PrintedFlag.GetHashCode();
                if (this.ServiceLevelAgreementDeadLine != null)
                    hashCode = hashCode * 59 + this.ServiceLevelAgreementDeadLine.GetHashCode();
                if (this.ServiceLevelAgreementWarning != null)
                    hashCode = hashCode * 59 + this.ServiceLevelAgreementWarning.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ServiceOrderType != null)
                    hashCode = hashCode * 59 + this.ServiceOrderType.GetHashCode();
                if (this.DateTimeReceived != null)
                    hashCode = hashCode * 59 + this.DateTimeReceived.GetHashCode();
                if (this.TakenBy != null)
                    hashCode = hashCode * 59 + this.TakenBy.GetHashCode();
                if (this.DateTimeRequested != null)
                    hashCode = hashCode * 59 + this.DateTimeRequested.GetHashCode();
                if (this.DateRequested != null)
                    hashCode = hashCode * 59 + this.DateRequested.GetHashCode();
                if (this.TimeRequested != null)
                    hashCode = hashCode * 59 + this.TimeRequested.GetHashCode();
                if (this.RequestedBy != null)
                    hashCode = hashCode * 59 + this.RequestedBy.GetHashCode();
                if (this.DateTimeOpened != null)
                    hashCode = hashCode * 59 + this.DateTimeOpened.GetHashCode();
                if (this.DateTimeClosed != null)
                    hashCode = hashCode * 59 + this.DateTimeClosed.GetHashCode();
                if (this.VerifiedDate != null)
                    hashCode = hashCode * 59 + this.VerifiedDate.GetHashCode();
                if (this.VerifiedBy != null)
                    hashCode = hashCode * 59 + this.VerifiedBy.GetHashCode();
                if (this.ServiceZone != null)
                    hashCode = hashCode * 59 + this.ServiceZone.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.BillParent != null)
                    hashCode = hashCode * 59 + this.BillParent.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                if (this.ResolvedOnPhone != null)
                    hashCode = hashCode * 59 + this.ResolvedOnPhone.GetHashCode();
                if (this.CallBackCount != null)
                    hashCode = hashCode * 59 + this.CallBackCount.GetHashCode();
                if (this.BriefDescription != null)
                    hashCode = hashCode * 59 + this.BriefDescription.GetHashCode();
                if (this.WorkRequested != null)
                    hashCode = hashCode * 59 + this.WorkRequested.GetHashCode();
                if (this.WorkPerformed != null)
                    hashCode = hashCode * 59 + this.WorkPerformed.GetHashCode();
                if (this.InternalComments != null)
                    hashCode = hashCode * 59 + this.InternalComments.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.ProjectNumber != null)
                    hashCode = hashCode * 59 + this.ProjectNumber.GetHashCode();
                if (this.ProjectPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectPhaseNumber.GetHashCode();
                if (this.ProjectSubPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectSubPhaseNumber.GetHashCode();
                if (this.DirectionsToLocation != null)
                    hashCode = hashCode * 59 + this.DirectionsToLocation.GetHashCode();
                if (this.StatusChangeIndicator != null)
                    hashCode = hashCode * 59 + this.StatusChangeIndicator.GetHashCode();
                if (this.StatusChangeDate != null)
                    hashCode = hashCode * 59 + this.StatusChangeDate.GetHashCode();
                if (this.CanDiscountedItemsGetHeaderDiscount != null)
                    hashCode = hashCode * 59 + this.CanDiscountedItemsGetHeaderDiscount.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.EstimatedMinutes != null)
                    hashCode = hashCode * 59 + this.EstimatedMinutes.GetHashCode();
                if (this.TagNumber != null)
                    hashCode = hashCode * 59 + this.TagNumber.GetHashCode();
                if (this.LoanAgreement != null)
                    hashCode = hashCode * 59 + this.LoanAgreement.GetHashCode();
                if (this.DebitCreditMemo != null)
                    hashCode = hashCode * 59 + this.DebitCreditMemo.GetHashCode();
                if (this.DispatchBoardNumber != null)
                    hashCode = hashCode * 59 + this.DispatchBoardNumber.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.PayMethodId != null)
                    hashCode = hashCode * 59 + this.PayMethodId.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.InvoiceTerms != null)
                    hashCode = hashCode * 59 + this.InvoiceTerms.GetHashCode();
                if (this.ARCustomerNumber != null)
                    hashCode = hashCode * 59 + this.ARCustomerNumber.GetHashCode();
                if (this.ReadyToInvoice != null)
                    hashCode = hashCode * 59 + this.ReadyToInvoice.GetHashCode();
                if (this.RepToCredit != null)
                    hashCode = hashCode * 59 + this.RepToCredit.GetHashCode();
                if (this.ShippingMethod != null)
                    hashCode = hashCode * 59 + this.ShippingMethod.GetHashCode();
                if (this.GSTaxable != null)
                    hashCode = hashCode * 59 + this.GSTaxable.GetHashCode();
                if (this.GSTIsTaxable != null)
                    hashCode = hashCode * 59 + this.GSTIsTaxable.GetHashCode();
                if (this.GSTaxComputeBeforeTradeIn != null)
                    hashCode = hashCode * 59 + this.GSTaxComputeBeforeTradeIn.GetHashCode();
                if (this.GSTaxRate != null)
                    hashCode = hashCode * 59 + this.GSTaxRate.GetHashCode();
                if (this.TaxComputedBeforeTradeIn != null)
                    hashCode = hashCode * 59 + this.TaxComputedBeforeTradeIn.GetHashCode();
                if (this.FreightTaxable != null)
                    hashCode = hashCode * 59 + this.FreightTaxable.GetHashCode();
                if (this.FreightTerms != null)
                    hashCode = hashCode * 59 + this.FreightTerms.GetHashCode();
                if (this.Taxable != null)
                    hashCode = hashCode * 59 + this.Taxable.GetHashCode();
                if (this.DiscountPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPercent.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.DiscountSellForPrice != null)
                    hashCode = hashCode * 59 + this.DiscountSellForPrice.GetHashCode();
                if (this.DiscountMarginPercent != null)
                    hashCode = hashCode * 59 + this.DiscountMarginPercent.GetHashCode();
                if (this.SalesTaxCode != null)
                    hashCode = hashCode * 59 + this.SalesTaxCode.GetHashCode();
                if (this.SalesTaxRate != null)
                    hashCode = hashCode * 59 + this.SalesTaxRate.GetHashCode();
                if (this.TradeIn != null)
                    hashCode = hashCode * 59 + this.TradeIn.GetHashCode();
                if (this.Deposit != null)
                    hashCode = hashCode * 59 + this.Deposit.GetHashCode();
                if (this.TotalSellingPrice != null)
                    hashCode = hashCode * 59 + this.TotalSellingPrice.GetHashCode();
                if (this.TotalDollarsDiscounted != null)
                    hashCode = hashCode * 59 + this.TotalDollarsDiscounted.GetHashCode();
                if (this.TotalPercentDiscounted != null)
                    hashCode = hashCode * 59 + this.TotalPercentDiscounted.GetHashCode();
                if (this.GSTax != null)
                    hashCode = hashCode * 59 + this.GSTax.GetHashCode();
                if (this.GSTaxableAmount != null)
                    hashCode = hashCode * 59 + this.GSTaxableAmount.GetHashCode();
                if (this.SalesTax != null)
                    hashCode = hashCode * 59 + this.SalesTax.GetHashCode();
                if (this.TaxableAmount != null)
                    hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                if (this.ProviderTax != null)
                    hashCode = hashCode * 59 + this.ProviderTax.GetHashCode();
                if (this.ProviderTaxRate != null)
                    hashCode = hashCode * 59 + this.ProviderTaxRate.GetHashCode();
                if (this.ProviderTaxableAmount != null)
                    hashCode = hashCode * 59 + this.ProviderTaxableAmount.GetHashCode();
                if (this.Freight != null)
                    hashCode = hashCode * 59 + this.Freight.GetHashCode();
                if (this.TotalDue != null)
                    hashCode = hashCode * 59 + this.TotalDue.GetHashCode();
                if (this.BidPrice != null)
                    hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.VoidBy != null)
                    hashCode = hashCode * 59 + this.VoidBy.GetHashCode();
                if (this.VoidDate != null)
                    hashCode = hashCode * 59 + this.VoidDate.GetHashCode();
                if (this.VoidReason != null)
                    hashCode = hashCode * 59 + this.VoidReason.GetHashCode();
                if (this.SalesAgreementNumber != null)
                    hashCode = hashCode * 59 + this.SalesAgreementNumber.GetHashCode();
                if (this.DispatchReference != null)
                    hashCode = hashCode * 59 + this.DispatchReference.GetHashCode();
                if (this.IBMNumber != null)
                    hashCode = hashCode * 59 + this.IBMNumber.GetHashCode();
                if (this.OtherReferenceNum != null)
                    hashCode = hashCode * 59 + this.OtherReferenceNum.GetHashCode();
                if (this.ARReference != null)
                    hashCode = hashCode * 59 + this.ARReference.GetHashCode();
                if (this.CustomerReference != null)
                    hashCode = hashCode * 59 + this.CustomerReference.GetHashCode();
                if (this.GLReference != null)
                    hashCode = hashCode * 59 + this.GLReference.GetHashCode();
                if (this.Miscellaneous != null)
                    hashCode = hashCode * 59 + this.Miscellaneous.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ExternalInvoice != null)
                    hashCode = hashCode * 59 + this.ExternalInvoice.GetHashCode();
                if (this.WarrantyType != null)
                    hashCode = hashCode * 59 + this.WarrantyType.GetHashCode();
                if (this.ManagedServiceProviderAlertUrl != null)
                    hashCode = hashCode * 59 + this.ManagedServiceProviderAlertUrl.GetHashCode();
                if (this.DefaultBin != null)
                    hashCode = hashCode * 59 + this.DefaultBin.GetHashCode();
                if (this.PostedStatus != null)
                    hashCode = hashCode * 59 + this.PostedStatus.GetHashCode();
                if (this.ProgressiveInvoiceTotalComment != null)
                    hashCode = hashCode * 59 + this.ProgressiveInvoiceTotalComment.GetHashCode();
                if (this.ServiceCategory != null)
                    hashCode = hashCode * 59 + this.ServiceCategory.GetHashCode();
                if (this.StagingLocation != null)
                    hashCode = hashCode * 59 + this.StagingLocation.GetHashCode();
                if (this.PriorityColor != null)
                    hashCode = hashCode * 59 + this.PriorityColor.GetHashCode();
                if (this.SeverityRank != null)
                    hashCode = hashCode * 59 + this.SeverityRank.GetHashCode();
                if (this.ActualHoursLogged != null)
                    hashCode = hashCode * 59 + this.ActualHoursLogged.GetHashCode();
                if (this.ActualMinutesLogged != null)
                    hashCode = hashCode * 59 + this.ActualMinutesLogged.GetHashCode();
                if (this.MeterReading != null)
                    hashCode = hashCode * 59 + this.MeterReading.GetHashCode();
                if (this.OriginalServiceOrderNumber != null)
                    hashCode = hashCode * 59 + this.OriginalServiceOrderNumber.GetHashCode();
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.PriorityRank != null)
                    hashCode = hashCode * 59 + this.PriorityRank.GetHashCode();
                if (this.QuoteNumber != null)
                    hashCode = hashCode * 59 + this.QuoteNumber.GetHashCode();
                if (this.ReceivedDateAge != null)
                    hashCode = hashCode * 59 + this.ReceivedDateAge.GetHashCode();
                if (this.TotalHours != null)
                    hashCode = hashCode * 59 + this.TotalHours.GetHashCode();
                if (this.TotalMinutes != null)
                    hashCode = hashCode * 59 + this.TotalMinutes.GetHashCode();
                if (this.ARDate != null)
                    hashCode = hashCode * 59 + this.ARDate.GetHashCode();
                if (this.BMFLastProcessed != null)
                    hashCode = hashCode * 59 + this.BMFLastProcessed.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateToInstall != null)
                    hashCode = hashCode * 59 + this.DateToInstall.GetHashCode();
                if (this.GLDate != null)
                    hashCode = hashCode * 59 + this.GLDate.GetHashCode();
                if (this.NextDate != null)
                    hashCode = hashCode * 59 + this.NextDate.GetHashCode();
                if (this.CreditsWereInvoiced != null)
                    hashCode = hashCode * 59 + this.CreditsWereInvoiced.GetHashCode();
                if (this.EmailConnectorUpdate != null)
                    hashCode = hashCode * 59 + this.EmailConnectorUpdate.GetHashCode();
                if (this.InThresholdEscalationNoticeSent != null)
                    hashCode = hashCode * 59 + this.InThresholdEscalationNoticeSent.GetHashCode();
                if (this.NeedToTestEscalation != null)
                    hashCode = hashCode * 59 + this.NeedToTestEscalation.GetHashCode();
                if (this.PastTargetEscalationNoticeSent != null)
                    hashCode = hashCode * 59 + this.PastTargetEscalationNoticeSent.GetHashCode();
                if (this.TaxLabor != null)
                    hashCode = hashCode * 59 + this.TaxLabor.GetHashCode();
                if (this.CreditBalance != null)
                    hashCode = hashCode * 59 + this.CreditBalance.GetHashCode();
                if (this.TotalLaborCost != null)
                    hashCode = hashCode * 59 + this.TotalLaborCost.GetHashCode();
                if (this.TotalLaborSellPrice != null)
                    hashCode = hashCode * 59 + this.TotalLaborSellPrice.GetHashCode();
                if (this.TotalOtherCost != null)
                    hashCode = hashCode * 59 + this.TotalOtherCost.GetHashCode();
                if (this.TotalOtherSellPrice != null)
                    hashCode = hashCode * 59 + this.TotalOtherSellPrice.GetHashCode();
                if (this.UnappliedBOTradein != null)
                    hashCode = hashCode * 59 + this.UnappliedBOTradein.GetHashCode();
                if (this.UnappliedGSTradein != null)
                    hashCode = hashCode * 59 + this.UnappliedGSTradein.GetHashCode();
                if (this.UnappliedTradeIn != null)
                    hashCode = hashCode * 59 + this.UnappliedTradeIn.GetHashCode();
                if (this.LaborHours != null)
                    hashCode = hashCode * 59 + this.LaborHours.GetHashCode();
                if (this.SavingsPercent != null)
                    hashCode = hashCode * 59 + this.SavingsPercent.GetHashCode();
                if (this.OrderSource != null)
                    hashCode = hashCode * 59 + this.OrderSource.GetHashCode();
                if (this.DisplayOnCustomerPortal != null)
                    hashCode = hashCode * 59 + this.DisplayOnCustomerPortal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
