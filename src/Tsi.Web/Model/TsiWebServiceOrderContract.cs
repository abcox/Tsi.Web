/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderContract
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderContract :  IEquatable<TsiWebServiceOrderContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderContract" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="expiration">expiration.</param>
        /// <param name="basis">basis.</param>
        /// <param name="contractRemaining">contractRemaining.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="status">status.</param>
        /// <param name="isFutureContract">isFutureContract.</param>
        /// <param name="hasRemainingContract">hasRemainingContract.</param>
        public TsiWebServiceOrderContract(string description = default(string), DateTime? expiration = default(DateTime?), string basis = default(string), string contractRemaining = default(string), DateTime? startDate = default(DateTime?), bool? isActive = default(bool?), string status = default(string), bool? isFutureContract = default(bool?), bool? hasRemainingContract = default(bool?))
        {
            this.Description = description;
            this.Expiration = expiration;
            this.Basis = basis;
            this.ContractRemaining = contractRemaining;
            this.StartDate = startDate;
            this.IsActive = isActive;
            this.Status = status;
            this.IsFutureContract = isFutureContract;
            this.HasRemainingContract = hasRemainingContract;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>
        [DataMember(Name="Expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Gets or Sets Basis
        /// </summary>
        [DataMember(Name="Basis", EmitDefaultValue=false)]
        public string Basis { get; set; }

        /// <summary>
        /// Gets or Sets ContractRemaining
        /// </summary>
        [DataMember(Name="ContractRemaining", EmitDefaultValue=false)]
        public string ContractRemaining { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets IsFutureContract
        /// </summary>
        [DataMember(Name="IsFutureContract", EmitDefaultValue=false)]
        public bool? IsFutureContract { get; set; }

        /// <summary>
        /// Gets or Sets HasRemainingContract
        /// </summary>
        [DataMember(Name="HasRemainingContract", EmitDefaultValue=false)]
        public bool? HasRemainingContract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderContract {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Basis: ").Append(Basis).Append("\n");
            sb.Append("  ContractRemaining: ").Append(ContractRemaining).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsFutureContract: ").Append(IsFutureContract).Append("\n");
            sb.Append("  HasRemainingContract: ").Append(HasRemainingContract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderContract);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderContract instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Basis == input.Basis ||
                    (this.Basis != null &&
                    this.Basis.Equals(input.Basis))
                ) && 
                (
                    this.ContractRemaining == input.ContractRemaining ||
                    (this.ContractRemaining != null &&
                    this.ContractRemaining.Equals(input.ContractRemaining))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.IsFutureContract == input.IsFutureContract ||
                    (this.IsFutureContract != null &&
                    this.IsFutureContract.Equals(input.IsFutureContract))
                ) && 
                (
                    this.HasRemainingContract == input.HasRemainingContract ||
                    (this.HasRemainingContract != null &&
                    this.HasRemainingContract.Equals(input.HasRemainingContract))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Basis != null)
                    hashCode = hashCode * 59 + this.Basis.GetHashCode();
                if (this.ContractRemaining != null)
                    hashCode = hashCode * 59 + this.ContractRemaining.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.IsFutureContract != null)
                    hashCode = hashCode * 59 + this.IsFutureContract.GetHashCode();
                if (this.HasRemainingContract != null)
                    hashCode = hashCode * 59 + this.HasRemainingContract.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
