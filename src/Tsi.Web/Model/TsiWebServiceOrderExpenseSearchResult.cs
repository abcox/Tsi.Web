/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderExpenseSearchResult
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderExpenseSearchResult :  IEquatable<TsiWebServiceOrderExpenseSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderExpenseSearchResult" /> class.
        /// </summary>
        /// <param name="expenseNumber">expenseNumber.</param>
        /// <param name="expenseAmount">expenseAmount.</param>
        /// <param name="repNumber">repNumber.</param>
        /// <param name="repName">repName.</param>
        /// <param name="comments">comments.</param>
        /// <param name="billable">billable.</param>
        /// <param name="odometerStart">odometerStart.</param>
        /// <param name="odometerEnd">odometerEnd.</param>
        /// <param name="distance">distance.</param>
        /// <param name="expenseTypeNumber">expenseTypeNumber.</param>
        /// <param name="expenseTypeDescription">expenseTypeDescription.</param>
        /// <param name="acceptanceStatus">acceptanceStatus.</param>
        /// <param name="rejectedReason">rejectedReason.</param>
        /// <param name="reviewedBy">reviewedBy.</param>
        /// <param name="reviewedByName">reviewedByName.</param>
        /// <param name="reimbursable">reimbursable.</param>
        /// <param name="expenseDateTime">expenseDateTime.</param>
        /// <param name="expensePaymentTypeNumber">expensePaymentTypeNumber.</param>
        /// <param name="expensePaymentDescription">expensePaymentDescription.</param>
        /// <param name="serviceOrderNumber">serviceOrderNumber.</param>
        /// <param name="serviceOrderBreifDescription">serviceOrderBreifDescription.</param>
        /// <param name="status">status.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountName">accountName.</param>
        public TsiWebServiceOrderExpenseSearchResult(int? expenseNumber = default(int?), double? expenseAmount = default(double?), int? repNumber = default(int?), string repName = default(string), string comments = default(string), bool? billable = default(bool?), double? odometerStart = default(double?), double? odometerEnd = default(double?), double? distance = default(double?), int? expenseTypeNumber = default(int?), string expenseTypeDescription = default(string), string acceptanceStatus = default(string), string rejectedReason = default(string), int? reviewedBy = default(int?), string reviewedByName = default(string), bool? reimbursable = default(bool?), DateTime? expenseDateTime = default(DateTime?), int? expensePaymentTypeNumber = default(int?), string expensePaymentDescription = default(string), int? serviceOrderNumber = default(int?), string serviceOrderBreifDescription = default(string), string status = default(string), int? accountNumber = default(int?), string accountName = default(string))
        {
            this.ExpenseNumber = expenseNumber;
            this.ExpenseAmount = expenseAmount;
            this.RepNumber = repNumber;
            this.RepName = repName;
            this.Comments = comments;
            this.Billable = billable;
            this.OdometerStart = odometerStart;
            this.OdometerEnd = odometerEnd;
            this.Distance = distance;
            this.ExpenseTypeNumber = expenseTypeNumber;
            this.ExpenseTypeDescription = expenseTypeDescription;
            this.AcceptanceStatus = acceptanceStatus;
            this.RejectedReason = rejectedReason;
            this.ReviewedBy = reviewedBy;
            this.ReviewedByName = reviewedByName;
            this.Reimbursable = reimbursable;
            this.ExpenseDateTime = expenseDateTime;
            this.ExpensePaymentTypeNumber = expensePaymentTypeNumber;
            this.ExpensePaymentDescription = expensePaymentDescription;
            this.ServiceOrderNumber = serviceOrderNumber;
            this.ServiceOrderBreifDescription = serviceOrderBreifDescription;
            this.Status = status;
            this.AccountNumber = accountNumber;
            this.AccountName = accountName;
        }
        
        /// <summary>
        /// Gets or Sets ExpenseNumber
        /// </summary>
        [DataMember(Name="ExpenseNumber", EmitDefaultValue=false)]
        public int? ExpenseNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseAmount
        /// </summary>
        [DataMember(Name="ExpenseAmount", EmitDefaultValue=false)]
        public double? ExpenseAmount { get; set; }

        /// <summary>
        /// Gets or Sets RepNumber
        /// </summary>
        [DataMember(Name="RepNumber", EmitDefaultValue=false)]
        public int? RepNumber { get; set; }

        /// <summary>
        /// Gets or Sets RepName
        /// </summary>
        [DataMember(Name="RepName", EmitDefaultValue=false)]
        public string RepName { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets OdometerStart
        /// </summary>
        [DataMember(Name="OdometerStart", EmitDefaultValue=false)]
        public double? OdometerStart { get; set; }

        /// <summary>
        /// Gets or Sets OdometerEnd
        /// </summary>
        [DataMember(Name="OdometerEnd", EmitDefaultValue=false)]
        public double? OdometerEnd { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="Distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseTypeNumber
        /// </summary>
        [DataMember(Name="ExpenseTypeNumber", EmitDefaultValue=false)]
        public int? ExpenseTypeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseTypeDescription
        /// </summary>
        [DataMember(Name="ExpenseTypeDescription", EmitDefaultValue=false)]
        public string ExpenseTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets AcceptanceStatus
        /// </summary>
        [DataMember(Name="AcceptanceStatus", EmitDefaultValue=false)]
        public string AcceptanceStatus { get; set; }

        /// <summary>
        /// Gets or Sets RejectedReason
        /// </summary>
        [DataMember(Name="RejectedReason", EmitDefaultValue=false)]
        public string RejectedReason { get; set; }

        /// <summary>
        /// Gets or Sets ReviewedBy
        /// </summary>
        [DataMember(Name="ReviewedBy", EmitDefaultValue=false)]
        public int? ReviewedBy { get; set; }

        /// <summary>
        /// Gets or Sets ReviewedByName
        /// </summary>
        [DataMember(Name="ReviewedByName", EmitDefaultValue=false)]
        public string ReviewedByName { get; set; }

        /// <summary>
        /// Gets or Sets Reimbursable
        /// </summary>
        [DataMember(Name="Reimbursable", EmitDefaultValue=false)]
        public bool? Reimbursable { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseDateTime
        /// </summary>
        [DataMember(Name="ExpenseDateTime", EmitDefaultValue=false)]
        public DateTime? ExpenseDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePaymentTypeNumber
        /// </summary>
        [DataMember(Name="ExpensePaymentTypeNumber", EmitDefaultValue=false)]
        public int? ExpensePaymentTypeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePaymentDescription
        /// </summary>
        [DataMember(Name="ExpensePaymentDescription", EmitDefaultValue=false)]
        public string ExpensePaymentDescription { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderNumber
        /// </summary>
        [DataMember(Name="ServiceOrderNumber", EmitDefaultValue=false)]
        public int? ServiceOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderBreifDescription
        /// </summary>
        [DataMember(Name="ServiceOrderBreifDescription", EmitDefaultValue=false)]
        public string ServiceOrderBreifDescription { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="AccountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderExpenseSearchResult {\n");
            sb.Append("  ExpenseNumber: ").Append(ExpenseNumber).Append("\n");
            sb.Append("  ExpenseAmount: ").Append(ExpenseAmount).Append("\n");
            sb.Append("  RepNumber: ").Append(RepNumber).Append("\n");
            sb.Append("  RepName: ").Append(RepName).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  OdometerStart: ").Append(OdometerStart).Append("\n");
            sb.Append("  OdometerEnd: ").Append(OdometerEnd).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ExpenseTypeNumber: ").Append(ExpenseTypeNumber).Append("\n");
            sb.Append("  ExpenseTypeDescription: ").Append(ExpenseTypeDescription).Append("\n");
            sb.Append("  AcceptanceStatus: ").Append(AcceptanceStatus).Append("\n");
            sb.Append("  RejectedReason: ").Append(RejectedReason).Append("\n");
            sb.Append("  ReviewedBy: ").Append(ReviewedBy).Append("\n");
            sb.Append("  ReviewedByName: ").Append(ReviewedByName).Append("\n");
            sb.Append("  Reimbursable: ").Append(Reimbursable).Append("\n");
            sb.Append("  ExpenseDateTime: ").Append(ExpenseDateTime).Append("\n");
            sb.Append("  ExpensePaymentTypeNumber: ").Append(ExpensePaymentTypeNumber).Append("\n");
            sb.Append("  ExpensePaymentDescription: ").Append(ExpensePaymentDescription).Append("\n");
            sb.Append("  ServiceOrderNumber: ").Append(ServiceOrderNumber).Append("\n");
            sb.Append("  ServiceOrderBreifDescription: ").Append(ServiceOrderBreifDescription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderExpenseSearchResult);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderExpenseSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderExpenseSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderExpenseSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpenseNumber == input.ExpenseNumber ||
                    (this.ExpenseNumber != null &&
                    this.ExpenseNumber.Equals(input.ExpenseNumber))
                ) && 
                (
                    this.ExpenseAmount == input.ExpenseAmount ||
                    (this.ExpenseAmount != null &&
                    this.ExpenseAmount.Equals(input.ExpenseAmount))
                ) && 
                (
                    this.RepNumber == input.RepNumber ||
                    (this.RepNumber != null &&
                    this.RepNumber.Equals(input.RepNumber))
                ) && 
                (
                    this.RepName == input.RepName ||
                    (this.RepName != null &&
                    this.RepName.Equals(input.RepName))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.OdometerStart == input.OdometerStart ||
                    (this.OdometerStart != null &&
                    this.OdometerStart.Equals(input.OdometerStart))
                ) && 
                (
                    this.OdometerEnd == input.OdometerEnd ||
                    (this.OdometerEnd != null &&
                    this.OdometerEnd.Equals(input.OdometerEnd))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.ExpenseTypeNumber == input.ExpenseTypeNumber ||
                    (this.ExpenseTypeNumber != null &&
                    this.ExpenseTypeNumber.Equals(input.ExpenseTypeNumber))
                ) && 
                (
                    this.ExpenseTypeDescription == input.ExpenseTypeDescription ||
                    (this.ExpenseTypeDescription != null &&
                    this.ExpenseTypeDescription.Equals(input.ExpenseTypeDescription))
                ) && 
                (
                    this.AcceptanceStatus == input.AcceptanceStatus ||
                    (this.AcceptanceStatus != null &&
                    this.AcceptanceStatus.Equals(input.AcceptanceStatus))
                ) && 
                (
                    this.RejectedReason == input.RejectedReason ||
                    (this.RejectedReason != null &&
                    this.RejectedReason.Equals(input.RejectedReason))
                ) && 
                (
                    this.ReviewedBy == input.ReviewedBy ||
                    (this.ReviewedBy != null &&
                    this.ReviewedBy.Equals(input.ReviewedBy))
                ) && 
                (
                    this.ReviewedByName == input.ReviewedByName ||
                    (this.ReviewedByName != null &&
                    this.ReviewedByName.Equals(input.ReviewedByName))
                ) && 
                (
                    this.Reimbursable == input.Reimbursable ||
                    (this.Reimbursable != null &&
                    this.Reimbursable.Equals(input.Reimbursable))
                ) && 
                (
                    this.ExpenseDateTime == input.ExpenseDateTime ||
                    (this.ExpenseDateTime != null &&
                    this.ExpenseDateTime.Equals(input.ExpenseDateTime))
                ) && 
                (
                    this.ExpensePaymentTypeNumber == input.ExpensePaymentTypeNumber ||
                    (this.ExpensePaymentTypeNumber != null &&
                    this.ExpensePaymentTypeNumber.Equals(input.ExpensePaymentTypeNumber))
                ) && 
                (
                    this.ExpensePaymentDescription == input.ExpensePaymentDescription ||
                    (this.ExpensePaymentDescription != null &&
                    this.ExpensePaymentDescription.Equals(input.ExpensePaymentDescription))
                ) && 
                (
                    this.ServiceOrderNumber == input.ServiceOrderNumber ||
                    (this.ServiceOrderNumber != null &&
                    this.ServiceOrderNumber.Equals(input.ServiceOrderNumber))
                ) && 
                (
                    this.ServiceOrderBreifDescription == input.ServiceOrderBreifDescription ||
                    (this.ServiceOrderBreifDescription != null &&
                    this.ServiceOrderBreifDescription.Equals(input.ServiceOrderBreifDescription))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpenseNumber != null)
                    hashCode = hashCode * 59 + this.ExpenseNumber.GetHashCode();
                if (this.ExpenseAmount != null)
                    hashCode = hashCode * 59 + this.ExpenseAmount.GetHashCode();
                if (this.RepNumber != null)
                    hashCode = hashCode * 59 + this.RepNumber.GetHashCode();
                if (this.RepName != null)
                    hashCode = hashCode * 59 + this.RepName.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.OdometerStart != null)
                    hashCode = hashCode * 59 + this.OdometerStart.GetHashCode();
                if (this.OdometerEnd != null)
                    hashCode = hashCode * 59 + this.OdometerEnd.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.ExpenseTypeNumber != null)
                    hashCode = hashCode * 59 + this.ExpenseTypeNumber.GetHashCode();
                if (this.ExpenseTypeDescription != null)
                    hashCode = hashCode * 59 + this.ExpenseTypeDescription.GetHashCode();
                if (this.AcceptanceStatus != null)
                    hashCode = hashCode * 59 + this.AcceptanceStatus.GetHashCode();
                if (this.RejectedReason != null)
                    hashCode = hashCode * 59 + this.RejectedReason.GetHashCode();
                if (this.ReviewedBy != null)
                    hashCode = hashCode * 59 + this.ReviewedBy.GetHashCode();
                if (this.ReviewedByName != null)
                    hashCode = hashCode * 59 + this.ReviewedByName.GetHashCode();
                if (this.Reimbursable != null)
                    hashCode = hashCode * 59 + this.Reimbursable.GetHashCode();
                if (this.ExpenseDateTime != null)
                    hashCode = hashCode * 59 + this.ExpenseDateTime.GetHashCode();
                if (this.ExpensePaymentTypeNumber != null)
                    hashCode = hashCode * 59 + this.ExpensePaymentTypeNumber.GetHashCode();
                if (this.ExpensePaymentDescription != null)
                    hashCode = hashCode * 59 + this.ExpensePaymentDescription.GetHashCode();
                if (this.ServiceOrderNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderNumber.GetHashCode();
                if (this.ServiceOrderBreifDescription != null)
                    hashCode = hashCode * 59 + this.ServiceOrderBreifDescription.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
