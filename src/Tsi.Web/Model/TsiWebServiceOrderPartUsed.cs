/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderPartUsed
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderPartUsed :  IEquatable<TsiWebServiceOrderPartUsed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderPartUsed" /> class.
        /// </summary>
        /// <param name="partsUsedNumber">partsUsedNumber.</param>
        /// <param name="contractDetailNumber">contractDetailNumber.</param>
        /// <param name="invoiceDetailNumber">invoiceDetailNumber.</param>
        /// <param name="vendorAccountNumber">vendorAccountNumber.</param>
        /// <param name="projectPhaseNumber">projectPhaseNumber.</param>
        /// <param name="repairCode">repairCode.</param>
        /// <param name="installLocation">installLocation.</param>
        /// <param name="nonStockVendorItemNumber">nonStockVendorItemNumber.</param>
        /// <param name="allowVolumePricing">allowVolumePricing.</param>
        /// <param name="assemblyFlag">assemblyFlag.</param>
        /// <param name="isCommentOnly">isCommentOnly.</param>
        /// <param name="itemCanBeDiscounted">itemCanBeDiscounted.</param>
        /// <param name="singleItemTaxed">singleItemTaxed.</param>
        /// <param name="isStockItem">isStockItem.</param>
        /// <param name="quantityAvailableToInvoice">quantityAvailableToInvoice.</param>
        /// <param name="quantityShipped">quantityShipped.</param>
        /// <param name="quantityToInvoice">quantityToInvoice.</param>
        /// <param name="quantityToShip">quantityToShip.</param>
        /// <param name="discountAmount">discountAmount.</param>
        /// <param name="adjustmentAmount">adjustmentAmount.</param>
        /// <param name="adjustmentPercent">adjustmentPercent.</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="isSerialized">isSerialized.</param>
        /// <param name="assembly">assembly.</param>
        /// <param name="applyDiscountOff">applyDiscountOff.</param>
        /// <param name="priceAdjuster">priceAdjuster.</param>
        /// <param name="itemID">itemID.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="memo">memo.</param>
        /// <param name="costGLCode">costGLCode.</param>
        /// <param name="incomeGLCode">incomeGLCode.</param>
        /// <param name="rMANumber">rMANumber.</param>
        /// <param name="type">type.</param>
        /// <param name="exchangeFlag">exchangeFlag.</param>
        /// <param name="gSTExempt">gSTExempt.</param>
        /// <param name="printOnInvoice">printOnInvoice.</param>
        /// <param name="subjectToProviderTax">subjectToProviderTax.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="underContract">underContract.</param>
        /// <param name="useThisCostWhenOrdering">useThisCostWhenOrdering.</param>
        /// <param name="wasTaxed">wasTaxed.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="orderByDate">orderByDate.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="quantityFilled">quantityFilled.</param>
        /// <param name="quantityInvoiced">quantityInvoiced.</param>
        /// <param name="quantityOrdered">quantityOrdered.</param>
        /// <param name="quantityPosted">quantityPosted.</param>
        /// <param name="quantityReceived">quantityReceived.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="exchangeNumber">exchangeNumber.</param>
        /// <param name="itemServicedNumber">itemServicedNumber.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="actualUnitCost">actualUnitCost.</param>
        /// <param name="cost">cost.</param>
        /// <param name="gSTaxableAmount">gSTaxableAmount.</param>
        /// <param name="manufacturerListPrice">manufacturerListPrice.</param>
        /// <param name="providerTaxableAmount">providerTaxableAmount.</param>
        /// <param name="sellingPrice">sellingPrice.</param>
        /// <param name="taxableAmount">taxableAmount.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="totalPostedCost">totalPostedCost.</param>
        /// <param name="totalSellingPrice">totalSellingPrice.</param>
        public TsiWebServiceOrderPartUsed(int? partsUsedNumber = default(int?), int? contractDetailNumber = default(int?), int? invoiceDetailNumber = default(int?), int? vendorAccountNumber = default(int?), int? projectPhaseNumber = default(int?), string repairCode = default(string), string installLocation = default(string), string nonStockVendorItemNumber = default(string), bool? allowVolumePricing = default(bool?), bool? assemblyFlag = default(bool?), bool? isCommentOnly = default(bool?), bool? itemCanBeDiscounted = default(bool?), bool? singleItemTaxed = default(bool?), bool? isStockItem = default(bool?), double? quantityAvailableToInvoice = default(double?), double? quantityShipped = default(double?), double? quantityToInvoice = default(double?), double? quantityToShip = default(double?), double? discountAmount = default(double?), double? adjustmentAmount = default(double?), double? adjustmentPercent = default(double?), double? discountPercent = default(double?), bool? isSerialized = default(bool?), List<TsiWebServiceOrderPartUsedAssemblyDetail> assembly = default(List<TsiWebServiceOrderPartUsedAssemblyDetail>), string applyDiscountOff = default(string), string priceAdjuster = default(string), string itemID = default(string), string itemDescription = default(string), string memo = default(string), string costGLCode = default(string), string incomeGLCode = default(string), string rMANumber = default(string), string type = default(string), bool? exchangeFlag = default(bool?), bool? gSTExempt = default(bool?), bool? printOnInvoice = default(bool?), bool? subjectToProviderTax = default(bool?), bool? taxable = default(bool?), bool? underContract = default(bool?), bool? useThisCostWhenOrdering = default(bool?), bool? wasTaxed = default(bool?), DateTime? invoiceDate = default(DateTime?), DateTime? orderByDate = default(DateTime?), double? quantity = default(double?), double? quantityFilled = default(double?), double? quantityInvoiced = default(double?), double? quantityOrdered = default(double?), double? quantityPosted = default(double?), double? quantityReceived = default(double?), int? contractNumber = default(int?), int? exchangeNumber = default(int?), int? itemServicedNumber = default(int?), int? invoiceNumber = default(int?), int? lineNumber = default(int?), int? priceLevel = default(int?), double? actualUnitCost = default(double?), double? cost = default(double?), double? gSTaxableAmount = default(double?), double? manufacturerListPrice = default(double?), double? providerTaxableAmount = default(double?), double? sellingPrice = default(double?), double? taxableAmount = default(double?), double? totalCost = default(double?), double? totalPostedCost = default(double?), double? totalSellingPrice = default(double?))
        {
            this.PartsUsedNumber = partsUsedNumber;
            this.ContractDetailNumber = contractDetailNumber;
            this.InvoiceDetailNumber = invoiceDetailNumber;
            this.VendorAccountNumber = vendorAccountNumber;
            this.ProjectPhaseNumber = projectPhaseNumber;
            this.RepairCode = repairCode;
            this.InstallLocation = installLocation;
            this.NonStockVendorItemNumber = nonStockVendorItemNumber;
            this.AllowVolumePricing = allowVolumePricing;
            this.AssemblyFlag = assemblyFlag;
            this.IsCommentOnly = isCommentOnly;
            this.ItemCanBeDiscounted = itemCanBeDiscounted;
            this.SingleItemTaxed = singleItemTaxed;
            this.IsStockItem = isStockItem;
            this.QuantityAvailableToInvoice = quantityAvailableToInvoice;
            this.QuantityShipped = quantityShipped;
            this.QuantityToInvoice = quantityToInvoice;
            this.QuantityToShip = quantityToShip;
            this.DiscountAmount = discountAmount;
            this.AdjustmentAmount = adjustmentAmount;
            this.AdjustmentPercent = adjustmentPercent;
            this.DiscountPercent = discountPercent;
            this.IsSerialized = isSerialized;
            this.Assembly = assembly;
            this.ApplyDiscountOff = applyDiscountOff;
            this.PriceAdjuster = priceAdjuster;
            this.ItemID = itemID;
            this.ItemDescription = itemDescription;
            this.Memo = memo;
            this.CostGLCode = costGLCode;
            this.IncomeGLCode = incomeGLCode;
            this.RMANumber = rMANumber;
            this.Type = type;
            this.ExchangeFlag = exchangeFlag;
            this.GSTExempt = gSTExempt;
            this.PrintOnInvoice = printOnInvoice;
            this.SubjectToProviderTax = subjectToProviderTax;
            this.Taxable = taxable;
            this.UnderContract = underContract;
            this.UseThisCostWhenOrdering = useThisCostWhenOrdering;
            this.WasTaxed = wasTaxed;
            this.InvoiceDate = invoiceDate;
            this.OrderByDate = orderByDate;
            this.Quantity = quantity;
            this.QuantityFilled = quantityFilled;
            this.QuantityInvoiced = quantityInvoiced;
            this.QuantityOrdered = quantityOrdered;
            this.QuantityPosted = quantityPosted;
            this.QuantityReceived = quantityReceived;
            this.ContractNumber = contractNumber;
            this.ExchangeNumber = exchangeNumber;
            this.ItemServicedNumber = itemServicedNumber;
            this.InvoiceNumber = invoiceNumber;
            this.LineNumber = lineNumber;
            this.PriceLevel = priceLevel;
            this.ActualUnitCost = actualUnitCost;
            this.Cost = cost;
            this.GSTaxableAmount = gSTaxableAmount;
            this.ManufacturerListPrice = manufacturerListPrice;
            this.ProviderTaxableAmount = providerTaxableAmount;
            this.SellingPrice = sellingPrice;
            this.TaxableAmount = taxableAmount;
            this.TotalCost = totalCost;
            this.TotalPostedCost = totalPostedCost;
            this.TotalSellingPrice = totalSellingPrice;
        }
        
        /// <summary>
        /// Gets or Sets PartsUsedNumber
        /// </summary>
        [DataMember(Name="PartsUsedNumber", EmitDefaultValue=false)]
        public int? PartsUsedNumber { get; set; }

        /// <summary>
        /// Gets or Sets ContractDetailNumber
        /// </summary>
        [DataMember(Name="ContractDetailNumber", EmitDefaultValue=false)]
        public int? ContractDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDetailNumber
        /// </summary>
        [DataMember(Name="InvoiceDetailNumber", EmitDefaultValue=false)]
        public int? InvoiceDetailNumber { get; set; }

        /// <summary>
        /// Gets or Sets VendorAccountNumber
        /// </summary>
        [DataMember(Name="VendorAccountNumber", EmitDefaultValue=false)]
        public int? VendorAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProjectPhaseNumber
        /// </summary>
        [DataMember(Name="ProjectPhaseNumber", EmitDefaultValue=false)]
        public int? ProjectPhaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets RepairCode
        /// </summary>
        [DataMember(Name="RepairCode", EmitDefaultValue=false)]
        public string RepairCode { get; set; }

        /// <summary>
        /// Gets or Sets InstallLocation
        /// </summary>
        [DataMember(Name="InstallLocation", EmitDefaultValue=false)]
        public string InstallLocation { get; set; }

        /// <summary>
        /// Gets or Sets NonStockVendorItemNumber
        /// </summary>
        [DataMember(Name="NonStockVendorItemNumber", EmitDefaultValue=false)]
        public string NonStockVendorItemNumber { get; set; }

        /// <summary>
        /// Gets or Sets AllowVolumePricing
        /// </summary>
        [DataMember(Name="AllowVolumePricing", EmitDefaultValue=false)]
        public bool? AllowVolumePricing { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyFlag
        /// </summary>
        [DataMember(Name="AssemblyFlag", EmitDefaultValue=false)]
        public bool? AssemblyFlag { get; set; }

        /// <summary>
        /// Gets or Sets IsCommentOnly
        /// </summary>
        [DataMember(Name="IsCommentOnly", EmitDefaultValue=false)]
        public bool? IsCommentOnly { get; set; }

        /// <summary>
        /// Gets or Sets ItemCanBeDiscounted
        /// </summary>
        [DataMember(Name="ItemCanBeDiscounted", EmitDefaultValue=false)]
        public bool? ItemCanBeDiscounted { get; set; }

        /// <summary>
        /// Gets or Sets SingleItemTaxed
        /// </summary>
        [DataMember(Name="SingleItemTaxed", EmitDefaultValue=false)]
        public bool? SingleItemTaxed { get; set; }

        /// <summary>
        /// Gets or Sets IsStockItem
        /// </summary>
        [DataMember(Name="IsStockItem", EmitDefaultValue=false)]
        public bool? IsStockItem { get; set; }

        /// <summary>
        /// Gets or Sets QuantityAvailableToInvoice
        /// </summary>
        [DataMember(Name="QuantityAvailableToInvoice", EmitDefaultValue=false)]
        public double? QuantityAvailableToInvoice { get; set; }

        /// <summary>
        /// Gets or Sets QuantityShipped
        /// </summary>
        [DataMember(Name="QuantityShipped", EmitDefaultValue=false)]
        public double? QuantityShipped { get; set; }

        /// <summary>
        /// Gets or Sets QuantityToInvoice
        /// </summary>
        [DataMember(Name="QuantityToInvoice", EmitDefaultValue=false)]
        public double? QuantityToInvoice { get; set; }

        /// <summary>
        /// Gets or Sets QuantityToShip
        /// </summary>
        [DataMember(Name="QuantityToShip", EmitDefaultValue=false)]
        public double? QuantityToShip { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="DiscountAmount", EmitDefaultValue=false)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets AdjustmentAmount
        /// </summary>
        [DataMember(Name="AdjustmentAmount", EmitDefaultValue=false)]
        public double? AdjustmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets AdjustmentPercent
        /// </summary>
        [DataMember(Name="AdjustmentPercent", EmitDefaultValue=false)]
        public double? AdjustmentPercent { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="DiscountPercent", EmitDefaultValue=false)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets IsSerialized
        /// </summary>
        [DataMember(Name="IsSerialized", EmitDefaultValue=false)]
        public bool? IsSerialized { get; set; }

        /// <summary>
        /// Gets or Sets Assembly
        /// </summary>
        [DataMember(Name="Assembly", EmitDefaultValue=false)]
        public List<TsiWebServiceOrderPartUsedAssemblyDetail> Assembly { get; set; }

        /// <summary>
        /// Gets or Sets ApplyDiscountOff
        /// </summary>
        [DataMember(Name="ApplyDiscountOff", EmitDefaultValue=false)]
        public string ApplyDiscountOff { get; set; }

        /// <summary>
        /// Gets or Sets PriceAdjuster
        /// </summary>
        [DataMember(Name="PriceAdjuster", EmitDefaultValue=false)]
        public string PriceAdjuster { get; set; }

        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name="Memo", EmitDefaultValue=false)]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets CostGLCode
        /// </summary>
        [DataMember(Name="CostGLCode", EmitDefaultValue=false)]
        public string CostGLCode { get; set; }

        /// <summary>
        /// Gets or Sets IncomeGLCode
        /// </summary>
        [DataMember(Name="IncomeGLCode", EmitDefaultValue=false)]
        public string IncomeGLCode { get; set; }

        /// <summary>
        /// Gets or Sets RMANumber
        /// </summary>
        [DataMember(Name="RMANumber", EmitDefaultValue=false)]
        public string RMANumber { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeFlag
        /// </summary>
        [DataMember(Name="ExchangeFlag", EmitDefaultValue=false)]
        public bool? ExchangeFlag { get; set; }

        /// <summary>
        /// Gets or Sets GSTExempt
        /// </summary>
        [DataMember(Name="GSTExempt", EmitDefaultValue=false)]
        public bool? GSTExempt { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnInvoice
        /// </summary>
        [DataMember(Name="PrintOnInvoice", EmitDefaultValue=false)]
        public bool? PrintOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets SubjectToProviderTax
        /// </summary>
        [DataMember(Name="SubjectToProviderTax", EmitDefaultValue=false)]
        public bool? SubjectToProviderTax { get; set; }

        /// <summary>
        /// Gets or Sets Taxable
        /// </summary>
        [DataMember(Name="Taxable", EmitDefaultValue=false)]
        public bool? Taxable { get; set; }

        /// <summary>
        /// Gets or Sets UnderContract
        /// </summary>
        [DataMember(Name="UnderContract", EmitDefaultValue=false)]
        public bool? UnderContract { get; set; }

        /// <summary>
        /// Gets or Sets UseThisCostWhenOrdering
        /// </summary>
        [DataMember(Name="UseThisCostWhenOrdering", EmitDefaultValue=false)]
        public bool? UseThisCostWhenOrdering { get; set; }

        /// <summary>
        /// Gets or Sets WasTaxed
        /// </summary>
        [DataMember(Name="WasTaxed", EmitDefaultValue=false)]
        public bool? WasTaxed { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderByDate
        /// </summary>
        [DataMember(Name="OrderByDate", EmitDefaultValue=false)]
        public DateTime? OrderByDate { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [DataMember(Name="QuantityFilled", EmitDefaultValue=false)]
        public double? QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityInvoiced
        /// </summary>
        [DataMember(Name="QuantityInvoiced", EmitDefaultValue=false)]
        public double? QuantityInvoiced { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOrdered
        /// </summary>
        [DataMember(Name="QuantityOrdered", EmitDefaultValue=false)]
        public double? QuantityOrdered { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPosted
        /// </summary>
        [DataMember(Name="QuantityPosted", EmitDefaultValue=false)]
        public double? QuantityPosted { get; set; }

        /// <summary>
        /// Gets or Sets QuantityReceived
        /// </summary>
        [DataMember(Name="QuantityReceived", EmitDefaultValue=false)]
        public double? QuantityReceived { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="ContractNumber", EmitDefaultValue=false)]
        public int? ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeNumber
        /// </summary>
        [DataMember(Name="ExchangeNumber", EmitDefaultValue=false)]
        public int? ExchangeNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemServicedNumber
        /// </summary>
        [DataMember(Name="ItemServicedNumber", EmitDefaultValue=false)]
        public int? ItemServicedNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="InvoiceNumber", EmitDefaultValue=false)]
        public int? InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="LineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets ActualUnitCost
        /// </summary>
        [DataMember(Name="ActualUnitCost", EmitDefaultValue=false)]
        public double? ActualUnitCost { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="Cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets GSTaxableAmount
        /// </summary>
        [DataMember(Name="GSTaxableAmount", EmitDefaultValue=false)]
        public double? GSTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerListPrice
        /// </summary>
        [DataMember(Name="ManufacturerListPrice", EmitDefaultValue=false)]
        public double? ManufacturerListPrice { get; set; }

        /// <summary>
        /// Gets or Sets ProviderTaxableAmount
        /// </summary>
        [DataMember(Name="ProviderTaxableAmount", EmitDefaultValue=false)]
        public double? ProviderTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets SellingPrice
        /// </summary>
        [DataMember(Name="SellingPrice", EmitDefaultValue=false)]
        public double? SellingPrice { get; set; }

        /// <summary>
        /// Gets or Sets TaxableAmount
        /// </summary>
        [DataMember(Name="TaxableAmount", EmitDefaultValue=false)]
        public double? TaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name="TotalCost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalPostedCost
        /// </summary>
        [DataMember(Name="TotalPostedCost", EmitDefaultValue=false)]
        public double? TotalPostedCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalSellingPrice
        /// </summary>
        [DataMember(Name="TotalSellingPrice", EmitDefaultValue=false)]
        public double? TotalSellingPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderPartUsed {\n");
            sb.Append("  PartsUsedNumber: ").Append(PartsUsedNumber).Append("\n");
            sb.Append("  ContractDetailNumber: ").Append(ContractDetailNumber).Append("\n");
            sb.Append("  InvoiceDetailNumber: ").Append(InvoiceDetailNumber).Append("\n");
            sb.Append("  VendorAccountNumber: ").Append(VendorAccountNumber).Append("\n");
            sb.Append("  ProjectPhaseNumber: ").Append(ProjectPhaseNumber).Append("\n");
            sb.Append("  RepairCode: ").Append(RepairCode).Append("\n");
            sb.Append("  InstallLocation: ").Append(InstallLocation).Append("\n");
            sb.Append("  NonStockVendorItemNumber: ").Append(NonStockVendorItemNumber).Append("\n");
            sb.Append("  AllowVolumePricing: ").Append(AllowVolumePricing).Append("\n");
            sb.Append("  AssemblyFlag: ").Append(AssemblyFlag).Append("\n");
            sb.Append("  IsCommentOnly: ").Append(IsCommentOnly).Append("\n");
            sb.Append("  ItemCanBeDiscounted: ").Append(ItemCanBeDiscounted).Append("\n");
            sb.Append("  SingleItemTaxed: ").Append(SingleItemTaxed).Append("\n");
            sb.Append("  IsStockItem: ").Append(IsStockItem).Append("\n");
            sb.Append("  QuantityAvailableToInvoice: ").Append(QuantityAvailableToInvoice).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  QuantityToInvoice: ").Append(QuantityToInvoice).Append("\n");
            sb.Append("  QuantityToShip: ").Append(QuantityToShip).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  AdjustmentAmount: ").Append(AdjustmentAmount).Append("\n");
            sb.Append("  AdjustmentPercent: ").Append(AdjustmentPercent).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  IsSerialized: ").Append(IsSerialized).Append("\n");
            sb.Append("  Assembly: ").Append(Assembly).Append("\n");
            sb.Append("  ApplyDiscountOff: ").Append(ApplyDiscountOff).Append("\n");
            sb.Append("  PriceAdjuster: ").Append(PriceAdjuster).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  CostGLCode: ").Append(CostGLCode).Append("\n");
            sb.Append("  IncomeGLCode: ").Append(IncomeGLCode).Append("\n");
            sb.Append("  RMANumber: ").Append(RMANumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExchangeFlag: ").Append(ExchangeFlag).Append("\n");
            sb.Append("  GSTExempt: ").Append(GSTExempt).Append("\n");
            sb.Append("  PrintOnInvoice: ").Append(PrintOnInvoice).Append("\n");
            sb.Append("  SubjectToProviderTax: ").Append(SubjectToProviderTax).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  UnderContract: ").Append(UnderContract).Append("\n");
            sb.Append("  UseThisCostWhenOrdering: ").Append(UseThisCostWhenOrdering).Append("\n");
            sb.Append("  WasTaxed: ").Append(WasTaxed).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  OrderByDate: ").Append(OrderByDate).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityInvoiced: ").Append(QuantityInvoiced).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  QuantityPosted: ").Append(QuantityPosted).Append("\n");
            sb.Append("  QuantityReceived: ").Append(QuantityReceived).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  ExchangeNumber: ").Append(ExchangeNumber).Append("\n");
            sb.Append("  ItemServicedNumber: ").Append(ItemServicedNumber).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  ActualUnitCost: ").Append(ActualUnitCost).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  GSTaxableAmount: ").Append(GSTaxableAmount).Append("\n");
            sb.Append("  ManufacturerListPrice: ").Append(ManufacturerListPrice).Append("\n");
            sb.Append("  ProviderTaxableAmount: ").Append(ProviderTaxableAmount).Append("\n");
            sb.Append("  SellingPrice: ").Append(SellingPrice).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  TotalPostedCost: ").Append(TotalPostedCost).Append("\n");
            sb.Append("  TotalSellingPrice: ").Append(TotalSellingPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderPartUsed);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderPartUsed instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderPartUsed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderPartUsed input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartsUsedNumber == input.PartsUsedNumber ||
                    (this.PartsUsedNumber != null &&
                    this.PartsUsedNumber.Equals(input.PartsUsedNumber))
                ) && 
                (
                    this.ContractDetailNumber == input.ContractDetailNumber ||
                    (this.ContractDetailNumber != null &&
                    this.ContractDetailNumber.Equals(input.ContractDetailNumber))
                ) && 
                (
                    this.InvoiceDetailNumber == input.InvoiceDetailNumber ||
                    (this.InvoiceDetailNumber != null &&
                    this.InvoiceDetailNumber.Equals(input.InvoiceDetailNumber))
                ) && 
                (
                    this.VendorAccountNumber == input.VendorAccountNumber ||
                    (this.VendorAccountNumber != null &&
                    this.VendorAccountNumber.Equals(input.VendorAccountNumber))
                ) && 
                (
                    this.ProjectPhaseNumber == input.ProjectPhaseNumber ||
                    (this.ProjectPhaseNumber != null &&
                    this.ProjectPhaseNumber.Equals(input.ProjectPhaseNumber))
                ) && 
                (
                    this.RepairCode == input.RepairCode ||
                    (this.RepairCode != null &&
                    this.RepairCode.Equals(input.RepairCode))
                ) && 
                (
                    this.InstallLocation == input.InstallLocation ||
                    (this.InstallLocation != null &&
                    this.InstallLocation.Equals(input.InstallLocation))
                ) && 
                (
                    this.NonStockVendorItemNumber == input.NonStockVendorItemNumber ||
                    (this.NonStockVendorItemNumber != null &&
                    this.NonStockVendorItemNumber.Equals(input.NonStockVendorItemNumber))
                ) && 
                (
                    this.AllowVolumePricing == input.AllowVolumePricing ||
                    (this.AllowVolumePricing != null &&
                    this.AllowVolumePricing.Equals(input.AllowVolumePricing))
                ) && 
                (
                    this.AssemblyFlag == input.AssemblyFlag ||
                    (this.AssemblyFlag != null &&
                    this.AssemblyFlag.Equals(input.AssemblyFlag))
                ) && 
                (
                    this.IsCommentOnly == input.IsCommentOnly ||
                    (this.IsCommentOnly != null &&
                    this.IsCommentOnly.Equals(input.IsCommentOnly))
                ) && 
                (
                    this.ItemCanBeDiscounted == input.ItemCanBeDiscounted ||
                    (this.ItemCanBeDiscounted != null &&
                    this.ItemCanBeDiscounted.Equals(input.ItemCanBeDiscounted))
                ) && 
                (
                    this.SingleItemTaxed == input.SingleItemTaxed ||
                    (this.SingleItemTaxed != null &&
                    this.SingleItemTaxed.Equals(input.SingleItemTaxed))
                ) && 
                (
                    this.IsStockItem == input.IsStockItem ||
                    (this.IsStockItem != null &&
                    this.IsStockItem.Equals(input.IsStockItem))
                ) && 
                (
                    this.QuantityAvailableToInvoice == input.QuantityAvailableToInvoice ||
                    (this.QuantityAvailableToInvoice != null &&
                    this.QuantityAvailableToInvoice.Equals(input.QuantityAvailableToInvoice))
                ) && 
                (
                    this.QuantityShipped == input.QuantityShipped ||
                    (this.QuantityShipped != null &&
                    this.QuantityShipped.Equals(input.QuantityShipped))
                ) && 
                (
                    this.QuantityToInvoice == input.QuantityToInvoice ||
                    (this.QuantityToInvoice != null &&
                    this.QuantityToInvoice.Equals(input.QuantityToInvoice))
                ) && 
                (
                    this.QuantityToShip == input.QuantityToShip ||
                    (this.QuantityToShip != null &&
                    this.QuantityToShip.Equals(input.QuantityToShip))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.AdjustmentAmount == input.AdjustmentAmount ||
                    (this.AdjustmentAmount != null &&
                    this.AdjustmentAmount.Equals(input.AdjustmentAmount))
                ) && 
                (
                    this.AdjustmentPercent == input.AdjustmentPercent ||
                    (this.AdjustmentPercent != null &&
                    this.AdjustmentPercent.Equals(input.AdjustmentPercent))
                ) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    (this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(input.DiscountPercent))
                ) && 
                (
                    this.IsSerialized == input.IsSerialized ||
                    (this.IsSerialized != null &&
                    this.IsSerialized.Equals(input.IsSerialized))
                ) && 
                (
                    this.Assembly == input.Assembly ||
                    this.Assembly != null &&
                    this.Assembly.SequenceEqual(input.Assembly)
                ) && 
                (
                    this.ApplyDiscountOff == input.ApplyDiscountOff ||
                    (this.ApplyDiscountOff != null &&
                    this.ApplyDiscountOff.Equals(input.ApplyDiscountOff))
                ) && 
                (
                    this.PriceAdjuster == input.PriceAdjuster ||
                    (this.PriceAdjuster != null &&
                    this.PriceAdjuster.Equals(input.PriceAdjuster))
                ) && 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.CostGLCode == input.CostGLCode ||
                    (this.CostGLCode != null &&
                    this.CostGLCode.Equals(input.CostGLCode))
                ) && 
                (
                    this.IncomeGLCode == input.IncomeGLCode ||
                    (this.IncomeGLCode != null &&
                    this.IncomeGLCode.Equals(input.IncomeGLCode))
                ) && 
                (
                    this.RMANumber == input.RMANumber ||
                    (this.RMANumber != null &&
                    this.RMANumber.Equals(input.RMANumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ExchangeFlag == input.ExchangeFlag ||
                    (this.ExchangeFlag != null &&
                    this.ExchangeFlag.Equals(input.ExchangeFlag))
                ) && 
                (
                    this.GSTExempt == input.GSTExempt ||
                    (this.GSTExempt != null &&
                    this.GSTExempt.Equals(input.GSTExempt))
                ) && 
                (
                    this.PrintOnInvoice == input.PrintOnInvoice ||
                    (this.PrintOnInvoice != null &&
                    this.PrintOnInvoice.Equals(input.PrintOnInvoice))
                ) && 
                (
                    this.SubjectToProviderTax == input.SubjectToProviderTax ||
                    (this.SubjectToProviderTax != null &&
                    this.SubjectToProviderTax.Equals(input.SubjectToProviderTax))
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    (this.Taxable != null &&
                    this.Taxable.Equals(input.Taxable))
                ) && 
                (
                    this.UnderContract == input.UnderContract ||
                    (this.UnderContract != null &&
                    this.UnderContract.Equals(input.UnderContract))
                ) && 
                (
                    this.UseThisCostWhenOrdering == input.UseThisCostWhenOrdering ||
                    (this.UseThisCostWhenOrdering != null &&
                    this.UseThisCostWhenOrdering.Equals(input.UseThisCostWhenOrdering))
                ) && 
                (
                    this.WasTaxed == input.WasTaxed ||
                    (this.WasTaxed != null &&
                    this.WasTaxed.Equals(input.WasTaxed))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.OrderByDate == input.OrderByDate ||
                    (this.OrderByDate != null &&
                    this.OrderByDate.Equals(input.OrderByDate))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityFilled == input.QuantityFilled ||
                    (this.QuantityFilled != null &&
                    this.QuantityFilled.Equals(input.QuantityFilled))
                ) && 
                (
                    this.QuantityInvoiced == input.QuantityInvoiced ||
                    (this.QuantityInvoiced != null &&
                    this.QuantityInvoiced.Equals(input.QuantityInvoiced))
                ) && 
                (
                    this.QuantityOrdered == input.QuantityOrdered ||
                    (this.QuantityOrdered != null &&
                    this.QuantityOrdered.Equals(input.QuantityOrdered))
                ) && 
                (
                    this.QuantityPosted == input.QuantityPosted ||
                    (this.QuantityPosted != null &&
                    this.QuantityPosted.Equals(input.QuantityPosted))
                ) && 
                (
                    this.QuantityReceived == input.QuantityReceived ||
                    (this.QuantityReceived != null &&
                    this.QuantityReceived.Equals(input.QuantityReceived))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.ExchangeNumber == input.ExchangeNumber ||
                    (this.ExchangeNumber != null &&
                    this.ExchangeNumber.Equals(input.ExchangeNumber))
                ) && 
                (
                    this.ItemServicedNumber == input.ItemServicedNumber ||
                    (this.ItemServicedNumber != null &&
                    this.ItemServicedNumber.Equals(input.ItemServicedNumber))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.ActualUnitCost == input.ActualUnitCost ||
                    (this.ActualUnitCost != null &&
                    this.ActualUnitCost.Equals(input.ActualUnitCost))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.GSTaxableAmount == input.GSTaxableAmount ||
                    (this.GSTaxableAmount != null &&
                    this.GSTaxableAmount.Equals(input.GSTaxableAmount))
                ) && 
                (
                    this.ManufacturerListPrice == input.ManufacturerListPrice ||
                    (this.ManufacturerListPrice != null &&
                    this.ManufacturerListPrice.Equals(input.ManufacturerListPrice))
                ) && 
                (
                    this.ProviderTaxableAmount == input.ProviderTaxableAmount ||
                    (this.ProviderTaxableAmount != null &&
                    this.ProviderTaxableAmount.Equals(input.ProviderTaxableAmount))
                ) && 
                (
                    this.SellingPrice == input.SellingPrice ||
                    (this.SellingPrice != null &&
                    this.SellingPrice.Equals(input.SellingPrice))
                ) && 
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    (this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(input.TaxableAmount))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.TotalPostedCost == input.TotalPostedCost ||
                    (this.TotalPostedCost != null &&
                    this.TotalPostedCost.Equals(input.TotalPostedCost))
                ) && 
                (
                    this.TotalSellingPrice == input.TotalSellingPrice ||
                    (this.TotalSellingPrice != null &&
                    this.TotalSellingPrice.Equals(input.TotalSellingPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartsUsedNumber != null)
                    hashCode = hashCode * 59 + this.PartsUsedNumber.GetHashCode();
                if (this.ContractDetailNumber != null)
                    hashCode = hashCode * 59 + this.ContractDetailNumber.GetHashCode();
                if (this.InvoiceDetailNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceDetailNumber.GetHashCode();
                if (this.VendorAccountNumber != null)
                    hashCode = hashCode * 59 + this.VendorAccountNumber.GetHashCode();
                if (this.ProjectPhaseNumber != null)
                    hashCode = hashCode * 59 + this.ProjectPhaseNumber.GetHashCode();
                if (this.RepairCode != null)
                    hashCode = hashCode * 59 + this.RepairCode.GetHashCode();
                if (this.InstallLocation != null)
                    hashCode = hashCode * 59 + this.InstallLocation.GetHashCode();
                if (this.NonStockVendorItemNumber != null)
                    hashCode = hashCode * 59 + this.NonStockVendorItemNumber.GetHashCode();
                if (this.AllowVolumePricing != null)
                    hashCode = hashCode * 59 + this.AllowVolumePricing.GetHashCode();
                if (this.AssemblyFlag != null)
                    hashCode = hashCode * 59 + this.AssemblyFlag.GetHashCode();
                if (this.IsCommentOnly != null)
                    hashCode = hashCode * 59 + this.IsCommentOnly.GetHashCode();
                if (this.ItemCanBeDiscounted != null)
                    hashCode = hashCode * 59 + this.ItemCanBeDiscounted.GetHashCode();
                if (this.SingleItemTaxed != null)
                    hashCode = hashCode * 59 + this.SingleItemTaxed.GetHashCode();
                if (this.IsStockItem != null)
                    hashCode = hashCode * 59 + this.IsStockItem.GetHashCode();
                if (this.QuantityAvailableToInvoice != null)
                    hashCode = hashCode * 59 + this.QuantityAvailableToInvoice.GetHashCode();
                if (this.QuantityShipped != null)
                    hashCode = hashCode * 59 + this.QuantityShipped.GetHashCode();
                if (this.QuantityToInvoice != null)
                    hashCode = hashCode * 59 + this.QuantityToInvoice.GetHashCode();
                if (this.QuantityToShip != null)
                    hashCode = hashCode * 59 + this.QuantityToShip.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.AdjustmentAmount != null)
                    hashCode = hashCode * 59 + this.AdjustmentAmount.GetHashCode();
                if (this.AdjustmentPercent != null)
                    hashCode = hashCode * 59 + this.AdjustmentPercent.GetHashCode();
                if (this.DiscountPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPercent.GetHashCode();
                if (this.IsSerialized != null)
                    hashCode = hashCode * 59 + this.IsSerialized.GetHashCode();
                if (this.Assembly != null)
                    hashCode = hashCode * 59 + this.Assembly.GetHashCode();
                if (this.ApplyDiscountOff != null)
                    hashCode = hashCode * 59 + this.ApplyDiscountOff.GetHashCode();
                if (this.PriceAdjuster != null)
                    hashCode = hashCode * 59 + this.PriceAdjuster.GetHashCode();
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.CostGLCode != null)
                    hashCode = hashCode * 59 + this.CostGLCode.GetHashCode();
                if (this.IncomeGLCode != null)
                    hashCode = hashCode * 59 + this.IncomeGLCode.GetHashCode();
                if (this.RMANumber != null)
                    hashCode = hashCode * 59 + this.RMANumber.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ExchangeFlag != null)
                    hashCode = hashCode * 59 + this.ExchangeFlag.GetHashCode();
                if (this.GSTExempt != null)
                    hashCode = hashCode * 59 + this.GSTExempt.GetHashCode();
                if (this.PrintOnInvoice != null)
                    hashCode = hashCode * 59 + this.PrintOnInvoice.GetHashCode();
                if (this.SubjectToProviderTax != null)
                    hashCode = hashCode * 59 + this.SubjectToProviderTax.GetHashCode();
                if (this.Taxable != null)
                    hashCode = hashCode * 59 + this.Taxable.GetHashCode();
                if (this.UnderContract != null)
                    hashCode = hashCode * 59 + this.UnderContract.GetHashCode();
                if (this.UseThisCostWhenOrdering != null)
                    hashCode = hashCode * 59 + this.UseThisCostWhenOrdering.GetHashCode();
                if (this.WasTaxed != null)
                    hashCode = hashCode * 59 + this.WasTaxed.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.OrderByDate != null)
                    hashCode = hashCode * 59 + this.OrderByDate.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityFilled != null)
                    hashCode = hashCode * 59 + this.QuantityFilled.GetHashCode();
                if (this.QuantityInvoiced != null)
                    hashCode = hashCode * 59 + this.QuantityInvoiced.GetHashCode();
                if (this.QuantityOrdered != null)
                    hashCode = hashCode * 59 + this.QuantityOrdered.GetHashCode();
                if (this.QuantityPosted != null)
                    hashCode = hashCode * 59 + this.QuantityPosted.GetHashCode();
                if (this.QuantityReceived != null)
                    hashCode = hashCode * 59 + this.QuantityReceived.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.ExchangeNumber != null)
                    hashCode = hashCode * 59 + this.ExchangeNumber.GetHashCode();
                if (this.ItemServicedNumber != null)
                    hashCode = hashCode * 59 + this.ItemServicedNumber.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.ActualUnitCost != null)
                    hashCode = hashCode * 59 + this.ActualUnitCost.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.GSTaxableAmount != null)
                    hashCode = hashCode * 59 + this.GSTaxableAmount.GetHashCode();
                if (this.ManufacturerListPrice != null)
                    hashCode = hashCode * 59 + this.ManufacturerListPrice.GetHashCode();
                if (this.ProviderTaxableAmount != null)
                    hashCode = hashCode * 59 + this.ProviderTaxableAmount.GetHashCode();
                if (this.SellingPrice != null)
                    hashCode = hashCode * 59 + this.SellingPrice.GetHashCode();
                if (this.TaxableAmount != null)
                    hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.TotalPostedCost != null)
                    hashCode = hashCode * 59 + this.TotalPostedCost.GetHashCode();
                if (this.TotalSellingPrice != null)
                    hashCode = hashCode * 59 + this.TotalSellingPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
