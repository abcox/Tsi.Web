/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderPriority
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderPriority :  IEquatable<TsiWebServiceOrderPriority>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderPriority" /> class.
        /// </summary>
        /// <param name="priority">priority.</param>
        /// <param name="responseTime">responseTime.</param>
        /// <param name="rank">rank.</param>
        /// <param name="warningThreshold">warningThreshold.</param>
        /// <param name="reportingPeriod">reportingPeriod.</param>
        /// <param name="color">color.</param>
        /// <param name="systemDefault">systemDefault.</param>
        /// <param name="aroundTheClockResponse">aroundTheClockResponse.</param>
        public TsiWebServiceOrderPriority(string priority = default(string), int? responseTime = default(int?), int? rank = default(int?), int? warningThreshold = default(int?), int? reportingPeriod = default(int?), int? color = default(int?), bool? systemDefault = default(bool?), bool? aroundTheClockResponse = default(bool?))
        {
            this.Priority = priority;
            this.ResponseTime = responseTime;
            this.Rank = rank;
            this.WarningThreshold = warningThreshold;
            this.ReportingPeriod = reportingPeriod;
            this.Color = color;
            this.SystemDefault = systemDefault;
            this.AroundTheClockResponse = aroundTheClockResponse;
        }
        
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTime
        /// </summary>
        [DataMember(Name="ResponseTime", EmitDefaultValue=false)]
        public int? ResponseTime { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="Rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// Gets or Sets WarningThreshold
        /// </summary>
        [DataMember(Name="WarningThreshold", EmitDefaultValue=false)]
        public int? WarningThreshold { get; set; }

        /// <summary>
        /// Gets or Sets ReportingPeriod
        /// </summary>
        [DataMember(Name="ReportingPeriod", EmitDefaultValue=false)]
        public int? ReportingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public int? Color { get; set; }

        /// <summary>
        /// Gets or Sets SystemDefault
        /// </summary>
        [DataMember(Name="SystemDefault", EmitDefaultValue=false)]
        public bool? SystemDefault { get; set; }

        /// <summary>
        /// Gets or Sets AroundTheClockResponse
        /// </summary>
        [DataMember(Name="AroundTheClockResponse", EmitDefaultValue=false)]
        public bool? AroundTheClockResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderPriority {\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ResponseTime: ").Append(ResponseTime).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  WarningThreshold: ").Append(WarningThreshold).Append("\n");
            sb.Append("  ReportingPeriod: ").Append(ReportingPeriod).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  SystemDefault: ").Append(SystemDefault).Append("\n");
            sb.Append("  AroundTheClockResponse: ").Append(AroundTheClockResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderPriority);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderPriority instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderPriority to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderPriority input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ResponseTime == input.ResponseTime ||
                    (this.ResponseTime != null &&
                    this.ResponseTime.Equals(input.ResponseTime))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.WarningThreshold == input.WarningThreshold ||
                    (this.WarningThreshold != null &&
                    this.WarningThreshold.Equals(input.WarningThreshold))
                ) && 
                (
                    this.ReportingPeriod == input.ReportingPeriod ||
                    (this.ReportingPeriod != null &&
                    this.ReportingPeriod.Equals(input.ReportingPeriod))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.SystemDefault == input.SystemDefault ||
                    (this.SystemDefault != null &&
                    this.SystemDefault.Equals(input.SystemDefault))
                ) && 
                (
                    this.AroundTheClockResponse == input.AroundTheClockResponse ||
                    (this.AroundTheClockResponse != null &&
                    this.AroundTheClockResponse.Equals(input.AroundTheClockResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ResponseTime != null)
                    hashCode = hashCode * 59 + this.ResponseTime.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.WarningThreshold != null)
                    hashCode = hashCode * 59 + this.WarningThreshold.GetHashCode();
                if (this.ReportingPeriod != null)
                    hashCode = hashCode * 59 + this.ReportingPeriod.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.SystemDefault != null)
                    hashCode = hashCode * 59 + this.SystemDefault.GetHashCode();
                if (this.AroundTheClockResponse != null)
                    hashCode = hashCode * 59 + this.AroundTheClockResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
