/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderStatus
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderStatus :  IEquatable<TsiWebServiceOrderStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderStatus" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="ticketChange">ticketChange.</param>
        /// <param name="iVRID">iVRID.</param>
        /// <param name="systemEntry">systemEntry.</param>
        /// <param name="systemDefault">systemDefault.</param>
        /// <param name="rank">rank.</param>
        /// <param name="color">color.</param>
        public TsiWebServiceOrderStatus(string status = default(string), string ticketChange = default(string), int? iVRID = default(int?), bool? systemEntry = default(bool?), bool? systemDefault = default(bool?), int? rank = default(int?), int? color = default(int?))
        {
            this.Status = status;
            this.TicketChange = ticketChange;
            this.IVRID = iVRID;
            this.SystemEntry = systemEntry;
            this.SystemDefault = systemDefault;
            this.Rank = rank;
            this.Color = color;
        }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TicketChange
        /// </summary>
        [DataMember(Name="TicketChange", EmitDefaultValue=false)]
        public string TicketChange { get; set; }

        /// <summary>
        /// Gets or Sets IVRID
        /// </summary>
        [DataMember(Name="IVRID", EmitDefaultValue=false)]
        public int? IVRID { get; set; }

        /// <summary>
        /// Gets or Sets SystemEntry
        /// </summary>
        [DataMember(Name="SystemEntry", EmitDefaultValue=false)]
        public bool? SystemEntry { get; set; }

        /// <summary>
        /// Gets or Sets SystemDefault
        /// </summary>
        [DataMember(Name="SystemDefault", EmitDefaultValue=false)]
        public bool? SystemDefault { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="Rank", EmitDefaultValue=false)]
        public int? Rank { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public int? Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TicketChange: ").Append(TicketChange).Append("\n");
            sb.Append("  IVRID: ").Append(IVRID).Append("\n");
            sb.Append("  SystemEntry: ").Append(SystemEntry).Append("\n");
            sb.Append("  SystemDefault: ").Append(SystemDefault).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderStatus);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TicketChange == input.TicketChange ||
                    (this.TicketChange != null &&
                    this.TicketChange.Equals(input.TicketChange))
                ) && 
                (
                    this.IVRID == input.IVRID ||
                    (this.IVRID != null &&
                    this.IVRID.Equals(input.IVRID))
                ) && 
                (
                    this.SystemEntry == input.SystemEntry ||
                    (this.SystemEntry != null &&
                    this.SystemEntry.Equals(input.SystemEntry))
                ) && 
                (
                    this.SystemDefault == input.SystemDefault ||
                    (this.SystemDefault != null &&
                    this.SystemDefault.Equals(input.SystemDefault))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TicketChange != null)
                    hashCode = hashCode * 59 + this.TicketChange.GetHashCode();
                if (this.IVRID != null)
                    hashCode = hashCode * 59 + this.IVRID.GetHashCode();
                if (this.SystemEntry != null)
                    hashCode = hashCode * 59 + this.SystemEntry.GetHashCode();
                if (this.SystemDefault != null)
                    hashCode = hashCode * 59 + this.SystemDefault.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
