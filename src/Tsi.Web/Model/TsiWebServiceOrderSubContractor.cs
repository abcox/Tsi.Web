/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderSubContractor
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderSubContractor :  IEquatable<TsiWebServiceOrderSubContractor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderSubContractor" /> class.
        /// </summary>
        /// <param name="assignedSubContractorID">assignedSubContractorID.</param>
        /// <param name="serviceOrderNumber">serviceOrderNumber.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="responsibility">responsibility.</param>
        /// <param name="projectedStartDate">projectedStartDate.</param>
        /// <param name="actualStartDate">actualStartDate.</param>
        /// <param name="projectedCompletionDate">projectedCompletionDate.</param>
        /// <param name="actualCompleteDate">actualCompleteDate.</param>
        /// <param name="bidPrice">bidPrice.</param>
        /// <param name="actualPrice">actualPrice.</param>
        /// <param name="workRequested">workRequested.</param>
        /// <param name="workAgreementInPlace">workAgreementInPlace.</param>
        /// <param name="subContractorGetsPermits">subContractorGetsPermits.</param>
        /// <param name="fieldReportsCurrent">fieldReportsCurrent.</param>
        public TsiWebServiceOrderSubContractor(int? assignedSubContractorID = default(int?), int? serviceOrderNumber = default(int?), int? accountNumber = default(int?), string accountName = default(string), string responsibility = default(string), DateTime? projectedStartDate = default(DateTime?), DateTime? actualStartDate = default(DateTime?), DateTime? projectedCompletionDate = default(DateTime?), DateTime? actualCompleteDate = default(DateTime?), double? bidPrice = default(double?), double? actualPrice = default(double?), string workRequested = default(string), bool? workAgreementInPlace = default(bool?), bool? subContractorGetsPermits = default(bool?), bool? fieldReportsCurrent = default(bool?))
        {
            this.AssignedSubContractorID = assignedSubContractorID;
            this.ServiceOrderNumber = serviceOrderNumber;
            this.AccountNumber = accountNumber;
            this.AccountName = accountName;
            this.Responsibility = responsibility;
            this.ProjectedStartDate = projectedStartDate;
            this.ActualStartDate = actualStartDate;
            this.ProjectedCompletionDate = projectedCompletionDate;
            this.ActualCompleteDate = actualCompleteDate;
            this.BidPrice = bidPrice;
            this.ActualPrice = actualPrice;
            this.WorkRequested = workRequested;
            this.WorkAgreementInPlace = workAgreementInPlace;
            this.SubContractorGetsPermits = subContractorGetsPermits;
            this.FieldReportsCurrent = fieldReportsCurrent;
        }
        
        /// <summary>
        /// Gets or Sets AssignedSubContractorID
        /// </summary>
        [DataMember(Name="AssignedSubContractorID", EmitDefaultValue=false)]
        public int? AssignedSubContractorID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderNumber
        /// </summary>
        [DataMember(Name="ServiceOrderNumber", EmitDefaultValue=false)]
        public int? ServiceOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="AccountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets Responsibility
        /// </summary>
        [DataMember(Name="Responsibility", EmitDefaultValue=false)]
        public string Responsibility { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedStartDate
        /// </summary>
        [DataMember(Name="ProjectedStartDate", EmitDefaultValue=false)]
        public DateTime? ProjectedStartDate { get; set; }

        /// <summary>
        /// Gets or Sets ActualStartDate
        /// </summary>
        [DataMember(Name="ActualStartDate", EmitDefaultValue=false)]
        public DateTime? ActualStartDate { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedCompletionDate
        /// </summary>
        [DataMember(Name="ProjectedCompletionDate", EmitDefaultValue=false)]
        public DateTime? ProjectedCompletionDate { get; set; }

        /// <summary>
        /// Gets or Sets ActualCompleteDate
        /// </summary>
        [DataMember(Name="ActualCompleteDate", EmitDefaultValue=false)]
        public DateTime? ActualCompleteDate { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="BidPrice", EmitDefaultValue=false)]
        public double? BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets ActualPrice
        /// </summary>
        [DataMember(Name="ActualPrice", EmitDefaultValue=false)]
        public double? ActualPrice { get; set; }

        /// <summary>
        /// Gets or Sets WorkRequested
        /// </summary>
        [DataMember(Name="WorkRequested", EmitDefaultValue=false)]
        public string WorkRequested { get; set; }

        /// <summary>
        /// Gets or Sets WorkAgreementInPlace
        /// </summary>
        [DataMember(Name="WorkAgreementInPlace", EmitDefaultValue=false)]
        public bool? WorkAgreementInPlace { get; set; }

        /// <summary>
        /// Gets or Sets SubContractorGetsPermits
        /// </summary>
        [DataMember(Name="SubContractorGetsPermits", EmitDefaultValue=false)]
        public bool? SubContractorGetsPermits { get; set; }

        /// <summary>
        /// Gets or Sets FieldReportsCurrent
        /// </summary>
        [DataMember(Name="FieldReportsCurrent", EmitDefaultValue=false)]
        public bool? FieldReportsCurrent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderSubContractor {\n");
            sb.Append("  AssignedSubContractorID: ").Append(AssignedSubContractorID).Append("\n");
            sb.Append("  ServiceOrderNumber: ").Append(ServiceOrderNumber).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Responsibility: ").Append(Responsibility).Append("\n");
            sb.Append("  ProjectedStartDate: ").Append(ProjectedStartDate).Append("\n");
            sb.Append("  ActualStartDate: ").Append(ActualStartDate).Append("\n");
            sb.Append("  ProjectedCompletionDate: ").Append(ProjectedCompletionDate).Append("\n");
            sb.Append("  ActualCompleteDate: ").Append(ActualCompleteDate).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  ActualPrice: ").Append(ActualPrice).Append("\n");
            sb.Append("  WorkRequested: ").Append(WorkRequested).Append("\n");
            sb.Append("  WorkAgreementInPlace: ").Append(WorkAgreementInPlace).Append("\n");
            sb.Append("  SubContractorGetsPermits: ").Append(SubContractorGetsPermits).Append("\n");
            sb.Append("  FieldReportsCurrent: ").Append(FieldReportsCurrent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderSubContractor);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderSubContractor instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderSubContractor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderSubContractor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssignedSubContractorID == input.AssignedSubContractorID ||
                    (this.AssignedSubContractorID != null &&
                    this.AssignedSubContractorID.Equals(input.AssignedSubContractorID))
                ) && 
                (
                    this.ServiceOrderNumber == input.ServiceOrderNumber ||
                    (this.ServiceOrderNumber != null &&
                    this.ServiceOrderNumber.Equals(input.ServiceOrderNumber))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Responsibility == input.Responsibility ||
                    (this.Responsibility != null &&
                    this.Responsibility.Equals(input.Responsibility))
                ) && 
                (
                    this.ProjectedStartDate == input.ProjectedStartDate ||
                    (this.ProjectedStartDate != null &&
                    this.ProjectedStartDate.Equals(input.ProjectedStartDate))
                ) && 
                (
                    this.ActualStartDate == input.ActualStartDate ||
                    (this.ActualStartDate != null &&
                    this.ActualStartDate.Equals(input.ActualStartDate))
                ) && 
                (
                    this.ProjectedCompletionDate == input.ProjectedCompletionDate ||
                    (this.ProjectedCompletionDate != null &&
                    this.ProjectedCompletionDate.Equals(input.ProjectedCompletionDate))
                ) && 
                (
                    this.ActualCompleteDate == input.ActualCompleteDate ||
                    (this.ActualCompleteDate != null &&
                    this.ActualCompleteDate.Equals(input.ActualCompleteDate))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    (this.BidPrice != null &&
                    this.BidPrice.Equals(input.BidPrice))
                ) && 
                (
                    this.ActualPrice == input.ActualPrice ||
                    (this.ActualPrice != null &&
                    this.ActualPrice.Equals(input.ActualPrice))
                ) && 
                (
                    this.WorkRequested == input.WorkRequested ||
                    (this.WorkRequested != null &&
                    this.WorkRequested.Equals(input.WorkRequested))
                ) && 
                (
                    this.WorkAgreementInPlace == input.WorkAgreementInPlace ||
                    (this.WorkAgreementInPlace != null &&
                    this.WorkAgreementInPlace.Equals(input.WorkAgreementInPlace))
                ) && 
                (
                    this.SubContractorGetsPermits == input.SubContractorGetsPermits ||
                    (this.SubContractorGetsPermits != null &&
                    this.SubContractorGetsPermits.Equals(input.SubContractorGetsPermits))
                ) && 
                (
                    this.FieldReportsCurrent == input.FieldReportsCurrent ||
                    (this.FieldReportsCurrent != null &&
                    this.FieldReportsCurrent.Equals(input.FieldReportsCurrent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssignedSubContractorID != null)
                    hashCode = hashCode * 59 + this.AssignedSubContractorID.GetHashCode();
                if (this.ServiceOrderNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderNumber.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Responsibility != null)
                    hashCode = hashCode * 59 + this.Responsibility.GetHashCode();
                if (this.ProjectedStartDate != null)
                    hashCode = hashCode * 59 + this.ProjectedStartDate.GetHashCode();
                if (this.ActualStartDate != null)
                    hashCode = hashCode * 59 + this.ActualStartDate.GetHashCode();
                if (this.ProjectedCompletionDate != null)
                    hashCode = hashCode * 59 + this.ProjectedCompletionDate.GetHashCode();
                if (this.ActualCompleteDate != null)
                    hashCode = hashCode * 59 + this.ActualCompleteDate.GetHashCode();
                if (this.BidPrice != null)
                    hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.ActualPrice != null)
                    hashCode = hashCode * 59 + this.ActualPrice.GetHashCode();
                if (this.WorkRequested != null)
                    hashCode = hashCode * 59 + this.WorkRequested.GetHashCode();
                if (this.WorkAgreementInPlace != null)
                    hashCode = hashCode * 59 + this.WorkAgreementInPlace.GetHashCode();
                if (this.SubContractorGetsPermits != null)
                    hashCode = hashCode * 59 + this.SubContractorGetsPermits.GetHashCode();
                if (this.FieldReportsCurrent != null)
                    hashCode = hashCode * 59 + this.FieldReportsCurrent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
