/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderTemplate
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderTemplate :  IEquatable<TsiWebServiceOrderTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderTemplate" /> class.
        /// </summary>
        /// <param name="templateId">templateId.</param>
        /// <param name="templateName">templateName.</param>
        /// <param name="briefDescription">briefDescription.</param>
        /// <param name="dispatchBoardNumber">dispatchBoardNumber.</param>
        /// <param name="technicianAssigned">technicianAssigned.</param>
        /// <param name="technicianAssignedName">technicianAssignedName.</param>
        /// <param name="associatedTechsGroup">associatedTechsGroup.</param>
        /// <param name="status">status.</param>
        /// <param name="serviceOrderType">serviceOrderType.</param>
        /// <param name="priority">priority.</param>
        /// <param name="estimatedHours">estimatedHours.</param>
        /// <param name="estimatedMinutes">estimatedMinutes.</param>
        /// <param name="workRequested">workRequested.</param>
        /// <param name="workPerformed">workPerformed.</param>
        /// <param name="internalComments">internalComments.</param>
        /// <param name="useDefaultContract">useDefaultContract.</param>
        /// <param name="contactProfile">contactProfile.</param>
        /// <param name="useContractPriority">useContractPriority.</param>
        /// <param name="templateTasks">templateTasks.</param>
        /// <param name="templateParts">templateParts.</param>
        /// <param name="templateTimeLogs">templateTimeLogs.</param>
        public TsiWebServiceOrderTemplate(int? templateId = default(int?), string templateName = default(string), string briefDescription = default(string), int? dispatchBoardNumber = default(int?), int? technicianAssigned = default(int?), string technicianAssignedName = default(string), string associatedTechsGroup = default(string), string status = default(string), string serviceOrderType = default(string), string priority = default(string), int? estimatedHours = default(int?), int? estimatedMinutes = default(int?), string workRequested = default(string), string workPerformed = default(string), string internalComments = default(string), bool? useDefaultContract = default(bool?), string contactProfile = default(string), bool? useContractPriority = default(bool?), List<TsiWebServiceOrderTemplateTask> templateTasks = default(List<TsiWebServiceOrderTemplateTask>), List<TsiWebServiceOrderTemplatePart> templateParts = default(List<TsiWebServiceOrderTemplatePart>), List<TsiWebServiceOrderTemplateTimeLog> templateTimeLogs = default(List<TsiWebServiceOrderTemplateTimeLog>))
        {
            this.TemplateId = templateId;
            this.TemplateName = templateName;
            this.BriefDescription = briefDescription;
            this.DispatchBoardNumber = dispatchBoardNumber;
            this.TechnicianAssigned = technicianAssigned;
            this.TechnicianAssignedName = technicianAssignedName;
            this.AssociatedTechsGroup = associatedTechsGroup;
            this.Status = status;
            this.ServiceOrderType = serviceOrderType;
            this.Priority = priority;
            this.EstimatedHours = estimatedHours;
            this.EstimatedMinutes = estimatedMinutes;
            this.WorkRequested = workRequested;
            this.WorkPerformed = workPerformed;
            this.InternalComments = internalComments;
            this.UseDefaultContract = useDefaultContract;
            this.ContactProfile = contactProfile;
            this.UseContractPriority = useContractPriority;
            this.TemplateTasks = templateTasks;
            this.TemplateParts = templateParts;
            this.TemplateTimeLogs = templateTimeLogs;
        }
        
        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name="TemplateId", EmitDefaultValue=false)]
        public int? TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateName
        /// </summary>
        [DataMember(Name="TemplateName", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets BriefDescription
        /// </summary>
        [DataMember(Name="BriefDescription", EmitDefaultValue=false)]
        public string BriefDescription { get; set; }

        /// <summary>
        /// Gets or Sets DispatchBoardNumber
        /// </summary>
        [DataMember(Name="DispatchBoardNumber", EmitDefaultValue=false)]
        public int? DispatchBoardNumber { get; set; }

        /// <summary>
        /// Gets or Sets TechnicianAssigned
        /// </summary>
        [DataMember(Name="TechnicianAssigned", EmitDefaultValue=false)]
        public int? TechnicianAssigned { get; set; }

        /// <summary>
        /// Gets or Sets TechnicianAssignedName
        /// </summary>
        [DataMember(Name="TechnicianAssignedName", EmitDefaultValue=false)]
        public string TechnicianAssignedName { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedTechsGroup
        /// </summary>
        [DataMember(Name="AssociatedTechsGroup", EmitDefaultValue=false)]
        public string AssociatedTechsGroup { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderType
        /// </summary>
        [DataMember(Name="ServiceOrderType", EmitDefaultValue=false)]
        public string ServiceOrderType { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedHours
        /// </summary>
        [DataMember(Name="EstimatedHours", EmitDefaultValue=false)]
        public int? EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedMinutes
        /// </summary>
        [DataMember(Name="EstimatedMinutes", EmitDefaultValue=false)]
        public int? EstimatedMinutes { get; set; }

        /// <summary>
        /// Gets or Sets WorkRequested
        /// </summary>
        [DataMember(Name="WorkRequested", EmitDefaultValue=false)]
        public string WorkRequested { get; set; }

        /// <summary>
        /// Gets or Sets WorkPerformed
        /// </summary>
        [DataMember(Name="WorkPerformed", EmitDefaultValue=false)]
        public string WorkPerformed { get; set; }

        /// <summary>
        /// Gets or Sets InternalComments
        /// </summary>
        [DataMember(Name="InternalComments", EmitDefaultValue=false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// Gets or Sets UseDefaultContract
        /// </summary>
        [DataMember(Name="UseDefaultContract", EmitDefaultValue=false)]
        public bool? UseDefaultContract { get; set; }

        /// <summary>
        /// Gets or Sets ContactProfile
        /// </summary>
        [DataMember(Name="ContactProfile", EmitDefaultValue=false)]
        public string ContactProfile { get; set; }

        /// <summary>
        /// Gets or Sets UseContractPriority
        /// </summary>
        [DataMember(Name="UseContractPriority", EmitDefaultValue=false)]
        public bool? UseContractPriority { get; set; }

        /// <summary>
        /// Gets or Sets TemplateTasks
        /// </summary>
        [DataMember(Name="TemplateTasks", EmitDefaultValue=false)]
        public List<TsiWebServiceOrderTemplateTask> TemplateTasks { get; set; }

        /// <summary>
        /// Gets or Sets TemplateParts
        /// </summary>
        [DataMember(Name="TemplateParts", EmitDefaultValue=false)]
        public List<TsiWebServiceOrderTemplatePart> TemplateParts { get; set; }

        /// <summary>
        /// Gets or Sets TemplateTimeLogs
        /// </summary>
        [DataMember(Name="TemplateTimeLogs", EmitDefaultValue=false)]
        public List<TsiWebServiceOrderTemplateTimeLog> TemplateTimeLogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderTemplate {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  BriefDescription: ").Append(BriefDescription).Append("\n");
            sb.Append("  DispatchBoardNumber: ").Append(DispatchBoardNumber).Append("\n");
            sb.Append("  TechnicianAssigned: ").Append(TechnicianAssigned).Append("\n");
            sb.Append("  TechnicianAssignedName: ").Append(TechnicianAssignedName).Append("\n");
            sb.Append("  AssociatedTechsGroup: ").Append(AssociatedTechsGroup).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ServiceOrderType: ").Append(ServiceOrderType).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  EstimatedMinutes: ").Append(EstimatedMinutes).Append("\n");
            sb.Append("  WorkRequested: ").Append(WorkRequested).Append("\n");
            sb.Append("  WorkPerformed: ").Append(WorkPerformed).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  UseDefaultContract: ").Append(UseDefaultContract).Append("\n");
            sb.Append("  ContactProfile: ").Append(ContactProfile).Append("\n");
            sb.Append("  UseContractPriority: ").Append(UseContractPriority).Append("\n");
            sb.Append("  TemplateTasks: ").Append(TemplateTasks).Append("\n");
            sb.Append("  TemplateParts: ").Append(TemplateParts).Append("\n");
            sb.Append("  TemplateTimeLogs: ").Append(TemplateTimeLogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderTemplate);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.BriefDescription == input.BriefDescription ||
                    (this.BriefDescription != null &&
                    this.BriefDescription.Equals(input.BriefDescription))
                ) && 
                (
                    this.DispatchBoardNumber == input.DispatchBoardNumber ||
                    (this.DispatchBoardNumber != null &&
                    this.DispatchBoardNumber.Equals(input.DispatchBoardNumber))
                ) && 
                (
                    this.TechnicianAssigned == input.TechnicianAssigned ||
                    (this.TechnicianAssigned != null &&
                    this.TechnicianAssigned.Equals(input.TechnicianAssigned))
                ) && 
                (
                    this.TechnicianAssignedName == input.TechnicianAssignedName ||
                    (this.TechnicianAssignedName != null &&
                    this.TechnicianAssignedName.Equals(input.TechnicianAssignedName))
                ) && 
                (
                    this.AssociatedTechsGroup == input.AssociatedTechsGroup ||
                    (this.AssociatedTechsGroup != null &&
                    this.AssociatedTechsGroup.Equals(input.AssociatedTechsGroup))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ServiceOrderType == input.ServiceOrderType ||
                    (this.ServiceOrderType != null &&
                    this.ServiceOrderType.Equals(input.ServiceOrderType))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.EstimatedMinutes == input.EstimatedMinutes ||
                    (this.EstimatedMinutes != null &&
                    this.EstimatedMinutes.Equals(input.EstimatedMinutes))
                ) && 
                (
                    this.WorkRequested == input.WorkRequested ||
                    (this.WorkRequested != null &&
                    this.WorkRequested.Equals(input.WorkRequested))
                ) && 
                (
                    this.WorkPerformed == input.WorkPerformed ||
                    (this.WorkPerformed != null &&
                    this.WorkPerformed.Equals(input.WorkPerformed))
                ) && 
                (
                    this.InternalComments == input.InternalComments ||
                    (this.InternalComments != null &&
                    this.InternalComments.Equals(input.InternalComments))
                ) && 
                (
                    this.UseDefaultContract == input.UseDefaultContract ||
                    (this.UseDefaultContract != null &&
                    this.UseDefaultContract.Equals(input.UseDefaultContract))
                ) && 
                (
                    this.ContactProfile == input.ContactProfile ||
                    (this.ContactProfile != null &&
                    this.ContactProfile.Equals(input.ContactProfile))
                ) && 
                (
                    this.UseContractPriority == input.UseContractPriority ||
                    (this.UseContractPriority != null &&
                    this.UseContractPriority.Equals(input.UseContractPriority))
                ) && 
                (
                    this.TemplateTasks == input.TemplateTasks ||
                    this.TemplateTasks != null &&
                    this.TemplateTasks.SequenceEqual(input.TemplateTasks)
                ) && 
                (
                    this.TemplateParts == input.TemplateParts ||
                    this.TemplateParts != null &&
                    this.TemplateParts.SequenceEqual(input.TemplateParts)
                ) && 
                (
                    this.TemplateTimeLogs == input.TemplateTimeLogs ||
                    this.TemplateTimeLogs != null &&
                    this.TemplateTimeLogs.SequenceEqual(input.TemplateTimeLogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.BriefDescription != null)
                    hashCode = hashCode * 59 + this.BriefDescription.GetHashCode();
                if (this.DispatchBoardNumber != null)
                    hashCode = hashCode * 59 + this.DispatchBoardNumber.GetHashCode();
                if (this.TechnicianAssigned != null)
                    hashCode = hashCode * 59 + this.TechnicianAssigned.GetHashCode();
                if (this.TechnicianAssignedName != null)
                    hashCode = hashCode * 59 + this.TechnicianAssignedName.GetHashCode();
                if (this.AssociatedTechsGroup != null)
                    hashCode = hashCode * 59 + this.AssociatedTechsGroup.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ServiceOrderType != null)
                    hashCode = hashCode * 59 + this.ServiceOrderType.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.EstimatedMinutes != null)
                    hashCode = hashCode * 59 + this.EstimatedMinutes.GetHashCode();
                if (this.WorkRequested != null)
                    hashCode = hashCode * 59 + this.WorkRequested.GetHashCode();
                if (this.WorkPerformed != null)
                    hashCode = hashCode * 59 + this.WorkPerformed.GetHashCode();
                if (this.InternalComments != null)
                    hashCode = hashCode * 59 + this.InternalComments.GetHashCode();
                if (this.UseDefaultContract != null)
                    hashCode = hashCode * 59 + this.UseDefaultContract.GetHashCode();
                if (this.ContactProfile != null)
                    hashCode = hashCode * 59 + this.ContactProfile.GetHashCode();
                if (this.UseContractPriority != null)
                    hashCode = hashCode * 59 + this.UseContractPriority.GetHashCode();
                if (this.TemplateTasks != null)
                    hashCode = hashCode * 59 + this.TemplateTasks.GetHashCode();
                if (this.TemplateParts != null)
                    hashCode = hashCode * 59 + this.TemplateParts.GetHashCode();
                if (this.TemplateTimeLogs != null)
                    hashCode = hashCode * 59 + this.TemplateTimeLogs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
