/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderTemplatePart
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderTemplatePart :  IEquatable<TsiWebServiceOrderTemplatePart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderTemplatePart" /> class.
        /// </summary>
        /// <param name="serviceOrderTemplatePartNumber">serviceOrderTemplatePartNumber.</param>
        /// <param name="sequenceNumber">sequenceNumber.</param>
        /// <param name="itemID">itemID.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="pricingMethod">pricingMethod.</param>
        /// <param name="fixedPrice">fixedPrice.</param>
        /// <param name="priceLevel">priceLevel.</param>
        /// <param name="priceLevelDescription">priceLevelDescription.</param>
        /// <param name="type">type.</param>
        /// <param name="assemblyType">assemblyType.</param>
        /// <param name="commentOnly">commentOnly.</param>
        /// <param name="itemNotes">itemNotes.</param>
        /// <param name="printOnInvoice">printOnInvoice.</param>
        /// <param name="serviceOrderTemplatePartAssemblyDetails">serviceOrderTemplatePartAssemblyDetails.</param>
        public TsiWebServiceOrderTemplatePart(int? serviceOrderTemplatePartNumber = default(int?), int? sequenceNumber = default(int?), string itemID = default(string), string itemDescription = default(string), double? quantity = default(double?), string pricingMethod = default(string), double? fixedPrice = default(double?), int? priceLevel = default(int?), string priceLevelDescription = default(string), string type = default(string), string assemblyType = default(string), bool? commentOnly = default(bool?), string itemNotes = default(string), bool? printOnInvoice = default(bool?), List<TsiWebServiceOrderTemplatePartAssemblyDetail> serviceOrderTemplatePartAssemblyDetails = default(List<TsiWebServiceOrderTemplatePartAssemblyDetail>))
        {
            this.ServiceOrderTemplatePartNumber = serviceOrderTemplatePartNumber;
            this.SequenceNumber = sequenceNumber;
            this.ItemID = itemID;
            this.ItemDescription = itemDescription;
            this.Quantity = quantity;
            this.PricingMethod = pricingMethod;
            this.FixedPrice = fixedPrice;
            this.PriceLevel = priceLevel;
            this.PriceLevelDescription = priceLevelDescription;
            this.Type = type;
            this.AssemblyType = assemblyType;
            this.CommentOnly = commentOnly;
            this.ItemNotes = itemNotes;
            this.PrintOnInvoice = printOnInvoice;
            this.ServiceOrderTemplatePartAssemblyDetails = serviceOrderTemplatePartAssemblyDetails;
        }
        
        /// <summary>
        /// Gets or Sets ServiceOrderTemplatePartNumber
        /// </summary>
        [DataMember(Name="ServiceOrderTemplatePartNumber", EmitDefaultValue=false)]
        public int? ServiceOrderTemplatePartNumber { get; set; }

        /// <summary>
        /// Gets or Sets SequenceNumber
        /// </summary>
        [DataMember(Name="SequenceNumber", EmitDefaultValue=false)]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets PricingMethod
        /// </summary>
        [DataMember(Name="PricingMethod", EmitDefaultValue=false)]
        public string PricingMethod { get; set; }

        /// <summary>
        /// Gets or Sets FixedPrice
        /// </summary>
        [DataMember(Name="FixedPrice", EmitDefaultValue=false)]
        public double? FixedPrice { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevel
        /// </summary>
        [DataMember(Name="PriceLevel", EmitDefaultValue=false)]
        public int? PriceLevel { get; set; }

        /// <summary>
        /// Gets or Sets PriceLevelDescription
        /// </summary>
        [DataMember(Name="PriceLevelDescription", EmitDefaultValue=false)]
        public string PriceLevelDescription { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyType
        /// </summary>
        [DataMember(Name="AssemblyType", EmitDefaultValue=false)]
        public string AssemblyType { get; set; }

        /// <summary>
        /// Gets or Sets CommentOnly
        /// </summary>
        [DataMember(Name="CommentOnly", EmitDefaultValue=false)]
        public bool? CommentOnly { get; set; }

        /// <summary>
        /// Gets or Sets ItemNotes
        /// </summary>
        [DataMember(Name="ItemNotes", EmitDefaultValue=false)]
        public string ItemNotes { get; set; }

        /// <summary>
        /// Gets or Sets PrintOnInvoice
        /// </summary>
        [DataMember(Name="PrintOnInvoice", EmitDefaultValue=false)]
        public bool? PrintOnInvoice { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderTemplatePartAssemblyDetails
        /// </summary>
        [DataMember(Name="ServiceOrderTemplatePartAssemblyDetails", EmitDefaultValue=false)]
        public List<TsiWebServiceOrderTemplatePartAssemblyDetail> ServiceOrderTemplatePartAssemblyDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderTemplatePart {\n");
            sb.Append("  ServiceOrderTemplatePartNumber: ").Append(ServiceOrderTemplatePartNumber).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  PricingMethod: ").Append(PricingMethod).Append("\n");
            sb.Append("  FixedPrice: ").Append(FixedPrice).Append("\n");
            sb.Append("  PriceLevel: ").Append(PriceLevel).Append("\n");
            sb.Append("  PriceLevelDescription: ").Append(PriceLevelDescription).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssemblyType: ").Append(AssemblyType).Append("\n");
            sb.Append("  CommentOnly: ").Append(CommentOnly).Append("\n");
            sb.Append("  ItemNotes: ").Append(ItemNotes).Append("\n");
            sb.Append("  PrintOnInvoice: ").Append(PrintOnInvoice).Append("\n");
            sb.Append("  ServiceOrderTemplatePartAssemblyDetails: ").Append(ServiceOrderTemplatePartAssemblyDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderTemplatePart);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderTemplatePart instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderTemplatePart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderTemplatePart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceOrderTemplatePartNumber == input.ServiceOrderTemplatePartNumber ||
                    (this.ServiceOrderTemplatePartNumber != null &&
                    this.ServiceOrderTemplatePartNumber.Equals(input.ServiceOrderTemplatePartNumber))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.PricingMethod == input.PricingMethod ||
                    (this.PricingMethod != null &&
                    this.PricingMethod.Equals(input.PricingMethod))
                ) && 
                (
                    this.FixedPrice == input.FixedPrice ||
                    (this.FixedPrice != null &&
                    this.FixedPrice.Equals(input.FixedPrice))
                ) && 
                (
                    this.PriceLevel == input.PriceLevel ||
                    (this.PriceLevel != null &&
                    this.PriceLevel.Equals(input.PriceLevel))
                ) && 
                (
                    this.PriceLevelDescription == input.PriceLevelDescription ||
                    (this.PriceLevelDescription != null &&
                    this.PriceLevelDescription.Equals(input.PriceLevelDescription))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AssemblyType == input.AssemblyType ||
                    (this.AssemblyType != null &&
                    this.AssemblyType.Equals(input.AssemblyType))
                ) && 
                (
                    this.CommentOnly == input.CommentOnly ||
                    (this.CommentOnly != null &&
                    this.CommentOnly.Equals(input.CommentOnly))
                ) && 
                (
                    this.ItemNotes == input.ItemNotes ||
                    (this.ItemNotes != null &&
                    this.ItemNotes.Equals(input.ItemNotes))
                ) && 
                (
                    this.PrintOnInvoice == input.PrintOnInvoice ||
                    (this.PrintOnInvoice != null &&
                    this.PrintOnInvoice.Equals(input.PrintOnInvoice))
                ) && 
                (
                    this.ServiceOrderTemplatePartAssemblyDetails == input.ServiceOrderTemplatePartAssemblyDetails ||
                    this.ServiceOrderTemplatePartAssemblyDetails != null &&
                    this.ServiceOrderTemplatePartAssemblyDetails.SequenceEqual(input.ServiceOrderTemplatePartAssemblyDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceOrderTemplatePartNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderTemplatePartNumber.GetHashCode();
                if (this.SequenceNumber != null)
                    hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.PricingMethod != null)
                    hashCode = hashCode * 59 + this.PricingMethod.GetHashCode();
                if (this.FixedPrice != null)
                    hashCode = hashCode * 59 + this.FixedPrice.GetHashCode();
                if (this.PriceLevel != null)
                    hashCode = hashCode * 59 + this.PriceLevel.GetHashCode();
                if (this.PriceLevelDescription != null)
                    hashCode = hashCode * 59 + this.PriceLevelDescription.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AssemblyType != null)
                    hashCode = hashCode * 59 + this.AssemblyType.GetHashCode();
                if (this.CommentOnly != null)
                    hashCode = hashCode * 59 + this.CommentOnly.GetHashCode();
                if (this.ItemNotes != null)
                    hashCode = hashCode * 59 + this.ItemNotes.GetHashCode();
                if (this.PrintOnInvoice != null)
                    hashCode = hashCode * 59 + this.PrintOnInvoice.GetHashCode();
                if (this.ServiceOrderTemplatePartAssemblyDetails != null)
                    hashCode = hashCode * 59 + this.ServiceOrderTemplatePartAssemblyDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
