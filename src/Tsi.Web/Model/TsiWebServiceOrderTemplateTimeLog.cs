/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebServiceOrderTemplateTimeLog
    /// </summary>
    [DataContract]
    public partial class TsiWebServiceOrderTemplateTimeLog :  IEquatable<TsiWebServiceOrderTemplateTimeLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebServiceOrderTemplateTimeLog" /> class.
        /// </summary>
        /// <param name="serviceOrderTemplateTimeLogNumber">serviceOrderTemplateTimeLogNumber.</param>
        /// <param name="repType">repType.</param>
        /// <param name="repTypeDescription">repTypeDescription.</param>
        /// <param name="repNumber">repNumber.</param>
        /// <param name="repName">repName.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="offSetInterval">offSetInterval.</param>
        /// <param name="offSetIntervalDescription">offSetIntervalDescription.</param>
        /// <param name="offSetTime">offSetTime.</param>
        /// <param name="logHours">logHours.</param>
        /// <param name="logMinutes">logMinutes.</param>
        /// <param name="comments">comments.</param>
        /// <param name="logReason">logReason.</param>
        public TsiWebServiceOrderTemplateTimeLog(int? serviceOrderTemplateTimeLogNumber = default(int?), int? repType = default(int?), string repTypeDescription = default(string), int? repNumber = default(int?), string repName = default(string), DateTime? startTime = default(DateTime?), int? offSetInterval = default(int?), string offSetIntervalDescription = default(string), int? offSetTime = default(int?), int? logHours = default(int?), int? logMinutes = default(int?), string comments = default(string), string logReason = default(string))
        {
            this.ServiceOrderTemplateTimeLogNumber = serviceOrderTemplateTimeLogNumber;
            this.RepType = repType;
            this.RepTypeDescription = repTypeDescription;
            this.RepNumber = repNumber;
            this.RepName = repName;
            this.StartTime = startTime;
            this.OffSetInterval = offSetInterval;
            this.OffSetIntervalDescription = offSetIntervalDescription;
            this.OffSetTime = offSetTime;
            this.LogHours = logHours;
            this.LogMinutes = logMinutes;
            this.Comments = comments;
            this.LogReason = logReason;
        }
        
        /// <summary>
        /// Gets or Sets ServiceOrderTemplateTimeLogNumber
        /// </summary>
        [DataMember(Name="ServiceOrderTemplateTimeLogNumber", EmitDefaultValue=false)]
        public int? ServiceOrderTemplateTimeLogNumber { get; set; }

        /// <summary>
        /// Gets or Sets RepType
        /// </summary>
        [DataMember(Name="RepType", EmitDefaultValue=false)]
        public int? RepType { get; set; }

        /// <summary>
        /// Gets or Sets RepTypeDescription
        /// </summary>
        [DataMember(Name="RepTypeDescription", EmitDefaultValue=false)]
        public string RepTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets RepNumber
        /// </summary>
        [DataMember(Name="RepNumber", EmitDefaultValue=false)]
        public int? RepNumber { get; set; }

        /// <summary>
        /// Gets or Sets RepName
        /// </summary>
        [DataMember(Name="RepName", EmitDefaultValue=false)]
        public string RepName { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="StartTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets OffSetInterval
        /// </summary>
        [DataMember(Name="OffSetInterval", EmitDefaultValue=false)]
        public int? OffSetInterval { get; set; }

        /// <summary>
        /// Gets or Sets OffSetIntervalDescription
        /// </summary>
        [DataMember(Name="OffSetIntervalDescription", EmitDefaultValue=false)]
        public string OffSetIntervalDescription { get; set; }

        /// <summary>
        /// Gets or Sets OffSetTime
        /// </summary>
        [DataMember(Name="OffSetTime", EmitDefaultValue=false)]
        public int? OffSetTime { get; set; }

        /// <summary>
        /// Gets or Sets LogHours
        /// </summary>
        [DataMember(Name="LogHours", EmitDefaultValue=false)]
        public int? LogHours { get; set; }

        /// <summary>
        /// Gets or Sets LogMinutes
        /// </summary>
        [DataMember(Name="LogMinutes", EmitDefaultValue=false)]
        public int? LogMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets LogReason
        /// </summary>
        [DataMember(Name="LogReason", EmitDefaultValue=false)]
        public string LogReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebServiceOrderTemplateTimeLog {\n");
            sb.Append("  ServiceOrderTemplateTimeLogNumber: ").Append(ServiceOrderTemplateTimeLogNumber).Append("\n");
            sb.Append("  RepType: ").Append(RepType).Append("\n");
            sb.Append("  RepTypeDescription: ").Append(RepTypeDescription).Append("\n");
            sb.Append("  RepNumber: ").Append(RepNumber).Append("\n");
            sb.Append("  RepName: ").Append(RepName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  OffSetInterval: ").Append(OffSetInterval).Append("\n");
            sb.Append("  OffSetIntervalDescription: ").Append(OffSetIntervalDescription).Append("\n");
            sb.Append("  OffSetTime: ").Append(OffSetTime).Append("\n");
            sb.Append("  LogHours: ").Append(LogHours).Append("\n");
            sb.Append("  LogMinutes: ").Append(LogMinutes).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  LogReason: ").Append(LogReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebServiceOrderTemplateTimeLog);
        }

        /// <summary>
        /// Returns true if TsiWebServiceOrderTemplateTimeLog instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebServiceOrderTemplateTimeLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebServiceOrderTemplateTimeLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceOrderTemplateTimeLogNumber == input.ServiceOrderTemplateTimeLogNumber ||
                    (this.ServiceOrderTemplateTimeLogNumber != null &&
                    this.ServiceOrderTemplateTimeLogNumber.Equals(input.ServiceOrderTemplateTimeLogNumber))
                ) && 
                (
                    this.RepType == input.RepType ||
                    (this.RepType != null &&
                    this.RepType.Equals(input.RepType))
                ) && 
                (
                    this.RepTypeDescription == input.RepTypeDescription ||
                    (this.RepTypeDescription != null &&
                    this.RepTypeDescription.Equals(input.RepTypeDescription))
                ) && 
                (
                    this.RepNumber == input.RepNumber ||
                    (this.RepNumber != null &&
                    this.RepNumber.Equals(input.RepNumber))
                ) && 
                (
                    this.RepName == input.RepName ||
                    (this.RepName != null &&
                    this.RepName.Equals(input.RepName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.OffSetInterval == input.OffSetInterval ||
                    (this.OffSetInterval != null &&
                    this.OffSetInterval.Equals(input.OffSetInterval))
                ) && 
                (
                    this.OffSetIntervalDescription == input.OffSetIntervalDescription ||
                    (this.OffSetIntervalDescription != null &&
                    this.OffSetIntervalDescription.Equals(input.OffSetIntervalDescription))
                ) && 
                (
                    this.OffSetTime == input.OffSetTime ||
                    (this.OffSetTime != null &&
                    this.OffSetTime.Equals(input.OffSetTime))
                ) && 
                (
                    this.LogHours == input.LogHours ||
                    (this.LogHours != null &&
                    this.LogHours.Equals(input.LogHours))
                ) && 
                (
                    this.LogMinutes == input.LogMinutes ||
                    (this.LogMinutes != null &&
                    this.LogMinutes.Equals(input.LogMinutes))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.LogReason == input.LogReason ||
                    (this.LogReason != null &&
                    this.LogReason.Equals(input.LogReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceOrderTemplateTimeLogNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderTemplateTimeLogNumber.GetHashCode();
                if (this.RepType != null)
                    hashCode = hashCode * 59 + this.RepType.GetHashCode();
                if (this.RepTypeDescription != null)
                    hashCode = hashCode * 59 + this.RepTypeDescription.GetHashCode();
                if (this.RepNumber != null)
                    hashCode = hashCode * 59 + this.RepNumber.GetHashCode();
                if (this.RepName != null)
                    hashCode = hashCode * 59 + this.RepName.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.OffSetInterval != null)
                    hashCode = hashCode * 59 + this.OffSetInterval.GetHashCode();
                if (this.OffSetIntervalDescription != null)
                    hashCode = hashCode * 59 + this.OffSetIntervalDescription.GetHashCode();
                if (this.OffSetTime != null)
                    hashCode = hashCode * 59 + this.OffSetTime.GetHashCode();
                if (this.LogHours != null)
                    hashCode = hashCode * 59 + this.LogHours.GetHashCode();
                if (this.LogMinutes != null)
                    hashCode = hashCode * 59 + this.LogMinutes.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.LogReason != null)
                    hashCode = hashCode * 59 + this.LogReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
