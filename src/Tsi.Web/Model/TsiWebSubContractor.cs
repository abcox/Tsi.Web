/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebSubContractor
    /// </summary>
    [DataContract]
    public partial class TsiWebSubContractor :  IEquatable<TsiWebSubContractor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebSubContractor" /> class.
        /// </summary>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="name">name.</param>
        /// <param name="address1">address1.</param>
        /// <param name="address2">address2.</param>
        /// <param name="city">city.</param>
        /// <param name="state">state.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="country">country.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="primaryContactName">primaryContactName.</param>
        /// <param name="primaryContactEmailAddress">primaryContactEmailAddress.</param>
        /// <param name="primaryContactPhoneNumber">primaryContactPhoneNumber.</param>
        /// <param name="status">status.</param>
        public TsiWebSubContractor(int? accountNumber = default(int?), string name = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string), string phoneNumber = default(string), string primaryContactName = default(string), string primaryContactEmailAddress = default(string), string primaryContactPhoneNumber = default(string), string status = default(string))
        {
            this.AccountNumber = accountNumber;
            this.Name = name;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.Country = country;
            this.PhoneNumber = phoneNumber;
            this.PrimaryContactName = primaryContactName;
            this.PrimaryContactEmailAddress = primaryContactEmailAddress;
            this.PrimaryContactPhoneNumber = primaryContactPhoneNumber;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryContactName
        /// </summary>
        [DataMember(Name="PrimaryContactName", EmitDefaultValue=false)]
        public string PrimaryContactName { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryContactEmailAddress
        /// </summary>
        [DataMember(Name="PrimaryContactEmailAddress", EmitDefaultValue=false)]
        public string PrimaryContactEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryContactPhoneNumber
        /// </summary>
        [DataMember(Name="PrimaryContactPhoneNumber", EmitDefaultValue=false)]
        public string PrimaryContactPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebSubContractor {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PrimaryContactName: ").Append(PrimaryContactName).Append("\n");
            sb.Append("  PrimaryContactEmailAddress: ").Append(PrimaryContactEmailAddress).Append("\n");
            sb.Append("  PrimaryContactPhoneNumber: ").Append(PrimaryContactPhoneNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebSubContractor);
        }

        /// <summary>
        /// Returns true if TsiWebSubContractor instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebSubContractor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebSubContractor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PrimaryContactName == input.PrimaryContactName ||
                    (this.PrimaryContactName != null &&
                    this.PrimaryContactName.Equals(input.PrimaryContactName))
                ) && 
                (
                    this.PrimaryContactEmailAddress == input.PrimaryContactEmailAddress ||
                    (this.PrimaryContactEmailAddress != null &&
                    this.PrimaryContactEmailAddress.Equals(input.PrimaryContactEmailAddress))
                ) && 
                (
                    this.PrimaryContactPhoneNumber == input.PrimaryContactPhoneNumber ||
                    (this.PrimaryContactPhoneNumber != null &&
                    this.PrimaryContactPhoneNumber.Equals(input.PrimaryContactPhoneNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.PrimaryContactName != null)
                    hashCode = hashCode * 59 + this.PrimaryContactName.GetHashCode();
                if (this.PrimaryContactEmailAddress != null)
                    hashCode = hashCode * 59 + this.PrimaryContactEmailAddress.GetHashCode();
                if (this.PrimaryContactPhoneNumber != null)
                    hashCode = hashCode * 59 + this.PrimaryContactPhoneNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
