/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebTimeEntryReason
    /// </summary>
    [DataContract]
    public partial class TsiWebTimeEntryReason :  IEquatable<TsiWebTimeEntryReason>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebTimeEntryReason" /> class.
        /// </summary>
        /// <param name="logReason">logReason.</param>
        /// <param name="chargable">chargable.</param>
        /// <param name="standardRate">standardRate.</param>
        /// <param name="itemID">itemID.</param>
        /// <param name="logType">logType.</param>
        /// <param name="unitFactor">unitFactor.</param>
        /// <param name="billable">billable.</param>
        /// <param name="laborItemID">laborItemID.</param>
        /// <param name="billingUnit">billingUnit.</param>
        /// <param name="iVRID">iVRID.</param>
        /// <param name="roundingToNearestMinutes">roundingToNearestMinutes.</param>
        /// <param name="minimumMinutes">minimumMinutes.</param>
        /// <param name="laborRateCategoryNumber">laborRateCategoryNumber.</param>
        /// <param name="laborRateCategoryDescription">laborRateCategoryDescription.</param>
        /// <param name="overtimeIndicator">overtimeIndicator.</param>
        /// <param name="premiumTimeIndicator">premiumTimeIndicator.</param>
        /// <param name="doNotCopyToWorkPerformed">doNotCopyToWorkPerformed.</param>
        /// <param name="rGBColor">rGBColor.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        /// <param name="appliesTo">appliesTo.</param>
        public TsiWebTimeEntryReason(string logReason = default(string), bool? chargable = default(bool?), double? standardRate = default(double?), string itemID = default(string), string logType = default(string), double? unitFactor = default(double?), bool? billable = default(bool?), string laborItemID = default(string), string billingUnit = default(string), int? iVRID = default(int?), int? roundingToNearestMinutes = default(int?), int? minimumMinutes = default(int?), int? laborRateCategoryNumber = default(int?), string laborRateCategoryDescription = default(string), bool? overtimeIndicator = default(bool?), bool? premiumTimeIndicator = default(bool?), bool? doNotCopyToWorkPerformed = default(bool?), int? rGBColor = default(int?), bool? creditUtilizationTime = default(bool?), string appliesTo = default(string))
        {
            this.LogReason = logReason;
            this.Chargable = chargable;
            this.StandardRate = standardRate;
            this.ItemID = itemID;
            this.LogType = logType;
            this.UnitFactor = unitFactor;
            this.Billable = billable;
            this.LaborItemID = laborItemID;
            this.BillingUnit = billingUnit;
            this.IVRID = iVRID;
            this.RoundingToNearestMinutes = roundingToNearestMinutes;
            this.MinimumMinutes = minimumMinutes;
            this.LaborRateCategoryNumber = laborRateCategoryNumber;
            this.LaborRateCategoryDescription = laborRateCategoryDescription;
            this.OvertimeIndicator = overtimeIndicator;
            this.PremiumTimeIndicator = premiumTimeIndicator;
            this.DoNotCopyToWorkPerformed = doNotCopyToWorkPerformed;
            this.RGBColor = rGBColor;
            this.CreditUtilizationTime = creditUtilizationTime;
            this.AppliesTo = appliesTo;
        }
        
        /// <summary>
        /// Gets or Sets LogReason
        /// </summary>
        [DataMember(Name="LogReason", EmitDefaultValue=false)]
        public string LogReason { get; set; }

        /// <summary>
        /// Gets or Sets Chargable
        /// </summary>
        [DataMember(Name="Chargable", EmitDefaultValue=false)]
        public bool? Chargable { get; set; }

        /// <summary>
        /// Gets or Sets StandardRate
        /// </summary>
        [DataMember(Name="StandardRate", EmitDefaultValue=false)]
        public double? StandardRate { get; set; }

        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets LogType
        /// </summary>
        [DataMember(Name="LogType", EmitDefaultValue=false)]
        public string LogType { get; set; }

        /// <summary>
        /// Gets or Sets UnitFactor
        /// </summary>
        [DataMember(Name="UnitFactor", EmitDefaultValue=false)]
        public double? UnitFactor { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets LaborItemID
        /// </summary>
        [DataMember(Name="LaborItemID", EmitDefaultValue=false)]
        public string LaborItemID { get; set; }

        /// <summary>
        /// Gets or Sets BillingUnit
        /// </summary>
        [DataMember(Name="BillingUnit", EmitDefaultValue=false)]
        public string BillingUnit { get; set; }

        /// <summary>
        /// Gets or Sets IVRID
        /// </summary>
        [DataMember(Name="IVRID", EmitDefaultValue=false)]
        public int? IVRID { get; set; }

        /// <summary>
        /// Gets or Sets RoundingToNearestMinutes
        /// </summary>
        [DataMember(Name="RoundingToNearestMinutes", EmitDefaultValue=false)]
        public int? RoundingToNearestMinutes { get; set; }

        /// <summary>
        /// Gets or Sets MinimumMinutes
        /// </summary>
        [DataMember(Name="MinimumMinutes", EmitDefaultValue=false)]
        public int? MinimumMinutes { get; set; }

        /// <summary>
        /// Gets or Sets LaborRateCategoryNumber
        /// </summary>
        [DataMember(Name="LaborRateCategoryNumber", EmitDefaultValue=false)]
        public int? LaborRateCategoryNumber { get; set; }

        /// <summary>
        /// Gets or Sets LaborRateCategoryDescription
        /// </summary>
        [DataMember(Name="LaborRateCategoryDescription", EmitDefaultValue=false)]
        public string LaborRateCategoryDescription { get; set; }

        /// <summary>
        /// Gets or Sets OvertimeIndicator
        /// </summary>
        [DataMember(Name="OvertimeIndicator", EmitDefaultValue=false)]
        public bool? OvertimeIndicator { get; set; }

        /// <summary>
        /// Gets or Sets PremiumTimeIndicator
        /// </summary>
        [DataMember(Name="PremiumTimeIndicator", EmitDefaultValue=false)]
        public bool? PremiumTimeIndicator { get; set; }

        /// <summary>
        /// Gets or Sets DoNotCopyToWorkPerformed
        /// </summary>
        [DataMember(Name="DoNotCopyToWorkPerformed", EmitDefaultValue=false)]
        public bool? DoNotCopyToWorkPerformed { get; set; }

        /// <summary>
        /// Gets or Sets RGBColor
        /// </summary>
        [DataMember(Name="RGBColor", EmitDefaultValue=false)]
        public int? RGBColor { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Gets or Sets AppliesTo
        /// </summary>
        [DataMember(Name="AppliesTo", EmitDefaultValue=false)]
        public string AppliesTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebTimeEntryReason {\n");
            sb.Append("  LogReason: ").Append(LogReason).Append("\n");
            sb.Append("  Chargable: ").Append(Chargable).Append("\n");
            sb.Append("  StandardRate: ").Append(StandardRate).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  UnitFactor: ").Append(UnitFactor).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  LaborItemID: ").Append(LaborItemID).Append("\n");
            sb.Append("  BillingUnit: ").Append(BillingUnit).Append("\n");
            sb.Append("  IVRID: ").Append(IVRID).Append("\n");
            sb.Append("  RoundingToNearestMinutes: ").Append(RoundingToNearestMinutes).Append("\n");
            sb.Append("  MinimumMinutes: ").Append(MinimumMinutes).Append("\n");
            sb.Append("  LaborRateCategoryNumber: ").Append(LaborRateCategoryNumber).Append("\n");
            sb.Append("  LaborRateCategoryDescription: ").Append(LaborRateCategoryDescription).Append("\n");
            sb.Append("  OvertimeIndicator: ").Append(OvertimeIndicator).Append("\n");
            sb.Append("  PremiumTimeIndicator: ").Append(PremiumTimeIndicator).Append("\n");
            sb.Append("  DoNotCopyToWorkPerformed: ").Append(DoNotCopyToWorkPerformed).Append("\n");
            sb.Append("  RGBColor: ").Append(RGBColor).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("  AppliesTo: ").Append(AppliesTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebTimeEntryReason);
        }

        /// <summary>
        /// Returns true if TsiWebTimeEntryReason instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebTimeEntryReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebTimeEntryReason input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogReason == input.LogReason ||
                    (this.LogReason != null &&
                    this.LogReason.Equals(input.LogReason))
                ) && 
                (
                    this.Chargable == input.Chargable ||
                    (this.Chargable != null &&
                    this.Chargable.Equals(input.Chargable))
                ) && 
                (
                    this.StandardRate == input.StandardRate ||
                    (this.StandardRate != null &&
                    this.StandardRate.Equals(input.StandardRate))
                ) && 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.LogType == input.LogType ||
                    (this.LogType != null &&
                    this.LogType.Equals(input.LogType))
                ) && 
                (
                    this.UnitFactor == input.UnitFactor ||
                    (this.UnitFactor != null &&
                    this.UnitFactor.Equals(input.UnitFactor))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.LaborItemID == input.LaborItemID ||
                    (this.LaborItemID != null &&
                    this.LaborItemID.Equals(input.LaborItemID))
                ) && 
                (
                    this.BillingUnit == input.BillingUnit ||
                    (this.BillingUnit != null &&
                    this.BillingUnit.Equals(input.BillingUnit))
                ) && 
                (
                    this.IVRID == input.IVRID ||
                    (this.IVRID != null &&
                    this.IVRID.Equals(input.IVRID))
                ) && 
                (
                    this.RoundingToNearestMinutes == input.RoundingToNearestMinutes ||
                    (this.RoundingToNearestMinutes != null &&
                    this.RoundingToNearestMinutes.Equals(input.RoundingToNearestMinutes))
                ) && 
                (
                    this.MinimumMinutes == input.MinimumMinutes ||
                    (this.MinimumMinutes != null &&
                    this.MinimumMinutes.Equals(input.MinimumMinutes))
                ) && 
                (
                    this.LaborRateCategoryNumber == input.LaborRateCategoryNumber ||
                    (this.LaborRateCategoryNumber != null &&
                    this.LaborRateCategoryNumber.Equals(input.LaborRateCategoryNumber))
                ) && 
                (
                    this.LaborRateCategoryDescription == input.LaborRateCategoryDescription ||
                    (this.LaborRateCategoryDescription != null &&
                    this.LaborRateCategoryDescription.Equals(input.LaborRateCategoryDescription))
                ) && 
                (
                    this.OvertimeIndicator == input.OvertimeIndicator ||
                    (this.OvertimeIndicator != null &&
                    this.OvertimeIndicator.Equals(input.OvertimeIndicator))
                ) && 
                (
                    this.PremiumTimeIndicator == input.PremiumTimeIndicator ||
                    (this.PremiumTimeIndicator != null &&
                    this.PremiumTimeIndicator.Equals(input.PremiumTimeIndicator))
                ) && 
                (
                    this.DoNotCopyToWorkPerformed == input.DoNotCopyToWorkPerformed ||
                    (this.DoNotCopyToWorkPerformed != null &&
                    this.DoNotCopyToWorkPerformed.Equals(input.DoNotCopyToWorkPerformed))
                ) && 
                (
                    this.RGBColor == input.RGBColor ||
                    (this.RGBColor != null &&
                    this.RGBColor.Equals(input.RGBColor))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                ) && 
                (
                    this.AppliesTo == input.AppliesTo ||
                    (this.AppliesTo != null &&
                    this.AppliesTo.Equals(input.AppliesTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogReason != null)
                    hashCode = hashCode * 59 + this.LogReason.GetHashCode();
                if (this.Chargable != null)
                    hashCode = hashCode * 59 + this.Chargable.GetHashCode();
                if (this.StandardRate != null)
                    hashCode = hashCode * 59 + this.StandardRate.GetHashCode();
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.LogType != null)
                    hashCode = hashCode * 59 + this.LogType.GetHashCode();
                if (this.UnitFactor != null)
                    hashCode = hashCode * 59 + this.UnitFactor.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.LaborItemID != null)
                    hashCode = hashCode * 59 + this.LaborItemID.GetHashCode();
                if (this.BillingUnit != null)
                    hashCode = hashCode * 59 + this.BillingUnit.GetHashCode();
                if (this.IVRID != null)
                    hashCode = hashCode * 59 + this.IVRID.GetHashCode();
                if (this.RoundingToNearestMinutes != null)
                    hashCode = hashCode * 59 + this.RoundingToNearestMinutes.GetHashCode();
                if (this.MinimumMinutes != null)
                    hashCode = hashCode * 59 + this.MinimumMinutes.GetHashCode();
                if (this.LaborRateCategoryNumber != null)
                    hashCode = hashCode * 59 + this.LaborRateCategoryNumber.GetHashCode();
                if (this.LaborRateCategoryDescription != null)
                    hashCode = hashCode * 59 + this.LaborRateCategoryDescription.GetHashCode();
                if (this.OvertimeIndicator != null)
                    hashCode = hashCode * 59 + this.OvertimeIndicator.GetHashCode();
                if (this.PremiumTimeIndicator != null)
                    hashCode = hashCode * 59 + this.PremiumTimeIndicator.GetHashCode();
                if (this.DoNotCopyToWorkPerformed != null)
                    hashCode = hashCode * 59 + this.DoNotCopyToWorkPerformed.GetHashCode();
                if (this.RGBColor != null)
                    hashCode = hashCode * 59 + this.RGBColor.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                if (this.AppliesTo != null)
                    hashCode = hashCode * 59 + this.AppliesTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
