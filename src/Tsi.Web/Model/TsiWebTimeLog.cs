/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebTimeLog
    /// </summary>
    [DataContract]
    public partial class TsiWebTimeLog :  IEquatable<TsiWebTimeLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebTimeLog" /> class.
        /// </summary>
        /// <param name="serviceOrderNumber">serviceOrderNumber.</param>
        /// <param name="timeLogNumber">timeLogNumber.</param>
        /// <param name="tech">tech.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="logHours">logHours.</param>
        /// <param name="logMinutes">logMinutes.</param>
        /// <param name="elapsedHours">elapsedHours.</param>
        /// <param name="elapsedMinutes">elapsedMinutes.</param>
        /// <param name="usageInvoiceNumber">usageInvoiceNumber.</param>
        /// <param name="rateType">rateType.</param>
        /// <param name="rateBasis">rateBasis.</param>
        /// <param name="copyCommentsIndicator">copyCommentsIndicator.</param>
        /// <param name="reviewedBy">reviewedBy.</param>
        /// <param name="deductHours">deductHours.</param>
        /// <param name="utilizationHours">utilizationHours.</param>
        /// <param name="internalComments">internalComments.</param>
        /// <param name="rejectedStatusReason">rejectedStatusReason.</param>
        /// <param name="comment">comment.</param>
        /// <param name="reason">reason.</param>
        /// <param name="reviewedByName">reviewedByName.</param>
        /// <param name="techName">techName.</param>
        /// <param name="chargable">chargable.</param>
        /// <param name="billable">billable.</param>
        /// <param name="applyMinimum">applyMinimum.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        /// <param name="billForUtilizedTime">billForUtilizedTime.</param>
        /// <param name="acceptanceStatus">acceptanceStatus.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="totalUnits">totalUnits.</param>
        /// <param name="timeConvertedToLaborItem">timeConvertedToLaborItem.</param>
        /// <param name="logReasonLaborRate">logReasonLaborRate.</param>
        /// <param name="laborRate">laborRate.</param>
        /// <param name="unitFactor">unitFactor.</param>
        /// <param name="deductMinutes">deductMinutes.</param>
        /// <param name="utilizationMinutes">utilizationMinutes.</param>
        /// <param name="timeToInvoice">timeToInvoice.</param>
        public TsiWebTimeLog(int? serviceOrderNumber = default(int?), int? timeLogNumber = default(int?), int? tech = default(int?), int? contractNumber = default(int?), int? logHours = default(int?), int? logMinutes = default(int?), int? elapsedHours = default(int?), int? elapsedMinutes = default(int?), int? usageInvoiceNumber = default(int?), string rateType = default(string), string rateBasis = default(string), int? copyCommentsIndicator = default(int?), int? reviewedBy = default(int?), int? deductHours = default(int?), int? utilizationHours = default(int?), string internalComments = default(string), string rejectedStatusReason = default(string), string comment = default(string), string reason = default(string), string reviewedByName = default(string), string techName = default(string), bool? chargable = default(bool?), bool? billable = default(bool?), bool? applyMinimum = default(bool?), bool? creditUtilizationTime = default(bool?), bool? billForUtilizedTime = default(bool?), string acceptanceStatus = default(string), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), DateTime? dateCreated = default(DateTime?), double? totalUnits = default(double?), double? timeConvertedToLaborItem = default(double?), double? logReasonLaborRate = default(double?), double? laborRate = default(double?), double? unitFactor = default(double?), int? deductMinutes = default(int?), int? utilizationMinutes = default(int?), int? timeToInvoice = default(int?))
        {
            this.ServiceOrderNumber = serviceOrderNumber;
            this.TimeLogNumber = timeLogNumber;
            this.Tech = tech;
            this.ContractNumber = contractNumber;
            this.LogHours = logHours;
            this.LogMinutes = logMinutes;
            this.ElapsedHours = elapsedHours;
            this.ElapsedMinutes = elapsedMinutes;
            this.UsageInvoiceNumber = usageInvoiceNumber;
            this.RateType = rateType;
            this.RateBasis = rateBasis;
            this.CopyCommentsIndicator = copyCommentsIndicator;
            this.ReviewedBy = reviewedBy;
            this.DeductHours = deductHours;
            this.UtilizationHours = utilizationHours;
            this.InternalComments = internalComments;
            this.RejectedStatusReason = rejectedStatusReason;
            this.Comment = comment;
            this.Reason = reason;
            this.ReviewedByName = reviewedByName;
            this.TechName = techName;
            this.Chargable = chargable;
            this.Billable = billable;
            this.ApplyMinimum = applyMinimum;
            this.CreditUtilizationTime = creditUtilizationTime;
            this.BillForUtilizedTime = billForUtilizedTime;
            this.AcceptanceStatus = acceptanceStatus;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.DateCreated = dateCreated;
            this.TotalUnits = totalUnits;
            this.TimeConvertedToLaborItem = timeConvertedToLaborItem;
            this.LogReasonLaborRate = logReasonLaborRate;
            this.LaborRate = laborRate;
            this.UnitFactor = unitFactor;
            this.DeductMinutes = deductMinutes;
            this.UtilizationMinutes = utilizationMinutes;
            this.TimeToInvoice = timeToInvoice;
        }
        
        /// <summary>
        /// Gets or Sets ServiceOrderNumber
        /// </summary>
        [DataMember(Name="ServiceOrderNumber", EmitDefaultValue=false)]
        public int? ServiceOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogNumber
        /// </summary>
        [DataMember(Name="TimeLogNumber", EmitDefaultValue=false)]
        public int? TimeLogNumber { get; set; }

        /// <summary>
        /// Gets or Sets Tech
        /// </summary>
        [DataMember(Name="Tech", EmitDefaultValue=false)]
        public int? Tech { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="ContractNumber", EmitDefaultValue=false)]
        public int? ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets LogHours
        /// </summary>
        [DataMember(Name="LogHours", EmitDefaultValue=false)]
        public int? LogHours { get; set; }

        /// <summary>
        /// Gets or Sets LogMinutes
        /// </summary>
        [DataMember(Name="LogMinutes", EmitDefaultValue=false)]
        public int? LogMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedHours
        /// </summary>
        [DataMember(Name="ElapsedHours", EmitDefaultValue=false)]
        public int? ElapsedHours { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedMinutes
        /// </summary>
        [DataMember(Name="ElapsedMinutes", EmitDefaultValue=false)]
        public int? ElapsedMinutes { get; set; }

        /// <summary>
        /// Gets or Sets UsageInvoiceNumber
        /// </summary>
        [DataMember(Name="UsageInvoiceNumber", EmitDefaultValue=false)]
        public int? UsageInvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets RateType
        /// </summary>
        [DataMember(Name="RateType", EmitDefaultValue=false)]
        public string RateType { get; set; }

        /// <summary>
        /// Gets or Sets RateBasis
        /// </summary>
        [DataMember(Name="RateBasis", EmitDefaultValue=false)]
        public string RateBasis { get; set; }

        /// <summary>
        /// Gets or Sets CopyCommentsIndicator
        /// </summary>
        [DataMember(Name="CopyCommentsIndicator", EmitDefaultValue=false)]
        public int? CopyCommentsIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ReviewedBy
        /// </summary>
        [DataMember(Name="ReviewedBy", EmitDefaultValue=false)]
        public int? ReviewedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeductHours
        /// </summary>
        [DataMember(Name="DeductHours", EmitDefaultValue=false)]
        public int? DeductHours { get; set; }

        /// <summary>
        /// Gets or Sets UtilizationHours
        /// </summary>
        [DataMember(Name="UtilizationHours", EmitDefaultValue=false)]
        public int? UtilizationHours { get; set; }

        /// <summary>
        /// Gets or Sets InternalComments
        /// </summary>
        [DataMember(Name="InternalComments", EmitDefaultValue=false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// Gets or Sets RejectedStatusReason
        /// </summary>
        [DataMember(Name="RejectedStatusReason", EmitDefaultValue=false)]
        public string RejectedStatusReason { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets ReviewedByName
        /// </summary>
        [DataMember(Name="ReviewedByName", EmitDefaultValue=false)]
        public string ReviewedByName { get; set; }

        /// <summary>
        /// Gets or Sets TechName
        /// </summary>
        [DataMember(Name="TechName", EmitDefaultValue=false)]
        public string TechName { get; set; }

        /// <summary>
        /// Gets or Sets Chargable
        /// </summary>
        [DataMember(Name="Chargable", EmitDefaultValue=false)]
        public bool? Chargable { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets ApplyMinimum
        /// </summary>
        [DataMember(Name="ApplyMinimum", EmitDefaultValue=false)]
        public bool? ApplyMinimum { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Gets or Sets BillForUtilizedTime
        /// </summary>
        [DataMember(Name="BillForUtilizedTime", EmitDefaultValue=false)]
        public bool? BillForUtilizedTime { get; set; }

        /// <summary>
        /// Gets or Sets AcceptanceStatus
        /// </summary>
        [DataMember(Name="AcceptanceStatus", EmitDefaultValue=false)]
        public string AcceptanceStatus { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="StartDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="EndDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets TotalUnits
        /// </summary>
        [DataMember(Name="TotalUnits", EmitDefaultValue=false)]
        public double? TotalUnits { get; set; }

        /// <summary>
        /// Gets or Sets TimeConvertedToLaborItem
        /// </summary>
        [DataMember(Name="TimeConvertedToLaborItem", EmitDefaultValue=false)]
        public double? TimeConvertedToLaborItem { get; set; }

        /// <summary>
        /// Gets or Sets LogReasonLaborRate
        /// </summary>
        [DataMember(Name="LogReasonLaborRate", EmitDefaultValue=false)]
        public double? LogReasonLaborRate { get; set; }

        /// <summary>
        /// Gets or Sets LaborRate
        /// </summary>
        [DataMember(Name="LaborRate", EmitDefaultValue=false)]
        public double? LaborRate { get; set; }

        /// <summary>
        /// Gets or Sets UnitFactor
        /// </summary>
        [DataMember(Name="UnitFactor", EmitDefaultValue=false)]
        public double? UnitFactor { get; set; }

        /// <summary>
        /// Gets or Sets DeductMinutes
        /// </summary>
        [DataMember(Name="DeductMinutes", EmitDefaultValue=false)]
        public int? DeductMinutes { get; set; }

        /// <summary>
        /// Gets or Sets UtilizationMinutes
        /// </summary>
        [DataMember(Name="UtilizationMinutes", EmitDefaultValue=false)]
        public int? UtilizationMinutes { get; set; }

        /// <summary>
        /// Gets or Sets TimeToInvoice
        /// </summary>
        [DataMember(Name="TimeToInvoice", EmitDefaultValue=false)]
        public int? TimeToInvoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebTimeLog {\n");
            sb.Append("  ServiceOrderNumber: ").Append(ServiceOrderNumber).Append("\n");
            sb.Append("  TimeLogNumber: ").Append(TimeLogNumber).Append("\n");
            sb.Append("  Tech: ").Append(Tech).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  LogHours: ").Append(LogHours).Append("\n");
            sb.Append("  LogMinutes: ").Append(LogMinutes).Append("\n");
            sb.Append("  ElapsedHours: ").Append(ElapsedHours).Append("\n");
            sb.Append("  ElapsedMinutes: ").Append(ElapsedMinutes).Append("\n");
            sb.Append("  UsageInvoiceNumber: ").Append(UsageInvoiceNumber).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  RateBasis: ").Append(RateBasis).Append("\n");
            sb.Append("  CopyCommentsIndicator: ").Append(CopyCommentsIndicator).Append("\n");
            sb.Append("  ReviewedBy: ").Append(ReviewedBy).Append("\n");
            sb.Append("  DeductHours: ").Append(DeductHours).Append("\n");
            sb.Append("  UtilizationHours: ").Append(UtilizationHours).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  RejectedStatusReason: ").Append(RejectedStatusReason).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReviewedByName: ").Append(ReviewedByName).Append("\n");
            sb.Append("  TechName: ").Append(TechName).Append("\n");
            sb.Append("  Chargable: ").Append(Chargable).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  ApplyMinimum: ").Append(ApplyMinimum).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("  BillForUtilizedTime: ").Append(BillForUtilizedTime).Append("\n");
            sb.Append("  AcceptanceStatus: ").Append(AcceptanceStatus).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  TotalUnits: ").Append(TotalUnits).Append("\n");
            sb.Append("  TimeConvertedToLaborItem: ").Append(TimeConvertedToLaborItem).Append("\n");
            sb.Append("  LogReasonLaborRate: ").Append(LogReasonLaborRate).Append("\n");
            sb.Append("  LaborRate: ").Append(LaborRate).Append("\n");
            sb.Append("  UnitFactor: ").Append(UnitFactor).Append("\n");
            sb.Append("  DeductMinutes: ").Append(DeductMinutes).Append("\n");
            sb.Append("  UtilizationMinutes: ").Append(UtilizationMinutes).Append("\n");
            sb.Append("  TimeToInvoice: ").Append(TimeToInvoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebTimeLog);
        }

        /// <summary>
        /// Returns true if TsiWebTimeLog instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebTimeLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebTimeLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceOrderNumber == input.ServiceOrderNumber ||
                    (this.ServiceOrderNumber != null &&
                    this.ServiceOrderNumber.Equals(input.ServiceOrderNumber))
                ) && 
                (
                    this.TimeLogNumber == input.TimeLogNumber ||
                    (this.TimeLogNumber != null &&
                    this.TimeLogNumber.Equals(input.TimeLogNumber))
                ) && 
                (
                    this.Tech == input.Tech ||
                    (this.Tech != null &&
                    this.Tech.Equals(input.Tech))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.LogHours == input.LogHours ||
                    (this.LogHours != null &&
                    this.LogHours.Equals(input.LogHours))
                ) && 
                (
                    this.LogMinutes == input.LogMinutes ||
                    (this.LogMinutes != null &&
                    this.LogMinutes.Equals(input.LogMinutes))
                ) && 
                (
                    this.ElapsedHours == input.ElapsedHours ||
                    (this.ElapsedHours != null &&
                    this.ElapsedHours.Equals(input.ElapsedHours))
                ) && 
                (
                    this.ElapsedMinutes == input.ElapsedMinutes ||
                    (this.ElapsedMinutes != null &&
                    this.ElapsedMinutes.Equals(input.ElapsedMinutes))
                ) && 
                (
                    this.UsageInvoiceNumber == input.UsageInvoiceNumber ||
                    (this.UsageInvoiceNumber != null &&
                    this.UsageInvoiceNumber.Equals(input.UsageInvoiceNumber))
                ) && 
                (
                    this.RateType == input.RateType ||
                    (this.RateType != null &&
                    this.RateType.Equals(input.RateType))
                ) && 
                (
                    this.RateBasis == input.RateBasis ||
                    (this.RateBasis != null &&
                    this.RateBasis.Equals(input.RateBasis))
                ) && 
                (
                    this.CopyCommentsIndicator == input.CopyCommentsIndicator ||
                    (this.CopyCommentsIndicator != null &&
                    this.CopyCommentsIndicator.Equals(input.CopyCommentsIndicator))
                ) && 
                (
                    this.ReviewedBy == input.ReviewedBy ||
                    (this.ReviewedBy != null &&
                    this.ReviewedBy.Equals(input.ReviewedBy))
                ) && 
                (
                    this.DeductHours == input.DeductHours ||
                    (this.DeductHours != null &&
                    this.DeductHours.Equals(input.DeductHours))
                ) && 
                (
                    this.UtilizationHours == input.UtilizationHours ||
                    (this.UtilizationHours != null &&
                    this.UtilizationHours.Equals(input.UtilizationHours))
                ) && 
                (
                    this.InternalComments == input.InternalComments ||
                    (this.InternalComments != null &&
                    this.InternalComments.Equals(input.InternalComments))
                ) && 
                (
                    this.RejectedStatusReason == input.RejectedStatusReason ||
                    (this.RejectedStatusReason != null &&
                    this.RejectedStatusReason.Equals(input.RejectedStatusReason))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ReviewedByName == input.ReviewedByName ||
                    (this.ReviewedByName != null &&
                    this.ReviewedByName.Equals(input.ReviewedByName))
                ) && 
                (
                    this.TechName == input.TechName ||
                    (this.TechName != null &&
                    this.TechName.Equals(input.TechName))
                ) && 
                (
                    this.Chargable == input.Chargable ||
                    (this.Chargable != null &&
                    this.Chargable.Equals(input.Chargable))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.ApplyMinimum == input.ApplyMinimum ||
                    (this.ApplyMinimum != null &&
                    this.ApplyMinimum.Equals(input.ApplyMinimum))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                ) && 
                (
                    this.BillForUtilizedTime == input.BillForUtilizedTime ||
                    (this.BillForUtilizedTime != null &&
                    this.BillForUtilizedTime.Equals(input.BillForUtilizedTime))
                ) && 
                (
                    this.AcceptanceStatus == input.AcceptanceStatus ||
                    (this.AcceptanceStatus != null &&
                    this.AcceptanceStatus.Equals(input.AcceptanceStatus))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.TotalUnits == input.TotalUnits ||
                    (this.TotalUnits != null &&
                    this.TotalUnits.Equals(input.TotalUnits))
                ) && 
                (
                    this.TimeConvertedToLaborItem == input.TimeConvertedToLaborItem ||
                    (this.TimeConvertedToLaborItem != null &&
                    this.TimeConvertedToLaborItem.Equals(input.TimeConvertedToLaborItem))
                ) && 
                (
                    this.LogReasonLaborRate == input.LogReasonLaborRate ||
                    (this.LogReasonLaborRate != null &&
                    this.LogReasonLaborRate.Equals(input.LogReasonLaborRate))
                ) && 
                (
                    this.LaborRate == input.LaborRate ||
                    (this.LaborRate != null &&
                    this.LaborRate.Equals(input.LaborRate))
                ) && 
                (
                    this.UnitFactor == input.UnitFactor ||
                    (this.UnitFactor != null &&
                    this.UnitFactor.Equals(input.UnitFactor))
                ) && 
                (
                    this.DeductMinutes == input.DeductMinutes ||
                    (this.DeductMinutes != null &&
                    this.DeductMinutes.Equals(input.DeductMinutes))
                ) && 
                (
                    this.UtilizationMinutes == input.UtilizationMinutes ||
                    (this.UtilizationMinutes != null &&
                    this.UtilizationMinutes.Equals(input.UtilizationMinutes))
                ) && 
                (
                    this.TimeToInvoice == input.TimeToInvoice ||
                    (this.TimeToInvoice != null &&
                    this.TimeToInvoice.Equals(input.TimeToInvoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceOrderNumber != null)
                    hashCode = hashCode * 59 + this.ServiceOrderNumber.GetHashCode();
                if (this.TimeLogNumber != null)
                    hashCode = hashCode * 59 + this.TimeLogNumber.GetHashCode();
                if (this.Tech != null)
                    hashCode = hashCode * 59 + this.Tech.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.LogHours != null)
                    hashCode = hashCode * 59 + this.LogHours.GetHashCode();
                if (this.LogMinutes != null)
                    hashCode = hashCode * 59 + this.LogMinutes.GetHashCode();
                if (this.ElapsedHours != null)
                    hashCode = hashCode * 59 + this.ElapsedHours.GetHashCode();
                if (this.ElapsedMinutes != null)
                    hashCode = hashCode * 59 + this.ElapsedMinutes.GetHashCode();
                if (this.UsageInvoiceNumber != null)
                    hashCode = hashCode * 59 + this.UsageInvoiceNumber.GetHashCode();
                if (this.RateType != null)
                    hashCode = hashCode * 59 + this.RateType.GetHashCode();
                if (this.RateBasis != null)
                    hashCode = hashCode * 59 + this.RateBasis.GetHashCode();
                if (this.CopyCommentsIndicator != null)
                    hashCode = hashCode * 59 + this.CopyCommentsIndicator.GetHashCode();
                if (this.ReviewedBy != null)
                    hashCode = hashCode * 59 + this.ReviewedBy.GetHashCode();
                if (this.DeductHours != null)
                    hashCode = hashCode * 59 + this.DeductHours.GetHashCode();
                if (this.UtilizationHours != null)
                    hashCode = hashCode * 59 + this.UtilizationHours.GetHashCode();
                if (this.InternalComments != null)
                    hashCode = hashCode * 59 + this.InternalComments.GetHashCode();
                if (this.RejectedStatusReason != null)
                    hashCode = hashCode * 59 + this.RejectedStatusReason.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ReviewedByName != null)
                    hashCode = hashCode * 59 + this.ReviewedByName.GetHashCode();
                if (this.TechName != null)
                    hashCode = hashCode * 59 + this.TechName.GetHashCode();
                if (this.Chargable != null)
                    hashCode = hashCode * 59 + this.Chargable.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.ApplyMinimum != null)
                    hashCode = hashCode * 59 + this.ApplyMinimum.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                if (this.BillForUtilizedTime != null)
                    hashCode = hashCode * 59 + this.BillForUtilizedTime.GetHashCode();
                if (this.AcceptanceStatus != null)
                    hashCode = hashCode * 59 + this.AcceptanceStatus.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.TotalUnits != null)
                    hashCode = hashCode * 59 + this.TotalUnits.GetHashCode();
                if (this.TimeConvertedToLaborItem != null)
                    hashCode = hashCode * 59 + this.TimeConvertedToLaborItem.GetHashCode();
                if (this.LogReasonLaborRate != null)
                    hashCode = hashCode * 59 + this.LogReasonLaborRate.GetHashCode();
                if (this.LaborRate != null)
                    hashCode = hashCode * 59 + this.LaborRate.GetHashCode();
                if (this.UnitFactor != null)
                    hashCode = hashCode * 59 + this.UnitFactor.GetHashCode();
                if (this.DeductMinutes != null)
                    hashCode = hashCode * 59 + this.DeductMinutes.GetHashCode();
                if (this.UtilizationMinutes != null)
                    hashCode = hashCode * 59 + this.UtilizationMinutes.GetHashCode();
                if (this.TimeToInvoice != null)
                    hashCode = hashCode * 59 + this.TimeToInvoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
