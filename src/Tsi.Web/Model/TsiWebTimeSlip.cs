/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebTimeSlip
    /// </summary>
    [DataContract]
    public partial class TsiWebTimeSlip :  IEquatable<TsiWebTimeSlip>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebTimeSlip" /> class.
        /// </summary>
        /// <param name="timeSlipNumber">timeSlipNumber.</param>
        /// <param name="techAssigned">techAssigned.</param>
        /// <param name="techAssignedName">techAssignedName.</param>
        /// <param name="logReason">logReason.</param>
        /// <param name="logComment">logComment.</param>
        /// <param name="logHours">logHours.</param>
        /// <param name="logMinutes">logMinutes.</param>
        /// <param name="elapsedHours">elapsedHours.</param>
        /// <param name="elapsedMinutes">elapsedMinutes.</param>
        /// <param name="billable">billable.</param>
        /// <param name="mileage">mileage.</param>
        /// <param name="fuel">fuel.</param>
        /// <param name="parking">parking.</param>
        /// <param name="tolls">tolls.</param>
        /// <param name="meals">meals.</param>
        /// <param name="accomodation">accomodation.</param>
        /// <param name="miscExpenses">miscExpenses.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="logReasonLaborRate">logReasonLaborRate.</param>
        /// <param name="rateType">rateType.</param>
        /// <param name="rateBasis">rateBasis.</param>
        /// <param name="totalExpenses">totalExpenses.</param>
        /// <param name="acceptanceStatus">acceptanceStatus.</param>
        /// <param name="rejectedStatusReason">rejectedStatusReason.</param>
        /// <param name="internalComments">internalComments.</param>
        /// <param name="acceptedOrRejectedBy">acceptedOrRejectedBy.</param>
        /// <param name="acceptedOrRejectedByName">acceptedOrRejectedByName.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        /// <param name="deductHours">deductHours.</param>
        /// <param name="deductMinutes">deductMinutes.</param>
        /// <param name="utilizationHours">utilizationHours.</param>
        /// <param name="utilizationMinutes">utilizationMinutes.</param>
        /// <param name="dateCreated">dateCreated.</param>
        public TsiWebTimeSlip(int? timeSlipNumber = default(int?), int? techAssigned = default(int?), string techAssignedName = default(string), string logReason = default(string), string logComment = default(string), int? logHours = default(int?), int? logMinutes = default(int?), int? elapsedHours = default(int?), int? elapsedMinutes = default(int?), bool? billable = default(bool?), double? mileage = default(double?), double? fuel = default(double?), double? parking = default(double?), double? tolls = default(double?), double? meals = default(double?), double? accomodation = default(double?), double? miscExpenses = default(double?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), double? logReasonLaborRate = default(double?), int? rateType = default(int?), int? rateBasis = default(int?), double? totalExpenses = default(double?), string acceptanceStatus = default(string), string rejectedStatusReason = default(string), string internalComments = default(string), int? acceptedOrRejectedBy = default(int?), string acceptedOrRejectedByName = default(string), bool? creditUtilizationTime = default(bool?), int? deductHours = default(int?), int? deductMinutes = default(int?), int? utilizationHours = default(int?), int? utilizationMinutes = default(int?), DateTime? dateCreated = default(DateTime?))
        {
            this.TimeSlipNumber = timeSlipNumber;
            this.TechAssigned = techAssigned;
            this.TechAssignedName = techAssignedName;
            this.LogReason = logReason;
            this.LogComment = logComment;
            this.LogHours = logHours;
            this.LogMinutes = logMinutes;
            this.ElapsedHours = elapsedHours;
            this.ElapsedMinutes = elapsedMinutes;
            this.Billable = billable;
            this.Mileage = mileage;
            this.Fuel = fuel;
            this.Parking = parking;
            this.Tolls = tolls;
            this.Meals = meals;
            this.Accomodation = accomodation;
            this.MiscExpenses = miscExpenses;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.LogReasonLaborRate = logReasonLaborRate;
            this.RateType = rateType;
            this.RateBasis = rateBasis;
            this.TotalExpenses = totalExpenses;
            this.AcceptanceStatus = acceptanceStatus;
            this.RejectedStatusReason = rejectedStatusReason;
            this.InternalComments = internalComments;
            this.AcceptedOrRejectedBy = acceptedOrRejectedBy;
            this.AcceptedOrRejectedByName = acceptedOrRejectedByName;
            this.CreditUtilizationTime = creditUtilizationTime;
            this.DeductHours = deductHours;
            this.DeductMinutes = deductMinutes;
            this.UtilizationHours = utilizationHours;
            this.UtilizationMinutes = utilizationMinutes;
            this.DateCreated = dateCreated;
        }
        
        /// <summary>
        /// Gets or Sets TimeSlipNumber
        /// </summary>
        [DataMember(Name="TimeSlipNumber", EmitDefaultValue=false)]
        public int? TimeSlipNumber { get; set; }

        /// <summary>
        /// Gets or Sets TechAssigned
        /// </summary>
        [DataMember(Name="TechAssigned", EmitDefaultValue=false)]
        public int? TechAssigned { get; set; }

        /// <summary>
        /// Gets or Sets TechAssignedName
        /// </summary>
        [DataMember(Name="TechAssignedName", EmitDefaultValue=false)]
        public string TechAssignedName { get; set; }

        /// <summary>
        /// Gets or Sets LogReason
        /// </summary>
        [DataMember(Name="LogReason", EmitDefaultValue=false)]
        public string LogReason { get; set; }

        /// <summary>
        /// Gets or Sets LogComment
        /// </summary>
        [DataMember(Name="LogComment", EmitDefaultValue=false)]
        public string LogComment { get; set; }

        /// <summary>
        /// Gets or Sets LogHours
        /// </summary>
        [DataMember(Name="LogHours", EmitDefaultValue=false)]
        public int? LogHours { get; set; }

        /// <summary>
        /// Gets or Sets LogMinutes
        /// </summary>
        [DataMember(Name="LogMinutes", EmitDefaultValue=false)]
        public int? LogMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedHours
        /// </summary>
        [DataMember(Name="ElapsedHours", EmitDefaultValue=false)]
        public int? ElapsedHours { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedMinutes
        /// </summary>
        [DataMember(Name="ElapsedMinutes", EmitDefaultValue=false)]
        public int? ElapsedMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Gets or Sets Mileage
        /// </summary>
        [DataMember(Name="Mileage", EmitDefaultValue=false)]
        public double? Mileage { get; set; }

        /// <summary>
        /// Gets or Sets Fuel
        /// </summary>
        [DataMember(Name="Fuel", EmitDefaultValue=false)]
        public double? Fuel { get; set; }

        /// <summary>
        /// Gets or Sets Parking
        /// </summary>
        [DataMember(Name="Parking", EmitDefaultValue=false)]
        public double? Parking { get; set; }

        /// <summary>
        /// Gets or Sets Tolls
        /// </summary>
        [DataMember(Name="Tolls", EmitDefaultValue=false)]
        public double? Tolls { get; set; }

        /// <summary>
        /// Gets or Sets Meals
        /// </summary>
        [DataMember(Name="Meals", EmitDefaultValue=false)]
        public double? Meals { get; set; }

        /// <summary>
        /// Gets or Sets Accomodation
        /// </summary>
        [DataMember(Name="Accomodation", EmitDefaultValue=false)]
        public double? Accomodation { get; set; }

        /// <summary>
        /// Gets or Sets MiscExpenses
        /// </summary>
        [DataMember(Name="MiscExpenses", EmitDefaultValue=false)]
        public double? MiscExpenses { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="StartDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="EndDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LogReasonLaborRate
        /// </summary>
        [DataMember(Name="LogReasonLaborRate", EmitDefaultValue=false)]
        public double? LogReasonLaborRate { get; set; }

        /// <summary>
        /// Gets or Sets RateType
        /// </summary>
        [DataMember(Name="RateType", EmitDefaultValue=false)]
        public int? RateType { get; set; }

        /// <summary>
        /// Gets or Sets RateBasis
        /// </summary>
        [DataMember(Name="RateBasis", EmitDefaultValue=false)]
        public int? RateBasis { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenses
        /// </summary>
        [DataMember(Name="TotalExpenses", EmitDefaultValue=false)]
        public double? TotalExpenses { get; set; }

        /// <summary>
        /// Gets or Sets AcceptanceStatus
        /// </summary>
        [DataMember(Name="AcceptanceStatus", EmitDefaultValue=false)]
        public string AcceptanceStatus { get; set; }

        /// <summary>
        /// Gets or Sets RejectedStatusReason
        /// </summary>
        [DataMember(Name="RejectedStatusReason", EmitDefaultValue=false)]
        public string RejectedStatusReason { get; set; }

        /// <summary>
        /// Gets or Sets InternalComments
        /// </summary>
        [DataMember(Name="InternalComments", EmitDefaultValue=false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedOrRejectedBy
        /// </summary>
        [DataMember(Name="AcceptedOrRejectedBy", EmitDefaultValue=false)]
        public int? AcceptedOrRejectedBy { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedOrRejectedByName
        /// </summary>
        [DataMember(Name="AcceptedOrRejectedByName", EmitDefaultValue=false)]
        public string AcceptedOrRejectedByName { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Gets or Sets DeductHours
        /// </summary>
        [DataMember(Name="DeductHours", EmitDefaultValue=false)]
        public int? DeductHours { get; set; }

        /// <summary>
        /// Gets or Sets DeductMinutes
        /// </summary>
        [DataMember(Name="DeductMinutes", EmitDefaultValue=false)]
        public int? DeductMinutes { get; set; }

        /// <summary>
        /// Gets or Sets UtilizationHours
        /// </summary>
        [DataMember(Name="UtilizationHours", EmitDefaultValue=false)]
        public int? UtilizationHours { get; set; }

        /// <summary>
        /// Gets or Sets UtilizationMinutes
        /// </summary>
        [DataMember(Name="UtilizationMinutes", EmitDefaultValue=false)]
        public int? UtilizationMinutes { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebTimeSlip {\n");
            sb.Append("  TimeSlipNumber: ").Append(TimeSlipNumber).Append("\n");
            sb.Append("  TechAssigned: ").Append(TechAssigned).Append("\n");
            sb.Append("  TechAssignedName: ").Append(TechAssignedName).Append("\n");
            sb.Append("  LogReason: ").Append(LogReason).Append("\n");
            sb.Append("  LogComment: ").Append(LogComment).Append("\n");
            sb.Append("  LogHours: ").Append(LogHours).Append("\n");
            sb.Append("  LogMinutes: ").Append(LogMinutes).Append("\n");
            sb.Append("  ElapsedHours: ").Append(ElapsedHours).Append("\n");
            sb.Append("  ElapsedMinutes: ").Append(ElapsedMinutes).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Mileage: ").Append(Mileage).Append("\n");
            sb.Append("  Fuel: ").Append(Fuel).Append("\n");
            sb.Append("  Parking: ").Append(Parking).Append("\n");
            sb.Append("  Tolls: ").Append(Tolls).Append("\n");
            sb.Append("  Meals: ").Append(Meals).Append("\n");
            sb.Append("  Accomodation: ").Append(Accomodation).Append("\n");
            sb.Append("  MiscExpenses: ").Append(MiscExpenses).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  LogReasonLaborRate: ").Append(LogReasonLaborRate).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  RateBasis: ").Append(RateBasis).Append("\n");
            sb.Append("  TotalExpenses: ").Append(TotalExpenses).Append("\n");
            sb.Append("  AcceptanceStatus: ").Append(AcceptanceStatus).Append("\n");
            sb.Append("  RejectedStatusReason: ").Append(RejectedStatusReason).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  AcceptedOrRejectedBy: ").Append(AcceptedOrRejectedBy).Append("\n");
            sb.Append("  AcceptedOrRejectedByName: ").Append(AcceptedOrRejectedByName).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("  DeductHours: ").Append(DeductHours).Append("\n");
            sb.Append("  DeductMinutes: ").Append(DeductMinutes).Append("\n");
            sb.Append("  UtilizationHours: ").Append(UtilizationHours).Append("\n");
            sb.Append("  UtilizationMinutes: ").Append(UtilizationMinutes).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebTimeSlip);
        }

        /// <summary>
        /// Returns true if TsiWebTimeSlip instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebTimeSlip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebTimeSlip input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeSlipNumber == input.TimeSlipNumber ||
                    (this.TimeSlipNumber != null &&
                    this.TimeSlipNumber.Equals(input.TimeSlipNumber))
                ) && 
                (
                    this.TechAssigned == input.TechAssigned ||
                    (this.TechAssigned != null &&
                    this.TechAssigned.Equals(input.TechAssigned))
                ) && 
                (
                    this.TechAssignedName == input.TechAssignedName ||
                    (this.TechAssignedName != null &&
                    this.TechAssignedName.Equals(input.TechAssignedName))
                ) && 
                (
                    this.LogReason == input.LogReason ||
                    (this.LogReason != null &&
                    this.LogReason.Equals(input.LogReason))
                ) && 
                (
                    this.LogComment == input.LogComment ||
                    (this.LogComment != null &&
                    this.LogComment.Equals(input.LogComment))
                ) && 
                (
                    this.LogHours == input.LogHours ||
                    (this.LogHours != null &&
                    this.LogHours.Equals(input.LogHours))
                ) && 
                (
                    this.LogMinutes == input.LogMinutes ||
                    (this.LogMinutes != null &&
                    this.LogMinutes.Equals(input.LogMinutes))
                ) && 
                (
                    this.ElapsedHours == input.ElapsedHours ||
                    (this.ElapsedHours != null &&
                    this.ElapsedHours.Equals(input.ElapsedHours))
                ) && 
                (
                    this.ElapsedMinutes == input.ElapsedMinutes ||
                    (this.ElapsedMinutes != null &&
                    this.ElapsedMinutes.Equals(input.ElapsedMinutes))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Mileage == input.Mileage ||
                    (this.Mileage != null &&
                    this.Mileage.Equals(input.Mileage))
                ) && 
                (
                    this.Fuel == input.Fuel ||
                    (this.Fuel != null &&
                    this.Fuel.Equals(input.Fuel))
                ) && 
                (
                    this.Parking == input.Parking ||
                    (this.Parking != null &&
                    this.Parking.Equals(input.Parking))
                ) && 
                (
                    this.Tolls == input.Tolls ||
                    (this.Tolls != null &&
                    this.Tolls.Equals(input.Tolls))
                ) && 
                (
                    this.Meals == input.Meals ||
                    (this.Meals != null &&
                    this.Meals.Equals(input.Meals))
                ) && 
                (
                    this.Accomodation == input.Accomodation ||
                    (this.Accomodation != null &&
                    this.Accomodation.Equals(input.Accomodation))
                ) && 
                (
                    this.MiscExpenses == input.MiscExpenses ||
                    (this.MiscExpenses != null &&
                    this.MiscExpenses.Equals(input.MiscExpenses))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.LogReasonLaborRate == input.LogReasonLaborRate ||
                    (this.LogReasonLaborRate != null &&
                    this.LogReasonLaborRate.Equals(input.LogReasonLaborRate))
                ) && 
                (
                    this.RateType == input.RateType ||
                    (this.RateType != null &&
                    this.RateType.Equals(input.RateType))
                ) && 
                (
                    this.RateBasis == input.RateBasis ||
                    (this.RateBasis != null &&
                    this.RateBasis.Equals(input.RateBasis))
                ) && 
                (
                    this.TotalExpenses == input.TotalExpenses ||
                    (this.TotalExpenses != null &&
                    this.TotalExpenses.Equals(input.TotalExpenses))
                ) && 
                (
                    this.AcceptanceStatus == input.AcceptanceStatus ||
                    (this.AcceptanceStatus != null &&
                    this.AcceptanceStatus.Equals(input.AcceptanceStatus))
                ) && 
                (
                    this.RejectedStatusReason == input.RejectedStatusReason ||
                    (this.RejectedStatusReason != null &&
                    this.RejectedStatusReason.Equals(input.RejectedStatusReason))
                ) && 
                (
                    this.InternalComments == input.InternalComments ||
                    (this.InternalComments != null &&
                    this.InternalComments.Equals(input.InternalComments))
                ) && 
                (
                    this.AcceptedOrRejectedBy == input.AcceptedOrRejectedBy ||
                    (this.AcceptedOrRejectedBy != null &&
                    this.AcceptedOrRejectedBy.Equals(input.AcceptedOrRejectedBy))
                ) && 
                (
                    this.AcceptedOrRejectedByName == input.AcceptedOrRejectedByName ||
                    (this.AcceptedOrRejectedByName != null &&
                    this.AcceptedOrRejectedByName.Equals(input.AcceptedOrRejectedByName))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                ) && 
                (
                    this.DeductHours == input.DeductHours ||
                    (this.DeductHours != null &&
                    this.DeductHours.Equals(input.DeductHours))
                ) && 
                (
                    this.DeductMinutes == input.DeductMinutes ||
                    (this.DeductMinutes != null &&
                    this.DeductMinutes.Equals(input.DeductMinutes))
                ) && 
                (
                    this.UtilizationHours == input.UtilizationHours ||
                    (this.UtilizationHours != null &&
                    this.UtilizationHours.Equals(input.UtilizationHours))
                ) && 
                (
                    this.UtilizationMinutes == input.UtilizationMinutes ||
                    (this.UtilizationMinutes != null &&
                    this.UtilizationMinutes.Equals(input.UtilizationMinutes))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeSlipNumber != null)
                    hashCode = hashCode * 59 + this.TimeSlipNumber.GetHashCode();
                if (this.TechAssigned != null)
                    hashCode = hashCode * 59 + this.TechAssigned.GetHashCode();
                if (this.TechAssignedName != null)
                    hashCode = hashCode * 59 + this.TechAssignedName.GetHashCode();
                if (this.LogReason != null)
                    hashCode = hashCode * 59 + this.LogReason.GetHashCode();
                if (this.LogComment != null)
                    hashCode = hashCode * 59 + this.LogComment.GetHashCode();
                if (this.LogHours != null)
                    hashCode = hashCode * 59 + this.LogHours.GetHashCode();
                if (this.LogMinutes != null)
                    hashCode = hashCode * 59 + this.LogMinutes.GetHashCode();
                if (this.ElapsedHours != null)
                    hashCode = hashCode * 59 + this.ElapsedHours.GetHashCode();
                if (this.ElapsedMinutes != null)
                    hashCode = hashCode * 59 + this.ElapsedMinutes.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Mileage != null)
                    hashCode = hashCode * 59 + this.Mileage.GetHashCode();
                if (this.Fuel != null)
                    hashCode = hashCode * 59 + this.Fuel.GetHashCode();
                if (this.Parking != null)
                    hashCode = hashCode * 59 + this.Parking.GetHashCode();
                if (this.Tolls != null)
                    hashCode = hashCode * 59 + this.Tolls.GetHashCode();
                if (this.Meals != null)
                    hashCode = hashCode * 59 + this.Meals.GetHashCode();
                if (this.Accomodation != null)
                    hashCode = hashCode * 59 + this.Accomodation.GetHashCode();
                if (this.MiscExpenses != null)
                    hashCode = hashCode * 59 + this.MiscExpenses.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.LogReasonLaborRate != null)
                    hashCode = hashCode * 59 + this.LogReasonLaborRate.GetHashCode();
                if (this.RateType != null)
                    hashCode = hashCode * 59 + this.RateType.GetHashCode();
                if (this.RateBasis != null)
                    hashCode = hashCode * 59 + this.RateBasis.GetHashCode();
                if (this.TotalExpenses != null)
                    hashCode = hashCode * 59 + this.TotalExpenses.GetHashCode();
                if (this.AcceptanceStatus != null)
                    hashCode = hashCode * 59 + this.AcceptanceStatus.GetHashCode();
                if (this.RejectedStatusReason != null)
                    hashCode = hashCode * 59 + this.RejectedStatusReason.GetHashCode();
                if (this.InternalComments != null)
                    hashCode = hashCode * 59 + this.InternalComments.GetHashCode();
                if (this.AcceptedOrRejectedBy != null)
                    hashCode = hashCode * 59 + this.AcceptedOrRejectedBy.GetHashCode();
                if (this.AcceptedOrRejectedByName != null)
                    hashCode = hashCode * 59 + this.AcceptedOrRejectedByName.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                if (this.DeductHours != null)
                    hashCode = hashCode * 59 + this.DeductHours.GetHashCode();
                if (this.DeductMinutes != null)
                    hashCode = hashCode * 59 + this.DeductMinutes.GetHashCode();
                if (this.UtilizationHours != null)
                    hashCode = hashCode * 59 + this.UtilizationHours.GetHashCode();
                if (this.UtilizationMinutes != null)
                    hashCode = hashCode * 59 + this.UtilizationMinutes.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
