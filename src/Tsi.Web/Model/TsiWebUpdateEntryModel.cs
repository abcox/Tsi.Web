/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebUpdateEntryModel
    /// </summary>
    [DataContract]
    public partial class TsiWebUpdateEntryModel :  IEquatable<TsiWebUpdateEntryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebUpdateEntryModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TsiWebUpdateEntryModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebUpdateEntryModel" /> class.
        /// </summary>
        /// <param name="existingValue">existingValue (required).</param>
        /// <param name="newValue">newValue (required).</param>
        public TsiWebUpdateEntryModel(string existingValue = default(string), string newValue = default(string))
        {
            // to ensure "existingValue" is required (not null)
            if (existingValue == null)
            {
                throw new InvalidDataException("existingValue is a required property for TsiWebUpdateEntryModel and cannot be null");
            }
            else
            {
                this.ExistingValue = existingValue;
            }
            // to ensure "newValue" is required (not null)
            if (newValue == null)
            {
                throw new InvalidDataException("newValue is a required property for TsiWebUpdateEntryModel and cannot be null");
            }
            else
            {
                this.NewValue = newValue;
            }
        }
        
        /// <summary>
        /// Gets or Sets ExistingValue
        /// </summary>
        [DataMember(Name="ExistingValue", EmitDefaultValue=false)]
        public string ExistingValue { get; set; }

        /// <summary>
        /// Gets or Sets NewValue
        /// </summary>
        [DataMember(Name="NewValue", EmitDefaultValue=false)]
        public string NewValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebUpdateEntryModel {\n");
            sb.Append("  ExistingValue: ").Append(ExistingValue).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebUpdateEntryModel);
        }

        /// <summary>
        /// Returns true if TsiWebUpdateEntryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebUpdateEntryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebUpdateEntryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExistingValue == input.ExistingValue ||
                    (this.ExistingValue != null &&
                    this.ExistingValue.Equals(input.ExistingValue))
                ) && 
                (
                    this.NewValue == input.NewValue ||
                    (this.NewValue != null &&
                    this.NewValue.Equals(input.NewValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExistingValue != null)
                    hashCode = hashCode * 59 + this.ExistingValue.GetHashCode();
                if (this.NewValue != null)
                    hashCode = hashCode * 59 + this.NewValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
