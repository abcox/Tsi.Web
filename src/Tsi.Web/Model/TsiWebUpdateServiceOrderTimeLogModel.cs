/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebUpdateServiceOrderTimeLogModel
    /// </summary>
    [DataContract]
    public partial class TsiWebUpdateServiceOrderTimeLogModel :  IEquatable<TsiWebUpdateServiceOrderTimeLogModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebUpdateServiceOrderTimeLogModel" /> class.
        /// </summary>
        /// <param name="billingOption">billingOption.</param>
        /// <param name="checkCompanyBusinessHours">checkCompanyBusinessHours.</param>
        /// <param name="tech">tech.</param>
        /// <param name="rateBasis">rateBasis.</param>
        /// <param name="copyCommentsIndicator">copyCommentsIndicator.</param>
        /// <param name="deductHours">deductHours.</param>
        /// <param name="internalComments">internalComments.</param>
        /// <param name="comment">comment.</param>
        /// <param name="reason">reason.</param>
        /// <param name="creditUtilizationTime">creditUtilizationTime.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="logReasonLaborRate">logReasonLaborRate.</param>
        /// <param name="deductMinutes">deductMinutes.</param>
        /// <param name="timeToInvoice">timeToInvoice.</param>
        /// <param name="billableHours">billableHours.</param>
        /// <param name="billableMinutes">billableMinutes.</param>
        /// <param name="serviceOrderStatus">serviceOrderStatus.</param>
        /// <param name="rejectedStatusReason">rejectedStatusReason.</param>
        /// <param name="acceptanceStatus">acceptanceStatus.</param>
        public TsiWebUpdateServiceOrderTimeLogModel(string billingOption = default(string), bool? checkCompanyBusinessHours = default(bool?), int? tech = default(int?), string rateBasis = default(string), string copyCommentsIndicator = default(string), int? deductHours = default(int?), string internalComments = default(string), string comment = default(string), string reason = default(string), bool? creditUtilizationTime = default(bool?), DateTime? startDateTime = default(DateTime?), DateTime? endDateTime = default(DateTime?), double? logReasonLaborRate = default(double?), int? deductMinutes = default(int?), string timeToInvoice = default(string), int? billableHours = default(int?), int? billableMinutes = default(int?), string serviceOrderStatus = default(string), string rejectedStatusReason = default(string), string acceptanceStatus = default(string))
        {
            this.BillingOption = billingOption;
            this.CheckCompanyBusinessHours = checkCompanyBusinessHours;
            this.Tech = tech;
            this.RateBasis = rateBasis;
            this.CopyCommentsIndicator = copyCommentsIndicator;
            this.DeductHours = deductHours;
            this.InternalComments = internalComments;
            this.Comment = comment;
            this.Reason = reason;
            this.CreditUtilizationTime = creditUtilizationTime;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.LogReasonLaborRate = logReasonLaborRate;
            this.DeductMinutes = deductMinutes;
            this.TimeToInvoice = timeToInvoice;
            this.BillableHours = billableHours;
            this.BillableMinutes = billableMinutes;
            this.ServiceOrderStatus = serviceOrderStatus;
            this.RejectedStatusReason = rejectedStatusReason;
            this.AcceptanceStatus = acceptanceStatus;
        }
        
        /// <summary>
        /// Gets or Sets BillingOption
        /// </summary>
        [DataMember(Name="BillingOption", EmitDefaultValue=false)]
        public string BillingOption { get; set; }

        /// <summary>
        /// Gets or Sets CheckCompanyBusinessHours
        /// </summary>
        [DataMember(Name="CheckCompanyBusinessHours", EmitDefaultValue=false)]
        public bool? CheckCompanyBusinessHours { get; set; }

        /// <summary>
        /// Gets or Sets Tech
        /// </summary>
        [DataMember(Name="Tech", EmitDefaultValue=false)]
        public int? Tech { get; set; }

        /// <summary>
        /// Gets or Sets RateBasis
        /// </summary>
        [DataMember(Name="RateBasis", EmitDefaultValue=false)]
        public string RateBasis { get; set; }

        /// <summary>
        /// Gets or Sets CopyCommentsIndicator
        /// </summary>
        [DataMember(Name="CopyCommentsIndicator", EmitDefaultValue=false)]
        public string CopyCommentsIndicator { get; set; }

        /// <summary>
        /// Gets or Sets DeductHours
        /// </summary>
        [DataMember(Name="DeductHours", EmitDefaultValue=false)]
        public int? DeductHours { get; set; }

        /// <summary>
        /// Gets or Sets InternalComments
        /// </summary>
        [DataMember(Name="InternalComments", EmitDefaultValue=false)]
        public string InternalComments { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets CreditUtilizationTime
        /// </summary>
        [DataMember(Name="CreditUtilizationTime", EmitDefaultValue=false)]
        public bool? CreditUtilizationTime { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name="StartDateTime", EmitDefaultValue=false)]
        public DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="EndDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LogReasonLaborRate
        /// </summary>
        [DataMember(Name="LogReasonLaborRate", EmitDefaultValue=false)]
        public double? LogReasonLaborRate { get; set; }

        /// <summary>
        /// Gets or Sets DeductMinutes
        /// </summary>
        [DataMember(Name="DeductMinutes", EmitDefaultValue=false)]
        public int? DeductMinutes { get; set; }

        /// <summary>
        /// Gets or Sets TimeToInvoice
        /// </summary>
        [DataMember(Name="TimeToInvoice", EmitDefaultValue=false)]
        public string TimeToInvoice { get; set; }

        /// <summary>
        /// Gets or Sets BillableHours
        /// </summary>
        [DataMember(Name="BillableHours", EmitDefaultValue=false)]
        public int? BillableHours { get; set; }

        /// <summary>
        /// Gets or Sets BillableMinutes
        /// </summary>
        [DataMember(Name="BillableMinutes", EmitDefaultValue=false)]
        public int? BillableMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ServiceOrderStatus
        /// </summary>
        [DataMember(Name="ServiceOrderStatus", EmitDefaultValue=false)]
        public string ServiceOrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets RejectedStatusReason
        /// </summary>
        [DataMember(Name="RejectedStatusReason", EmitDefaultValue=false)]
        public string RejectedStatusReason { get; set; }

        /// <summary>
        /// Gets or Sets AcceptanceStatus
        /// </summary>
        [DataMember(Name="AcceptanceStatus", EmitDefaultValue=false)]
        public string AcceptanceStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebUpdateServiceOrderTimeLogModel {\n");
            sb.Append("  BillingOption: ").Append(BillingOption).Append("\n");
            sb.Append("  CheckCompanyBusinessHours: ").Append(CheckCompanyBusinessHours).Append("\n");
            sb.Append("  Tech: ").Append(Tech).Append("\n");
            sb.Append("  RateBasis: ").Append(RateBasis).Append("\n");
            sb.Append("  CopyCommentsIndicator: ").Append(CopyCommentsIndicator).Append("\n");
            sb.Append("  DeductHours: ").Append(DeductHours).Append("\n");
            sb.Append("  InternalComments: ").Append(InternalComments).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  CreditUtilizationTime: ").Append(CreditUtilizationTime).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  LogReasonLaborRate: ").Append(LogReasonLaborRate).Append("\n");
            sb.Append("  DeductMinutes: ").Append(DeductMinutes).Append("\n");
            sb.Append("  TimeToInvoice: ").Append(TimeToInvoice).Append("\n");
            sb.Append("  BillableHours: ").Append(BillableHours).Append("\n");
            sb.Append("  BillableMinutes: ").Append(BillableMinutes).Append("\n");
            sb.Append("  ServiceOrderStatus: ").Append(ServiceOrderStatus).Append("\n");
            sb.Append("  RejectedStatusReason: ").Append(RejectedStatusReason).Append("\n");
            sb.Append("  AcceptanceStatus: ").Append(AcceptanceStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebUpdateServiceOrderTimeLogModel);
        }

        /// <summary>
        /// Returns true if TsiWebUpdateServiceOrderTimeLogModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebUpdateServiceOrderTimeLogModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebUpdateServiceOrderTimeLogModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingOption == input.BillingOption ||
                    (this.BillingOption != null &&
                    this.BillingOption.Equals(input.BillingOption))
                ) && 
                (
                    this.CheckCompanyBusinessHours == input.CheckCompanyBusinessHours ||
                    (this.CheckCompanyBusinessHours != null &&
                    this.CheckCompanyBusinessHours.Equals(input.CheckCompanyBusinessHours))
                ) && 
                (
                    this.Tech == input.Tech ||
                    (this.Tech != null &&
                    this.Tech.Equals(input.Tech))
                ) && 
                (
                    this.RateBasis == input.RateBasis ||
                    (this.RateBasis != null &&
                    this.RateBasis.Equals(input.RateBasis))
                ) && 
                (
                    this.CopyCommentsIndicator == input.CopyCommentsIndicator ||
                    (this.CopyCommentsIndicator != null &&
                    this.CopyCommentsIndicator.Equals(input.CopyCommentsIndicator))
                ) && 
                (
                    this.DeductHours == input.DeductHours ||
                    (this.DeductHours != null &&
                    this.DeductHours.Equals(input.DeductHours))
                ) && 
                (
                    this.InternalComments == input.InternalComments ||
                    (this.InternalComments != null &&
                    this.InternalComments.Equals(input.InternalComments))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.CreditUtilizationTime == input.CreditUtilizationTime ||
                    (this.CreditUtilizationTime != null &&
                    this.CreditUtilizationTime.Equals(input.CreditUtilizationTime))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.LogReasonLaborRate == input.LogReasonLaborRate ||
                    (this.LogReasonLaborRate != null &&
                    this.LogReasonLaborRate.Equals(input.LogReasonLaborRate))
                ) && 
                (
                    this.DeductMinutes == input.DeductMinutes ||
                    (this.DeductMinutes != null &&
                    this.DeductMinutes.Equals(input.DeductMinutes))
                ) && 
                (
                    this.TimeToInvoice == input.TimeToInvoice ||
                    (this.TimeToInvoice != null &&
                    this.TimeToInvoice.Equals(input.TimeToInvoice))
                ) && 
                (
                    this.BillableHours == input.BillableHours ||
                    (this.BillableHours != null &&
                    this.BillableHours.Equals(input.BillableHours))
                ) && 
                (
                    this.BillableMinutes == input.BillableMinutes ||
                    (this.BillableMinutes != null &&
                    this.BillableMinutes.Equals(input.BillableMinutes))
                ) && 
                (
                    this.ServiceOrderStatus == input.ServiceOrderStatus ||
                    (this.ServiceOrderStatus != null &&
                    this.ServiceOrderStatus.Equals(input.ServiceOrderStatus))
                ) && 
                (
                    this.RejectedStatusReason == input.RejectedStatusReason ||
                    (this.RejectedStatusReason != null &&
                    this.RejectedStatusReason.Equals(input.RejectedStatusReason))
                ) && 
                (
                    this.AcceptanceStatus == input.AcceptanceStatus ||
                    (this.AcceptanceStatus != null &&
                    this.AcceptanceStatus.Equals(input.AcceptanceStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingOption != null)
                    hashCode = hashCode * 59 + this.BillingOption.GetHashCode();
                if (this.CheckCompanyBusinessHours != null)
                    hashCode = hashCode * 59 + this.CheckCompanyBusinessHours.GetHashCode();
                if (this.Tech != null)
                    hashCode = hashCode * 59 + this.Tech.GetHashCode();
                if (this.RateBasis != null)
                    hashCode = hashCode * 59 + this.RateBasis.GetHashCode();
                if (this.CopyCommentsIndicator != null)
                    hashCode = hashCode * 59 + this.CopyCommentsIndicator.GetHashCode();
                if (this.DeductHours != null)
                    hashCode = hashCode * 59 + this.DeductHours.GetHashCode();
                if (this.InternalComments != null)
                    hashCode = hashCode * 59 + this.InternalComments.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.CreditUtilizationTime != null)
                    hashCode = hashCode * 59 + this.CreditUtilizationTime.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.LogReasonLaborRate != null)
                    hashCode = hashCode * 59 + this.LogReasonLaborRate.GetHashCode();
                if (this.DeductMinutes != null)
                    hashCode = hashCode * 59 + this.DeductMinutes.GetHashCode();
                if (this.TimeToInvoice != null)
                    hashCode = hashCode * 59 + this.TimeToInvoice.GetHashCode();
                if (this.BillableHours != null)
                    hashCode = hashCode * 59 + this.BillableHours.GetHashCode();
                if (this.BillableMinutes != null)
                    hashCode = hashCode * 59 + this.BillableMinutes.GetHashCode();
                if (this.ServiceOrderStatus != null)
                    hashCode = hashCode * 59 + this.ServiceOrderStatus.GetHashCode();
                if (this.RejectedStatusReason != null)
                    hashCode = hashCode * 59 + this.RejectedStatusReason.GetHashCode();
                if (this.AcceptanceStatus != null)
                    hashCode = hashCode * 59 + this.AcceptanceStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
