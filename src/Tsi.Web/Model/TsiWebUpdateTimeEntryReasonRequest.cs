/* 
 * Tigerpaw API Method Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tsi.Web.Client.SwaggerDateConverter;

namespace Tsi.Web.Model
{
    /// <summary>
    /// TsiWebUpdateTimeEntryReasonRequest
    /// </summary>
    [DataContract]
    public partial class TsiWebUpdateTimeEntryReasonRequest :  IEquatable<TsiWebUpdateTimeEntryReasonRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TsiWebUpdateTimeEntryReasonRequest" /> class.
        /// </summary>
        /// <param name="newLogReason">newLogReason.</param>
        /// <param name="timeEntry">timeEntry.</param>
        /// <param name="rateBasis">rateBasis.</param>
        /// <param name="billingOption">billingOption.</param>
        /// <param name="useStandardRate">useStandardRate.</param>
        public TsiWebUpdateTimeEntryReasonRequest(string newLogReason = default(string), TsiWebTimeEntryReason timeEntry = default(TsiWebTimeEntryReason), string rateBasis = default(string), string billingOption = default(string), bool? useStandardRate = default(bool?))
        {
            this.NewLogReason = newLogReason;
            this.TimeEntry = timeEntry;
            this.RateBasis = rateBasis;
            this.BillingOption = billingOption;
            this.UseStandardRate = useStandardRate;
        }
        
        /// <summary>
        /// Gets or Sets NewLogReason
        /// </summary>
        [DataMember(Name="NewLogReason", EmitDefaultValue=false)]
        public string NewLogReason { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntry
        /// </summary>
        [DataMember(Name="TimeEntry", EmitDefaultValue=false)]
        public TsiWebTimeEntryReason TimeEntry { get; set; }

        /// <summary>
        /// Gets or Sets RateBasis
        /// </summary>
        [DataMember(Name="RateBasis", EmitDefaultValue=false)]
        public string RateBasis { get; set; }

        /// <summary>
        /// Gets or Sets BillingOption
        /// </summary>
        [DataMember(Name="BillingOption", EmitDefaultValue=false)]
        public string BillingOption { get; set; }

        /// <summary>
        /// Gets or Sets UseStandardRate
        /// </summary>
        [DataMember(Name="UseStandardRate", EmitDefaultValue=false)]
        public bool? UseStandardRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TsiWebUpdateTimeEntryReasonRequest {\n");
            sb.Append("  NewLogReason: ").Append(NewLogReason).Append("\n");
            sb.Append("  TimeEntry: ").Append(TimeEntry).Append("\n");
            sb.Append("  RateBasis: ").Append(RateBasis).Append("\n");
            sb.Append("  BillingOption: ").Append(BillingOption).Append("\n");
            sb.Append("  UseStandardRate: ").Append(UseStandardRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TsiWebUpdateTimeEntryReasonRequest);
        }

        /// <summary>
        /// Returns true if TsiWebUpdateTimeEntryReasonRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TsiWebUpdateTimeEntryReasonRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TsiWebUpdateTimeEntryReasonRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewLogReason == input.NewLogReason ||
                    (this.NewLogReason != null &&
                    this.NewLogReason.Equals(input.NewLogReason))
                ) && 
                (
                    this.TimeEntry == input.TimeEntry ||
                    (this.TimeEntry != null &&
                    this.TimeEntry.Equals(input.TimeEntry))
                ) && 
                (
                    this.RateBasis == input.RateBasis ||
                    (this.RateBasis != null &&
                    this.RateBasis.Equals(input.RateBasis))
                ) && 
                (
                    this.BillingOption == input.BillingOption ||
                    (this.BillingOption != null &&
                    this.BillingOption.Equals(input.BillingOption))
                ) && 
                (
                    this.UseStandardRate == input.UseStandardRate ||
                    (this.UseStandardRate != null &&
                    this.UseStandardRate.Equals(input.UseStandardRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewLogReason != null)
                    hashCode = hashCode * 59 + this.NewLogReason.GetHashCode();
                if (this.TimeEntry != null)
                    hashCode = hashCode * 59 + this.TimeEntry.GetHashCode();
                if (this.RateBasis != null)
                    hashCode = hashCode * 59 + this.RateBasis.GetHashCode();
                if (this.BillingOption != null)
                    hashCode = hashCode * 59 + this.BillingOption.GetHashCode();
                if (this.UseStandardRate != null)
                    hashCode = hashCode * 59 + this.UseStandardRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
